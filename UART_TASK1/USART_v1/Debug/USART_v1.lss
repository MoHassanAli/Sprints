
USART_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000126  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000017a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074e  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000639  00000000  00000000  00000996  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d2  00000000  00000000  00000fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000339  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000183  00000000  00000000  000016a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include "MCAL/UART.h"
#include "LIB/BIT_MATH.h"
#include "LIB/STD_TYPES.h"
int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	64 97       	sbiw	r28, 0x14	; 20
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	uint8_t Str[20];
	UART_init();
  80:	0e 94 4b 00 	call	0x96	; 0x96 <UART_init>
	while(1)
	{
		UART_receiveString(Str); 
  84:	ce 01       	movw	r24, r28
  86:	01 96       	adiw	r24, 0x01	; 1
  88:	0e 94 70 00 	call	0xe0	; 0xe0 <UART_receiveString>
		UART_sendString(Str); 
  8c:	ce 01       	movw	r24, r28
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	0e 94 5d 00 	call	0xba	; 0xba <UART_sendString>
  94:	f7 cf       	rjmp	.-18     	; 0x84 <main+0x18>

00000096 <UART_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
  96:	82 e0       	ldi	r24, 0x02	; 2
  98:	8b b9       	out	0x0b, r24	; 11
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	
	UCSRB = (1 << RXEN) | (1 << TXEN);
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	8a b9       	out	0x0a, r24	; 10
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = ((1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1)); 
  9e:	86 e8       	ldi	r24, 0x86	; 134
  a0:	80 bd       	out	0x20, r24	; 32
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
  a2:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
  a4:	8c e0       	ldi	r24, 0x0C	; 12
  a6:	89 b9       	out	0x09, r24	; 9
  a8:	08 95       	ret

000000aa <UART_sendByte>:
void UART_sendByte(const uint8_t data)
{
	
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(!((UCSRA) & (1 << UDRE))){}
  aa:	5d 9b       	sbis	0x0b, 5	; 11
  ac:	fe cf       	rjmp	.-4      	; 0xaa <UART_sendByte>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
  ae:	8c b9       	out	0x0c, r24	; 12
  b0:	08 95       	ret

000000b2 <UART_recieveByte>:

uint8_t UART_recieveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(!((UCSRA) & (1 << RXC))){}
  b2:	5f 9b       	sbis	0x0b, 7	; 11
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <UART_recieveByte>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
  b6:	8c b1       	in	r24, 0x0c	; 12
}
  b8:	08 95       	ret

000000ba <UART_sendString>:

void UART_sendString(const uint8_t *Str)
{
  ba:	0f 93       	push	r16
  bc:	1f 93       	push	r17
  be:	cf 93       	push	r28
  c0:	8c 01       	movw	r16, r24
	uint8_t i = 0;
  c2:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
  c4:	03 c0       	rjmp	.+6      	; 0xcc <UART_sendString+0x12>
	{
		UART_sendByte(Str[i]);
  c6:	0e 94 55 00 	call	0xaa	; 0xaa <UART_sendByte>
		i++;
  ca:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_sendString(const uint8_t *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
  cc:	f8 01       	movw	r30, r16
  ce:	ec 0f       	add	r30, r28
  d0:	f1 1d       	adc	r31, r1
  d2:	80 81       	ld	r24, Z
  d4:	81 11       	cpse	r24, r1
  d6:	f7 cf       	rjmp	.-18     	; 0xc6 <UART_sendString+0xc>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	0f 91       	pop	r16
  de:	08 95       	ret

000000e0 <UART_receiveString>:

void UART_receiveString(uint8_t *Str)
{
  e0:	ef 92       	push	r14
  e2:	ff 92       	push	r15
  e4:	0f 93       	push	r16
  e6:	1f 93       	push	r17
  e8:	cf 93       	push	r28
  ea:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	Str[i] = UART_recieveByte();
  ec:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_recieveByte>
  f0:	f8 01       	movw	r30, r16
  f2:	80 83       	st	Z, r24
	*******************************************************************/
}

void UART_receiveString(uint8_t *Str)
{
	uint8_t i = 0;
  f4:	c0 e0       	ldi	r28, 0x00	; 0
	Str[i] = UART_recieveByte();
	while(Str[i] != '\r')
  f6:	08 c0       	rjmp	.+16     	; 0x108 <UART_receiveString+0x28>
	{
		i++;
  f8:	cf 5f       	subi	r28, 0xFF	; 255
		Str[i] = UART_recieveByte();
  fa:	78 01       	movw	r14, r16
  fc:	ec 0e       	add	r14, r28
  fe:	f1 1c       	adc	r15, r1
 100:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_recieveByte>
 104:	f7 01       	movw	r30, r14
 106:	80 83       	st	Z, r24

void UART_receiveString(uint8_t *Str)
{
	uint8_t i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '\r')
 108:	f8 01       	movw	r30, r16
 10a:	ec 0f       	add	r30, r28
 10c:	f1 1d       	adc	r31, r1
 10e:	80 81       	ld	r24, Z
 110:	8d 30       	cpi	r24, 0x0D	; 13
 112:	91 f7       	brne	.-28     	; 0xf8 <UART_receiveString+0x18>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
 114:	10 82       	st	Z, r1
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	ff 90       	pop	r15
 11e:	ef 90       	pop	r14
 120:	08 95       	ret

00000122 <_exit>:
 122:	f8 94       	cli

00000124 <__stop_program>:
 124:	ff cf       	rjmp	.-2      	; 0x124 <__stop_program>
