
SPI_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008df  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072d  00000000  00000000  00000ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045b  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  00001730  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041f  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d6  00000000  00000000  00001cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001f89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  64:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_init>:
  6c:	82 e0       	ldi	r24, 0x02	; 2
  6e:	8b b9       	out	0x0b, r24	; 11
  70:	88 e1       	ldi	r24, 0x18	; 24
  72:	8a b9       	out	0x0a, r24	; 10
  74:	86 e8       	ldi	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
  78:	10 bc       	out	0x20, r1	; 32
  7a:	8c e0       	ldi	r24, 0x0C	; 12
  7c:	89 b9       	out	0x09, r24	; 9
  7e:	08 95       	ret

00000080 <UART_recieveByte>:
  80:	5f 9b       	sbis	0x0b, 7	; 11
  82:	fe cf       	rjmp	.-4      	; 0x80 <UART_recieveByte>
  84:	8c b1       	in	r24, 0x0c	; 12
  86:	08 95       	ret

00000088 <UART_receiveString>:
  88:	ef 92       	push	r14
  8a:	ff 92       	push	r15
  8c:	0f 93       	push	r16
  8e:	1f 93       	push	r17
  90:	cf 93       	push	r28
  92:	8c 01       	movw	r16, r24
  94:	0e 94 40 00 	call	0x80	; 0x80 <UART_recieveByte>
  98:	f8 01       	movw	r30, r16
  9a:	80 83       	st	Z, r24
  9c:	c0 e0       	ldi	r28, 0x00	; 0
  9e:	08 c0       	rjmp	.+16     	; 0xb0 <UART_receiveString+0x28>
  a0:	cf 5f       	subi	r28, 0xFF	; 255
  a2:	78 01       	movw	r14, r16
  a4:	ec 0e       	add	r14, r28
  a6:	f1 1c       	adc	r15, r1
  a8:	0e 94 40 00 	call	0x80	; 0x80 <UART_recieveByte>
  ac:	f7 01       	movw	r30, r14
  ae:	80 83       	st	Z, r24
  b0:	8c 2f       	mov	r24, r28
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	f8 01       	movw	r30, r16
  b6:	e8 0f       	add	r30, r24
  b8:	f9 1f       	adc	r31, r25
  ba:	20 81       	ld	r18, Z
  bc:	2d 30       	cpi	r18, 0x0D	; 13
  be:	81 f7       	brne	.-32     	; 0xa0 <UART_receiveString+0x18>
  c0:	20 83       	st	Z, r18
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	f8 01       	movw	r30, r16
  c6:	e8 0f       	add	r30, r24
  c8:	f9 1f       	adc	r31, r25
  ca:	10 82       	st	Z, r1
  cc:	cf 91       	pop	r28
  ce:	1f 91       	pop	r17
  d0:	0f 91       	pop	r16
  d2:	ff 90       	pop	r15
  d4:	ef 90       	pop	r14
  d6:	08 95       	ret

000000d8 <main>:
#include "MCAL/SPI_Interface.h"
#include "MCAL/UART.h"


int main(void)
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	c4 56       	subi	r28, 0x64	; 100
  e2:	d1 09       	sbc	r29, r1
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
    uint8_t str[100];
	
	UART_init();
  ee:	0e 94 36 00 	call	0x6c	; 0x6c <UART_init>
	SPI_VidInitMaster();
  f2:	0e 94 84 00 	call	0x108	; 0x108 <SPI_VidInitMaster>
    while (1) 
    {
		
		UART_receiveString(str);
  f6:	ce 01       	movw	r24, r28
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	0e 94 44 00 	call	0x88	; 0x88 <UART_receiveString>
		SPI_VidSendString(str);
  fe:	ce 01       	movw	r24, r28
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	0e 94 90 00 	call	0x120	; 0x120 <SPI_VidSendString>
 106:	f7 cf       	rjmp	.-18     	; 0xf6 <main+0x1e>

00000108 <SPI_VidInitMaster>:
 108:	87 b3       	in	r24, 0x17	; 23
 10a:	80 63       	ori	r24, 0x30	; 48
 10c:	8f 7b       	andi	r24, 0xBF	; 191
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	87 bb       	out	0x17, r24	; 23
 112:	80 e5       	ldi	r24, 0x50	; 80
 114:	8d b9       	out	0x0d, r24	; 13
 116:	08 95       	ret

00000118 <SPI_VidSendByte>:
 118:	8f b9       	out	0x0f, r24	; 15
 11a:	77 9b       	sbis	0x0e, 7	; 14
 11c:	fe cf       	rjmp	.-4      	; 0x11a <SPI_VidSendByte+0x2>
 11e:	08 95       	ret

00000120 <SPI_VidSendString>:
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	8c 01       	movw	r16, r24
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	03 c0       	rjmp	.+6      	; 0x132 <SPI_VidSendString+0x12>
 12c:	0e 94 8c 00 	call	0x118	; 0x118 <SPI_VidSendByte>
 130:	cf 5f       	subi	r28, 0xFF	; 255
 132:	2c 2f       	mov	r18, r28
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	f8 01       	movw	r30, r16
 138:	e2 0f       	add	r30, r18
 13a:	f3 1f       	adc	r31, r19
 13c:	80 81       	ld	r24, Z
 13e:	81 11       	cpse	r24, r1
 140:	f5 cf       	rjmp	.-22     	; 0x12c <SPI_VidSendString+0xc>
 142:	8d e0       	ldi	r24, 0x0D	; 13
 144:	80 83       	st	Z, r24
 146:	2f 5f       	subi	r18, 0xFF	; 255
 148:	3f 4f       	sbci	r19, 0xFF	; 255
 14a:	f8 01       	movw	r30, r16
 14c:	e2 0f       	add	r30, r18
 14e:	f3 1f       	adc	r31, r19
 150:	10 82       	st	Z, r1
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	08 95       	ret

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
