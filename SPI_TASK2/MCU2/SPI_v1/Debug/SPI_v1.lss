
SPI_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008e8  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072d  00000000  00000000  00000b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000461  00000000  00000000  000012c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000164  00000000  00000000  0000172c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041f  00000000  00000000  00001890  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d6  00000000  00000000  00001caf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001f85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 57 00 	call	0xae	; 0xae <main>
  64:	0c 94 a3 00 	jmp	0x146	; 0x146 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_init>:
  6c:	82 e0       	ldi	r24, 0x02	; 2
  6e:	8b b9       	out	0x0b, r24	; 11
  70:	88 e1       	ldi	r24, 0x18	; 24
  72:	8a b9       	out	0x0a, r24	; 10
  74:	86 e8       	ldi	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
  78:	10 bc       	out	0x20, r1	; 32
  7a:	8c e0       	ldi	r24, 0x0C	; 12
  7c:	89 b9       	out	0x09, r24	; 9
  7e:	08 95       	ret

00000080 <UART_sendByte>:
  80:	5d 9b       	sbis	0x0b, 5	; 11
  82:	fe cf       	rjmp	.-4      	; 0x80 <UART_sendByte>
  84:	8c b9       	out	0x0c, r24	; 12
  86:	08 95       	ret

00000088 <UART_sendString>:
  88:	0f 93       	push	r16
  8a:	1f 93       	push	r17
  8c:	cf 93       	push	r28
  8e:	8c 01       	movw	r16, r24
  90:	c0 e0       	ldi	r28, 0x00	; 0
  92:	03 c0       	rjmp	.+6      	; 0x9a <UART_sendString+0x12>
  94:	0e 94 40 00 	call	0x80	; 0x80 <UART_sendByte>
  98:	cf 5f       	subi	r28, 0xFF	; 255
  9a:	f8 01       	movw	r30, r16
  9c:	ec 0f       	add	r30, r28
  9e:	f1 1d       	adc	r31, r1
  a0:	80 81       	ld	r24, Z
  a2:	81 11       	cpse	r24, r1
  a4:	f7 cf       	rjmp	.-18     	; 0x94 <UART_sendString+0xc>
  a6:	cf 91       	pop	r28
  a8:	1f 91       	pop	r17
  aa:	0f 91       	pop	r16
  ac:	08 95       	ret

000000ae <main>:
#include "MCAL/SPI_Interface.h"
#include "MCAL/UART.h"


int main(void)
{
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	c4 56       	subi	r28, 0x64	; 100
  b8:	d1 09       	sbc	r29, r1
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	de bf       	out	0x3e, r29	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	cd bf       	out	0x3d, r28	; 61
    uint8_t str[100];
	
	UART_init();
  c4:	0e 94 36 00 	call	0x6c	; 0x6c <UART_init>
	SPI_VidInitSlave();
  c8:	0e 94 6f 00 	call	0xde	; 0xde <SPI_VidInitSlave>
    while (1) 
    {
		
		SPI_VidRecieveString(str);
  cc:	ce 01       	movw	r24, r28
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	0e 94 7b 00 	call	0xf6	; 0xf6 <SPI_VidRecieveString>
		UART_sendString(str);
  d4:	ce 01       	movw	r24, r28
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	0e 94 44 00 	call	0x88	; 0x88 <UART_sendString>
  dc:	f7 cf       	rjmp	.-18     	; 0xcc <main+0x1e>

000000de <SPI_VidInitSlave>:
  de:	87 b3       	in	r24, 0x17	; 23
  e0:	8f 7c       	andi	r24, 0xCF	; 207
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	8f 77       	andi	r24, 0x7F	; 127
  e6:	87 bb       	out	0x17, r24	; 23
  e8:	80 e4       	ldi	r24, 0x40	; 64
  ea:	8d b9       	out	0x0d, r24	; 13
  ec:	08 95       	ret

000000ee <SPI_U8RecieveByte>:
  ee:	77 9b       	sbis	0x0e, 7	; 14
  f0:	fe cf       	rjmp	.-4      	; 0xee <SPI_U8RecieveByte>
  f2:	8f b1       	in	r24, 0x0f	; 15
  f4:	08 95       	ret

000000f6 <SPI_VidRecieveString>:
  f6:	ef 92       	push	r14
  f8:	ff 92       	push	r15
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	8c 01       	movw	r16, r24
 102:	0e 94 77 00 	call	0xee	; 0xee <SPI_U8RecieveByte>
 106:	f8 01       	movw	r30, r16
 108:	80 83       	st	Z, r24
 10a:	c0 e0       	ldi	r28, 0x00	; 0
 10c:	08 c0       	rjmp	.+16     	; 0x11e <SPI_VidRecieveString+0x28>
 10e:	cf 5f       	subi	r28, 0xFF	; 255
 110:	78 01       	movw	r14, r16
 112:	ec 0e       	add	r14, r28
 114:	f1 1c       	adc	r15, r1
 116:	0e 94 77 00 	call	0xee	; 0xee <SPI_U8RecieveByte>
 11a:	f7 01       	movw	r30, r14
 11c:	80 83       	st	Z, r24
 11e:	8c 2f       	mov	r24, r28
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	f8 01       	movw	r30, r16
 124:	e8 0f       	add	r30, r24
 126:	f9 1f       	adc	r31, r25
 128:	20 81       	ld	r18, Z
 12a:	2d 30       	cpi	r18, 0x0D	; 13
 12c:	81 f7       	brne	.-32     	; 0x10e <SPI_VidRecieveString+0x18>
 12e:	20 83       	st	Z, r18
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	f8 01       	movw	r30, r16
 134:	e8 0f       	add	r30, r24
 136:	f9 1f       	adc	r31, r25
 138:	10 82       	st	Z, r1
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	ff 90       	pop	r15
 142:	ef 90       	pop	r14
 144:	08 95       	ret

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
