
ATM_Terminal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000053e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002ec  00800060  000053e2  00005476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080034c  0080034c  00005762  2**0
                  ALLOC
  3 .stab         00005940  00000000  00000000  00005764  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002322  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000d3c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000d566  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000d758  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000fb63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00010ee9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000120c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00012280  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00012576  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012ee4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 74 0d 	jmp	0x1ae8	; 0x1ae8 <__vector_1>
       8:	0c 94 a7 0d 	jmp	0x1b4e	; 0x1b4e <__vector_2>
       c:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 44 09 	jmp	0x1288	; 0x1288 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	f3 e5       	ldi	r31, 0x53	; 83
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 34       	cpi	r26, 0x4C	; 76
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ac e4       	ldi	r26, 0x4C	; 76
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 35       	cpi	r26, 0x5B	; 91
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7f 28 	call	0x50fe	; 0x50fe <main>
      8a:	0c 94 ef 29 	jmp	0x53de	; 0x53de <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b8 29 	jmp	0x5370	; 0x5370 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ef       	ldi	r26, 0xFE	; 254
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d4 29 	jmp	0x53a8	; 0x53a8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c4 29 	jmp	0x5388	; 0x5388 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e0 29 	jmp	0x53c0	; 0x53c0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c4 29 	jmp	0x5388	; 0x5388 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e0 29 	jmp	0x53c0	; 0x53c0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b8 29 	jmp	0x5370	; 0x5370 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e ef       	ldi	r24, 0xFE	; 254
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d4 29 	jmp	0x53a8	; 0x53a8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c0 29 	jmp	0x5380	; 0x5380 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e ef       	ldi	r22, 0xFE	; 254
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 dc 29 	jmp	0x53b8	; 0x53b8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 c4 29 	jmp	0x5388	; 0x5388 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e0 29 	jmp	0x53c0	; 0x53c0 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 c4 29 	jmp	0x5388	; 0x5388 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e0 29 	jmp	0x53c0	; 0x53c0 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 c4 29 	jmp	0x5388	; 0x5388 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e0 29 	jmp	0x53c0	; 0x53c0 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 c8 29 	jmp	0x5390	; 0x5390 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 e4 29 	jmp	0x53c8	; 0x53c8 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c0 29 	jmp	0x5380	; 0x5380 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 dc 29 	jmp	0x53b8	; 0x53b8 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ea 5f       	subi	r30, 0xFA	; 250
     aca:	fd 4f       	sbci	r31, 0xFD	; 253
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <SER_UARTvoidSendString>:
 * @brief Send String
 * 
 * @param Str String is sending
 */
void SER_UARTvoidSendString(uint8_t *Str)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <SER_UARTvoidSendString+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i = 0;
     e3e:	19 82       	std	Y+1, r1	; 0x01
    for (i = 0; Str[i]; i++)
     e40:	19 82       	std	Y+1, r1	; 0x01
     e42:	0e c0       	rjmp	.+28     	; 0xe60 <SER_UARTvoidSendString+0x32>
    {
        UART_ENSendData(Str[i]);
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	9b 81       	ldd	r25, Y+3	; 0x03
     e4e:	fc 01       	movw	r30, r24
     e50:	e2 0f       	add	r30, r18
     e52:	f3 1f       	adc	r31, r19
     e54:	80 81       	ld	r24, Z
     e56:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <UART_ENSendData>
 * @param Str String is sending
 */
void SER_UARTvoidSendString(uint8_t *Str)
{
    uint8_t i = 0;
    for (i = 0; Str[i]; i++)
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
     e5e:	89 83       	std	Y+1, r24	; 0x01
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	9b 81       	ldd	r25, Y+3	; 0x03
     e6a:	fc 01       	movw	r30, r24
     e6c:	e2 0f       	add	r30, r18
     e6e:	f3 1f       	adc	r31, r19
     e70:	80 81       	ld	r24, Z
     e72:	88 23       	and	r24, r24
     e74:	39 f7       	brne	.-50     	; 0xe44 <SER_UARTvoidSendString+0x16>
    {
        UART_ENSendData(Str[i]);
    }
    UART_ENSendData('\r');
     e76:	8d e0       	ldi	r24, 0x0D	; 13
     e78:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <UART_ENSendData>
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <SER_UARTvoidReceiveString>:
 * @brief Recevie String
 * 
 * @param Str Store String in Str
 */
void SER_UARTvoidReceiveString(uint8_t *Str)
{
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	00 d0       	rcall	.+0      	; 0xe92 <SER_UARTvoidReceiveString+0xa>
     e92:	0f 92       	push	r0
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	9b 83       	std	Y+3, r25	; 0x03
     e9a:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i = 0;
     e9c:	19 82       	std	Y+1, r1	; 0x01
    Str[i] = UART_u8ReceiveData();
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	9b 81       	ldd	r25, Y+3	; 0x03
     ea8:	8c 01       	movw	r16, r24
     eaa:	02 0f       	add	r16, r18
     eac:	13 1f       	adc	r17, r19
     eae:	0e 94 a4 08 	call	0x1148	; 0x1148 <UART_u8ReceiveData>
     eb2:	f8 01       	movw	r30, r16
     eb4:	80 83       	st	Z, r24
     eb6:	0f c0       	rjmp	.+30     	; 0xed6 <SER_UARTvoidReceiveString+0x4e>
    while (Str[i] != '\r')
    {
        i++;
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	8f 5f       	subi	r24, 0xFF	; 255
     ebc:	89 83       	std	Y+1, r24	; 0x01
        Str[i] = UART_u8ReceiveData();
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	9b 81       	ldd	r25, Y+3	; 0x03
     ec8:	8c 01       	movw	r16, r24
     eca:	02 0f       	add	r16, r18
     ecc:	13 1f       	adc	r17, r19
     ece:	0e 94 a4 08 	call	0x1148	; 0x1148 <UART_u8ReceiveData>
     ed2:	f8 01       	movw	r30, r16
     ed4:	80 83       	st	Z, r24
 */
void SER_UARTvoidReceiveString(uint8_t *Str)
{
    uint8_t i = 0;
    Str[i] = UART_u8ReceiveData();
    while (Str[i] != '\r')
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	9b 81       	ldd	r25, Y+3	; 0x03
     ee0:	fc 01       	movw	r30, r24
     ee2:	e2 0f       	add	r30, r18
     ee4:	f3 1f       	adc	r31, r19
     ee6:	80 81       	ld	r24, Z
     ee8:	8d 30       	cpi	r24, 0x0D	; 13
     eea:	31 f7       	brne	.-52     	; 0xeb8 <SER_UARTvoidReceiveString+0x30>
    {
        i++;
        Str[i] = UART_u8ReceiveData();
    }
    /* replace to NULL */
    Str[i] = 0;
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	9b 81       	ldd	r25, Y+3	; 0x03
     ef6:	fc 01       	movw	r30, r24
     ef8:	e2 0f       	add	r30, r18
     efa:	f3 1f       	adc	r31, r19
     efc:	10 82       	st	Z, r1
}
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	08 95       	ret

00000f0e <SER_UARTvoidSendLongNum>:
 * @brief Send Number
 * 
 * @param Numb Number
 */
void SER_UARTvoidSendLongNum(uint32_t Numb)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <SER_UARTvoidSendLongNum+0x6>
     f14:	00 d0       	rcall	.+0      	; 0xf16 <SER_UARTvoidSendLongNum+0x8>
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	69 83       	std	Y+1, r22	; 0x01
     f1c:	7a 83       	std	Y+2, r23	; 0x02
     f1e:	8b 83       	std	Y+3, r24	; 0x03
     f20:	9c 83       	std	Y+4, r25	; 0x04
    UART_ENSendData((uint8_t)(Numb & 0x000000FF));
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <UART_ENSendData>
    UART_ENSendData((uint8_t)((Numb >> 8) & 0x000000FF));
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	9a 81       	ldd	r25, Y+2	; 0x02
     f2c:	ab 81       	ldd	r26, Y+3	; 0x03
     f2e:	bc 81       	ldd	r27, Y+4	; 0x04
     f30:	89 2f       	mov	r24, r25
     f32:	9a 2f       	mov	r25, r26
     f34:	ab 2f       	mov	r26, r27
     f36:	bb 27       	eor	r27, r27
     f38:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <UART_ENSendData>
    UART_ENSendData((uint8_t)((Numb >> 16) & 0x000000FF));
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	ab 81       	ldd	r26, Y+3	; 0x03
     f42:	bc 81       	ldd	r27, Y+4	; 0x04
     f44:	cd 01       	movw	r24, r26
     f46:	aa 27       	eor	r26, r26
     f48:	bb 27       	eor	r27, r27
     f4a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <UART_ENSendData>
    UART_ENSendData((uint8_t)((Numb >> 24) & 0x000000FF));
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	9a 81       	ldd	r25, Y+2	; 0x02
     f52:	ab 81       	ldd	r26, Y+3	; 0x03
     f54:	bc 81       	ldd	r27, Y+4	; 0x04
     f56:	8b 2f       	mov	r24, r27
     f58:	99 27       	eor	r25, r25
     f5a:	aa 27       	eor	r26, r26
     f5c:	bb 27       	eor	r27, r27
     f5e:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <UART_ENSendData>
}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	0f 90       	pop	r0
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <SER_UARTu32ReceiveLongNum>:
 * @brief Receive Number
 * 
 * @return Number
 */
uint32_t SER_UARTu32ReceiveLongNum(void)
{
     f70:	df 93       	push	r29
     f72:	cf 93       	push	r28
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	28 97       	sbiw	r28, 0x08	; 8
     f7a:	0f b6       	in	r0, 0x3f	; 63
     f7c:	f8 94       	cli
     f7e:	de bf       	out	0x3e, r29	; 62
     f80:	0f be       	out	0x3f, r0	; 63
     f82:	cd bf       	out	0x3d, r28	; 61
    /* Receive 32Bit divide on 4 Times */
    uint8_t B1 = UART_u8ReceiveData();
     f84:	0e 94 a4 08 	call	0x1148	; 0x1148 <UART_u8ReceiveData>
     f88:	88 87       	std	Y+8, r24	; 0x08
    uint8_t B2 = UART_u8ReceiveData();
     f8a:	0e 94 a4 08 	call	0x1148	; 0x1148 <UART_u8ReceiveData>
     f8e:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t B3 = UART_u8ReceiveData();
     f90:	0e 94 a4 08 	call	0x1148	; 0x1148 <UART_u8ReceiveData>
     f94:	8e 83       	std	Y+6, r24	; 0x06
    uint8_t B4 = UART_u8ReceiveData();
     f96:	0e 94 a4 08 	call	0x1148	; 0x1148 <UART_u8ReceiveData>
     f9a:	8d 83       	std	Y+5, r24	; 0x05

    /*  */
    uint32_t u32_Numb = B1 | ((uint32_t)B2 << 8) | ((uint32_t)B3 << 16) | ((uint32_t)B4 << 24);
     f9c:	88 85       	ldd	r24, Y+8	; 0x08
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	8f 81       	ldd	r24, Y+7	; 0x07
     fa8:	88 2f       	mov	r24, r24
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	a0 e0       	ldi	r26, 0x00	; 0
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	ba 2f       	mov	r27, r26
     fb2:	a9 2f       	mov	r26, r25
     fb4:	98 2f       	mov	r25, r24
     fb6:	88 27       	eor	r24, r24
     fb8:	28 2b       	or	r18, r24
     fba:	39 2b       	or	r19, r25
     fbc:	4a 2b       	or	r20, r26
     fbe:	5b 2b       	or	r21, r27
     fc0:	8e 81       	ldd	r24, Y+6	; 0x06
     fc2:	88 2f       	mov	r24, r24
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	a0 e0       	ldi	r26, 0x00	; 0
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	dc 01       	movw	r26, r24
     fcc:	99 27       	eor	r25, r25
     fce:	88 27       	eor	r24, r24
     fd0:	28 2b       	or	r18, r24
     fd2:	39 2b       	or	r19, r25
     fd4:	4a 2b       	or	r20, r26
     fd6:	5b 2b       	or	r21, r27
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	88 2f       	mov	r24, r24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	a0 e0       	ldi	r26, 0x00	; 0
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	b8 2f       	mov	r27, r24
     fe4:	aa 27       	eor	r26, r26
     fe6:	99 27       	eor	r25, r25
     fe8:	88 27       	eor	r24, r24
     fea:	82 2b       	or	r24, r18
     fec:	93 2b       	or	r25, r19
     fee:	a4 2b       	or	r26, r20
     ff0:	b5 2b       	or	r27, r21
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	ab 83       	std	Y+3, r26	; 0x03
     ff8:	bc 83       	std	Y+4, r27	; 0x04

    return u32_Numb;
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	9a 81       	ldd	r25, Y+2	; 0x02
     ffe:	ab 81       	ldd	r26, Y+3	; 0x03
    1000:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	28 96       	adiw	r28, 0x08	; 8
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <UART_ENInit>:
 * @brief Initialized UART 
 * 
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENInit(void)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	0f 92       	push	r0
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    EN_ERRORSTATE_t Enstate;
    Enstate = E_OK;
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	89 83       	std	Y+1, r24	; 0x01
    /* Clear  URSEL to update UBRRH*/
    CLRBIT(UCSRC, URSEL);
    1026:	a0 e4       	ldi	r26, 0x40	; 64
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e0 e4       	ldi	r30, 0x40	; 64
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	8f 77       	andi	r24, 0x7F	; 127
    1032:	8c 93       	st	X, r24
    /* Boud Rate */
    UBRRH = HIGHUBRR;
    1034:	e0 e4       	ldi	r30, 0x40	; 64
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	10 82       	st	Z, r1
    UBRRL = LOWUBRR;
    103a:	e9 e2       	ldi	r30, 0x29	; 41
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	83 e3       	ldi	r24, 0x33	; 51
    1040:	80 83       	st	Z, r24
#if UART_SPEED == DOUBLE
    SETBIT(UCSRA, U2X);

/* UART NORMAL Speed */
#elif UART_SPEED == NORMAL
    CLRBIT(UCSRA, U2X);
    1042:	ab e2       	ldi	r26, 0x2B	; 43
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	eb e2       	ldi	r30, 0x2B	; 43
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
    104c:	8d 7f       	andi	r24, 0xFD	; 253
    104e:	8c 93       	st	X, r24
#endif

/* Select STOP Bit */
#if STOPBIT == _1BIT
    /* Set URSEL to update UCSRC*/
    SETBIT(UCSRC, URSEL);
    1050:	a0 e4       	ldi	r26, 0x40	; 64
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e0 e4       	ldi	r30, 0x40	; 64
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	80 68       	ori	r24, 0x80	; 128
    105c:	8c 93       	st	X, r24
    CLRBIT(UCSRC, USBS);
    105e:	a0 e4       	ldi	r26, 0x40	; 64
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e0 e4       	ldi	r30, 0x40	; 64
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	87 7f       	andi	r24, 0xF7	; 247
    106a:	8c 93       	st	X, r24

/* Disable Parity */
#if UART_PARITY == DISABLED

    /* Set URSEL to update UCSRC*/
    SETBIT(UCSRC, URSEL);
    106c:	a0 e4       	ldi	r26, 0x40	; 64
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e0 e4       	ldi	r30, 0x40	; 64
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	80 68       	ori	r24, 0x80	; 128
    1078:	8c 93       	st	X, r24

    CLRBIT(UCSRC, UPM0);
    107a:	a0 e4       	ldi	r26, 0x40	; 64
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e0 e4       	ldi	r30, 0x40	; 64
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	8f 7e       	andi	r24, 0xEF	; 239
    1086:	8c 93       	st	X, r24
    CLRBIT(UCSRC, UPM1);
    1088:	a0 e4       	ldi	r26, 0x40	; 64
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e0 e4       	ldi	r30, 0x40	; 64
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	8f 7d       	andi	r24, 0xDF	; 223
    1094:	8c 93       	st	X, r24
    CLRBIT(UCSRC, UCSZ0);
    SETBIT(UCSRC, UCSZ1);
    CLRBIT(UCSRB, UCSZ2);
#elif DATAFRAM == _8BIT
    /* Set URSEL to update UCSRC*/
    SETBIT(UCSRC, URSEL);
    1096:	a0 e4       	ldi	r26, 0x40	; 64
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e0 e4       	ldi	r30, 0x40	; 64
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	80 68       	ori	r24, 0x80	; 128
    10a2:	8c 93       	st	X, r24
    SETBIT(UCSRC, UCSZ0);
    10a4:	a0 e4       	ldi	r26, 0x40	; 64
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e0 e4       	ldi	r30, 0x40	; 64
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	82 60       	ori	r24, 0x02	; 2
    10b0:	8c 93       	st	X, r24
    SETBIT(UCSRC, UCSZ1);
    10b2:	a0 e4       	ldi	r26, 0x40	; 64
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e0 e4       	ldi	r30, 0x40	; 64
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	84 60       	ori	r24, 0x04	; 4
    10be:	8c 93       	st	X, r24
    CLRBIT(UCSRB, UCSZ2);
    10c0:	aa e2       	ldi	r26, 0x2A	; 42
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	ea e2       	ldi	r30, 0x2A	; 42
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	8b 7f       	andi	r24, 0xFB	; 251
    10cc:	8c 93       	st	X, r24

    /**
     * @brief Receiver Enable
     * 
     */
    SETBIT(UCSRB, RXEN);
    10ce:	aa e2       	ldi	r26, 0x2A	; 42
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	ea e2       	ldi	r30, 0x2A	; 42
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	80 61       	ori	r24, 0x10	; 16
    10da:	8c 93       	st	X, r24
    /**
     * @brief Transmitter Enable
     * 
     */
    SETBIT(UCSRB, TXEN);
    10dc:	aa e2       	ldi	r26, 0x2A	; 42
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	ea e2       	ldi	r30, 0x2A	; 42
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	88 60       	ori	r24, 0x08	; 8
    10e8:	8c 93       	st	X, r24

    return Enstate;
    10ea:	89 81       	ldd	r24, Y+1	; 0x01
} /* UART_ENInit */
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <UART_ENSendData>:
 * 
 * @param Data char want to send
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENSendData(uint8_t Data)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	0f 92       	push	r0
    10fa:	cd b7       	in	r28, 0x3d	; 61
    10fc:	de b7       	in	r29, 0x3e	; 62
    10fe:	89 83       	std	Y+1, r24	; 0x01
    /* Wait to Data Register Empty */
    while (!GETBIT(UCSRA, UDRE))
    1100:	eb e2       	ldi	r30, 0x2B	; 43
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	82 95       	swap	r24
    1108:	86 95       	lsr	r24
    110a:	87 70       	andi	r24, 0x07	; 7
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	81 70       	andi	r24, 0x01	; 1
    1112:	90 70       	andi	r25, 0x00	; 0
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	a1 f3       	breq	.-24     	; 0x1100 <UART_ENSendData+0xc>
        ;

    UDR = Data;
    1118:	ec e2       	ldi	r30, 0x2C	; 44
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	80 83       	st	Z, r24
    return E_OK;
    1120:	81 e0       	ldi	r24, 0x01	; 1
}
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <UART_ENSendNoBlock>:
 * 
 * @param Data char want to send
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENSendNoBlock(uint8_t Data)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	0f 92       	push	r0
    1130:	cd b7       	in	r28, 0x3d	; 61
    1132:	de b7       	in	r29, 0x3e	; 62
    1134:	89 83       	std	Y+1, r24	; 0x01
    UDR = Data;
    1136:	ec e2       	ldi	r30, 0x2C	; 44
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	80 83       	st	Z, r24
    return E_OK;
    113e:	81 e0       	ldi	r24, 0x01	; 1
}
    1140:	0f 90       	pop	r0
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	08 95       	ret

00001148 <UART_u8ReceiveData>:
 * @brief Receive Data From another device
 * 
 * @return uint8_t Data From Register
 */
uint8_t UART_u8ReceiveData(void)
{
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    while (!GETBIT(UCSRA, RXC))
    1150:	eb e2       	ldi	r30, 0x2B	; 43
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	88 23       	and	r24, r24
    1158:	dc f7       	brge	.-10     	; 0x1150 <UART_u8ReceiveData+0x8>
        ;
    return UDR;
    115a:	ec e2       	ldi	r30, 0x2C	; 44
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
}
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <UART_u8ReceiveNoBlock>:
 * 
 * @param Data 
 * @return uint8_t Data From Register
 */
uint8_t UART_u8ReceiveNoBlock(void)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    return UDR;
    116e:	ec e2       	ldi	r30, 0x2C	; 44
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
}
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <UART_voidTXInterruptEnable>:
/**
 * @brief Enable Transmit Interrupt
 * 
 */
void UART_voidTXInterruptEnable(void)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    SETBIT(UCSRB, TXCIE);
    1182:	aa e2       	ldi	r26, 0x2A	; 42
    1184:	b0 e0       	ldi	r27, 0x00	; 0
    1186:	ea e2       	ldi	r30, 0x2A	; 42
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	80 64       	ori	r24, 0x40	; 64
    118e:	8c 93       	st	X, r24
    SETBIT(SREG, I_BIT);
    1190:	af e5       	ldi	r26, 0x5F	; 95
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	ef e5       	ldi	r30, 0x5F	; 95
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	80 68       	ori	r24, 0x80	; 128
    119c:	8c 93       	st	X, r24
}
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <UART_voidRXInterruptEnable>:
/**
 * @brief Enable Receive Interrupt
 * 
 */
void UART_voidRXInterruptEnable(void)
{
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    SETBIT(UCSRB, RXCIE);
    11ac:	aa e2       	ldi	r26, 0x2A	; 42
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	ea e2       	ldi	r30, 0x2A	; 42
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	80 68       	ori	r24, 0x80	; 128
    11b8:	8c 93       	st	X, r24
    SETBIT(SREG, I_BIT);
    11ba:	af e5       	ldi	r26, 0x5F	; 95
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	ef e5       	ldi	r30, 0x5F	; 95
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	80 68       	ori	r24, 0x80	; 128
    11c6:	8c 93       	st	X, r24
}
    11c8:	cf 91       	pop	r28
    11ca:	df 91       	pop	r29
    11cc:	08 95       	ret

000011ce <UART_voidTXInterruptDisable>:
/**
 * @brief Disable Transmit Interrupt
 * 
 */
void UART_voidTXInterruptDisable(void)
{
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    CLRBIT(UCSRB, TXCIE);
    11d6:	aa e2       	ldi	r26, 0x2A	; 42
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	ea e2       	ldi	r30, 0x2A	; 42
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	8f 7b       	andi	r24, 0xBF	; 191
    11e2:	8c 93       	st	X, r24
    CLRBIT(SREG, I_BIT);
    11e4:	af e5       	ldi	r26, 0x5F	; 95
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	ef e5       	ldi	r30, 0x5F	; 95
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	8f 77       	andi	r24, 0x7F	; 127
    11f0:	8c 93       	st	X, r24
}
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <UART_voidRXInterruptDisable>:
/**
 * @brief Disable Receive Interrupt
 * 
 */
void UART_voidRXInterruptDisable(void)
{
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
    CLRBIT(UCSRB, RXCIE);
    1200:	aa e2       	ldi	r26, 0x2A	; 42
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	ea e2       	ldi	r30, 0x2A	; 42
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	8f 77       	andi	r24, 0x7F	; 127
    120c:	8c 93       	st	X, r24
    CLRBIT(SREG, I_BIT);
    120e:	af e5       	ldi	r26, 0x5F	; 95
    1210:	b0 e0       	ldi	r27, 0x00	; 0
    1212:	ef e5       	ldi	r30, 0x5F	; 95
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	8f 77       	andi	r24, 0x7F	; 127
    121a:	8c 93       	st	X, r24
}
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <UART_voidSendString_Ashync>:
 * @brief Asynchronous Function Send 
 * 
 * @param str Data to send
 */
void UART_voidSendString_Ashync(uint8_t *str)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <UART_voidSendString_Ashync+0x6>
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	9a 83       	std	Y+2, r25	; 0x02
    122e:	89 83       	std	Y+1, r24	; 0x01
    /* Flag using For Protection if call function before string is end */
    if (gFlag == 1)
    1230:	80 91 06 03 	lds	r24, 0x0306
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	79 f4       	brne	.+30     	; 0x1256 <UART_voidSendString_Ashync+0x34>
    {
        /* Send First Letter we bsend b2y fy ISR*/
        UART_ENSendNoBlock(str[0]);
    1238:	e9 81       	ldd	r30, Y+1	; 0x01
    123a:	fa 81       	ldd	r31, Y+2	; 0x02
    123c:	80 81       	ld	r24, Z
    123e:	0e 94 95 08 	call	0x112a	; 0x112a <UART_ENSendNoBlock>

        /* Flag will Fired when data is Sent Then go to isr */
        UART_voidTXInterruptEnable();
    1242:	0e 94 bd 08 	call	0x117a	; 0x117a <UART_voidTXInterruptEnable>
        gPsend_str = str;
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	90 93 4d 03 	sts	0x034D, r25
    124e:	80 93 4c 03 	sts	0x034C, r24
        gFlag = 0;
    1252:	10 92 06 03 	sts	0x0306, r1
    }
}
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <UART_voidReceiveString_Ashync>:
 * @brief Asynchronous Function Receive 
 * 
 * @param Str Data to Receive
 */
void UART_voidReceiveString_Ashync(uint8_t *Str)
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	00 d0       	rcall	.+0      	; 0x1266 <UART_voidReceiveString_Ashync+0x6>
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	9a 83       	std	Y+2, r25	; 0x02
    126c:	89 83       	std	Y+1, r24	; 0x01
    UART_voidRXInterruptEnable();
    126e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <UART_voidRXInterruptEnable>
    gPrece_str = Str;
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	9a 81       	ldd	r25, Y+2	; 0x02
    1276:	90 93 4f 03 	sts	0x034F, r25
    127a:	80 93 4e 03 	sts	0x034E, r24
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <__vector_15>:
/**
 * @brief Transmit interrupt 
 * 
 */
void __vector_15(void)
{
    1288:	1f 92       	push	r1
    128a:	0f 92       	push	r0
    128c:	0f b6       	in	r0, 0x3f	; 63
    128e:	0f 92       	push	r0
    1290:	11 24       	eor	r1, r1
    1292:	2f 93       	push	r18
    1294:	3f 93       	push	r19
    1296:	4f 93       	push	r20
    1298:	5f 93       	push	r21
    129a:	6f 93       	push	r22
    129c:	7f 93       	push	r23
    129e:	8f 93       	push	r24
    12a0:	9f 93       	push	r25
    12a2:	af 93       	push	r26
    12a4:	bf 93       	push	r27
    12a6:	ef 93       	push	r30
    12a8:	ff 93       	push	r31
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    /* Start with Second Letter */
    /* First Letter is sent in Function Ashync */
    static uint8_t i = 1;

    if (gPsend_str[i] != '\0')
    12b2:	20 91 4c 03 	lds	r18, 0x034C
    12b6:	30 91 4d 03 	lds	r19, 0x034D
    12ba:	80 91 07 03 	lds	r24, 0x0307
    12be:	88 2f       	mov	r24, r24
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	f9 01       	movw	r30, r18
    12c4:	e8 0f       	add	r30, r24
    12c6:	f9 1f       	adc	r31, r25
    12c8:	80 81       	ld	r24, Z
    12ca:	88 23       	and	r24, r24
    12cc:	a1 f0       	breq	.+40     	; 0x12f6 <__vector_15+0x6e>
    {
        UART_ENSendNoBlock(gPsend_str[i]);
    12ce:	20 91 4c 03 	lds	r18, 0x034C
    12d2:	30 91 4d 03 	lds	r19, 0x034D
    12d6:	80 91 07 03 	lds	r24, 0x0307
    12da:	88 2f       	mov	r24, r24
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	f9 01       	movw	r30, r18
    12e0:	e8 0f       	add	r30, r24
    12e2:	f9 1f       	adc	r31, r25
    12e4:	80 81       	ld	r24, Z
    12e6:	0e 94 95 08 	call	0x112a	; 0x112a <UART_ENSendNoBlock>
        i++;
    12ea:	80 91 07 03 	lds	r24, 0x0307
    12ee:	8f 5f       	subi	r24, 0xFF	; 255
    12f0:	80 93 07 03 	sts	0x0307, r24
    12f4:	06 c0       	rjmp	.+12     	; 0x1302 <__vector_15+0x7a>
    }
    /* String is End So start with Second Letter */
    else
    {
        i = 1;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	80 93 07 03 	sts	0x0307, r24
        gFlag = 1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	80 93 06 03 	sts	0x0306, r24
    }
}
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	ff 91       	pop	r31
    1308:	ef 91       	pop	r30
    130a:	bf 91       	pop	r27
    130c:	af 91       	pop	r26
    130e:	9f 91       	pop	r25
    1310:	8f 91       	pop	r24
    1312:	7f 91       	pop	r23
    1314:	6f 91       	pop	r22
    1316:	5f 91       	pop	r21
    1318:	4f 91       	pop	r20
    131a:	3f 91       	pop	r19
    131c:	2f 91       	pop	r18
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	0f 90       	pop	r0
    1324:	1f 90       	pop	r1
    1326:	18 95       	reti

00001328 <__vector_13>:
/**
 * @brief Receive interrupt
 * 
 */
void __vector_13(void)
{
    1328:	1f 92       	push	r1
    132a:	0f 92       	push	r0
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	0f 92       	push	r0
    1330:	11 24       	eor	r1, r1
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	2f 93       	push	r18
    1338:	3f 93       	push	r19
    133a:	4f 93       	push	r20
    133c:	5f 93       	push	r21
    133e:	6f 93       	push	r22
    1340:	7f 93       	push	r23
    1342:	8f 93       	push	r24
    1344:	9f 93       	push	r25
    1346:	af 93       	push	r26
    1348:	bf 93       	push	r27
    134a:	ef 93       	push	r30
    134c:	ff 93       	push	r31
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock();
    1356:	20 91 4e 03 	lds	r18, 0x034E
    135a:	30 91 4f 03 	lds	r19, 0x034F
    135e:	80 91 50 03 	lds	r24, 0x0350
    1362:	88 2f       	mov	r24, r24
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	89 01       	movw	r16, r18
    1368:	08 0f       	add	r16, r24
    136a:	19 1f       	adc	r17, r25
    136c:	0e 94 b3 08 	call	0x1166	; 0x1166 <UART_u8ReceiveNoBlock>
    1370:	f8 01       	movw	r30, r16
    1372:	80 83       	st	Z, r24
    if (gPrece_str[i] == '\r')
    1374:	20 91 4e 03 	lds	r18, 0x034E
    1378:	30 91 4f 03 	lds	r19, 0x034F
    137c:	80 91 50 03 	lds	r24, 0x0350
    1380:	88 2f       	mov	r24, r24
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	f9 01       	movw	r30, r18
    1386:	e8 0f       	add	r30, r24
    1388:	f9 1f       	adc	r31, r25
    138a:	80 81       	ld	r24, Z
    138c:	8d 30       	cpi	r24, 0x0D	; 13
    138e:	79 f4       	brne	.+30     	; 0x13ae <__vector_13+0x86>
    {
        gPrece_str[i] = '\0';
    1390:	20 91 4e 03 	lds	r18, 0x034E
    1394:	30 91 4f 03 	lds	r19, 0x034F
    1398:	80 91 50 03 	lds	r24, 0x0350
    139c:	88 2f       	mov	r24, r24
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	f9 01       	movw	r30, r18
    13a2:	e8 0f       	add	r30, r24
    13a4:	f9 1f       	adc	r31, r25
    13a6:	10 82       	st	Z, r1
        i = 0;
    13a8:	10 92 50 03 	sts	0x0350, r1
    13ac:	05 c0       	rjmp	.+10     	; 0x13b8 <__vector_13+0x90>
    }
    else
    {
        i++;
    13ae:	80 91 50 03 	lds	r24, 0x0350
    13b2:	8f 5f       	subi	r24, 0xFF	; 255
    13b4:	80 93 50 03 	sts	0x0350, r24
    }

    if (i > 98)
    13b8:	80 91 50 03 	lds	r24, 0x0350
    13bc:	83 36       	cpi	r24, 0x63	; 99
    13be:	10 f0       	brcs	.+4      	; 0x13c4 <__vector_13+0x9c>
        i = 0;
    13c0:	10 92 50 03 	sts	0x0350, r1
}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	ff 91       	pop	r31
    13ca:	ef 91       	pop	r30
    13cc:	bf 91       	pop	r27
    13ce:	af 91       	pop	r26
    13d0:	9f 91       	pop	r25
    13d2:	8f 91       	pop	r24
    13d4:	7f 91       	pop	r23
    13d6:	6f 91       	pop	r22
    13d8:	5f 91       	pop	r21
    13da:	4f 91       	pop	r20
    13dc:	3f 91       	pop	r19
    13de:	2f 91       	pop	r18
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <SPI_VidInitMaster>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void SPI_VidInitMaster(void) 
{
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	cd b7       	in	r28, 0x3d	; 61
    13f4:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	DDRB = DDRB | (1<<PB4);
    13f6:	a7 e3       	ldi	r26, 0x37	; 55
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e7 e3       	ldi	r30, 0x37	; 55
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	80 61       	ori	r24, 0x10	; 16
    1402:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB5);
    1404:	a7 e3       	ldi	r26, 0x37	; 55
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e7 e3       	ldi	r30, 0x37	; 55
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	80 62       	ori	r24, 0x20	; 32
    1410:	8c 93       	st	X, r24
	DDRB = DDRB & ~(1<<PB6);
    1412:	a7 e3       	ldi	r26, 0x37	; 55
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e7 e3       	ldi	r30, 0x37	; 55
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	8f 7b       	andi	r24, 0xBF	; 191
    141e:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB7);
    1420:	a7 e3       	ldi	r26, 0x37	; 55
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e7 e3       	ldi	r30, 0x37	; 55
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	80 68       	ori	r24, 0x80	; 128
    142c:	8c 93       	st	X, r24
	
	SPCR = (1<<SPE) | (1<<MSTR); // enable SPI + enable Master + choose SPI clock = Fosc/4
    142e:	ed e2       	ldi	r30, 0x2D	; 45
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 e5       	ldi	r24, 0x50	; 80
    1434:	80 83       	st	Z, r24
}
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <SPI_VidInitSlave>:

void SPI_VidInitSlave(void)
{ 
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	DDRB = DDRB & (~(1<<PB4));  
    1444:	a7 e3       	ldi	r26, 0x37	; 55
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e7 e3       	ldi	r30, 0x37	; 55
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	8f 7e       	andi	r24, 0xEF	; 239
    1450:	8c 93       	st	X, r24
	DDRB = DDRB & (~(1<<PB5));
    1452:	a7 e3       	ldi	r26, 0x37	; 55
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e7 e3       	ldi	r30, 0x37	; 55
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	8f 7d       	andi	r24, 0xDF	; 223
    145e:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB6);
    1460:	a7 e3       	ldi	r26, 0x37	; 55
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e7 e3       	ldi	r30, 0x37	; 55
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	80 64       	ori	r24, 0x40	; 64
    146c:	8c 93       	st	X, r24
	DDRB = DDRB & (~(1<<PB7));
    146e:	a7 e3       	ldi	r26, 0x37	; 55
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e7 e3       	ldi	r30, 0x37	; 55
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	8f 77       	andi	r24, 0x7F	; 127
    147a:	8c 93       	st	X, r24
	SPCR = (1<<SPE); // just enable SPI + choose SPI clock = Fosc/4
    147c:	ed e2       	ldi	r30, 0x2D	; 45
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 e4       	ldi	r24, 0x40	; 64
    1482:	80 83       	st	Z, r24
}
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <SPI_VidSendByte>:

void SPI_VidSendByte(const uint8_t copy_U8Data) 
{
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	0f 92       	push	r0
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	89 83       	std	Y+1, r24	; 0x01
	SPDR = copy_U8Data; //send data by SPI
    1496:	ef e2       	ldi	r30, 0x2F	; 47
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	80 83       	st	Z, r24
	while (!((SPSR) & (1 << SPIF))); //wait until SPI interrupt flag=1 (data is sent correctly)
    149e:	ee e2       	ldi	r30, 0x2E	; 46
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	88 23       	and	r24, r24
    14a6:	dc f7       	brge	.-10     	; 0x149e <SPI_VidSendByte+0x14>
}
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <SPI_U8RecieveByte>:

uint8_t SPI_U8RecieveByte(void)
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    while (!(GETBIT(SPSR, SPIF)));  //wait until SPI interrupt flag=1(data is receive correctly)
    14b8:	ee e2       	ldi	r30, 0x2E	; 46
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	88 23       	and	r24, r24
    14c0:	dc f7       	brge	.-10     	; 0x14b8 <SPI_U8RecieveByte+0x8>
   return SPDR; //return the received byte from SPI data register
    14c2:	ef e2       	ldi	r30, 0x2F	; 47
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
}
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <SPI_VidSendString>:

void SPI_VidSendString(const uint8_t *copy_str)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <SPI_VidSendString+0x6>
    14d4:	0f 92       	push	r0
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	9b 83       	std	Y+3, r25	; 0x03
    14dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    14de:	19 82       	std	Y+1, r1	; 0x01
    14e0:	0e c0       	rjmp	.+28     	; 0x14fe <SPI_VidSendString+0x30>
	while(copy_str[i] != '\0')
	{
		SPI_VidSendByte(copy_str[i]);
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ea:	9b 81       	ldd	r25, Y+3	; 0x03
    14ec:	fc 01       	movw	r30, r24
    14ee:	e2 0f       	add	r30, r18
    14f0:	f3 1f       	adc	r31, r19
    14f2:	80 81       	ld	r24, Z
    14f4:	0e 94 45 0a 	call	0x148a	; 0x148a <SPI_VidSendByte>
		i++;
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	8f 5f       	subi	r24, 0xFF	; 255
    14fc:	89 83       	std	Y+1, r24	; 0x01
}

void SPI_VidSendString(const uint8_t *copy_str)
{
	uint8_t i = 0;
	while(copy_str[i] != '\0')
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	9b 81       	ldd	r25, Y+3	; 0x03
    1508:	fc 01       	movw	r30, r24
    150a:	e2 0f       	add	r30, r18
    150c:	f3 1f       	adc	r31, r19
    150e:	80 81       	ld	r24, Z
    1510:	88 23       	and	r24, r24
    1512:	39 f7       	brne	.-50     	; 0x14e2 <SPI_VidSendString+0x14>
	{
		SPI_VidSendByte(copy_str[i]);
		i++;
	}
}
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <SPI_VidRecieveString>:

void SPI_VidRecieveString(uint8_t *str)
{
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	00 d0       	rcall	.+0      	; 0x152a <SPI_VidRecieveString+0xa>
    152a:	0f 92       	push	r0
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	9b 83       	std	Y+3, r25	; 0x03
    1532:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t i=0;
    1534:	19 82       	std	Y+1, r1	; 0x01
		str[i]=SPI_U8RecieveByte();
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	9b 81       	ldd	r25, Y+3	; 0x03
    1540:	8c 01       	movw	r16, r24
    1542:	02 0f       	add	r16, r18
    1544:	13 1f       	adc	r17, r19
    1546:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <SPI_U8RecieveByte>
    154a:	f8 01       	movw	r30, r16
    154c:	80 83       	st	Z, r24
    154e:	0f c0       	rjmp	.+30     	; 0x156e <SPI_VidRecieveString+0x4e>
		while(str[i]!='\r'){
		i++;
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	8f 5f       	subi	r24, 0xFF	; 255
    1554:	89 83       	std	Y+1, r24	; 0x01
			str[i]=SPI_U8RecieveByte();
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	9b 81       	ldd	r25, Y+3	; 0x03
    1560:	8c 01       	movw	r16, r24
    1562:	02 0f       	add	r16, r18
    1564:	13 1f       	adc	r17, r19
    1566:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <SPI_U8RecieveByte>
    156a:	f8 01       	movw	r30, r16
    156c:	80 83       	st	Z, r24

void SPI_VidRecieveString(uint8_t *str)
{
		uint8_t i=0;
		str[i]=SPI_U8RecieveByte();
		while(str[i]!='\r'){
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	9b 81       	ldd	r25, Y+3	; 0x03
    1578:	fc 01       	movw	r30, r24
    157a:	e2 0f       	add	r30, r18
    157c:	f3 1f       	adc	r31, r19
    157e:	80 81       	ld	r24, Z
    1580:	8d 30       	cpi	r24, 0x0D	; 13
    1582:	31 f7       	brne	.-52     	; 0x1550 <SPI_VidRecieveString+0x30>
		i++;
			str[i]=SPI_U8RecieveByte();
		}
		str[i]='\0';
    1584:	89 81       	ldd	r24, Y+1	; 0x01
    1586:	28 2f       	mov	r18, r24
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	9b 81       	ldd	r25, Y+3	; 0x03
    158e:	fc 01       	movw	r30, r24
    1590:	e2 0f       	add	r30, r18
    1592:	f3 1f       	adc	r31, r19
    1594:	10 82       	st	Z, r1



}
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	08 95       	ret

000015a6 <I2C_MasterInit>:

//#include "I2C_Private.h"

//#include <util/delay.h>

void I2C_MasterInit(void){
    15a6:	df 93       	push	r29
    15a8:	cf 93       	push	r28
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
	// prescaler =1
		CLRBIT(TWSR,0);
    15ae:	a1 e2       	ldi	r26, 0x21	; 33
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e1 e2       	ldi	r30, 0x21	; 33
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	8e 7f       	andi	r24, 0xFE	; 254
    15ba:	8c 93       	st	X, r24
		CLRBIT(TWSR,1);
    15bc:	a1 e2       	ldi	r26, 0x21	; 33
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e1 e2       	ldi	r30, 0x21	; 33
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	8d 7f       	andi	r24, 0xFD	; 253
    15c8:	8c 93       	st	X, r24
		TWBR=32;//400khz
    15ca:	e0 e2       	ldi	r30, 0x20	; 32
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 e2       	ldi	r24, 0x20	; 32
    15d0:	80 83       	st	Z, r24
		//SETBIT(TWCR,6);// enable ACK

		SETBIT(TWCR,2);// enable
    15d2:	a6 e5       	ldi	r26, 0x56	; 86
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e6 e5       	ldi	r30, 0x56	; 86
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	84 60       	ori	r24, 0x04	; 4
    15de:	8c 93       	st	X, r24

		TWAR=0b00000111;
    15e0:	e2 e2       	ldi	r30, 0x22	; 34
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	87 e0       	ldi	r24, 0x07	; 7
    15e6:	80 83       	st	Z, r24



}
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <I2C_MasterStart>:
void I2C_MasterStart(void){
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62

	SETBIT(TWCR,5);// enable start bit
    15f6:	a6 e5       	ldi	r26, 0x56	; 86
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e6 e5       	ldi	r30, 0x56	; 86
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	80 62       	ori	r24, 0x20	; 32
    1602:	8c 93       	st	X, r24
	SETBIT(TWCR,7);// clear flag
    1604:	a6 e5       	ldi	r26, 0x56	; 86
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	e6 e5       	ldi	r30, 0x56	; 86
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	80 68       	ori	r24, 0x80	; 128
    1610:	8c 93       	st	X, r24

	while(GETBIT(TWCR,7)==0);
    1612:	e6 e5       	ldi	r30, 0x56	; 86
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	88 23       	and	r24, r24
    161a:	dc f7       	brge	.-10     	; 0x1612 <I2C_MasterStart+0x24>

}
    161c:	cf 91       	pop	r28
    161e:	df 91       	pop	r29
    1620:	08 95       	ret

00001622 <I2C_SlaveInit>:


void I2C_SlaveInit(void){
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	cd b7       	in	r28, 0x3d	; 61
    1628:	de b7       	in	r29, 0x3e	; 62
	TWBR=32;//400khz
    162a:	e0 e2       	ldi	r30, 0x20	; 32
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 e2       	ldi	r24, 0x20	; 32
    1630:	80 83       	st	Z, r24


	TWAR=0b00000010;
    1632:	e2 e2       	ldi	r30, 0x22	; 34
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	82 e0       	ldi	r24, 0x02	; 2
    1638:	80 83       	st	Z, r24
	SETBIT(TWCR,6);// enable ack
    163a:	a6 e5       	ldi	r26, 0x56	; 86
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e6 e5       	ldi	r30, 0x56	; 86
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	80 64       	ori	r24, 0x40	; 64
    1646:	8c 93       	st	X, r24

	SETBIT(TWCR,2);// enable i2c
    1648:	a6 e5       	ldi	r26, 0x56	; 86
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e6 e5       	ldi	r30, 0x56	; 86
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	84 60       	ori	r24, 0x04	; 4
    1654:	8c 93       	st	X, r24

	//SETBIT(TWCR,7);// clear flag
	//while(GETBIT(TWCR,7)==0);


	I2C_ReadDataByte();
    1656:	0e 94 9c 0b 	call	0x1738	; 0x1738 <I2C_ReadDataByte>


}
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <I2C_SendSlaveAddressWithWrite>:

void I2C_SendSlaveAddressWithWrite(uint8_t address){
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	0f 92       	push	r0
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	89 83       	std	Y+1, r24	; 0x01
	TWDR=(address<<1);
    166c:	e3 e2       	ldi	r30, 0x23	; 35
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	88 0f       	add	r24, r24
    1674:	80 83       	st	Z, r24
	/* Write operation */
		CLRBIT(TWDR,0);
    1676:	a3 e2       	ldi	r26, 0x23	; 35
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e3 e2       	ldi	r30, 0x23	; 35
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	8e 7f       	andi	r24, 0xFE	; 254
    1682:	8c 93       	st	X, r24
			CLRBIT(TWCR,5);// clear start bit
    1684:	a6 e5       	ldi	r26, 0x56	; 86
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e6 e5       	ldi	r30, 0x56	; 86
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	8f 7d       	andi	r24, 0xDF	; 223
    1690:	8c 93       	st	X, r24
			SETBIT(TWCR,7);// clear flag
    1692:	a6 e5       	ldi	r26, 0x56	; 86
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e6 e5       	ldi	r30, 0x56	; 86
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	80 68       	ori	r24, 0x80	; 128
    169e:	8c 93       	st	X, r24
			while(GETBIT(TWCR,7)==0);
    16a0:	e6 e5       	ldi	r30, 0x56	; 86
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	88 23       	and	r24, r24
    16a8:	dc f7       	brge	.-10     	; 0x16a0 <I2C_SendSlaveAddressWithWrite+0x40>
}
    16aa:	0f 90       	pop	r0
    16ac:	cf 91       	pop	r28
    16ae:	df 91       	pop	r29
    16b0:	08 95       	ret

000016b2 <I2C_SendSlaveAddressWithRead>:

void I2C_SendSlaveAddressWithRead(uint8_t address){
    16b2:	df 93       	push	r29
    16b4:	cf 93       	push	r28
    16b6:	0f 92       	push	r0
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	89 83       	std	Y+1, r24	; 0x01
	TWDR=(address<<1);
    16be:	e3 e2       	ldi	r30, 0x23	; 35
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	89 81       	ldd	r24, Y+1	; 0x01
    16c4:	88 0f       	add	r24, r24
    16c6:	80 83       	st	Z, r24
	SETBIT(TWDR,0);// read
    16c8:	a3 e2       	ldi	r26, 0x23	; 35
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e3 e2       	ldi	r30, 0x23	; 35
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	81 60       	ori	r24, 0x01	; 1
    16d4:	8c 93       	st	X, r24

	CLRBIT(TWCR,5);// clear start bit
    16d6:	a6 e5       	ldi	r26, 0x56	; 86
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e6 e5       	ldi	r30, 0x56	; 86
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8f 7d       	andi	r24, 0xDF	; 223
    16e2:	8c 93       	st	X, r24
	SETBIT(TWCR,7);// clear flag
    16e4:	a6 e5       	ldi	r26, 0x56	; 86
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e6 e5       	ldi	r30, 0x56	; 86
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	80 68       	ori	r24, 0x80	; 128
    16f0:	8c 93       	st	X, r24
	while(GETBIT(TWCR,7)==0);
    16f2:	e6 e5       	ldi	r30, 0x56	; 86
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	88 23       	and	r24, r24
    16fa:	dc f7       	brge	.-10     	; 0x16f2 <I2C_SendSlaveAddressWithRead+0x40>
}
    16fc:	0f 90       	pop	r0
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <I2C_WriteDataByte>:

void I2C_WriteDataByte(uint8_t data){
    1704:	df 93       	push	r29
    1706:	cf 93       	push	r28
    1708:	0f 92       	push	r0
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
    170e:	89 83       	std	Y+1, r24	; 0x01

TWDR=data;
    1710:	e3 e2       	ldi	r30, 0x23	; 35
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	80 83       	st	Z, r24
SETBIT(TWCR,7);// clear flag
    1718:	a6 e5       	ldi	r26, 0x56	; 86
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e6 e5       	ldi	r30, 0x56	; 86
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	80 68       	ori	r24, 0x80	; 128
    1724:	8c 93       	st	X, r24
while(GETBIT(TWCR,7)==0);
    1726:	e6 e5       	ldi	r30, 0x56	; 86
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	88 23       	and	r24, r24
    172e:	dc f7       	brge	.-10     	; 0x1726 <I2C_WriteDataByte+0x22>

}
    1730:	0f 90       	pop	r0
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <I2C_ReadDataByte>:
uint8_t I2C_ReadDataByte(void){
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	0f 92       	push	r0
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;
SETBIT(TWCR,7);// clear flag
    1742:	a6 e5       	ldi	r26, 0x56	; 86
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e6 e5       	ldi	r30, 0x56	; 86
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	80 68       	ori	r24, 0x80	; 128
    174e:	8c 93       	st	X, r24
while(GETBIT(TWCR,7)==0);
    1750:	e6 e5       	ldi	r30, 0x56	; 86
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	88 23       	and	r24, r24
    1758:	dc f7       	brge	.-10     	; 0x1750 <I2C_ReadDataByte+0x18>

value=TWDR;
    175a:	e3 e2       	ldi	r30, 0x23	; 35
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	89 83       	std	Y+1, r24	; 0x01
return value;
    1762:	89 81       	ldd	r24, Y+1	; 0x01
}
    1764:	0f 90       	pop	r0
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <I2C_MasterStop>:
void I2C_MasterStop(void){
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62

	SETBIT(TWCR,4);// enable stop bit
    1774:	a6 e5       	ldi	r26, 0x56	; 86
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e6 e5       	ldi	r30, 0x56	; 86
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	80 61       	ori	r24, 0x10	; 16
    1780:	8c 93       	st	X, r24
	SETBIT(TWCR,2);// enable i2c bit
    1782:	a6 e5       	ldi	r26, 0x56	; 86
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e6 e5       	ldi	r30, 0x56	; 86
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	84 60       	ori	r24, 0x04	; 4
    178e:	8c 93       	st	X, r24

	SETBIT(TWCR,7);// clear flag
    1790:	a6 e5       	ldi	r26, 0x56	; 86
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e6 e5       	ldi	r30, 0x56	; 86
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	80 68       	ori	r24, 0x80	; 128
    179c:	8c 93       	st	X, r24



}
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <EXTI_ENEnable>:
 * 
 * @param Interrupt EXTI_INT0 | EXTI_INT1 | EXTI_INT2
 * @return EN_ERRORSTATE_t 
 */
EN_EXTIERRORSTATE_t EXTI_ENEnable(EN_EXTI_t Interrupt)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <EXTI_ENEnable+0x6>
    17aa:	00 d0       	rcall	.+0      	; 0x17ac <EXTI_ENEnable+0x8>
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	8a 83       	std	Y+2, r24	; 0x02
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    17b2:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	28 2f       	mov	r18, r24
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	3c 83       	std	Y+4, r19	; 0x04
    17bc:	2b 83       	std	Y+3, r18	; 0x03
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	9c 81       	ldd	r25, Y+4	; 0x04
    17c2:	81 30       	cpi	r24, 0x01	; 1
    17c4:	91 05       	cpc	r25, r1
    17c6:	c1 f0       	breq	.+48     	; 0x17f8 <EXTI_ENEnable+0x54>
    17c8:	2b 81       	ldd	r18, Y+3	; 0x03
    17ca:	3c 81       	ldd	r19, Y+4	; 0x04
    17cc:	22 30       	cpi	r18, 0x02	; 2
    17ce:	31 05       	cpc	r19, r1
    17d0:	11 f1       	breq	.+68     	; 0x1816 <EXTI_ENEnable+0x72>
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	69 f5       	brne	.+90     	; 0x1834 <EXTI_ENEnable+0x90>
	{
	case EXTI_INT0:
		SETBIT(GICR, INT0);
    17da:	ab e5       	ldi	r26, 0x5B	; 91
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	eb e5       	ldi	r30, 0x5B	; 91
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	80 64       	ori	r24, 0x40	; 64
    17e6:	8c 93       	st	X, r24
		SETBIT(SREG, I_BIT);
    17e8:	af e5       	ldi	r26, 0x5F	; 95
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	ef e5       	ldi	r30, 0x5F	; 95
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	80 68       	ori	r24, 0x80	; 128
    17f4:	8c 93       	st	X, r24
    17f6:	20 c0       	rjmp	.+64     	; 0x1838 <EXTI_ENEnable+0x94>
		break;
	case EXTI_INT1:
		SETBIT(GICR, INT1);
    17f8:	ab e5       	ldi	r26, 0x5B	; 91
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	eb e5       	ldi	r30, 0x5B	; 91
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	80 68       	ori	r24, 0x80	; 128
    1804:	8c 93       	st	X, r24
		SETBIT(SREG, I_BIT);
    1806:	af e5       	ldi	r26, 0x5F	; 95
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	ef e5       	ldi	r30, 0x5F	; 95
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	80 68       	ori	r24, 0x80	; 128
    1812:	8c 93       	st	X, r24
    1814:	11 c0       	rjmp	.+34     	; 0x1838 <EXTI_ENEnable+0x94>
		break;
	case EXTI_INT2:
		SETBIT(GICR, INT2);
    1816:	ab e5       	ldi	r26, 0x5B	; 91
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	eb e5       	ldi	r30, 0x5B	; 91
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	80 62       	ori	r24, 0x20	; 32
    1822:	8c 93       	st	X, r24
		SETBIT(SREG, I_BIT);
    1824:	af e5       	ldi	r26, 0x5F	; 95
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	ef e5       	ldi	r30, 0x5F	; 95
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	80 68       	ori	r24, 0x80	; 128
    1830:	8c 93       	st	X, r24
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <EXTI_ENEnable+0x94>
		break;
	default:
		state = E_EXT_ERROR;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    1838:	89 81       	ldd	r24, Y+1	; 0x01
}
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <EXTI_ENisable>:

EN_EXTIERRORSTATE_t EXTI_ENisable(EN_EXTI_t Interrupt)
{
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	00 d0       	rcall	.+0      	; 0x184e <EXTI_ENisable+0x6>
    184e:	00 d0       	rcall	.+0      	; 0x1850 <EXTI_ENisable+0x8>
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	8a 83       	std	Y+2, r24	; 0x02
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    1856:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	3c 83       	std	Y+4, r19	; 0x04
    1860:	2b 83       	std	Y+3, r18	; 0x03
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	9c 81       	ldd	r25, Y+4	; 0x04
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	91 05       	cpc	r25, r1
    186a:	c1 f0       	breq	.+48     	; 0x189c <EXTI_ENisable+0x54>
    186c:	2b 81       	ldd	r18, Y+3	; 0x03
    186e:	3c 81       	ldd	r19, Y+4	; 0x04
    1870:	22 30       	cpi	r18, 0x02	; 2
    1872:	31 05       	cpc	r19, r1
    1874:	11 f1       	breq	.+68     	; 0x18ba <EXTI_ENisable+0x72>
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	69 f5       	brne	.+90     	; 0x18d8 <EXTI_ENisable+0x90>
	{
	case EXTI_INT0:
		CLRBIT(GICR, INT0);
    187e:	ab e5       	ldi	r26, 0x5B	; 91
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	eb e5       	ldi	r30, 0x5B	; 91
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	8f 7b       	andi	r24, 0xBF	; 191
    188a:	8c 93       	st	X, r24
		CLRBIT(SREG, I_BIT);
    188c:	af e5       	ldi	r26, 0x5F	; 95
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	ef e5       	ldi	r30, 0x5F	; 95
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	8f 77       	andi	r24, 0x7F	; 127
    1898:	8c 93       	st	X, r24
    189a:	20 c0       	rjmp	.+64     	; 0x18dc <EXTI_ENisable+0x94>
		break;
	case EXTI_INT1:
		CLRBIT(GICR, INT1);
    189c:	ab e5       	ldi	r26, 0x5B	; 91
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	eb e5       	ldi	r30, 0x5B	; 91
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	8f 77       	andi	r24, 0x7F	; 127
    18a8:	8c 93       	st	X, r24
		CLRBIT(SREG, I_BIT);
    18aa:	af e5       	ldi	r26, 0x5F	; 95
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	ef e5       	ldi	r30, 0x5F	; 95
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	8f 77       	andi	r24, 0x7F	; 127
    18b6:	8c 93       	st	X, r24
    18b8:	11 c0       	rjmp	.+34     	; 0x18dc <EXTI_ENisable+0x94>
		break;
	case EXTI_INT2:
		CLRBIT(GICR, INT2);
    18ba:	ab e5       	ldi	r26, 0x5B	; 91
    18bc:	b0 e0       	ldi	r27, 0x00	; 0
    18be:	eb e5       	ldi	r30, 0x5B	; 91
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	8f 7d       	andi	r24, 0xDF	; 223
    18c6:	8c 93       	st	X, r24
		CLRBIT(SREG, I_BIT);
    18c8:	af e5       	ldi	r26, 0x5F	; 95
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	ef e5       	ldi	r30, 0x5F	; 95
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	8f 77       	andi	r24, 0x7F	; 127
    18d4:	8c 93       	st	X, r24
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <EXTI_ENisable+0x94>
		break;
	default:
		state = E_EXT_ERROR;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
} /* EXTI_voidDisable */
    18de:	0f 90       	pop	r0
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	cf 91       	pop	r28
    18e8:	df 91       	pop	r29
    18ea:	08 95       	ret

000018ec <EXTI_ENTriggerEdge>:

EN_EXTIERRORSTATE_t EXTI_ENTriggerEdge(EN_EXTI_t Interrupt, EN_TriggerEdge_t Edge)
{
    18ec:	df 93       	push	r29
    18ee:	cf 93       	push	r28
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	29 97       	sbiw	r28, 0x09	; 9
    18f6:	0f b6       	in	r0, 0x3f	; 63
    18f8:	f8 94       	cli
    18fa:	de bf       	out	0x3e, r29	; 62
    18fc:	0f be       	out	0x3f, r0	; 63
    18fe:	cd bf       	out	0x3d, r28	; 61
    1900:	8a 83       	std	Y+2, r24	; 0x02
    1902:	6b 83       	std	Y+3, r22	; 0x03
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    1904:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	39 87       	std	Y+9, r19	; 0x09
    190e:	28 87       	std	Y+8, r18	; 0x08
    1910:	88 85       	ldd	r24, Y+8	; 0x08
    1912:	99 85       	ldd	r25, Y+9	; 0x09
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	91 05       	cpc	r25, r1
    1918:	d9 f0       	breq	.+54     	; 0x1950 <EXTI_ENTriggerEdge+0x64>
    191a:	28 85       	ldd	r18, Y+8	; 0x08
    191c:	39 85       	ldd	r19, Y+9	; 0x09
    191e:	22 30       	cpi	r18, 0x02	; 2
    1920:	31 05       	cpc	r19, r1
    1922:	09 f4       	brne	.+2      	; 0x1926 <EXTI_ENTriggerEdge+0x3a>
    1924:	73 c0       	rjmp	.+230    	; 0x1a0c <EXTI_ENTriggerEdge+0x120>
    1926:	88 85       	ldd	r24, Y+8	; 0x08
    1928:	99 85       	ldd	r25, Y+9	; 0x09
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	09 f0       	breq	.+2      	; 0x1930 <EXTI_ENTriggerEdge+0x44>
    192e:	91 c0       	rjmp	.+290    	; 0x1a52 <EXTI_ENTriggerEdge+0x166>
	{
	case EXTI_INT0:
		MCUCR &= 0xFC;
    1930:	a5 e5       	ldi	r26, 0x55	; 85
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e5 e5       	ldi	r30, 0x55	; 85
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	8c 7f       	andi	r24, 0xFC	; 252
    193c:	8c 93       	st	X, r24
		MCUCR |= Edge;
    193e:	a5 e5       	ldi	r26, 0x55	; 85
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e5 e5       	ldi	r30, 0x55	; 85
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	90 81       	ld	r25, Z
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	89 2b       	or	r24, r25
    194c:	8c 93       	st	X, r24
    194e:	83 c0       	rjmp	.+262    	; 0x1a56 <EXTI_ENTriggerEdge+0x16a>
		break;
	case EXTI_INT1:
		switch (Edge)
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	3f 83       	std	Y+7, r19	; 0x07
    1958:	2e 83       	std	Y+6, r18	; 0x06
    195a:	8e 81       	ldd	r24, Y+6	; 0x06
    195c:	9f 81       	ldd	r25, Y+7	; 0x07
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	91 05       	cpc	r25, r1
    1962:	21 f1       	breq	.+72     	; 0x19ac <EXTI_ENTriggerEdge+0xc0>
    1964:	2e 81       	ldd	r18, Y+6	; 0x06
    1966:	3f 81       	ldd	r19, Y+7	; 0x07
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	2c f4       	brge	.+10     	; 0x1978 <EXTI_ENTriggerEdge+0x8c>
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
    1970:	9f 81       	ldd	r25, Y+7	; 0x07
    1972:	00 97       	sbiw	r24, 0x00	; 0
    1974:	61 f0       	breq	.+24     	; 0x198e <EXTI_ENTriggerEdge+0xa2>
    1976:	47 c0       	rjmp	.+142    	; 0x1a06 <EXTI_ENTriggerEdge+0x11a>
    1978:	2e 81       	ldd	r18, Y+6	; 0x06
    197a:	3f 81       	ldd	r19, Y+7	; 0x07
    197c:	22 30       	cpi	r18, 0x02	; 2
    197e:	31 05       	cpc	r19, r1
    1980:	21 f1       	breq	.+72     	; 0x19ca <EXTI_ENTriggerEdge+0xde>
    1982:	8e 81       	ldd	r24, Y+6	; 0x06
    1984:	9f 81       	ldd	r25, Y+7	; 0x07
    1986:	83 30       	cpi	r24, 0x03	; 3
    1988:	91 05       	cpc	r25, r1
    198a:	71 f1       	breq	.+92     	; 0x19e8 <EXTI_ENTriggerEdge+0xfc>
    198c:	3c c0       	rjmp	.+120    	; 0x1a06 <EXTI_ENTriggerEdge+0x11a>
		{
		case LOW_LEVEL:
			CLRBIT(MCUCR, ISC10);
    198e:	a5 e5       	ldi	r26, 0x55	; 85
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e5 e5       	ldi	r30, 0x55	; 85
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	8b 7f       	andi	r24, 0xFB	; 251
    199a:	8c 93       	st	X, r24
			CLRBIT(MCUCR, ISC11);
    199c:	a5 e5       	ldi	r26, 0x55	; 85
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e5 e5       	ldi	r30, 0x55	; 85
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	87 7f       	andi	r24, 0xF7	; 247
    19a8:	8c 93       	st	X, r24
    19aa:	55 c0       	rjmp	.+170    	; 0x1a56 <EXTI_ENTriggerEdge+0x16a>
			break;
		case ANY_LOGIC_CHANGE:
			SETBIT(MCUCR, ISC10);
    19ac:	a5 e5       	ldi	r26, 0x55	; 85
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e5 e5       	ldi	r30, 0x55	; 85
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	84 60       	ori	r24, 0x04	; 4
    19b8:	8c 93       	st	X, r24
			CLRBIT(MCUCR, ISC11);
    19ba:	a5 e5       	ldi	r26, 0x55	; 85
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e5 e5       	ldi	r30, 0x55	; 85
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	87 7f       	andi	r24, 0xF7	; 247
    19c6:	8c 93       	st	X, r24
    19c8:	46 c0       	rjmp	.+140    	; 0x1a56 <EXTI_ENTriggerEdge+0x16a>
			break;
		case FALLING_EDGE:
			CLRBIT(MCUCR, ISC10);
    19ca:	a5 e5       	ldi	r26, 0x55	; 85
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e5 e5       	ldi	r30, 0x55	; 85
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	8b 7f       	andi	r24, 0xFB	; 251
    19d6:	8c 93       	st	X, r24
			SETBIT(MCUCR, ISC11);
    19d8:	a5 e5       	ldi	r26, 0x55	; 85
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e5 e5       	ldi	r30, 0x55	; 85
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	88 60       	ori	r24, 0x08	; 8
    19e4:	8c 93       	st	X, r24
    19e6:	37 c0       	rjmp	.+110    	; 0x1a56 <EXTI_ENTriggerEdge+0x16a>
			break;
		case RISING_EDGE:
			SETBIT(MCUCR, ISC10);
    19e8:	a5 e5       	ldi	r26, 0x55	; 85
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e5 e5       	ldi	r30, 0x55	; 85
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	84 60       	ori	r24, 0x04	; 4
    19f4:	8c 93       	st	X, r24
			SETBIT(MCUCR, ISC11);
    19f6:	a5 e5       	ldi	r26, 0x55	; 85
    19f8:	b0 e0       	ldi	r27, 0x00	; 0
    19fa:	e5 e5       	ldi	r30, 0x55	; 85
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	80 81       	ld	r24, Z
    1a00:	88 60       	ori	r24, 0x08	; 8
    1a02:	8c 93       	st	X, r24
    1a04:	28 c0       	rjmp	.+80     	; 0x1a56 <EXTI_ENTriggerEdge+0x16a>
			break;
		default:
			state = E_EXT_ERROR;
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	25 c0       	rjmp	.+74     	; 0x1a56 <EXTI_ENTriggerEdge+0x16a>
			break;
		}
		break;
	case EXTI_INT2:
		switch (Edge)
    1a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	3d 83       	std	Y+5, r19	; 0x05
    1a14:	2c 83       	std	Y+4, r18	; 0x04
    1a16:	8c 81       	ldd	r24, Y+4	; 0x04
    1a18:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1a:	82 30       	cpi	r24, 0x02	; 2
    1a1c:	91 05       	cpc	r25, r1
    1a1e:	31 f0       	breq	.+12     	; 0x1a2c <EXTI_ENTriggerEdge+0x140>
    1a20:	2c 81       	ldd	r18, Y+4	; 0x04
    1a22:	3d 81       	ldd	r19, Y+5	; 0x05
    1a24:	23 30       	cpi	r18, 0x03	; 3
    1a26:	31 05       	cpc	r19, r1
    1a28:	49 f0       	breq	.+18     	; 0x1a3c <EXTI_ENTriggerEdge+0x150>
    1a2a:	10 c0       	rjmp	.+32     	; 0x1a4c <EXTI_ENTriggerEdge+0x160>
		{
		case FALLING_EDGE:
			CLRBIT(MCUCSR, ISC2);
    1a2c:	a4 e5       	ldi	r26, 0x54	; 84
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e4 e5       	ldi	r30, 0x54	; 84
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	8f 7b       	andi	r24, 0xBF	; 191
    1a38:	8c 93       	st	X, r24
    1a3a:	0d c0       	rjmp	.+26     	; 0x1a56 <EXTI_ENTriggerEdge+0x16a>
			break;
		case RISING_EDGE:
			SETBIT(MCUCSR, ISC2);
    1a3c:	a4 e5       	ldi	r26, 0x54	; 84
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e4 e5       	ldi	r30, 0x54	; 84
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	80 64       	ori	r24, 0x40	; 64
    1a48:	8c 93       	st	X, r24
    1a4a:	05 c0       	rjmp	.+10     	; 0x1a56 <EXTI_ENTriggerEdge+0x16a>
			break;
		default:
			state = E_EXT_ERROR;
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <EXTI_ENTriggerEdge+0x16a>
			break;
		}
		break;

	default:
		state = E_EXT_ERROR;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
} /* EXTI_voidTriggerEdge */
    1a58:	29 96       	adiw	r28, 0x09	; 9
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	de bf       	out	0x3e, r29	; 62
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	cd bf       	out	0x3d, r28	; 61
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <EXTI_SetCallBack>:

EN_EXTIERRORSTATE_t EXTI_SetCallBack(EN_EXTI_t Interrupt, void (*LocalPtr)(void))
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <EXTI_SetCallBack+0x6>
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <EXTI_SetCallBack+0x8>
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <EXTI_SetCallBack+0xa>
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
    1a78:	8a 83       	std	Y+2, r24	; 0x02
    1a7a:	7c 83       	std	Y+4, r23	; 0x04
    1a7c:	6b 83       	std	Y+3, r22	; 0x03
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    1a7e:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	3e 83       	std	Y+6, r19	; 0x06
    1a88:	2d 83       	std	Y+5, r18	; 0x05
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	91 05       	cpc	r25, r1
    1a92:	81 f0       	breq	.+32     	; 0x1ab4 <EXTI_SetCallBack+0x4a>
    1a94:	2d 81       	ldd	r18, Y+5	; 0x05
    1a96:	3e 81       	ldd	r19, Y+6	; 0x06
    1a98:	22 30       	cpi	r18, 0x02	; 2
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	91 f0       	breq	.+36     	; 0x1ac2 <EXTI_SetCallBack+0x58>
    1a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	a9 f4       	brne	.+42     	; 0x1ad0 <EXTI_SetCallBack+0x66>
	{
	case EXTI_INT0:
		EXTI_INT0_FPtr = LocalPtr;
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aaa:	90 93 52 03 	sts	0x0352, r25
    1aae:	80 93 51 03 	sts	0x0351, r24
    1ab2:	10 c0       	rjmp	.+32     	; 0x1ad4 <EXTI_SetCallBack+0x6a>
		break;
	case EXTI_INT1:
		EXTI_INT1_FPtr = LocalPtr;
    1ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab8:	90 93 54 03 	sts	0x0354, r25
    1abc:	80 93 53 03 	sts	0x0353, r24
    1ac0:	09 c0       	rjmp	.+18     	; 0x1ad4 <EXTI_SetCallBack+0x6a>
		break;
	case EXTI_INT2:
		EXTI_INT2_FPtr = LocalPtr;
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	90 93 56 03 	sts	0x0356, r25
    1aca:	80 93 55 03 	sts	0x0355, r24
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <EXTI_SetCallBack+0x6a>
		break;
	default:
		state = E_EXT_ERROR;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01

} /* EXTI_SetCallBack */
    1ad6:	26 96       	adiw	r28, 0x06	; 6
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <__vector_1>:

void __vector_1(void)
{
    1ae8:	1f 92       	push	r1
    1aea:	0f 92       	push	r0
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	0f 92       	push	r0
    1af0:	11 24       	eor	r1, r1
    1af2:	2f 93       	push	r18
    1af4:	3f 93       	push	r19
    1af6:	4f 93       	push	r20
    1af8:	5f 93       	push	r21
    1afa:	6f 93       	push	r22
    1afc:	7f 93       	push	r23
    1afe:	8f 93       	push	r24
    1b00:	9f 93       	push	r25
    1b02:	af 93       	push	r26
    1b04:	bf 93       	push	r27
    1b06:	ef 93       	push	r30
    1b08:	ff 93       	push	r31
    1b0a:	df 93       	push	r29
    1b0c:	cf 93       	push	r28
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_INT0_FPtr != NULLPTR)
    1b12:	80 91 51 03 	lds	r24, 0x0351
    1b16:	90 91 52 03 	lds	r25, 0x0352
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	29 f0       	breq	.+10     	; 0x1b28 <__vector_1+0x40>
	{
		EXTI_INT0_FPtr();
    1b1e:	e0 91 51 03 	lds	r30, 0x0351
    1b22:	f0 91 52 03 	lds	r31, 0x0352
    1b26:	09 95       	icall
	}
}
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	ff 91       	pop	r31
    1b2e:	ef 91       	pop	r30
    1b30:	bf 91       	pop	r27
    1b32:	af 91       	pop	r26
    1b34:	9f 91       	pop	r25
    1b36:	8f 91       	pop	r24
    1b38:	7f 91       	pop	r23
    1b3a:	6f 91       	pop	r22
    1b3c:	5f 91       	pop	r21
    1b3e:	4f 91       	pop	r20
    1b40:	3f 91       	pop	r19
    1b42:	2f 91       	pop	r18
    1b44:	0f 90       	pop	r0
    1b46:	0f be       	out	0x3f, r0	; 63
    1b48:	0f 90       	pop	r0
    1b4a:	1f 90       	pop	r1
    1b4c:	18 95       	reti

00001b4e <__vector_2>:

void __vector_2(void)
{
    1b4e:	1f 92       	push	r1
    1b50:	0f 92       	push	r0
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	0f 92       	push	r0
    1b56:	11 24       	eor	r1, r1
    1b58:	2f 93       	push	r18
    1b5a:	3f 93       	push	r19
    1b5c:	4f 93       	push	r20
    1b5e:	5f 93       	push	r21
    1b60:	6f 93       	push	r22
    1b62:	7f 93       	push	r23
    1b64:	8f 93       	push	r24
    1b66:	9f 93       	push	r25
    1b68:	af 93       	push	r26
    1b6a:	bf 93       	push	r27
    1b6c:	ef 93       	push	r30
    1b6e:	ff 93       	push	r31
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_INT1_FPtr != NULLPTR)
    1b78:	80 91 53 03 	lds	r24, 0x0353
    1b7c:	90 91 54 03 	lds	r25, 0x0354
    1b80:	00 97       	sbiw	r24, 0x00	; 0
    1b82:	29 f0       	breq	.+10     	; 0x1b8e <__vector_2+0x40>
	{
		EXTI_INT1_FPtr();
    1b84:	e0 91 53 03 	lds	r30, 0x0353
    1b88:	f0 91 54 03 	lds	r31, 0x0354
    1b8c:	09 95       	icall
	}
}
    1b8e:	cf 91       	pop	r28
    1b90:	df 91       	pop	r29
    1b92:	ff 91       	pop	r31
    1b94:	ef 91       	pop	r30
    1b96:	bf 91       	pop	r27
    1b98:	af 91       	pop	r26
    1b9a:	9f 91       	pop	r25
    1b9c:	8f 91       	pop	r24
    1b9e:	7f 91       	pop	r23
    1ba0:	6f 91       	pop	r22
    1ba2:	5f 91       	pop	r21
    1ba4:	4f 91       	pop	r20
    1ba6:	3f 91       	pop	r19
    1ba8:	2f 91       	pop	r18
    1baa:	0f 90       	pop	r0
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	0f 90       	pop	r0
    1bb0:	1f 90       	pop	r1
    1bb2:	18 95       	reti

00001bb4 <__vector_3>:

void __vector_3(void)
{
    1bb4:	1f 92       	push	r1
    1bb6:	0f 92       	push	r0
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	0f 92       	push	r0
    1bbc:	11 24       	eor	r1, r1
    1bbe:	2f 93       	push	r18
    1bc0:	3f 93       	push	r19
    1bc2:	4f 93       	push	r20
    1bc4:	5f 93       	push	r21
    1bc6:	6f 93       	push	r22
    1bc8:	7f 93       	push	r23
    1bca:	8f 93       	push	r24
    1bcc:	9f 93       	push	r25
    1bce:	af 93       	push	r26
    1bd0:	bf 93       	push	r27
    1bd2:	ef 93       	push	r30
    1bd4:	ff 93       	push	r31
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_INT2_FPtr != NULLPTR)
    1bde:	80 91 55 03 	lds	r24, 0x0355
    1be2:	90 91 56 03 	lds	r25, 0x0356
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	29 f0       	breq	.+10     	; 0x1bf4 <__vector_3+0x40>
	{
		EXTI_INT2_FPtr();
    1bea:	e0 91 55 03 	lds	r30, 0x0355
    1bee:	f0 91 56 03 	lds	r31, 0x0356
    1bf2:	09 95       	icall
	}
}
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	ff 91       	pop	r31
    1bfa:	ef 91       	pop	r30
    1bfc:	bf 91       	pop	r27
    1bfe:	af 91       	pop	r26
    1c00:	9f 91       	pop	r25
    1c02:	8f 91       	pop	r24
    1c04:	7f 91       	pop	r23
    1c06:	6f 91       	pop	r22
    1c08:	5f 91       	pop	r21
    1c0a:	4f 91       	pop	r20
    1c0c:	3f 91       	pop	r19
    1c0e:	2f 91       	pop	r18
    1c10:	0f 90       	pop	r0
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	0f 90       	pop	r0
    1c16:	1f 90       	pop	r1
    1c18:	18 95       	reti

00001c1a <DIO_voidSetPinValue>:
 * @param EN_Pin    PIN Number
 * @param EN_Value  HIGH or LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	28 97       	sbiw	r28, 0x08	; 8
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	f8 94       	cli
    1c28:	de bf       	out	0x3e, r29	; 62
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	cd bf       	out	0x3d, r28	; 61
    1c2e:	8a 83       	std	Y+2, r24	; 0x02
    1c30:	6b 83       	std	Y+3, r22	; 0x03
    1c32:	4c 83       	std	Y+4, r20	; 0x04
    EN_ERRORSTATE_t state;
    state = E_OK;
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Value == LOW)
    1c38:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3a:	88 23       	and	r24, r24
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <DIO_voidSetPinValue+0x26>
    1c3e:	76 c0       	rjmp	.+236    	; 0x1d2c <DIO_voidSetPinValue+0x112>
    {
        switch (EN_Port)
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	38 87       	std	Y+8, r19	; 0x08
    1c48:	2f 83       	std	Y+7, r18	; 0x07
    1c4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c4c:	98 85       	ldd	r25, Y+8	; 0x08
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	91 05       	cpc	r25, r1
    1c52:	59 f1       	breq	.+86     	; 0x1caa <DIO_voidSetPinValue+0x90>
    1c54:	2f 81       	ldd	r18, Y+7	; 0x07
    1c56:	38 85       	ldd	r19, Y+8	; 0x08
    1c58:	22 30       	cpi	r18, 0x02	; 2
    1c5a:	31 05       	cpc	r19, r1
    1c5c:	2c f4       	brge	.+10     	; 0x1c68 <DIO_voidSetPinValue+0x4e>
    1c5e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c60:	98 85       	ldd	r25, Y+8	; 0x08
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	69 f0       	breq	.+26     	; 0x1c80 <DIO_voidSetPinValue+0x66>
    1c66:	60 c0       	rjmp	.+192    	; 0x1d28 <DIO_voidSetPinValue+0x10e>
    1c68:	2f 81       	ldd	r18, Y+7	; 0x07
    1c6a:	38 85       	ldd	r19, Y+8	; 0x08
    1c6c:	22 30       	cpi	r18, 0x02	; 2
    1c6e:	31 05       	cpc	r19, r1
    1c70:	89 f1       	breq	.+98     	; 0x1cd4 <DIO_voidSetPinValue+0xba>
    1c72:	8f 81       	ldd	r24, Y+7	; 0x07
    1c74:	98 85       	ldd	r25, Y+8	; 0x08
    1c76:	83 30       	cpi	r24, 0x03	; 3
    1c78:	91 05       	cpc	r25, r1
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <DIO_voidSetPinValue+0x64>
    1c7c:	40 c0       	rjmp	.+128    	; 0x1cfe <DIO_voidSetPinValue+0xe4>
    1c7e:	54 c0       	rjmp	.+168    	; 0x1d28 <DIO_voidSetPinValue+0x10e>
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
    1c80:	ab e3       	ldi	r26, 0x3B	; 59
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	eb e3       	ldi	r30, 0x3B	; 59
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	48 2f       	mov	r20, r24
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	28 2f       	mov	r18, r24
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	81 e0       	ldi	r24, 0x01	; 1
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	02 2e       	mov	r0, r18
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <DIO_voidSetPinValue+0x84>
    1c9a:	88 0f       	add	r24, r24
    1c9c:	99 1f       	adc	r25, r25
    1c9e:	0a 94       	dec	r0
    1ca0:	e2 f7       	brpl	.-8      	; 0x1c9a <DIO_voidSetPinValue+0x80>
    1ca2:	80 95       	com	r24
    1ca4:	84 23       	and	r24, r20
    1ca6:	8c 93       	st	X, r24
    1ca8:	b5 c0       	rjmp	.+362    	; 0x1e14 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
    1caa:	a8 e3       	ldi	r26, 0x38	; 56
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e8 e3       	ldi	r30, 0x38	; 56
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 2e       	mov	r0, r18
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <DIO_voidSetPinValue+0xae>
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	0a 94       	dec	r0
    1cca:	e2 f7       	brpl	.-8      	; 0x1cc4 <DIO_voidSetPinValue+0xaa>
    1ccc:	80 95       	com	r24
    1cce:	84 23       	and	r24, r20
    1cd0:	8c 93       	st	X, r24
    1cd2:	a0 c0       	rjmp	.+320    	; 0x1e14 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
    1cd4:	a5 e3       	ldi	r26, 0x35	; 53
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e5 e3       	ldi	r30, 0x35	; 53
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	48 2f       	mov	r20, r24
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	02 2e       	mov	r0, r18
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <DIO_voidSetPinValue+0xd8>
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	0a 94       	dec	r0
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <DIO_voidSetPinValue+0xd4>
    1cf6:	80 95       	com	r24
    1cf8:	84 23       	and	r24, r20
    1cfa:	8c 93       	st	X, r24
    1cfc:	8b c0       	rjmp	.+278    	; 0x1e14 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
    1cfe:	a2 e3       	ldi	r26, 0x32	; 50
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e2 e3       	ldi	r30, 0x32	; 50
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	48 2f       	mov	r20, r24
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 2e       	mov	r0, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <DIO_voidSetPinValue+0x102>
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	0a 94       	dec	r0
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <DIO_voidSetPinValue+0xfe>
    1d20:	80 95       	com	r24
    1d22:	84 23       	and	r24, r20
    1d24:	8c 93       	st	X, r24
    1d26:	76 c0       	rjmp	.+236    	; 0x1e14 <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_ERROR;
    1d28:	19 82       	std	Y+1, r1	; 0x01
    1d2a:	74 c0       	rjmp	.+232    	; 0x1e14 <DIO_voidSetPinValue+0x1fa>
            break;
        }
    }
    else if (EN_Value == HIGH)
    1d2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <DIO_voidSetPinValue+0x11a>
    1d32:	70 c0       	rjmp	.+224    	; 0x1e14 <DIO_voidSetPinValue+0x1fa>
    {
        switch (EN_Port)
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	3e 83       	std	Y+6, r19	; 0x06
    1d3c:	2d 83       	std	Y+5, r18	; 0x05
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	91 05       	cpc	r25, r1
    1d46:	49 f1       	breq	.+82     	; 0x1d9a <DIO_voidSetPinValue+0x180>
    1d48:	2d 81       	ldd	r18, Y+5	; 0x05
    1d4a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d4c:	22 30       	cpi	r18, 0x02	; 2
    1d4e:	31 05       	cpc	r19, r1
    1d50:	2c f4       	brge	.+10     	; 0x1d5c <DIO_voidSetPinValue+0x142>
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	61 f0       	breq	.+24     	; 0x1d72 <DIO_voidSetPinValue+0x158>
    1d5a:	5b c0       	rjmp	.+182    	; 0x1e12 <DIO_voidSetPinValue+0x1f8>
    1d5c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d5e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d60:	22 30       	cpi	r18, 0x02	; 2
    1d62:	31 05       	cpc	r19, r1
    1d64:	71 f1       	breq	.+92     	; 0x1dc2 <DIO_voidSetPinValue+0x1a8>
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	83 30       	cpi	r24, 0x03	; 3
    1d6c:	91 05       	cpc	r25, r1
    1d6e:	e9 f1       	breq	.+122    	; 0x1dea <DIO_voidSetPinValue+0x1d0>
    1d70:	50 c0       	rjmp	.+160    	; 0x1e12 <DIO_voidSetPinValue+0x1f8>
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
    1d72:	ab e3       	ldi	r26, 0x3B	; 59
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	eb e3       	ldi	r30, 0x3B	; 59
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	48 2f       	mov	r20, r24
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	02 2e       	mov	r0, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <DIO_voidSetPinValue+0x176>
    1d8c:	88 0f       	add	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	0a 94       	dec	r0
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <DIO_voidSetPinValue+0x172>
    1d94:	84 2b       	or	r24, r20
    1d96:	8c 93       	st	X, r24
    1d98:	3d c0       	rjmp	.+122    	; 0x1e14 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
    1d9a:	a8 e3       	ldi	r26, 0x38	; 56
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	e8 e3       	ldi	r30, 0x38	; 56
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	48 2f       	mov	r20, r24
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	02 2e       	mov	r0, r18
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <DIO_voidSetPinValue+0x19e>
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	0a 94       	dec	r0
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <DIO_voidSetPinValue+0x19a>
    1dbc:	84 2b       	or	r24, r20
    1dbe:	8c 93       	st	X, r24
    1dc0:	29 c0       	rjmp	.+82     	; 0x1e14 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
    1dc2:	a5 e3       	ldi	r26, 0x35	; 53
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e5 e3       	ldi	r30, 0x35	; 53
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	48 2f       	mov	r20, r24
    1dce:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	02 2e       	mov	r0, r18
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <DIO_voidSetPinValue+0x1c6>
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	0a 94       	dec	r0
    1de2:	e2 f7       	brpl	.-8      	; 0x1ddc <DIO_voidSetPinValue+0x1c2>
    1de4:	84 2b       	or	r24, r20
    1de6:	8c 93       	st	X, r24
    1de8:	15 c0       	rjmp	.+42     	; 0x1e14 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
    1dea:	a2 e3       	ldi	r26, 0x32	; 50
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e2 e3       	ldi	r30, 0x32	; 50
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	48 2f       	mov	r20, r24
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	28 2f       	mov	r18, r24
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	02 2e       	mov	r0, r18
    1e02:	02 c0       	rjmp	.+4      	; 0x1e08 <DIO_voidSetPinValue+0x1ee>
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	0a 94       	dec	r0
    1e0a:	e2 f7       	brpl	.-8      	; 0x1e04 <DIO_voidSetPinValue+0x1ea>
    1e0c:	84 2b       	or	r24, r20
    1e0e:	8c 93       	st	X, r24
    1e10:	01 c0       	rjmp	.+2      	; 0x1e14 <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_ERROR;
    1e12:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinValue */
    1e16:	28 96       	adiw	r28, 0x08	; 8
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <DIO_voidSetPinDirection>:
 * @param EN_Pin  PIN Number
 * @param EN_Direction Direction of the Pin INPUT | OUTPUT
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	28 97       	sbiw	r28, 0x08	; 8
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	8a 83       	std	Y+2, r24	; 0x02
    1e3e:	6b 83       	std	Y+3, r22	; 0x03
    1e40:	4c 83       	std	Y+4, r20	; 0x04
    EN_ERRORSTATE_t state;
    state = E_OK;
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Direction == INPUT)
    1e46:	8c 81       	ldd	r24, Y+4	; 0x04
    1e48:	88 23       	and	r24, r24
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <DIO_voidSetPinDirection+0x26>
    1e4c:	76 c0       	rjmp	.+236    	; 0x1f3a <DIO_voidSetPinDirection+0x112>
    {
        switch (EN_port)
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	38 87       	std	Y+8, r19	; 0x08
    1e56:	2f 83       	std	Y+7, r18	; 0x07
    1e58:	8f 81       	ldd	r24, Y+7	; 0x07
    1e5a:	98 85       	ldd	r25, Y+8	; 0x08
    1e5c:	81 30       	cpi	r24, 0x01	; 1
    1e5e:	91 05       	cpc	r25, r1
    1e60:	59 f1       	breq	.+86     	; 0x1eb8 <DIO_voidSetPinDirection+0x90>
    1e62:	2f 81       	ldd	r18, Y+7	; 0x07
    1e64:	38 85       	ldd	r19, Y+8	; 0x08
    1e66:	22 30       	cpi	r18, 0x02	; 2
    1e68:	31 05       	cpc	r19, r1
    1e6a:	2c f4       	brge	.+10     	; 0x1e76 <DIO_voidSetPinDirection+0x4e>
    1e6c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e6e:	98 85       	ldd	r25, Y+8	; 0x08
    1e70:	00 97       	sbiw	r24, 0x00	; 0
    1e72:	69 f0       	breq	.+26     	; 0x1e8e <DIO_voidSetPinDirection+0x66>
    1e74:	60 c0       	rjmp	.+192    	; 0x1f36 <DIO_voidSetPinDirection+0x10e>
    1e76:	2f 81       	ldd	r18, Y+7	; 0x07
    1e78:	38 85       	ldd	r19, Y+8	; 0x08
    1e7a:	22 30       	cpi	r18, 0x02	; 2
    1e7c:	31 05       	cpc	r19, r1
    1e7e:	89 f1       	breq	.+98     	; 0x1ee2 <DIO_voidSetPinDirection+0xba>
    1e80:	8f 81       	ldd	r24, Y+7	; 0x07
    1e82:	98 85       	ldd	r25, Y+8	; 0x08
    1e84:	83 30       	cpi	r24, 0x03	; 3
    1e86:	91 05       	cpc	r25, r1
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <DIO_voidSetPinDirection+0x64>
    1e8a:	40 c0       	rjmp	.+128    	; 0x1f0c <DIO_voidSetPinDirection+0xe4>
    1e8c:	54 c0       	rjmp	.+168    	; 0x1f36 <DIO_voidSetPinDirection+0x10e>
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
    1e8e:	aa e3       	ldi	r26, 0x3A	; 58
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	ea e3       	ldi	r30, 0x3A	; 58
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	48 2f       	mov	r20, r24
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	28 2f       	mov	r18, r24
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	02 2e       	mov	r0, r18
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <DIO_voidSetPinDirection+0x84>
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	0a 94       	dec	r0
    1eae:	e2 f7       	brpl	.-8      	; 0x1ea8 <DIO_voidSetPinDirection+0x80>
    1eb0:	80 95       	com	r24
    1eb2:	84 23       	and	r24, r20
    1eb4:	8c 93       	st	X, r24
    1eb6:	b5 c0       	rjmp	.+362    	; 0x2022 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
    1eb8:	a7 e3       	ldi	r26, 0x37	; 55
    1eba:	b0 e0       	ldi	r27, 0x00	; 0
    1ebc:	e7 e3       	ldi	r30, 0x37	; 55
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	80 81       	ld	r24, Z
    1ec2:	48 2f       	mov	r20, r24
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	02 2e       	mov	r0, r18
    1ed0:	02 c0       	rjmp	.+4      	; 0x1ed6 <DIO_voidSetPinDirection+0xae>
    1ed2:	88 0f       	add	r24, r24
    1ed4:	99 1f       	adc	r25, r25
    1ed6:	0a 94       	dec	r0
    1ed8:	e2 f7       	brpl	.-8      	; 0x1ed2 <DIO_voidSetPinDirection+0xaa>
    1eda:	80 95       	com	r24
    1edc:	84 23       	and	r24, r20
    1ede:	8c 93       	st	X, r24
    1ee0:	a0 c0       	rjmp	.+320    	; 0x2022 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
    1ee2:	a4 e3       	ldi	r26, 0x34	; 52
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e4 e3       	ldi	r30, 0x34	; 52
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	48 2f       	mov	r20, r24
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	28 2f       	mov	r18, r24
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	02 2e       	mov	r0, r18
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <DIO_voidSetPinDirection+0xd8>
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	0a 94       	dec	r0
    1f02:	e2 f7       	brpl	.-8      	; 0x1efc <DIO_voidSetPinDirection+0xd4>
    1f04:	80 95       	com	r24
    1f06:	84 23       	and	r24, r20
    1f08:	8c 93       	st	X, r24
    1f0a:	8b c0       	rjmp	.+278    	; 0x2022 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
    1f0c:	a1 e3       	ldi	r26, 0x31	; 49
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e1 e3       	ldi	r30, 0x31	; 49
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	48 2f       	mov	r20, r24
    1f18:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	02 2e       	mov	r0, r18
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <DIO_voidSetPinDirection+0x102>
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	0a 94       	dec	r0
    1f2c:	e2 f7       	brpl	.-8      	; 0x1f26 <DIO_voidSetPinDirection+0xfe>
    1f2e:	80 95       	com	r24
    1f30:	84 23       	and	r24, r20
    1f32:	8c 93       	st	X, r24
    1f34:	76 c0       	rjmp	.+236    	; 0x2022 <DIO_voidSetPinDirection+0x1fa>
            break;
        default:
            state = E_ERROR;
    1f36:	19 82       	std	Y+1, r1	; 0x01
    1f38:	74 c0       	rjmp	.+232    	; 0x2022 <DIO_voidSetPinDirection+0x1fa>
            break;
        }
    }
    else if (EN_Direction == OUTPUT)
    1f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3c:	81 30       	cpi	r24, 0x01	; 1
    1f3e:	09 f0       	breq	.+2      	; 0x1f42 <DIO_voidSetPinDirection+0x11a>
    1f40:	70 c0       	rjmp	.+224    	; 0x2022 <DIO_voidSetPinDirection+0x1fa>
    {
        switch (EN_port)
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	28 2f       	mov	r18, r24
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	3e 83       	std	Y+6, r19	; 0x06
    1f4a:	2d 83       	std	Y+5, r18	; 0x05
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	81 30       	cpi	r24, 0x01	; 1
    1f52:	91 05       	cpc	r25, r1
    1f54:	49 f1       	breq	.+82     	; 0x1fa8 <DIO_voidSetPinDirection+0x180>
    1f56:	2d 81       	ldd	r18, Y+5	; 0x05
    1f58:	3e 81       	ldd	r19, Y+6	; 0x06
    1f5a:	22 30       	cpi	r18, 0x02	; 2
    1f5c:	31 05       	cpc	r19, r1
    1f5e:	2c f4       	brge	.+10     	; 0x1f6a <DIO_voidSetPinDirection+0x142>
    1f60:	8d 81       	ldd	r24, Y+5	; 0x05
    1f62:	9e 81       	ldd	r25, Y+6	; 0x06
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	61 f0       	breq	.+24     	; 0x1f80 <DIO_voidSetPinDirection+0x158>
    1f68:	5b c0       	rjmp	.+182    	; 0x2020 <DIO_voidSetPinDirection+0x1f8>
    1f6a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f6c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f6e:	22 30       	cpi	r18, 0x02	; 2
    1f70:	31 05       	cpc	r19, r1
    1f72:	71 f1       	breq	.+92     	; 0x1fd0 <DIO_voidSetPinDirection+0x1a8>
    1f74:	8d 81       	ldd	r24, Y+5	; 0x05
    1f76:	9e 81       	ldd	r25, Y+6	; 0x06
    1f78:	83 30       	cpi	r24, 0x03	; 3
    1f7a:	91 05       	cpc	r25, r1
    1f7c:	e9 f1       	breq	.+122    	; 0x1ff8 <DIO_voidSetPinDirection+0x1d0>
    1f7e:	50 c0       	rjmp	.+160    	; 0x2020 <DIO_voidSetPinDirection+0x1f8>
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
    1f80:	aa e3       	ldi	r26, 0x3A	; 58
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	ea e3       	ldi	r30, 0x3A	; 58
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	48 2f       	mov	r20, r24
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	28 2f       	mov	r18, r24
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	02 2e       	mov	r0, r18
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <DIO_voidSetPinDirection+0x176>
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	0a 94       	dec	r0
    1fa0:	e2 f7       	brpl	.-8      	; 0x1f9a <DIO_voidSetPinDirection+0x172>
    1fa2:	84 2b       	or	r24, r20
    1fa4:	8c 93       	st	X, r24
    1fa6:	3d c0       	rjmp	.+122    	; 0x2022 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
    1fa8:	a7 e3       	ldi	r26, 0x37	; 55
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	e7 e3       	ldi	r30, 0x37	; 55
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	48 2f       	mov	r20, r24
    1fb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	02 2e       	mov	r0, r18
    1fc0:	02 c0       	rjmp	.+4      	; 0x1fc6 <DIO_voidSetPinDirection+0x19e>
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	0a 94       	dec	r0
    1fc8:	e2 f7       	brpl	.-8      	; 0x1fc2 <DIO_voidSetPinDirection+0x19a>
    1fca:	84 2b       	or	r24, r20
    1fcc:	8c 93       	st	X, r24
    1fce:	29 c0       	rjmp	.+82     	; 0x2022 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
    1fd0:	a4 e3       	ldi	r26, 0x34	; 52
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e4 e3       	ldi	r30, 0x34	; 52
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	48 2f       	mov	r20, r24
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	02 2e       	mov	r0, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <DIO_voidSetPinDirection+0x1c6>
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	0a 94       	dec	r0
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <DIO_voidSetPinDirection+0x1c2>
    1ff2:	84 2b       	or	r24, r20
    1ff4:	8c 93       	st	X, r24
    1ff6:	15 c0       	rjmp	.+42     	; 0x2022 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
    1ff8:	a1 e3       	ldi	r26, 0x31	; 49
    1ffa:	b0 e0       	ldi	r27, 0x00	; 0
    1ffc:	e1 e3       	ldi	r30, 0x31	; 49
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	80 81       	ld	r24, Z
    2002:	48 2f       	mov	r20, r24
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	28 2f       	mov	r18, r24
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	02 2e       	mov	r0, r18
    2010:	02 c0       	rjmp	.+4      	; 0x2016 <DIO_voidSetPinDirection+0x1ee>
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	0a 94       	dec	r0
    2018:	e2 f7       	brpl	.-8      	; 0x2012 <DIO_voidSetPinDirection+0x1ea>
    201a:	84 2b       	or	r24, r20
    201c:	8c 93       	st	X, r24
    201e:	01 c0       	rjmp	.+2      	; 0x2022 <DIO_voidSetPinDirection+0x1fa>
            break;
        default:
            state = E_ERROR;
    2020:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
    2022:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinDirection */
    2024:	28 96       	adiw	r28, 0x08	; 8
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <DIO_u8GetPinValue>:
 * @param EN_Port           PORT Name
 * @param EN_Pin            PIN Number
 * @return EN_value_type    return Pin HIGH | LOW
 */
EN_value_type DIO_u8GetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	00 d0       	rcall	.+0      	; 0x203c <DIO_u8GetPinValue+0x6>
    203c:	00 d0       	rcall	.+0      	; 0x203e <DIO_u8GetPinValue+0x8>
    203e:	0f 92       	push	r0
    2040:	cd b7       	in	r28, 0x3d	; 61
    2042:	de b7       	in	r29, 0x3e	; 62
    2044:	8a 83       	std	Y+2, r24	; 0x02
    2046:	6b 83       	std	Y+3, r22	; 0x03
    EN_value_type EN_ret_val;
    switch (EN_Port)
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	3d 83       	std	Y+5, r19	; 0x05
    2050:	2c 83       	std	Y+4, r18	; 0x04
    2052:	4c 81       	ldd	r20, Y+4	; 0x04
    2054:	5d 81       	ldd	r21, Y+5	; 0x05
    2056:	41 30       	cpi	r20, 0x01	; 1
    2058:	51 05       	cpc	r21, r1
    205a:	41 f1       	breq	.+80     	; 0x20ac <DIO_u8GetPinValue+0x76>
    205c:	8c 81       	ldd	r24, Y+4	; 0x04
    205e:	9d 81       	ldd	r25, Y+5	; 0x05
    2060:	82 30       	cpi	r24, 0x02	; 2
    2062:	91 05       	cpc	r25, r1
    2064:	34 f4       	brge	.+12     	; 0x2072 <DIO_u8GetPinValue+0x3c>
    2066:	2c 81       	ldd	r18, Y+4	; 0x04
    2068:	3d 81       	ldd	r19, Y+5	; 0x05
    206a:	21 15       	cp	r18, r1
    206c:	31 05       	cpc	r19, r1
    206e:	61 f0       	breq	.+24     	; 0x2088 <DIO_u8GetPinValue+0x52>
    2070:	52 c0       	rjmp	.+164    	; 0x2116 <DIO_u8GetPinValue+0xe0>
    2072:	4c 81       	ldd	r20, Y+4	; 0x04
    2074:	5d 81       	ldd	r21, Y+5	; 0x05
    2076:	42 30       	cpi	r20, 0x02	; 2
    2078:	51 05       	cpc	r21, r1
    207a:	51 f1       	breq	.+84     	; 0x20d0 <DIO_u8GetPinValue+0x9a>
    207c:	8c 81       	ldd	r24, Y+4	; 0x04
    207e:	9d 81       	ldd	r25, Y+5	; 0x05
    2080:	83 30       	cpi	r24, 0x03	; 3
    2082:	91 05       	cpc	r25, r1
    2084:	b9 f1       	breq	.+110    	; 0x20f4 <DIO_u8GetPinValue+0xbe>
    2086:	47 c0       	rjmp	.+142    	; 0x2116 <DIO_u8GetPinValue+0xe0>
    {
    case PORT_A:
        EN_ret_val = GETBIT(PINA, EN_Pin);
    2088:	e9 e3       	ldi	r30, 0x39	; 57
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	8b 81       	ldd	r24, Y+3	; 0x03
    2094:	88 2f       	mov	r24, r24
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a9 01       	movw	r20, r18
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <DIO_u8GetPinValue+0x6a>
    209c:	55 95       	asr	r21
    209e:	47 95       	ror	r20
    20a0:	8a 95       	dec	r24
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <DIO_u8GetPinValue+0x66>
    20a4:	ca 01       	movw	r24, r20
    20a6:	81 70       	andi	r24, 0x01	; 1
    20a8:	89 83       	std	Y+1, r24	; 0x01
    20aa:	35 c0       	rjmp	.+106    	; 0x2116 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_B:
        EN_ret_val = GETBIT(PINB, EN_Pin);
    20ac:	e6 e3       	ldi	r30, 0x36	; 54
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	28 2f       	mov	r18, r24
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	88 2f       	mov	r24, r24
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a9 01       	movw	r20, r18
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <DIO_u8GetPinValue+0x8e>
    20c0:	55 95       	asr	r21
    20c2:	47 95       	ror	r20
    20c4:	8a 95       	dec	r24
    20c6:	e2 f7       	brpl	.-8      	; 0x20c0 <DIO_u8GetPinValue+0x8a>
    20c8:	ca 01       	movw	r24, r20
    20ca:	81 70       	andi	r24, 0x01	; 1
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	23 c0       	rjmp	.+70     	; 0x2116 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_C:
        EN_ret_val = GETBIT(PINC, EN_Pin);
    20d0:	e3 e3       	ldi	r30, 0x33	; 51
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	28 2f       	mov	r18, r24
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	88 2f       	mov	r24, r24
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	a9 01       	movw	r20, r18
    20e2:	02 c0       	rjmp	.+4      	; 0x20e8 <DIO_u8GetPinValue+0xb2>
    20e4:	55 95       	asr	r21
    20e6:	47 95       	ror	r20
    20e8:	8a 95       	dec	r24
    20ea:	e2 f7       	brpl	.-8      	; 0x20e4 <DIO_u8GetPinValue+0xae>
    20ec:	ca 01       	movw	r24, r20
    20ee:	81 70       	andi	r24, 0x01	; 1
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	11 c0       	rjmp	.+34     	; 0x2116 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_D:
        EN_ret_val = GETBIT(PIND, EN_Pin);
    20f4:	e0 e3       	ldi	r30, 0x30	; 48
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	28 2f       	mov	r18, r24
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2100:	88 2f       	mov	r24, r24
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	a9 01       	movw	r20, r18
    2106:	02 c0       	rjmp	.+4      	; 0x210c <DIO_u8GetPinValue+0xd6>
    2108:	55 95       	asr	r21
    210a:	47 95       	ror	r20
    210c:	8a 95       	dec	r24
    210e:	e2 f7       	brpl	.-8      	; 0x2108 <DIO_u8GetPinValue+0xd2>
    2110:	ca 01       	movw	r24, r20
    2112:	81 70       	andi	r24, 0x01	; 1
    2114:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return EN_ret_val;
    2116:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_u8GetPinValue */
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <DIO_voidTogPin>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidTogPin(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	00 d0       	rcall	.+0      	; 0x212e <DIO_voidTogPin+0x6>
    212e:	00 d0       	rcall	.+0      	; 0x2130 <DIO_voidTogPin+0x8>
    2130:	0f 92       	push	r0
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	8a 83       	std	Y+2, r24	; 0x02
    2138:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	3d 83       	std	Y+5, r19	; 0x05
    2146:	2c 83       	std	Y+4, r18	; 0x04
    2148:	8c 81       	ldd	r24, Y+4	; 0x04
    214a:	9d 81       	ldd	r25, Y+5	; 0x05
    214c:	81 30       	cpi	r24, 0x01	; 1
    214e:	91 05       	cpc	r25, r1
    2150:	49 f1       	breq	.+82     	; 0x21a4 <DIO_voidTogPin+0x7c>
    2152:	2c 81       	ldd	r18, Y+4	; 0x04
    2154:	3d 81       	ldd	r19, Y+5	; 0x05
    2156:	22 30       	cpi	r18, 0x02	; 2
    2158:	31 05       	cpc	r19, r1
    215a:	2c f4       	brge	.+10     	; 0x2166 <DIO_voidTogPin+0x3e>
    215c:	8c 81       	ldd	r24, Y+4	; 0x04
    215e:	9d 81       	ldd	r25, Y+5	; 0x05
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	61 f0       	breq	.+24     	; 0x217c <DIO_voidTogPin+0x54>
    2164:	5b c0       	rjmp	.+182    	; 0x221c <DIO_voidTogPin+0xf4>
    2166:	2c 81       	ldd	r18, Y+4	; 0x04
    2168:	3d 81       	ldd	r19, Y+5	; 0x05
    216a:	22 30       	cpi	r18, 0x02	; 2
    216c:	31 05       	cpc	r19, r1
    216e:	71 f1       	breq	.+92     	; 0x21cc <DIO_voidTogPin+0xa4>
    2170:	8c 81       	ldd	r24, Y+4	; 0x04
    2172:	9d 81       	ldd	r25, Y+5	; 0x05
    2174:	83 30       	cpi	r24, 0x03	; 3
    2176:	91 05       	cpc	r25, r1
    2178:	e9 f1       	breq	.+122    	; 0x21f4 <DIO_voidTogPin+0xcc>
    217a:	50 c0       	rjmp	.+160    	; 0x221c <DIO_voidTogPin+0xf4>
    {
    case PORT_A:
        TGLBIT(PORTA, EN_Pin);
    217c:	ab e3       	ldi	r26, 0x3B	; 59
    217e:	b0 e0       	ldi	r27, 0x00	; 0
    2180:	eb e3       	ldi	r30, 0x3B	; 59
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	48 2f       	mov	r20, r24
    2188:	8b 81       	ldd	r24, Y+3	; 0x03
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	02 2e       	mov	r0, r18
    2194:	02 c0       	rjmp	.+4      	; 0x219a <DIO_voidTogPin+0x72>
    2196:	88 0f       	add	r24, r24
    2198:	99 1f       	adc	r25, r25
    219a:	0a 94       	dec	r0
    219c:	e2 f7       	brpl	.-8      	; 0x2196 <DIO_voidTogPin+0x6e>
    219e:	84 27       	eor	r24, r20
    21a0:	8c 93       	st	X, r24
    21a2:	3d c0       	rjmp	.+122    	; 0x221e <DIO_voidTogPin+0xf6>
        break;
    case PORT_B:
        TGLBIT(PORTB, EN_Pin);
    21a4:	a8 e3       	ldi	r26, 0x38	; 56
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e8 e3       	ldi	r30, 0x38	; 56
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	48 2f       	mov	r20, r24
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	28 2f       	mov	r18, r24
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	02 2e       	mov	r0, r18
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <DIO_voidTogPin+0x9a>
    21be:	88 0f       	add	r24, r24
    21c0:	99 1f       	adc	r25, r25
    21c2:	0a 94       	dec	r0
    21c4:	e2 f7       	brpl	.-8      	; 0x21be <DIO_voidTogPin+0x96>
    21c6:	84 27       	eor	r24, r20
    21c8:	8c 93       	st	X, r24
    21ca:	29 c0       	rjmp	.+82     	; 0x221e <DIO_voidTogPin+0xf6>
        break;
    case PORT_C:
        TGLBIT(PORTC, EN_Pin);
    21cc:	a5 e3       	ldi	r26, 0x35	; 53
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e5 e3       	ldi	r30, 0x35	; 53
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	48 2f       	mov	r20, r24
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	81 e0       	ldi	r24, 0x01	; 1
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	02 2e       	mov	r0, r18
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <DIO_voidTogPin+0xc2>
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	0a 94       	dec	r0
    21ec:	e2 f7       	brpl	.-8      	; 0x21e6 <DIO_voidTogPin+0xbe>
    21ee:	84 27       	eor	r24, r20
    21f0:	8c 93       	st	X, r24
    21f2:	15 c0       	rjmp	.+42     	; 0x221e <DIO_voidTogPin+0xf6>
        break;
    case PORT_D:
        TGLBIT(PORTD, EN_Pin);
    21f4:	a2 e3       	ldi	r26, 0x32	; 50
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e2 e3       	ldi	r30, 0x32	; 50
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	48 2f       	mov	r20, r24
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	28 2f       	mov	r18, r24
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	02 2e       	mov	r0, r18
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <DIO_voidTogPin+0xea>
    220e:	88 0f       	add	r24, r24
    2210:	99 1f       	adc	r25, r25
    2212:	0a 94       	dec	r0
    2214:	e2 f7       	brpl	.-8      	; 0x220e <DIO_voidTogPin+0xe6>
    2216:	84 27       	eor	r24, r20
    2218:	8c 93       	st	X, r24
    221a:	01 c0       	rjmp	.+2      	; 0x221e <DIO_voidTogPin+0xf6>
        break;
    default:
        state = E_ERROR;
    221c:	19 82       	std	Y+1, r1	; 0x01
        break;
    }

    return state;
    221e:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidTogPin */
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <DIO_voidSetPortValue>:
 * @param EN_Port PORT Name
 * @param EN_Value HIGH | LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPortValue(EN_port_num EN_Port, EN_value_type EN_Value)
{
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	00 d0       	rcall	.+0      	; 0x2236 <DIO_voidSetPortValue+0x6>
    2236:	00 d0       	rcall	.+0      	; 0x2238 <DIO_voidSetPortValue+0x8>
    2238:	0f 92       	push	r0
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	8a 83       	std	Y+2, r24	; 0x02
    2240:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	3d 83       	std	Y+5, r19	; 0x05
    224e:	2c 83       	std	Y+4, r18	; 0x04
    2250:	8c 81       	ldd	r24, Y+4	; 0x04
    2252:	9d 81       	ldd	r25, Y+5	; 0x05
    2254:	81 30       	cpi	r24, 0x01	; 1
    2256:	91 05       	cpc	r25, r1
    2258:	d1 f0       	breq	.+52     	; 0x228e <DIO_voidSetPortValue+0x5e>
    225a:	2c 81       	ldd	r18, Y+4	; 0x04
    225c:	3d 81       	ldd	r19, Y+5	; 0x05
    225e:	22 30       	cpi	r18, 0x02	; 2
    2260:	31 05       	cpc	r19, r1
    2262:	2c f4       	brge	.+10     	; 0x226e <DIO_voidSetPortValue+0x3e>
    2264:	8c 81       	ldd	r24, Y+4	; 0x04
    2266:	9d 81       	ldd	r25, Y+5	; 0x05
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	61 f0       	breq	.+24     	; 0x2284 <DIO_voidSetPortValue+0x54>
    226c:	1f c0       	rjmp	.+62     	; 0x22ac <DIO_voidSetPortValue+0x7c>
    226e:	2c 81       	ldd	r18, Y+4	; 0x04
    2270:	3d 81       	ldd	r19, Y+5	; 0x05
    2272:	22 30       	cpi	r18, 0x02	; 2
    2274:	31 05       	cpc	r19, r1
    2276:	81 f0       	breq	.+32     	; 0x2298 <DIO_voidSetPortValue+0x68>
    2278:	8c 81       	ldd	r24, Y+4	; 0x04
    227a:	9d 81       	ldd	r25, Y+5	; 0x05
    227c:	83 30       	cpi	r24, 0x03	; 3
    227e:	91 05       	cpc	r25, r1
    2280:	81 f0       	breq	.+32     	; 0x22a2 <DIO_voidSetPortValue+0x72>
    2282:	14 c0       	rjmp	.+40     	; 0x22ac <DIO_voidSetPortValue+0x7c>
    {
    case PORT_A:
        PORTA = EN_Value;
    2284:	eb e3       	ldi	r30, 0x3B	; 59
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	80 83       	st	Z, r24
    228c:	10 c0       	rjmp	.+32     	; 0x22ae <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_B:
        PORTB = EN_Value;
    228e:	e8 e3       	ldi	r30, 0x38	; 56
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	80 83       	st	Z, r24
    2296:	0b c0       	rjmp	.+22     	; 0x22ae <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_C:
        PORTC = EN_Value;
    2298:	e5 e3       	ldi	r30, 0x35	; 53
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	80 83       	st	Z, r24
    22a0:	06 c0       	rjmp	.+12     	; 0x22ae <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_D:
        PORTD = EN_Value;
    22a2:	e2 e3       	ldi	r30, 0x32	; 50
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	80 83       	st	Z, r24
    22aa:	01 c0       	rjmp	.+2      	; 0x22ae <DIO_voidSetPortValue+0x7e>
        break;
    default:
        state = E_ERROR;
    22ac:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPortValue */
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	cf 91       	pop	r28
    22bc:	df 91       	pop	r29
    22be:	08 95       	ret

000022c0 <DIO_voidSetPortDirection>:
 * @param EN_Port PORT Name
 * @param EN_Direction PORT Direction
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPortDirection(EN_port_num EN_Port, EN_direction_type EN_Direction)
{
    22c0:	df 93       	push	r29
    22c2:	cf 93       	push	r28
    22c4:	00 d0       	rcall	.+0      	; 0x22c6 <DIO_voidSetPortDirection+0x6>
    22c6:	00 d0       	rcall	.+0      	; 0x22c8 <DIO_voidSetPortDirection+0x8>
    22c8:	0f 92       	push	r0
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	8a 83       	std	Y+2, r24	; 0x02
    22d0:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	3d 83       	std	Y+5, r19	; 0x05
    22de:	2c 83       	std	Y+4, r18	; 0x04
    22e0:	8c 81       	ldd	r24, Y+4	; 0x04
    22e2:	9d 81       	ldd	r25, Y+5	; 0x05
    22e4:	81 30       	cpi	r24, 0x01	; 1
    22e6:	91 05       	cpc	r25, r1
    22e8:	d1 f0       	breq	.+52     	; 0x231e <DIO_voidSetPortDirection+0x5e>
    22ea:	2c 81       	ldd	r18, Y+4	; 0x04
    22ec:	3d 81       	ldd	r19, Y+5	; 0x05
    22ee:	22 30       	cpi	r18, 0x02	; 2
    22f0:	31 05       	cpc	r19, r1
    22f2:	2c f4       	brge	.+10     	; 0x22fe <DIO_voidSetPortDirection+0x3e>
    22f4:	8c 81       	ldd	r24, Y+4	; 0x04
    22f6:	9d 81       	ldd	r25, Y+5	; 0x05
    22f8:	00 97       	sbiw	r24, 0x00	; 0
    22fa:	61 f0       	breq	.+24     	; 0x2314 <DIO_voidSetPortDirection+0x54>
    22fc:	1f c0       	rjmp	.+62     	; 0x233c <DIO_voidSetPortDirection+0x7c>
    22fe:	2c 81       	ldd	r18, Y+4	; 0x04
    2300:	3d 81       	ldd	r19, Y+5	; 0x05
    2302:	22 30       	cpi	r18, 0x02	; 2
    2304:	31 05       	cpc	r19, r1
    2306:	81 f0       	breq	.+32     	; 0x2328 <DIO_voidSetPortDirection+0x68>
    2308:	8c 81       	ldd	r24, Y+4	; 0x04
    230a:	9d 81       	ldd	r25, Y+5	; 0x05
    230c:	83 30       	cpi	r24, 0x03	; 3
    230e:	91 05       	cpc	r25, r1
    2310:	81 f0       	breq	.+32     	; 0x2332 <DIO_voidSetPortDirection+0x72>
    2312:	14 c0       	rjmp	.+40     	; 0x233c <DIO_voidSetPortDirection+0x7c>
    {
    case PORT_A:
        DDRA = EN_Direction;
    2314:	ea e3       	ldi	r30, 0x3A	; 58
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	80 83       	st	Z, r24
    231c:	10 c0       	rjmp	.+32     	; 0x233e <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_B:
        DDRB = EN_Direction;
    231e:	e7 e3       	ldi	r30, 0x37	; 55
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	80 83       	st	Z, r24
    2326:	0b c0       	rjmp	.+22     	; 0x233e <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_C:
        DDRC = EN_Direction;
    2328:	e4 e3       	ldi	r30, 0x34	; 52
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	80 83       	st	Z, r24
    2330:	06 c0       	rjmp	.+12     	; 0x233e <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_D:
        DDRD = EN_Direction;
    2332:	e1 e3       	ldi	r30, 0x31	; 49
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	80 83       	st	Z, r24
    233a:	01 c0       	rjmp	.+2      	; 0x233e <DIO_voidSetPortDirection+0x7e>
        break;
    default:
        state = E_ERROR;
    233c:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    233e:	89 81       	ldd	r24, Y+1	; 0x01

} /* DIO_voidSetPortDirection */
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <DIO_voidInpullUp>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidInpullUp(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	00 d0       	rcall	.+0      	; 0x2356 <DIO_voidInpullUp+0x6>
    2356:	00 d0       	rcall	.+0      	; 0x2358 <DIO_voidInpullUp+0x8>
    2358:	0f 92       	push	r0
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	8a 83       	std	Y+2, r24	; 0x02
    2360:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
    2366:	8a 81       	ldd	r24, Y+2	; 0x02
    2368:	28 2f       	mov	r18, r24
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	3d 83       	std	Y+5, r19	; 0x05
    236e:	2c 83       	std	Y+4, r18	; 0x04
    2370:	8c 81       	ldd	r24, Y+4	; 0x04
    2372:	9d 81       	ldd	r25, Y+5	; 0x05
    2374:	81 30       	cpi	r24, 0x01	; 1
    2376:	91 05       	cpc	r25, r1
    2378:	09 f4       	brne	.+2      	; 0x237c <DIO_voidInpullUp+0x2c>
    237a:	3e c0       	rjmp	.+124    	; 0x23f8 <DIO_voidInpullUp+0xa8>
    237c:	2c 81       	ldd	r18, Y+4	; 0x04
    237e:	3d 81       	ldd	r19, Y+5	; 0x05
    2380:	22 30       	cpi	r18, 0x02	; 2
    2382:	31 05       	cpc	r19, r1
    2384:	2c f4       	brge	.+10     	; 0x2390 <DIO_voidInpullUp+0x40>
    2386:	8c 81       	ldd	r24, Y+4	; 0x04
    2388:	9d 81       	ldd	r25, Y+5	; 0x05
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	71 f0       	breq	.+28     	; 0x23aa <DIO_voidInpullUp+0x5a>
    238e:	a9 c0       	rjmp	.+338    	; 0x24e2 <DIO_voidInpullUp+0x192>
    2390:	2c 81       	ldd	r18, Y+4	; 0x04
    2392:	3d 81       	ldd	r19, Y+5	; 0x05
    2394:	22 30       	cpi	r18, 0x02	; 2
    2396:	31 05       	cpc	r19, r1
    2398:	09 f4       	brne	.+2      	; 0x239c <DIO_voidInpullUp+0x4c>
    239a:	55 c0       	rjmp	.+170    	; 0x2446 <DIO_voidInpullUp+0xf6>
    239c:	8c 81       	ldd	r24, Y+4	; 0x04
    239e:	9d 81       	ldd	r25, Y+5	; 0x05
    23a0:	83 30       	cpi	r24, 0x03	; 3
    23a2:	91 05       	cpc	r25, r1
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <DIO_voidInpullUp+0x58>
    23a6:	76 c0       	rjmp	.+236    	; 0x2494 <DIO_voidInpullUp+0x144>
    23a8:	9c c0       	rjmp	.+312    	; 0x24e2 <DIO_voidInpullUp+0x192>
    {
    case PORT_A:
        CLRBIT(DDRA, EN_Pin);
    23aa:	aa e3       	ldi	r26, 0x3A	; 58
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	ea e3       	ldi	r30, 0x3A	; 58
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	80 81       	ld	r24, Z
    23b4:	48 2f       	mov	r20, r24
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	28 2f       	mov	r18, r24
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	02 c0       	rjmp	.+4      	; 0x23c6 <DIO_voidInpullUp+0x76>
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	2a 95       	dec	r18
    23c8:	e2 f7       	brpl	.-8      	; 0x23c2 <DIO_voidInpullUp+0x72>
    23ca:	80 95       	com	r24
    23cc:	84 23       	and	r24, r20
    23ce:	8c 93       	st	X, r24
        SETBIT(PORTA, EN_Pin);
    23d0:	ab e3       	ldi	r26, 0x3B	; 59
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	eb e3       	ldi	r30, 0x3B	; 59
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	48 2f       	mov	r20, r24
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	81 e0       	ldi	r24, 0x01	; 1
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	02 2e       	mov	r0, r18
    23e8:	02 c0       	rjmp	.+4      	; 0x23ee <DIO_voidInpullUp+0x9e>
    23ea:	88 0f       	add	r24, r24
    23ec:	99 1f       	adc	r25, r25
    23ee:	0a 94       	dec	r0
    23f0:	e2 f7       	brpl	.-8      	; 0x23ea <DIO_voidInpullUp+0x9a>
    23f2:	84 2b       	or	r24, r20
    23f4:	8c 93       	st	X, r24
    23f6:	76 c0       	rjmp	.+236    	; 0x24e4 <DIO_voidInpullUp+0x194>
        break;
    case PORT_B:
        CLRBIT(DDRB, EN_Pin);
    23f8:	a7 e3       	ldi	r26, 0x37	; 55
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	e7 e3       	ldi	r30, 0x37	; 55
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	48 2f       	mov	r20, r24
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	28 2f       	mov	r18, r24
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <DIO_voidInpullUp+0xc4>
    2410:	88 0f       	add	r24, r24
    2412:	99 1f       	adc	r25, r25
    2414:	2a 95       	dec	r18
    2416:	e2 f7       	brpl	.-8      	; 0x2410 <DIO_voidInpullUp+0xc0>
    2418:	80 95       	com	r24
    241a:	84 23       	and	r24, r20
    241c:	8c 93       	st	X, r24
        SETBIT(PORTB, EN_Pin);
    241e:	a8 e3       	ldi	r26, 0x38	; 56
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	e8 e3       	ldi	r30, 0x38	; 56
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	48 2f       	mov	r20, r24
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	28 2f       	mov	r18, r24
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	02 2e       	mov	r0, r18
    2436:	02 c0       	rjmp	.+4      	; 0x243c <DIO_voidInpullUp+0xec>
    2438:	88 0f       	add	r24, r24
    243a:	99 1f       	adc	r25, r25
    243c:	0a 94       	dec	r0
    243e:	e2 f7       	brpl	.-8      	; 0x2438 <DIO_voidInpullUp+0xe8>
    2440:	84 2b       	or	r24, r20
    2442:	8c 93       	st	X, r24
    2444:	4f c0       	rjmp	.+158    	; 0x24e4 <DIO_voidInpullUp+0x194>
        break;
    case PORT_C:
        CLRBIT(DDRC, EN_Pin);
    2446:	a4 e3       	ldi	r26, 0x34	; 52
    2448:	b0 e0       	ldi	r27, 0x00	; 0
    244a:	e4 e3       	ldi	r30, 0x34	; 52
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	48 2f       	mov	r20, r24
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	28 2f       	mov	r18, r24
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	02 c0       	rjmp	.+4      	; 0x2462 <DIO_voidInpullUp+0x112>
    245e:	88 0f       	add	r24, r24
    2460:	99 1f       	adc	r25, r25
    2462:	2a 95       	dec	r18
    2464:	e2 f7       	brpl	.-8      	; 0x245e <DIO_voidInpullUp+0x10e>
    2466:	80 95       	com	r24
    2468:	84 23       	and	r24, r20
    246a:	8c 93       	st	X, r24
        SETBIT(PORTC, EN_Pin);
    246c:	a5 e3       	ldi	r26, 0x35	; 53
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e5 e3       	ldi	r30, 0x35	; 53
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	48 2f       	mov	r20, r24
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	02 2e       	mov	r0, r18
    2484:	02 c0       	rjmp	.+4      	; 0x248a <DIO_voidInpullUp+0x13a>
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	0a 94       	dec	r0
    248c:	e2 f7       	brpl	.-8      	; 0x2486 <DIO_voidInpullUp+0x136>
    248e:	84 2b       	or	r24, r20
    2490:	8c 93       	st	X, r24
    2492:	28 c0       	rjmp	.+80     	; 0x24e4 <DIO_voidInpullUp+0x194>
        break;
    case PORT_D:
        CLRBIT(DDRD, EN_Pin);
    2494:	a1 e3       	ldi	r26, 0x31	; 49
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	e1 e3       	ldi	r30, 0x31	; 49
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	48 2f       	mov	r20, r24
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	28 2f       	mov	r18, r24
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <DIO_voidInpullUp+0x160>
    24ac:	88 0f       	add	r24, r24
    24ae:	99 1f       	adc	r25, r25
    24b0:	2a 95       	dec	r18
    24b2:	e2 f7       	brpl	.-8      	; 0x24ac <DIO_voidInpullUp+0x15c>
    24b4:	80 95       	com	r24
    24b6:	84 23       	and	r24, r20
    24b8:	8c 93       	st	X, r24
        SETBIT(PORTD, EN_Pin);
    24ba:	a2 e3       	ldi	r26, 0x32	; 50
    24bc:	b0 e0       	ldi	r27, 0x00	; 0
    24be:	e2 e3       	ldi	r30, 0x32	; 50
    24c0:	f0 e0       	ldi	r31, 0x00	; 0
    24c2:	80 81       	ld	r24, Z
    24c4:	48 2f       	mov	r20, r24
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	28 2f       	mov	r18, r24
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	02 2e       	mov	r0, r18
    24d2:	02 c0       	rjmp	.+4      	; 0x24d8 <DIO_voidInpullUp+0x188>
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	0a 94       	dec	r0
    24da:	e2 f7       	brpl	.-8      	; 0x24d4 <DIO_voidInpullUp+0x184>
    24dc:	84 2b       	or	r24, r20
    24de:	8c 93       	st	X, r24
    24e0:	01 c0       	rjmp	.+2      	; 0x24e4 <DIO_voidInpullUp+0x194>
        break;
    default:
        state = E_ERROR;
    24e2:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidInpullUp */
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <ADC_VoidInit>:
#include"Memmap.h"
#include"ADC_Interface.h"
#include"ADC_Config.h"

void ADC_VoidInit(void)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
#if ADC_VREF == INTERNAL_OFF
	CLRBIT( ADMUX , 6 ) ;  /*REFS0*/
	CLRBIT( ADMUX , 7 ) ;  /*REFS1*/

#elif ADC_VREF == EXTERNAL_AVCC
	SETBIT( ADMUX , 6 ) ;   /*REFS0*/
    24fe:	a7 e2       	ldi	r26, 0x27	; 39
    2500:	b0 e0       	ldi	r27, 0x00	; 0
    2502:	e7 e2       	ldi	r30, 0x27	; 39
    2504:	f0 e0       	ldi	r31, 0x00	; 0
    2506:	80 81       	ld	r24, Z
    2508:	80 64       	ori	r24, 0x40	; 64
    250a:	8c 93       	st	X, r24
	CLRBIT( ADMUX , 7 ) ; /*REFS1*/
    250c:	a7 e2       	ldi	r26, 0x27	; 39
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	e7 e2       	ldi	r30, 0x27	; 39
    2512:	f0 e0       	ldi	r31, 0x00	; 0
    2514:	80 81       	ld	r24, Z
    2516:	8f 77       	andi	r24, 0x7F	; 127
    2518:	8c 93       	st	X, r24

#endif


#if ADC_ADJ	== RIGHT_ADJ
	CLRBIT( ADMUX , 5 ) ; /*ADLAR*/
    251a:	a7 e2       	ldi	r26, 0x27	; 39
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	e7 e2       	ldi	r30, 0x27	; 39
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	8f 7d       	andi	r24, 0xDF	; 223
    2526:	8c 93       	st	X, r24

#endif


#if ADC_PRESCALER == PRESCALER_2
	SETBIT(ADCSRA, 0);
    2528:	a6 e2       	ldi	r26, 0x26	; 38
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	e6 e2       	ldi	r30, 0x26	; 38
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	81 60       	ori	r24, 0x01	; 1
    2534:	8c 93       	st	X, r24
	CLRBIT(ADCSRA,1);
    2536:	a6 e2       	ldi	r26, 0x26	; 38
    2538:	b0 e0       	ldi	r27, 0x00	; 0
    253a:	e6 e2       	ldi	r30, 0x26	; 38
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	80 81       	ld	r24, Z
    2540:	8d 7f       	andi	r24, 0xFD	; 253
    2542:	8c 93       	st	X, r24
	CLRBIT(ADCSRA,2);
    2544:	a6 e2       	ldi	r26, 0x26	; 38
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	e6 e2       	ldi	r30, 0x26	; 38
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	8b 7f       	andi	r24, 0xFB	; 251
    2550:	8c 93       	st	X, r24
	SETBIT( ADCSRA , 0 ) ;
	SETBIT( ADCSRA , 1 ) ;
	SETBIT( ADCSRA , 2 ) ;

#endif
	SETBIT( ADCSRA , 7 ) ;       /*Enable ADC*/
    2552:	a6 e2       	ldi	r26, 0x26	; 38
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	e6 e2       	ldi	r30, 0x26	; 38
    2558:	f0 e0       	ldi	r31, 0x00	; 0
    255a:	80 81       	ld	r24, Z
    255c:	80 68       	ori	r24, 0x80	; 128
    255e:	8c 93       	st	X, r24
}
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	08 95       	ret

00002566 <ADC_U16GetChannelReading>:


uint32_t ADC_U16GetChannelReading(uint8_t Channel)
{
    2566:	df 93       	push	r29
    2568:	cf 93       	push	r28
    256a:	00 d0       	rcall	.+0      	; 0x256c <ADC_U16GetChannelReading+0x6>
    256c:	00 d0       	rcall	.+0      	; 0x256e <ADC_U16GetChannelReading+0x8>
    256e:	0f 92       	push	r0
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
    2574:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t Relult = 0 ;
    2576:	19 82       	std	Y+1, r1	; 0x01
    2578:	1a 82       	std	Y+2, r1	; 0x02
    257a:	1b 82       	std	Y+3, r1	; 0x03
    257c:	1c 82       	std	Y+4, r1	; 0x04
	ADMUX&= 0XE0 ;                      /*0b11100000*/
    257e:	a7 e2       	ldi	r26, 0x27	; 39
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	e7 e2       	ldi	r30, 0x27	; 39
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	80 7e       	andi	r24, 0xE0	; 224
    258a:	8c 93       	st	X, r24
	ADMUX |= Channel ;
    258c:	a7 e2       	ldi	r26, 0x27	; 39
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e7 e2       	ldi	r30, 0x27	; 39
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	90 81       	ld	r25, Z
    2596:	8d 81       	ldd	r24, Y+5	; 0x05
    2598:	89 2b       	or	r24, r25
    259a:	8c 93       	st	X, r24
	SETBIT(ADCSRA,6);                  /* Start Conversion*/
    259c:	a6 e2       	ldi	r26, 0x26	; 38
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	e6 e2       	ldi	r30, 0x26	; 38
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	80 64       	ori	r24, 0x40	; 64
    25a8:	8c 93       	st	X, r24
	while(GETBIT(ADCSRA,4)==0);     	/*polling on the conversion complete flag*/
    25aa:	e6 e2       	ldi	r30, 0x26	; 38
    25ac:	f0 e0       	ldi	r31, 0x00	; 0
    25ae:	80 81       	ld	r24, Z
    25b0:	82 95       	swap	r24
    25b2:	8f 70       	andi	r24, 0x0F	; 15
    25b4:	88 2f       	mov	r24, r24
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	81 70       	andi	r24, 0x01	; 1
    25ba:	90 70       	andi	r25, 0x00	; 0
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	a9 f3       	breq	.-22     	; 0x25aa <ADC_U16GetChannelReading+0x44>
	SETBIT(ADCSRA,4);                  /*CLEAR THE FLAG*/
    25c0:	a6 e2       	ldi	r26, 0x26	; 38
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e6 e2       	ldi	r30, 0x26	; 38
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	80 81       	ld	r24, Z
    25ca:	80 61       	ori	r24, 0x10	; 16
    25cc:	8c 93       	st	X, r24
	Relult = ADC;                       /*get the result*/
    25ce:	e4 e2       	ldi	r30, 0x24	; 36
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	91 81       	ldd	r25, Z+1	; 0x01
    25d6:	cc 01       	movw	r24, r24
    25d8:	a0 e0       	ldi	r26, 0x00	; 0
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	9a 83       	std	Y+2, r25	; 0x02
    25e0:	ab 83       	std	Y+3, r26	; 0x03
    25e2:	bc 83       	std	Y+4, r27	; 0x04
	return Relult;
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	ab 81       	ldd	r26, Y+3	; 0x03
    25ea:	bc 81       	ldd	r27, Y+4	; 0x04
}
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <MOTOR_voidInit>:


#include "DIO_Interface.h"
#include "MOTOR_Config.h"

void MOTOR_voidInit(void){
    2600:	df 93       	push	r29
    2602:	cf 93       	push	r28
    2604:	cd b7       	in	r28, 0x3d	; 61
    2606:	de b7       	in	r29, 0x3e	; 62
DIO_voidSetPinDirection(MOTOR2_PORT,  MOTOR2_PIN2,OUTPUT);
DIO_voidSetPinDirection(MOTOR2_PORT,MOTOR2_ENABLE,OUTPUT);

#elif  NUM_OF_MOTORS ==  CONNECT_ONE_MOTOR
/*INIATE MOTOR ONE ON H-BRIDGE*/
DIO_voidSetPinDirection (MOTOR1_PORT, MOTOR1_PIN1,OUTPUT);
    2608:	83 e0       	ldi	r24, 0x03	; 3
    260a:	63 e0       	ldi	r22, 0x03	; 3
    260c:	41 e0       	ldi	r20, 0x01	; 1
    260e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR_PORT,MOTOR1_ENABLE,OUTPUT);
DIO_voidSetPinValue(MOTOR_PORT, MOTOR_PIN1,HIGH);
DIO_voidSetPinValue(MOTOR_PORT, MOTOR_PIN2,LOW);
#else
#endif*/
}
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	08 95       	ret

00002618 <MOTOR_voidRotateClkWise>:

void MOTOR_voidRotateClkWise(uint8_t copy_uint8_ttop,uint8_t copy_uint8_tdown){
    2618:	df 93       	push	r29
    261a:	cf 93       	push	r28
    261c:	00 d0       	rcall	.+0      	; 0x261e <MOTOR_voidRotateClkWise+0x6>
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_uint8_ttop == 1){
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	81 30       	cpi	r24, 0x01	; 1
    262a:	31 f4       	brne	.+12     	; 0x2638 <MOTOR_voidRotateClkWise+0x20>
		/*INIATE MOTOR ONE ON H-BRIDGE*/
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,HIGH);
    262c:	83 e0       	ldi	r24, 0x03	; 3
    262e:	63 e0       	ldi	r22, 0x03	; 3
    2630:	41 e0       	ldi	r20, 0x01	; 1
    2632:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    2636:	0d c0       	rjmp	.+26     	; 0x2652 <MOTOR_voidRotateClkWise+0x3a>
		//DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
		//DIO_voidSetPinValue(MOTOR1_PORT,MOTOR1_ENABLE, HIGH);
	}
	else if(copy_uint8_ttop == 0){
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	88 23       	and	r24, r24
    263c:	51 f4       	brne	.+20     	; 0x2652 <MOTOR_voidRotateClkWise+0x3a>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    263e:	83 e0       	ldi	r24, 0x03	; 3
    2640:	62 e0       	ldi	r22, 0x02	; 2
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    2648:	83 e0       	ldi	r24, 0x03	; 3
    264a:	62 e0       	ldi	r22, 0x02	; 2
    264c:	40 e0       	ldi	r20, 0x00	; 0
    264e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
	}
	/*INIATE MOTOR ONE ON H-BRIDGE*/
	if(copy_uint8_tdown== 1){
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	81 30       	cpi	r24, 0x01	; 1
    2656:	81 f4       	brne	.+32     	; 0x2678 <MOTOR_voidRotateClkWise+0x60>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,HIGH);
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	64 e0       	ldi	r22, 0x04	; 4
    265c:	41 e0       	ldi	r20, 0x01	; 1
    265e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,LOW);
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	65 e0       	ldi	r22, 0x05	; 5
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_ENABLE, HIGH);
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	63 e0       	ldi	r22, 0x03	; 3
    2670:	41 e0       	ldi	r20, 0x01	; 1
    2672:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    2676:	0d c0       	rjmp	.+26     	; 0x2692 <MOTOR_voidRotateClkWise+0x7a>
	}
	else if(copy_uint8_tdown == 0){
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	88 23       	and	r24, r24
    267c:	51 f4       	brne	.+20     	; 0x2692 <MOTOR_voidRotateClkWise+0x7a>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_PIN2,LOW);
    267e:	81 e0       	ldi	r24, 0x01	; 1
    2680:	65 e0       	ldi	r22, 0x05	; 5
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_PIN2,LOW);
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	65 e0       	ldi	r22, 0x05	; 5
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
	}

}
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <MOTOR_voidRotateAntiClkWise>:
void MOTOR_voidRotateAntiClkWise(uint8_t copy_uint8_ttop,uint8_t copy_uint8_tdown){
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <MOTOR_voidRotateAntiClkWise+0x6>
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	89 83       	std	Y+1, r24	; 0x01
    26a8:	6a 83       	std	Y+2, r22	; 0x02
	if (copy_uint8_ttop == 1)
    26aa:	89 81       	ldd	r24, Y+1	; 0x01
    26ac:	81 30       	cpi	r24, 0x01	; 1
    26ae:	81 f4       	brne	.+32     	; 0x26d0 <MOTOR_voidRotateAntiClkWise+0x34>
	{
		/*INIATE MOTOR ONE ON H-BRIDGE*/
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,LOW);
    26b0:	83 e0       	ldi	r24, 0x03	; 3
    26b2:	63 e0       	ldi	r22, 0x03	; 3
    26b4:	40 e0       	ldi	r20, 0x00	; 0
    26b6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,  MOTOR1_PIN2,HIGH);
    26ba:	83 e0       	ldi	r24, 0x03	; 3
    26bc:	62 e0       	ldi	r22, 0x02	; 2
    26be:	41 e0       	ldi	r20, 0x01	; 1
    26c0:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,MOTOR1_ENABLE,HIGH);
    26c4:	83 e0       	ldi	r24, 0x03	; 3
    26c6:	63 e0       	ldi	r22, 0x03	; 3
    26c8:	41 e0       	ldi	r20, 0x01	; 1
    26ca:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    26ce:	0d c0       	rjmp	.+26     	; 0x26ea <MOTOR_voidRotateAntiClkWise+0x4e>
	}
	else if(copy_uint8_ttop== 0)
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	88 23       	and	r24, r24
    26d4:	51 f4       	brne	.+20     	; 0x26ea <MOTOR_voidRotateAntiClkWise+0x4e>
	{
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,LOW);
    26d6:	83 e0       	ldi	r24, 0x03	; 3
    26d8:	63 e0       	ldi	r22, 0x03	; 3
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    26e0:	83 e0       	ldi	r24, 0x03	; 3
    26e2:	62 e0       	ldi	r22, 0x02	; 2
    26e4:	40 e0       	ldi	r20, 0x00	; 0
    26e6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
	}
		/*INIATE MOTOR ONE ON H-BRIDGE*/
	if(copy_uint8_tdown == 1)
    26ea:	8a 81       	ldd	r24, Y+2	; 0x02
    26ec:	81 30       	cpi	r24, 0x01	; 1
    26ee:	81 f4       	brne	.+32     	; 0x2710 <MOTOR_voidRotateAntiClkWise+0x74>
	{
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,LOW);
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	64 e0       	ldi	r22, 0x04	; 4
    26f4:	40 e0       	ldi	r20, 0x00	; 0
    26f6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,HIGH);
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	65 e0       	ldi	r22, 0x05	; 5
    26fe:	41 e0       	ldi	r20, 0x01	; 1
    2700:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_ENABLE,HIGH);
    2704:	81 e0       	ldi	r24, 0x01	; 1
    2706:	63 e0       	ldi	r22, 0x03	; 3
    2708:	41 e0       	ldi	r20, 0x01	; 1
    270a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    270e:	0d c0       	rjmp	.+26     	; 0x272a <MOTOR_voidRotateAntiClkWise+0x8e>
	}


	else if(copy_uint8_tdown == 0 ){
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	88 23       	and	r24, r24
    2714:	51 f4       	brne	.+20     	; 0x272a <MOTOR_voidRotateAntiClkWise+0x8e>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,LOW);
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	64 e0       	ldi	r22, 0x04	; 4
    271a:	40 e0       	ldi	r20, 0x00	; 0
    271c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,LOW);
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	65 e0       	ldi	r22, 0x05	; 5
    2724:	40 e0       	ldi	r20, 0x00	; 0
    2726:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
	}


}
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	08 95       	ret

00002734 <MOTOR_voidStop>:

void MOTOR_voidStop(void){
    2734:	df 93       	push	r29
    2736:	cf 93       	push	r28
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue( MOTOR1_PORT,MOTOR1_PIN1,LOW);
    273c:	83 e0       	ldi	r24, 0x03	; 3
    273e:	63 e0       	ldi	r22, 0x03	; 3
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
	/*DIO_voidSetPinValue( MOTOR1_PORT,MOTOR1_PIN2,LOW);
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_PIN1,LOW);
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_PIN2,LOW);
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_ENABLE,LOW);*/
}
    2746:	cf 91       	pop	r28
    2748:	df 91       	pop	r29
    274a:	08 95       	ret

0000274c <LM35_VoidInit>:
 **************************************************/
#include "DataTypes.h"
#include "DIO_Interface.h"
#include "ADC_Interface.h"
void LM35_VoidInit(void)
{
    274c:	df 93       	push	r29
    274e:	cf 93       	push	r28
    2750:	cd b7       	in	r28, 0x3d	; 61
    2752:	de b7       	in	r29, 0x3e	; 62
	ADC_VoidInit();
    2754:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <ADC_VoidInit>
	DIO_voidSetPinDirection(PORT_A, PIN0, INPUT);
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	60 e0       	ldi	r22, 0x00	; 0
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_voidSetPinDirection>

}
    2762:	cf 91       	pop	r28
    2764:	df 91       	pop	r29
    2766:	08 95       	ret

00002768 <LM35_U16Read>:


u16 LM35_U16Read(uint8_t Copy_u8readchannel)
{
    2768:	df 93       	push	r29
    276a:	cf 93       	push	r28
    276c:	00 d0       	rcall	.+0      	; 0x276e <LM35_U16Read+0x6>
    276e:	00 d0       	rcall	.+0      	; 0x2770 <LM35_U16Read+0x8>
    2770:	0f 92       	push	r0
    2772:	cd b7       	in	r28, 0x3d	; 61
    2774:	de b7       	in	r29, 0x3e	; 62
    2776:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t temp = 0;
    2778:	19 82       	std	Y+1, r1	; 0x01
    277a:	1a 82       	std	Y+2, r1	; 0x02
    277c:	1b 82       	std	Y+3, r1	; 0x03
    277e:	1c 82       	std	Y+4, r1	; 0x04
	temp = ADC_U16GetChannelReading(Copy_u8readchannel); /* read channel two where the temp sensor is connect */
    2780:	8d 81       	ldd	r24, Y+5	; 0x05
    2782:	0e 94 b3 12 	call	0x2566	; 0x2566 <ADC_U16GetChannelReading>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	9a 83       	std	Y+2, r25	; 0x02
    278e:	ab 83       	std	Y+3, r26	; 0x03
    2790:	bc 83       	std	Y+4, r27	; 0x04
	temp = (temp*150*5)/(1023*1.5);                      /* calculate the temp from the ADC value*/
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	9a 81       	ldd	r25, Y+2	; 0x02
    2796:	ab 81       	ldd	r26, Y+3	; 0x03
    2798:	bc 81       	ldd	r27, Y+4	; 0x04
    279a:	2e ee       	ldi	r18, 0xEE	; 238
    279c:	32 e0       	ldi	r19, 0x02	; 2
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	50 e0       	ldi	r21, 0x00	; 0
    27a2:	bc 01       	movw	r22, r24
    27a4:	cd 01       	movw	r24, r26
    27a6:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsi3>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	bc 01       	movw	r22, r24
    27b0:	cd 01       	movw	r24, r26
    27b2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	bc 01       	movw	r22, r24
    27bc:	cd 01       	movw	r24, r26
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 ed       	ldi	r19, 0xD0	; 208
    27c2:	4f eb       	ldi	r20, 0xBF	; 191
    27c4:	54 e4       	ldi	r21, 0x44	; 68
    27c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	bc 01       	movw	r22, r24
    27d0:	cd 01       	movw	r24, r26
    27d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	89 83       	std	Y+1, r24	; 0x01
    27dc:	9a 83       	std	Y+2, r25	; 0x02
    27de:	ab 83       	std	Y+3, r26	; 0x03
    27e0:	bc 83       	std	Y+4, r27	; 0x04

	 return temp;
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    27e6:	0f 90       	pop	r0
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	cf 91       	pop	r28
    27f2:	df 91       	pop	r29
    27f4:	08 95       	ret

000027f6 <lcd_init>:
#define INCREMENT_CURSOR            0x06
#define LCD_FIRSTLINE				0x80
#define LCD_SECONDLINE				0xC0

void lcd_init(void)
{
    27f6:	0f 93       	push	r16
    27f8:	1f 93       	push	r17
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	c0 57       	subi	r28, 0x70	; 112
    2804:	d0 40       	sbci	r29, 0x00	; 0
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	cd bf       	out	0x3d, r28	; 61
    2810:	fe 01       	movw	r30, r28
    2812:	e3 59       	subi	r30, 0x93	; 147
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	a0 e2       	ldi	r26, 0x20	; 32
    281c:	b2 e4       	ldi	r27, 0x42	; 66
    281e:	80 83       	st	Z, r24
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	a2 83       	std	Z+2, r26	; 0x02
    2824:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2826:	8e 01       	movw	r16, r28
    2828:	07 59       	subi	r16, 0x97	; 151
    282a:	1f 4f       	sbci	r17, 0xFF	; 255
    282c:	fe 01       	movw	r30, r28
    282e:	e3 59       	subi	r30, 0x93	; 147
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	60 81       	ld	r22, Z
    2834:	71 81       	ldd	r23, Z+1	; 0x01
    2836:	82 81       	ldd	r24, Z+2	; 0x02
    2838:	93 81       	ldd	r25, Z+3	; 0x03
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	4a ef       	ldi	r20, 0xFA	; 250
    2840:	54 e4       	ldi	r21, 0x44	; 68
    2842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	f8 01       	movw	r30, r16
    284c:	80 83       	st	Z, r24
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	a2 83       	std	Z+2, r26	; 0x02
    2852:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2854:	fe 01       	movw	r30, r28
    2856:	e7 59       	subi	r30, 0x97	; 151
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	60 81       	ld	r22, Z
    285c:	71 81       	ldd	r23, Z+1	; 0x01
    285e:	82 81       	ldd	r24, Z+2	; 0x02
    2860:	93 81       	ldd	r25, Z+3	; 0x03
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e8       	ldi	r20, 0x80	; 128
    2868:	5f e3       	ldi	r21, 0x3F	; 63
    286a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    286e:	88 23       	and	r24, r24
    2870:	44 f4       	brge	.+16     	; 0x2882 <lcd_init+0x8c>
		__ticks = 1;
    2872:	fe 01       	movw	r30, r28
    2874:	e9 59       	subi	r30, 0x99	; 153
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	80 83       	st	Z, r24
    2880:	64 c0       	rjmp	.+200    	; 0x294a <lcd_init+0x154>
	else if (__tmp > 65535)
    2882:	fe 01       	movw	r30, r28
    2884:	e7 59       	subi	r30, 0x97	; 151
    2886:	ff 4f       	sbci	r31, 0xFF	; 255
    2888:	60 81       	ld	r22, Z
    288a:	71 81       	ldd	r23, Z+1	; 0x01
    288c:	82 81       	ldd	r24, Z+2	; 0x02
    288e:	93 81       	ldd	r25, Z+3	; 0x03
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	3f ef       	ldi	r19, 0xFF	; 255
    2894:	4f e7       	ldi	r20, 0x7F	; 127
    2896:	57 e4       	ldi	r21, 0x47	; 71
    2898:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    289c:	18 16       	cp	r1, r24
    289e:	0c f0       	brlt	.+2      	; 0x28a2 <lcd_init+0xac>
    28a0:	43 c0       	rjmp	.+134    	; 0x2928 <lcd_init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28a2:	fe 01       	movw	r30, r28
    28a4:	e3 59       	subi	r30, 0x93	; 147
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	60 81       	ld	r22, Z
    28aa:	71 81       	ldd	r23, Z+1	; 0x01
    28ac:	82 81       	ldd	r24, Z+2	; 0x02
    28ae:	93 81       	ldd	r25, Z+3	; 0x03
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e2       	ldi	r20, 0x20	; 32
    28b6:	51 e4       	ldi	r21, 0x41	; 65
    28b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	8e 01       	movw	r16, r28
    28c2:	09 59       	subi	r16, 0x99	; 153
    28c4:	1f 4f       	sbci	r17, 0xFF	; 255
    28c6:	bc 01       	movw	r22, r24
    28c8:	cd 01       	movw	r24, r26
    28ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	f8 01       	movw	r30, r16
    28d4:	91 83       	std	Z+1, r25	; 0x01
    28d6:	80 83       	st	Z, r24
    28d8:	1f c0       	rjmp	.+62     	; 0x2918 <lcd_init+0x122>
    28da:	fe 01       	movw	r30, r28
    28dc:	eb 59       	subi	r30, 0x9B	; 155
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	88 ec       	ldi	r24, 0xC8	; 200
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	91 83       	std	Z+1, r25	; 0x01
    28e6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28e8:	fe 01       	movw	r30, r28
    28ea:	eb 59       	subi	r30, 0x9B	; 155
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 81       	ld	r24, Z
    28f0:	91 81       	ldd	r25, Z+1	; 0x01
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <lcd_init+0xfc>
    28f6:	fe 01       	movw	r30, r28
    28f8:	eb 59       	subi	r30, 0x9B	; 155
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	91 83       	std	Z+1, r25	; 0x01
    28fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2900:	de 01       	movw	r26, r28
    2902:	a9 59       	subi	r26, 0x99	; 153
    2904:	bf 4f       	sbci	r27, 0xFF	; 255
    2906:	fe 01       	movw	r30, r28
    2908:	e9 59       	subi	r30, 0x99	; 153
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	80 81       	ld	r24, Z
    290e:	91 81       	ldd	r25, Z+1	; 0x01
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	11 96       	adiw	r26, 0x01	; 1
    2914:	9c 93       	st	X, r25
    2916:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2918:	fe 01       	movw	r30, r28
    291a:	e9 59       	subi	r30, 0x99	; 153
    291c:	ff 4f       	sbci	r31, 0xFF	; 255
    291e:	80 81       	ld	r24, Z
    2920:	91 81       	ldd	r25, Z+1	; 0x01
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	d1 f6       	brne	.-76     	; 0x28da <lcd_init+0xe4>
    2926:	27 c0       	rjmp	.+78     	; 0x2976 <lcd_init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2928:	8e 01       	movw	r16, r28
    292a:	09 59       	subi	r16, 0x99	; 153
    292c:	1f 4f       	sbci	r17, 0xFF	; 255
    292e:	fe 01       	movw	r30, r28
    2930:	e7 59       	subi	r30, 0x97	; 151
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	60 81       	ld	r22, Z
    2936:	71 81       	ldd	r23, Z+1	; 0x01
    2938:	82 81       	ldd	r24, Z+2	; 0x02
    293a:	93 81       	ldd	r25, Z+3	; 0x03
    293c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	f8 01       	movw	r30, r16
    2946:	91 83       	std	Z+1, r25	; 0x01
    2948:	80 83       	st	Z, r24
    294a:	de 01       	movw	r26, r28
    294c:	ad 59       	subi	r26, 0x9D	; 157
    294e:	bf 4f       	sbci	r27, 0xFF	; 255
    2950:	fe 01       	movw	r30, r28
    2952:	e9 59       	subi	r30, 0x99	; 153
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	91 81       	ldd	r25, Z+1	; 0x01
    295a:	8d 93       	st	X+, r24
    295c:	9c 93       	st	X, r25
    295e:	fe 01       	movw	r30, r28
    2960:	ed 59       	subi	r30, 0x9D	; 157
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	80 81       	ld	r24, Z
    2966:	91 81       	ldd	r25, Z+1	; 0x01
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <lcd_init+0x172>
    296c:	fe 01       	movw	r30, r28
    296e:	ed 59       	subi	r30, 0x9D	; 157
    2970:	ff 4f       	sbci	r31, 0xFF	; 255
    2972:	91 83       	std	Z+1, r25	; 0x01
    2974:	80 83       	st	Z, r24
    _delay_ms(40);    
 
    DIO_voidSetPinDirection(LS_PIN,OUTPUT);
    2976:	82 e0       	ldi	r24, 0x02	; 2
    2978:	62 e0       	ldi	r22, 0x02	; 2
    297a:	41 e0       	ldi	r20, 0x01	; 1
    297c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(EN_PIN,OUTPUT);
    2980:	82 e0       	ldi	r24, 0x02	; 2
    2982:	63 e0       	ldi	r22, 0x03	; 3
    2984:	41 e0       	ldi	r20, 0x01	; 1
    2986:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_voidSetPinDirection>
    298a:	fe 01       	movw	r30, r28
    298c:	e1 5a       	subi	r30, 0xA1	; 161
    298e:	ff 4f       	sbci	r31, 0xFF	; 255
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	a0 ea       	ldi	r26, 0xA0	; 160
    2996:	b0 e4       	ldi	r27, 0x40	; 64
    2998:	80 83       	st	Z, r24
    299a:	91 83       	std	Z+1, r25	; 0x01
    299c:	a2 83       	std	Z+2, r26	; 0x02
    299e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29a0:	8e 01       	movw	r16, r28
    29a2:	05 5a       	subi	r16, 0xA5	; 165
    29a4:	1f 4f       	sbci	r17, 0xFF	; 255
    29a6:	fe 01       	movw	r30, r28
    29a8:	e1 5a       	subi	r30, 0xA1	; 161
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	60 81       	ld	r22, Z
    29ae:	71 81       	ldd	r23, Z+1	; 0x01
    29b0:	82 81       	ldd	r24, Z+2	; 0x02
    29b2:	93 81       	ldd	r25, Z+3	; 0x03
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	4a ef       	ldi	r20, 0xFA	; 250
    29ba:	54 e4       	ldi	r21, 0x44	; 68
    29bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	f8 01       	movw	r30, r16
    29c6:	80 83       	st	Z, r24
    29c8:	91 83       	std	Z+1, r25	; 0x01
    29ca:	a2 83       	std	Z+2, r26	; 0x02
    29cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29ce:	fe 01       	movw	r30, r28
    29d0:	e5 5a       	subi	r30, 0xA5	; 165
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	60 81       	ld	r22, Z
    29d6:	71 81       	ldd	r23, Z+1	; 0x01
    29d8:	82 81       	ldd	r24, Z+2	; 0x02
    29da:	93 81       	ldd	r25, Z+3	; 0x03
    29dc:	20 e0       	ldi	r18, 0x00	; 0
    29de:	30 e0       	ldi	r19, 0x00	; 0
    29e0:	40 e8       	ldi	r20, 0x80	; 128
    29e2:	5f e3       	ldi	r21, 0x3F	; 63
    29e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29e8:	88 23       	and	r24, r24
    29ea:	44 f4       	brge	.+16     	; 0x29fc <lcd_init+0x206>
		__ticks = 1;
    29ec:	fe 01       	movw	r30, r28
    29ee:	e7 5a       	subi	r30, 0xA7	; 167
    29f0:	ff 4f       	sbci	r31, 0xFF	; 255
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	91 83       	std	Z+1, r25	; 0x01
    29f8:	80 83       	st	Z, r24
    29fa:	64 c0       	rjmp	.+200    	; 0x2ac4 <lcd_init+0x2ce>
	else if (__tmp > 65535)
    29fc:	fe 01       	movw	r30, r28
    29fe:	e5 5a       	subi	r30, 0xA5	; 165
    2a00:	ff 4f       	sbci	r31, 0xFF	; 255
    2a02:	60 81       	ld	r22, Z
    2a04:	71 81       	ldd	r23, Z+1	; 0x01
    2a06:	82 81       	ldd	r24, Z+2	; 0x02
    2a08:	93 81       	ldd	r25, Z+3	; 0x03
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	3f ef       	ldi	r19, 0xFF	; 255
    2a0e:	4f e7       	ldi	r20, 0x7F	; 127
    2a10:	57 e4       	ldi	r21, 0x47	; 71
    2a12:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a16:	18 16       	cp	r1, r24
    2a18:	0c f0       	brlt	.+2      	; 0x2a1c <lcd_init+0x226>
    2a1a:	43 c0       	rjmp	.+134    	; 0x2aa2 <lcd_init+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1c:	fe 01       	movw	r30, r28
    2a1e:	e1 5a       	subi	r30, 0xA1	; 161
    2a20:	ff 4f       	sbci	r31, 0xFF	; 255
    2a22:	60 81       	ld	r22, Z
    2a24:	71 81       	ldd	r23, Z+1	; 0x01
    2a26:	82 81       	ldd	r24, Z+2	; 0x02
    2a28:	93 81       	ldd	r25, Z+3	; 0x03
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e2       	ldi	r20, 0x20	; 32
    2a30:	51 e4       	ldi	r21, 0x41	; 65
    2a32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	8e 01       	movw	r16, r28
    2a3c:	07 5a       	subi	r16, 0xA7	; 167
    2a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a40:	bc 01       	movw	r22, r24
    2a42:	cd 01       	movw	r24, r26
    2a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	f8 01       	movw	r30, r16
    2a4e:	91 83       	std	Z+1, r25	; 0x01
    2a50:	80 83       	st	Z, r24
    2a52:	1f c0       	rjmp	.+62     	; 0x2a92 <lcd_init+0x29c>
    2a54:	fe 01       	movw	r30, r28
    2a56:	e9 5a       	subi	r30, 0xA9	; 169
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	88 ec       	ldi	r24, 0xC8	; 200
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	80 83       	st	Z, r24
    2a62:	fe 01       	movw	r30, r28
    2a64:	e9 5a       	subi	r30, 0xA9	; 169
    2a66:	ff 4f       	sbci	r31, 0xFF	; 255
    2a68:	80 81       	ld	r24, Z
    2a6a:	91 81       	ldd	r25, Z+1	; 0x01
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <lcd_init+0x276>
    2a70:	fe 01       	movw	r30, r28
    2a72:	e9 5a       	subi	r30, 0xA9	; 169
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a7a:	de 01       	movw	r26, r28
    2a7c:	a7 5a       	subi	r26, 0xA7	; 167
    2a7e:	bf 4f       	sbci	r27, 0xFF	; 255
    2a80:	fe 01       	movw	r30, r28
    2a82:	e7 5a       	subi	r30, 0xA7	; 167
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	80 81       	ld	r24, Z
    2a88:	91 81       	ldd	r25, Z+1	; 0x01
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	11 96       	adiw	r26, 0x01	; 1
    2a8e:	9c 93       	st	X, r25
    2a90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a92:	fe 01       	movw	r30, r28
    2a94:	e7 5a       	subi	r30, 0xA7	; 167
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	80 81       	ld	r24, Z
    2a9a:	91 81       	ldd	r25, Z+1	; 0x01
    2a9c:	00 97       	sbiw	r24, 0x00	; 0
    2a9e:	d1 f6       	brne	.-76     	; 0x2a54 <lcd_init+0x25e>
    2aa0:	27 c0       	rjmp	.+78     	; 0x2af0 <lcd_init+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa2:	8e 01       	movw	r16, r28
    2aa4:	07 5a       	subi	r16, 0xA7	; 167
    2aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	e5 5a       	subi	r30, 0xA5	; 165
    2aac:	ff 4f       	sbci	r31, 0xFF	; 255
    2aae:	60 81       	ld	r22, Z
    2ab0:	71 81       	ldd	r23, Z+1	; 0x01
    2ab2:	82 81       	ldd	r24, Z+2	; 0x02
    2ab4:	93 81       	ldd	r25, Z+3	; 0x03
    2ab6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aba:	dc 01       	movw	r26, r24
    2abc:	cb 01       	movw	r24, r22
    2abe:	f8 01       	movw	r30, r16
    2ac0:	91 83       	std	Z+1, r25	; 0x01
    2ac2:	80 83       	st	Z, r24
    2ac4:	de 01       	movw	r26, r28
    2ac6:	ab 5a       	subi	r26, 0xAB	; 171
    2ac8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aca:	fe 01       	movw	r30, r28
    2acc:	e7 5a       	subi	r30, 0xA7	; 167
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	80 81       	ld	r24, Z
    2ad2:	91 81       	ldd	r25, Z+1	; 0x01
    2ad4:	8d 93       	st	X+, r24
    2ad6:	9c 93       	st	X, r25
    2ad8:	fe 01       	movw	r30, r28
    2ada:	eb 5a       	subi	r30, 0xAB	; 171
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	80 81       	ld	r24, Z
    2ae0:	91 81       	ldd	r25, Z+1	; 0x01
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <lcd_init+0x2ec>
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	eb 5a       	subi	r30, 0xAB	; 171
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	91 83       	std	Z+1, r25	; 0x01
    2aee:	80 83       	st	Z, r24
   //DIO_voidSetPinDirection(R_W_PIN,OUTPUT);
	_delay_ms(5);	
    DIO_voidSetPinDirection(PORT_C,PIN4,OUTPUT );
    2af0:	82 e0       	ldi	r24, 0x02	; 2
    2af2:	64 e0       	ldi	r22, 0x04	; 4
    2af4:	41 e0       	ldi	r20, 0x01	; 1
    2af6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORT_C,PIN5,OUTPUT );
    2afa:	82 e0       	ldi	r24, 0x02	; 2
    2afc:	65 e0       	ldi	r22, 0x05	; 5
    2afe:	41 e0       	ldi	r20, 0x01	; 1
    2b00:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORT_C,PIN6,OUTPUT );
    2b04:	82 e0       	ldi	r24, 0x02	; 2
    2b06:	66 e0       	ldi	r22, 0x06	; 6
    2b08:	41 e0       	ldi	r20, 0x01	; 1
    2b0a:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORT_C,PIN7,OUTPUT );
    2b0e:	82 e0       	ldi	r24, 0x02	; 2
    2b10:	67 e0       	ldi	r22, 0x07	; 7
    2b12:	41 e0       	ldi	r20, 0x01	; 1
    2b14:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_voidSetPinDirection>

    lcd_command(0x33);
    2b18:	83 e3       	ldi	r24, 0x33	; 51
    2b1a:	0e 94 aa 18 	call	0x3154	; 0x3154 <lcd_command>
    2b1e:	fe 01       	movw	r30, r28
    2b20:	ef 5a       	subi	r30, 0xAF	; 175
    2b22:	ff 4f       	sbci	r31, 0xFF	; 255
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	a0 e0       	ldi	r26, 0x00	; 0
    2b2a:	b0 e4       	ldi	r27, 0x40	; 64
    2b2c:	80 83       	st	Z, r24
    2b2e:	91 83       	std	Z+1, r25	; 0x01
    2b30:	a2 83       	std	Z+2, r26	; 0x02
    2b32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b34:	8e 01       	movw	r16, r28
    2b36:	03 5b       	subi	r16, 0xB3	; 179
    2b38:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3a:	fe 01       	movw	r30, r28
    2b3c:	ef 5a       	subi	r30, 0xAF	; 175
    2b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b40:	60 81       	ld	r22, Z
    2b42:	71 81       	ldd	r23, Z+1	; 0x01
    2b44:	82 81       	ldd	r24, Z+2	; 0x02
    2b46:	93 81       	ldd	r25, Z+3	; 0x03
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	4a ef       	ldi	r20, 0xFA	; 250
    2b4e:	54 e4       	ldi	r21, 0x44	; 68
    2b50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	f8 01       	movw	r30, r16
    2b5a:	80 83       	st	Z, r24
    2b5c:	91 83       	std	Z+1, r25	; 0x01
    2b5e:	a2 83       	std	Z+2, r26	; 0x02
    2b60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b62:	fe 01       	movw	r30, r28
    2b64:	e3 5b       	subi	r30, 0xB3	; 179
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	60 81       	ld	r22, Z
    2b6a:	71 81       	ldd	r23, Z+1	; 0x01
    2b6c:	82 81       	ldd	r24, Z+2	; 0x02
    2b6e:	93 81       	ldd	r25, Z+3	; 0x03
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	40 e8       	ldi	r20, 0x80	; 128
    2b76:	5f e3       	ldi	r21, 0x3F	; 63
    2b78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b7c:	88 23       	and	r24, r24
    2b7e:	44 f4       	brge	.+16     	; 0x2b90 <lcd_init+0x39a>
		__ticks = 1;
    2b80:	fe 01       	movw	r30, r28
    2b82:	e5 5b       	subi	r30, 0xB5	; 181
    2b84:	ff 4f       	sbci	r31, 0xFF	; 255
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	91 83       	std	Z+1, r25	; 0x01
    2b8c:	80 83       	st	Z, r24
    2b8e:	64 c0       	rjmp	.+200    	; 0x2c58 <lcd_init+0x462>
	else if (__tmp > 65535)
    2b90:	fe 01       	movw	r30, r28
    2b92:	e3 5b       	subi	r30, 0xB3	; 179
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	60 81       	ld	r22, Z
    2b98:	71 81       	ldd	r23, Z+1	; 0x01
    2b9a:	82 81       	ldd	r24, Z+2	; 0x02
    2b9c:	93 81       	ldd	r25, Z+3	; 0x03
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	3f ef       	ldi	r19, 0xFF	; 255
    2ba2:	4f e7       	ldi	r20, 0x7F	; 127
    2ba4:	57 e4       	ldi	r21, 0x47	; 71
    2ba6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2baa:	18 16       	cp	r1, r24
    2bac:	0c f0       	brlt	.+2      	; 0x2bb0 <lcd_init+0x3ba>
    2bae:	43 c0       	rjmp	.+134    	; 0x2c36 <lcd_init+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	ef 5a       	subi	r30, 0xAF	; 175
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	60 81       	ld	r22, Z
    2bb8:	71 81       	ldd	r23, Z+1	; 0x01
    2bba:	82 81       	ldd	r24, Z+2	; 0x02
    2bbc:	93 81       	ldd	r25, Z+3	; 0x03
    2bbe:	20 e0       	ldi	r18, 0x00	; 0
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	40 e2       	ldi	r20, 0x20	; 32
    2bc4:	51 e4       	ldi	r21, 0x41	; 65
    2bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bca:	dc 01       	movw	r26, r24
    2bcc:	cb 01       	movw	r24, r22
    2bce:	8e 01       	movw	r16, r28
    2bd0:	05 5b       	subi	r16, 0xB5	; 181
    2bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	f8 01       	movw	r30, r16
    2be2:	91 83       	std	Z+1, r25	; 0x01
    2be4:	80 83       	st	Z, r24
    2be6:	1f c0       	rjmp	.+62     	; 0x2c26 <lcd_init+0x430>
    2be8:	fe 01       	movw	r30, r28
    2bea:	e7 5b       	subi	r30, 0xB7	; 183
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	88 ec       	ldi	r24, 0xC8	; 200
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	91 83       	std	Z+1, r25	; 0x01
    2bf4:	80 83       	st	Z, r24
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	e7 5b       	subi	r30, 0xB7	; 183
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	80 81       	ld	r24, Z
    2bfe:	91 81       	ldd	r25, Z+1	; 0x01
    2c00:	01 97       	sbiw	r24, 0x01	; 1
    2c02:	f1 f7       	brne	.-4      	; 0x2c00 <lcd_init+0x40a>
    2c04:	fe 01       	movw	r30, r28
    2c06:	e7 5b       	subi	r30, 0xB7	; 183
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	91 83       	std	Z+1, r25	; 0x01
    2c0c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c0e:	de 01       	movw	r26, r28
    2c10:	a5 5b       	subi	r26, 0xB5	; 181
    2c12:	bf 4f       	sbci	r27, 0xFF	; 255
    2c14:	fe 01       	movw	r30, r28
    2c16:	e5 5b       	subi	r30, 0xB5	; 181
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	80 81       	ld	r24, Z
    2c1c:	91 81       	ldd	r25, Z+1	; 0x01
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	11 96       	adiw	r26, 0x01	; 1
    2c22:	9c 93       	st	X, r25
    2c24:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c26:	fe 01       	movw	r30, r28
    2c28:	e5 5b       	subi	r30, 0xB5	; 181
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	80 81       	ld	r24, Z
    2c2e:	91 81       	ldd	r25, Z+1	; 0x01
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	d1 f6       	brne	.-76     	; 0x2be8 <lcd_init+0x3f2>
    2c34:	27 c0       	rjmp	.+78     	; 0x2c84 <lcd_init+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c36:	8e 01       	movw	r16, r28
    2c38:	05 5b       	subi	r16, 0xB5	; 181
    2c3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	e3 5b       	subi	r30, 0xB3	; 179
    2c40:	ff 4f       	sbci	r31, 0xFF	; 255
    2c42:	60 81       	ld	r22, Z
    2c44:	71 81       	ldd	r23, Z+1	; 0x01
    2c46:	82 81       	ldd	r24, Z+2	; 0x02
    2c48:	93 81       	ldd	r25, Z+3	; 0x03
    2c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	f8 01       	movw	r30, r16
    2c54:	91 83       	std	Z+1, r25	; 0x01
    2c56:	80 83       	st	Z, r24
    2c58:	de 01       	movw	r26, r28
    2c5a:	a9 5b       	subi	r26, 0xB9	; 185
    2c5c:	bf 4f       	sbci	r27, 0xFF	; 255
    2c5e:	fe 01       	movw	r30, r28
    2c60:	e5 5b       	subi	r30, 0xB5	; 181
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	80 81       	ld	r24, Z
    2c66:	91 81       	ldd	r25, Z+1	; 0x01
    2c68:	8d 93       	st	X+, r24
    2c6a:	9c 93       	st	X, r25
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	e9 5b       	subi	r30, 0xB9	; 185
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	80 81       	ld	r24, Z
    2c74:	91 81       	ldd	r25, Z+1	; 0x01
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	f1 f7       	brne	.-4      	; 0x2c76 <lcd_init+0x480>
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	e9 5b       	subi	r30, 0xB9	; 185
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	91 83       	std	Z+1, r25	; 0x01
    2c82:	80 83       	st	Z, r24
    _delay_ms(2);	
    lcd_command(0x32);    
    2c84:	82 e3       	ldi	r24, 0x32	; 50
    2c86:	0e 94 aa 18 	call	0x3154	; 0x3154 <lcd_command>
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	ed 5b       	subi	r30, 0xBD	; 189
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	a0 e0       	ldi	r26, 0x00	; 0
    2c96:	b0 e4       	ldi	r27, 0x40	; 64
    2c98:	80 83       	st	Z, r24
    2c9a:	91 83       	std	Z+1, r25	; 0x01
    2c9c:	a2 83       	std	Z+2, r26	; 0x02
    2c9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca0:	8e 01       	movw	r16, r28
    2ca2:	01 5c       	subi	r16, 0xC1	; 193
    2ca4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	ed 5b       	subi	r30, 0xBD	; 189
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	60 81       	ld	r22, Z
    2cae:	71 81       	ldd	r23, Z+1	; 0x01
    2cb0:	82 81       	ldd	r24, Z+2	; 0x02
    2cb2:	93 81       	ldd	r25, Z+3	; 0x03
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	4a ef       	ldi	r20, 0xFA	; 250
    2cba:	54 e4       	ldi	r21, 0x44	; 68
    2cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	f8 01       	movw	r30, r16
    2cc6:	80 83       	st	Z, r24
    2cc8:	91 83       	std	Z+1, r25	; 0x01
    2cca:	a2 83       	std	Z+2, r26	; 0x02
    2ccc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cce:	fe 01       	movw	r30, r28
    2cd0:	ff 96       	adiw	r30, 0x3f	; 63
    2cd2:	60 81       	ld	r22, Z
    2cd4:	71 81       	ldd	r23, Z+1	; 0x01
    2cd6:	82 81       	ldd	r24, Z+2	; 0x02
    2cd8:	93 81       	ldd	r25, Z+3	; 0x03
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	40 e8       	ldi	r20, 0x80	; 128
    2ce0:	5f e3       	ldi	r21, 0x3F	; 63
    2ce2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ce6:	88 23       	and	r24, r24
    2ce8:	2c f4       	brge	.+10     	; 0x2cf4 <lcd_init+0x4fe>
		__ticks = 1;
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	9e af       	std	Y+62, r25	; 0x3e
    2cf0:	8d af       	std	Y+61, r24	; 0x3d
    2cf2:	46 c0       	rjmp	.+140    	; 0x2d80 <lcd_init+0x58a>
	else if (__tmp > 65535)
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	ff 96       	adiw	r30, 0x3f	; 63
    2cf8:	60 81       	ld	r22, Z
    2cfa:	71 81       	ldd	r23, Z+1	; 0x01
    2cfc:	82 81       	ldd	r24, Z+2	; 0x02
    2cfe:	93 81       	ldd	r25, Z+3	; 0x03
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	3f ef       	ldi	r19, 0xFF	; 255
    2d04:	4f e7       	ldi	r20, 0x7F	; 127
    2d06:	57 e4       	ldi	r21, 0x47	; 71
    2d08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d0c:	18 16       	cp	r1, r24
    2d0e:	64 f5       	brge	.+88     	; 0x2d68 <lcd_init+0x572>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d10:	fe 01       	movw	r30, r28
    2d12:	ed 5b       	subi	r30, 0xBD	; 189
    2d14:	ff 4f       	sbci	r31, 0xFF	; 255
    2d16:	60 81       	ld	r22, Z
    2d18:	71 81       	ldd	r23, Z+1	; 0x01
    2d1a:	82 81       	ldd	r24, Z+2	; 0x02
    2d1c:	93 81       	ldd	r25, Z+3	; 0x03
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e2       	ldi	r20, 0x20	; 32
    2d24:	51 e4       	ldi	r21, 0x41	; 65
    2d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2a:	dc 01       	movw	r26, r24
    2d2c:	cb 01       	movw	r24, r22
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	9e af       	std	Y+62, r25	; 0x3e
    2d3c:	8d af       	std	Y+61, r24	; 0x3d
    2d3e:	0f c0       	rjmp	.+30     	; 0x2d5e <lcd_init+0x568>
    2d40:	88 ec       	ldi	r24, 0xC8	; 200
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	9c af       	std	Y+60, r25	; 0x3c
    2d46:	8b af       	std	Y+59, r24	; 0x3b
    2d48:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d4a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	f1 f7       	brne	.-4      	; 0x2d4c <lcd_init+0x556>
    2d50:	9c af       	std	Y+60, r25	; 0x3c
    2d52:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d54:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d56:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	9e af       	std	Y+62, r25	; 0x3e
    2d5c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d60:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d62:	00 97       	sbiw	r24, 0x00	; 0
    2d64:	69 f7       	brne	.-38     	; 0x2d40 <lcd_init+0x54a>
    2d66:	16 c0       	rjmp	.+44     	; 0x2d94 <lcd_init+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d68:	fe 01       	movw	r30, r28
    2d6a:	ff 96       	adiw	r30, 0x3f	; 63
    2d6c:	60 81       	ld	r22, Z
    2d6e:	71 81       	ldd	r23, Z+1	; 0x01
    2d70:	82 81       	ldd	r24, Z+2	; 0x02
    2d72:	93 81       	ldd	r25, Z+3	; 0x03
    2d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d78:	dc 01       	movw	r26, r24
    2d7a:	cb 01       	movw	r24, r22
    2d7c:	9e af       	std	Y+62, r25	; 0x3e
    2d7e:	8d af       	std	Y+61, r24	; 0x3d
    2d80:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d82:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d84:	9a af       	std	Y+58, r25	; 0x3a
    2d86:	89 af       	std	Y+57, r24	; 0x39
    2d88:	89 ad       	ldd	r24, Y+57	; 0x39
    2d8a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	f1 f7       	brne	.-4      	; 0x2d8c <lcd_init+0x596>
    2d90:	9a af       	std	Y+58, r25	; 0x3a
    2d92:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
    lcd_command(TWO_LINES_5X7_DOT_MATRIX);
    2d94:	88 e2       	ldi	r24, 0x28	; 40
    2d96:	0e 94 aa 18 	call	0x3154	; 0x3154 <lcd_command>
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	a0 e0       	ldi	r26, 0x00	; 0
    2da0:	b0 e4       	ldi	r27, 0x40	; 64
    2da2:	8d ab       	std	Y+53, r24	; 0x35
    2da4:	9e ab       	std	Y+54, r25	; 0x36
    2da6:	af ab       	std	Y+55, r26	; 0x37
    2da8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2daa:	6d a9       	ldd	r22, Y+53	; 0x35
    2dac:	7e a9       	ldd	r23, Y+54	; 0x36
    2dae:	8f a9       	ldd	r24, Y+55	; 0x37
    2db0:	98 ad       	ldd	r25, Y+56	; 0x38
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	4a ef       	ldi	r20, 0xFA	; 250
    2db8:	54 e4       	ldi	r21, 0x44	; 68
    2dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	89 ab       	std	Y+49, r24	; 0x31
    2dc4:	9a ab       	std	Y+50, r25	; 0x32
    2dc6:	ab ab       	std	Y+51, r26	; 0x33
    2dc8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dca:	69 a9       	ldd	r22, Y+49	; 0x31
    2dcc:	7a a9       	ldd	r23, Y+50	; 0x32
    2dce:	8b a9       	ldd	r24, Y+51	; 0x33
    2dd0:	9c a9       	ldd	r25, Y+52	; 0x34
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e8       	ldi	r20, 0x80	; 128
    2dd8:	5f e3       	ldi	r21, 0x3F	; 63
    2dda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dde:	88 23       	and	r24, r24
    2de0:	2c f4       	brge	.+10     	; 0x2dec <lcd_init+0x5f6>
		__ticks = 1;
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	98 ab       	std	Y+48, r25	; 0x30
    2de8:	8f a7       	std	Y+47, r24	; 0x2f
    2dea:	3f c0       	rjmp	.+126    	; 0x2e6a <lcd_init+0x674>
	else if (__tmp > 65535)
    2dec:	69 a9       	ldd	r22, Y+49	; 0x31
    2dee:	7a a9       	ldd	r23, Y+50	; 0x32
    2df0:	8b a9       	ldd	r24, Y+51	; 0x33
    2df2:	9c a9       	ldd	r25, Y+52	; 0x34
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	3f ef       	ldi	r19, 0xFF	; 255
    2df8:	4f e7       	ldi	r20, 0x7F	; 127
    2dfa:	57 e4       	ldi	r21, 0x47	; 71
    2dfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e00:	18 16       	cp	r1, r24
    2e02:	4c f5       	brge	.+82     	; 0x2e56 <lcd_init+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e04:	6d a9       	ldd	r22, Y+53	; 0x35
    2e06:	7e a9       	ldd	r23, Y+54	; 0x36
    2e08:	8f a9       	ldd	r24, Y+55	; 0x37
    2e0a:	98 ad       	ldd	r25, Y+56	; 0x38
    2e0c:	20 e0       	ldi	r18, 0x00	; 0
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	40 e2       	ldi	r20, 0x20	; 32
    2e12:	51 e4       	ldi	r21, 0x41	; 65
    2e14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	cd 01       	movw	r24, r26
    2e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	98 ab       	std	Y+48, r25	; 0x30
    2e2a:	8f a7       	std	Y+47, r24	; 0x2f
    2e2c:	0f c0       	rjmp	.+30     	; 0x2e4c <lcd_init+0x656>
    2e2e:	88 ec       	ldi	r24, 0xC8	; 200
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	9e a7       	std	Y+46, r25	; 0x2e
    2e34:	8d a7       	std	Y+45, r24	; 0x2d
    2e36:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e38:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	f1 f7       	brne	.-4      	; 0x2e3a <lcd_init+0x644>
    2e3e:	9e a7       	std	Y+46, r25	; 0x2e
    2e40:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e42:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e44:	98 a9       	ldd	r25, Y+48	; 0x30
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	98 ab       	std	Y+48, r25	; 0x30
    2e4a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e4e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e50:	00 97       	sbiw	r24, 0x00	; 0
    2e52:	69 f7       	brne	.-38     	; 0x2e2e <lcd_init+0x638>
    2e54:	14 c0       	rjmp	.+40     	; 0x2e7e <lcd_init+0x688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e56:	69 a9       	ldd	r22, Y+49	; 0x31
    2e58:	7a a9       	ldd	r23, Y+50	; 0x32
    2e5a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e5c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	98 ab       	std	Y+48, r25	; 0x30
    2e68:	8f a7       	std	Y+47, r24	; 0x2f
    2e6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e6c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e6e:	9c a7       	std	Y+44, r25	; 0x2c
    2e70:	8b a7       	std	Y+43, r24	; 0x2b
    2e72:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e74:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	f1 f7       	brne	.-4      	; 0x2e76 <lcd_init+0x680>
    2e7a:	9c a7       	std	Y+44, r25	; 0x2c
    2e7c:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);
    lcd_command(DISPLAY_ON_CURSOR_OFF);
    2e7e:	8c e0       	ldi	r24, 0x0C	; 12
    2e80:	0e 94 aa 18 	call	0x3154	; 0x3154 <lcd_command>
    2e84:	80 e0       	ldi	r24, 0x00	; 0
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	a0 e0       	ldi	r26, 0x00	; 0
    2e8a:	b0 e4       	ldi	r27, 0x40	; 64
    2e8c:	8f a3       	std	Y+39, r24	; 0x27
    2e8e:	98 a7       	std	Y+40, r25	; 0x28
    2e90:	a9 a7       	std	Y+41, r26	; 0x29
    2e92:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e94:	6f a1       	ldd	r22, Y+39	; 0x27
    2e96:	78 a5       	ldd	r23, Y+40	; 0x28
    2e98:	89 a5       	ldd	r24, Y+41	; 0x29
    2e9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	4a ef       	ldi	r20, 0xFA	; 250
    2ea2:	54 e4       	ldi	r21, 0x44	; 68
    2ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	8b a3       	std	Y+35, r24	; 0x23
    2eae:	9c a3       	std	Y+36, r25	; 0x24
    2eb0:	ad a3       	std	Y+37, r26	; 0x25
    2eb2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2eb4:	6b a1       	ldd	r22, Y+35	; 0x23
    2eb6:	7c a1       	ldd	r23, Y+36	; 0x24
    2eb8:	8d a1       	ldd	r24, Y+37	; 0x25
    2eba:	9e a1       	ldd	r25, Y+38	; 0x26
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	40 e8       	ldi	r20, 0x80	; 128
    2ec2:	5f e3       	ldi	r21, 0x3F	; 63
    2ec4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ec8:	88 23       	and	r24, r24
    2eca:	2c f4       	brge	.+10     	; 0x2ed6 <lcd_init+0x6e0>
		__ticks = 1;
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	9a a3       	std	Y+34, r25	; 0x22
    2ed2:	89 a3       	std	Y+33, r24	; 0x21
    2ed4:	3f c0       	rjmp	.+126    	; 0x2f54 <lcd_init+0x75e>
	else if (__tmp > 65535)
    2ed6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ed8:	7c a1       	ldd	r23, Y+36	; 0x24
    2eda:	8d a1       	ldd	r24, Y+37	; 0x25
    2edc:	9e a1       	ldd	r25, Y+38	; 0x26
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	3f ef       	ldi	r19, 0xFF	; 255
    2ee2:	4f e7       	ldi	r20, 0x7F	; 127
    2ee4:	57 e4       	ldi	r21, 0x47	; 71
    2ee6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eea:	18 16       	cp	r1, r24
    2eec:	4c f5       	brge	.+82     	; 0x2f40 <lcd_init+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eee:	6f a1       	ldd	r22, Y+39	; 0x27
    2ef0:	78 a5       	ldd	r23, Y+40	; 0x28
    2ef2:	89 a5       	ldd	r24, Y+41	; 0x29
    2ef4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	30 e0       	ldi	r19, 0x00	; 0
    2efa:	40 e2       	ldi	r20, 0x20	; 32
    2efc:	51 e4       	ldi	r21, 0x41	; 65
    2efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f02:	dc 01       	movw	r26, r24
    2f04:	cb 01       	movw	r24, r22
    2f06:	bc 01       	movw	r22, r24
    2f08:	cd 01       	movw	r24, r26
    2f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	9a a3       	std	Y+34, r25	; 0x22
    2f14:	89 a3       	std	Y+33, r24	; 0x21
    2f16:	0f c0       	rjmp	.+30     	; 0x2f36 <lcd_init+0x740>
    2f18:	88 ec       	ldi	r24, 0xC8	; 200
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	98 a3       	std	Y+32, r25	; 0x20
    2f1e:	8f 8f       	std	Y+31, r24	; 0x1f
    2f20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f22:	98 a1       	ldd	r25, Y+32	; 0x20
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	f1 f7       	brne	.-4      	; 0x2f24 <lcd_init+0x72e>
    2f28:	98 a3       	std	Y+32, r25	; 0x20
    2f2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	9a a3       	std	Y+34, r25	; 0x22
    2f34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f36:	89 a1       	ldd	r24, Y+33	; 0x21
    2f38:	9a a1       	ldd	r25, Y+34	; 0x22
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	69 f7       	brne	.-38     	; 0x2f18 <lcd_init+0x722>
    2f3e:	14 c0       	rjmp	.+40     	; 0x2f68 <lcd_init+0x772>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f40:	6b a1       	ldd	r22, Y+35	; 0x23
    2f42:	7c a1       	ldd	r23, Y+36	; 0x24
    2f44:	8d a1       	ldd	r24, Y+37	; 0x25
    2f46:	9e a1       	ldd	r25, Y+38	; 0x26
    2f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	9a a3       	std	Y+34, r25	; 0x22
    2f52:	89 a3       	std	Y+33, r24	; 0x21
    2f54:	89 a1       	ldd	r24, Y+33	; 0x21
    2f56:	9a a1       	ldd	r25, Y+34	; 0x22
    2f58:	9e 8f       	std	Y+30, r25	; 0x1e
    2f5a:	8d 8f       	std	Y+29, r24	; 0x1d
    2f5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	f1 f7       	brne	.-4      	; 0x2f60 <lcd_init+0x76a>
    2f64:	9e 8f       	std	Y+30, r25	; 0x1e
    2f66:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);	
    lcd_command(INCREMENT_CURSOR);
    2f68:	86 e0       	ldi	r24, 0x06	; 6
    2f6a:	0e 94 aa 18 	call	0x3154	; 0x3154 <lcd_command>
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	a0 e0       	ldi	r26, 0x00	; 0
    2f74:	b0 e4       	ldi	r27, 0x40	; 64
    2f76:	89 8f       	std	Y+25, r24	; 0x19
    2f78:	9a 8f       	std	Y+26, r25	; 0x1a
    2f7a:	ab 8f       	std	Y+27, r26	; 0x1b
    2f7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f7e:	69 8d       	ldd	r22, Y+25	; 0x19
    2f80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f86:	20 e0       	ldi	r18, 0x00	; 0
    2f88:	30 e0       	ldi	r19, 0x00	; 0
    2f8a:	4a ef       	ldi	r20, 0xFA	; 250
    2f8c:	54 e4       	ldi	r21, 0x44	; 68
    2f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	8d 8b       	std	Y+21, r24	; 0x15
    2f98:	9e 8b       	std	Y+22, r25	; 0x16
    2f9a:	af 8b       	std	Y+23, r26	; 0x17
    2f9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2fa0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fa2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fa4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	40 e8       	ldi	r20, 0x80	; 128
    2fac:	5f e3       	ldi	r21, 0x3F	; 63
    2fae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fb2:	88 23       	and	r24, r24
    2fb4:	2c f4       	brge	.+10     	; 0x2fc0 <lcd_init+0x7ca>
		__ticks = 1;
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	9c 8b       	std	Y+20, r25	; 0x14
    2fbc:	8b 8b       	std	Y+19, r24	; 0x13
    2fbe:	3f c0       	rjmp	.+126    	; 0x303e <lcd_init+0x848>
	else if (__tmp > 65535)
    2fc0:	6d 89       	ldd	r22, Y+21	; 0x15
    2fc2:	7e 89       	ldd	r23, Y+22	; 0x16
    2fc4:	8f 89       	ldd	r24, Y+23	; 0x17
    2fc6:	98 8d       	ldd	r25, Y+24	; 0x18
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	3f ef       	ldi	r19, 0xFF	; 255
    2fcc:	4f e7       	ldi	r20, 0x7F	; 127
    2fce:	57 e4       	ldi	r21, 0x47	; 71
    2fd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fd4:	18 16       	cp	r1, r24
    2fd6:	4c f5       	brge	.+82     	; 0x302a <lcd_init+0x834>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd8:	69 8d       	ldd	r22, Y+25	; 0x19
    2fda:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fde:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	40 e2       	ldi	r20, 0x20	; 32
    2fe6:	51 e4       	ldi	r21, 0x41	; 65
    2fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	bc 01       	movw	r22, r24
    2ff2:	cd 01       	movw	r24, r26
    2ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	9c 8b       	std	Y+20, r25	; 0x14
    2ffe:	8b 8b       	std	Y+19, r24	; 0x13
    3000:	0f c0       	rjmp	.+30     	; 0x3020 <lcd_init+0x82a>
    3002:	88 ec       	ldi	r24, 0xC8	; 200
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	9a 8b       	std	Y+18, r25	; 0x12
    3008:	89 8b       	std	Y+17, r24	; 0x11
    300a:	89 89       	ldd	r24, Y+17	; 0x11
    300c:	9a 89       	ldd	r25, Y+18	; 0x12
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	f1 f7       	brne	.-4      	; 0x300e <lcd_init+0x818>
    3012:	9a 8b       	std	Y+18, r25	; 0x12
    3014:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3016:	8b 89       	ldd	r24, Y+19	; 0x13
    3018:	9c 89       	ldd	r25, Y+20	; 0x14
    301a:	01 97       	sbiw	r24, 0x01	; 1
    301c:	9c 8b       	std	Y+20, r25	; 0x14
    301e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3020:	8b 89       	ldd	r24, Y+19	; 0x13
    3022:	9c 89       	ldd	r25, Y+20	; 0x14
    3024:	00 97       	sbiw	r24, 0x00	; 0
    3026:	69 f7       	brne	.-38     	; 0x3002 <lcd_init+0x80c>
    3028:	14 c0       	rjmp	.+40     	; 0x3052 <lcd_init+0x85c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    302a:	6d 89       	ldd	r22, Y+21	; 0x15
    302c:	7e 89       	ldd	r23, Y+22	; 0x16
    302e:	8f 89       	ldd	r24, Y+23	; 0x17
    3030:	98 8d       	ldd	r25, Y+24	; 0x18
    3032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	9c 8b       	std	Y+20, r25	; 0x14
    303c:	8b 8b       	std	Y+19, r24	; 0x13
    303e:	8b 89       	ldd	r24, Y+19	; 0x13
    3040:	9c 89       	ldd	r25, Y+20	; 0x14
    3042:	98 8b       	std	Y+16, r25	; 0x10
    3044:	8f 87       	std	Y+15, r24	; 0x0f
    3046:	8f 85       	ldd	r24, Y+15	; 0x0f
    3048:	98 89       	ldd	r25, Y+16	; 0x10
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	f1 f7       	brne	.-4      	; 0x304a <lcd_init+0x854>
    304e:	98 8b       	std	Y+16, r25	; 0x10
    3050:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);   	
    lcd_command(DISPLAY_CLEAR);
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	0e 94 aa 18 	call	0x3154	; 0x3154 <lcd_command>
    3058:	80 e0       	ldi	r24, 0x00	; 0
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	a0 e0       	ldi	r26, 0x00	; 0
    305e:	b0 e4       	ldi	r27, 0x40	; 64
    3060:	8b 87       	std	Y+11, r24	; 0x0b
    3062:	9c 87       	std	Y+12, r25	; 0x0c
    3064:	ad 87       	std	Y+13, r26	; 0x0d
    3066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3068:	6b 85       	ldd	r22, Y+11	; 0x0b
    306a:	7c 85       	ldd	r23, Y+12	; 0x0c
    306c:	8d 85       	ldd	r24, Y+13	; 0x0d
    306e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3070:	20 e0       	ldi	r18, 0x00	; 0
    3072:	30 e0       	ldi	r19, 0x00	; 0
    3074:	4a ef       	ldi	r20, 0xFA	; 250
    3076:	54 e4       	ldi	r21, 0x44	; 68
    3078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307c:	dc 01       	movw	r26, r24
    307e:	cb 01       	movw	r24, r22
    3080:	8f 83       	std	Y+7, r24	; 0x07
    3082:	98 87       	std	Y+8, r25	; 0x08
    3084:	a9 87       	std	Y+9, r26	; 0x09
    3086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3088:	6f 81       	ldd	r22, Y+7	; 0x07
    308a:	78 85       	ldd	r23, Y+8	; 0x08
    308c:	89 85       	ldd	r24, Y+9	; 0x09
    308e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	40 e8       	ldi	r20, 0x80	; 128
    3096:	5f e3       	ldi	r21, 0x3F	; 63
    3098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    309c:	88 23       	and	r24, r24
    309e:	2c f4       	brge	.+10     	; 0x30aa <lcd_init+0x8b4>
		__ticks = 1;
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	9e 83       	std	Y+6, r25	; 0x06
    30a6:	8d 83       	std	Y+5, r24	; 0x05
    30a8:	3f c0       	rjmp	.+126    	; 0x3128 <lcd_init+0x932>
	else if (__tmp > 65535)
    30aa:	6f 81       	ldd	r22, Y+7	; 0x07
    30ac:	78 85       	ldd	r23, Y+8	; 0x08
    30ae:	89 85       	ldd	r24, Y+9	; 0x09
    30b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	3f ef       	ldi	r19, 0xFF	; 255
    30b6:	4f e7       	ldi	r20, 0x7F	; 127
    30b8:	57 e4       	ldi	r21, 0x47	; 71
    30ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30be:	18 16       	cp	r1, r24
    30c0:	4c f5       	brge	.+82     	; 0x3114 <lcd_init+0x91e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e0       	ldi	r19, 0x00	; 0
    30ce:	40 e2       	ldi	r20, 0x20	; 32
    30d0:	51 e4       	ldi	r21, 0x41	; 65
    30d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	bc 01       	movw	r22, r24
    30dc:	cd 01       	movw	r24, r26
    30de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	9e 83       	std	Y+6, r25	; 0x06
    30e8:	8d 83       	std	Y+5, r24	; 0x05
    30ea:	0f c0       	rjmp	.+30     	; 0x310a <lcd_init+0x914>
    30ec:	88 ec       	ldi	r24, 0xC8	; 200
    30ee:	90 e0       	ldi	r25, 0x00	; 0
    30f0:	9c 83       	std	Y+4, r25	; 0x04
    30f2:	8b 83       	std	Y+3, r24	; 0x03
    30f4:	8b 81       	ldd	r24, Y+3	; 0x03
    30f6:	9c 81       	ldd	r25, Y+4	; 0x04
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	f1 f7       	brne	.-4      	; 0x30f8 <lcd_init+0x902>
    30fc:	9c 83       	std	Y+4, r25	; 0x04
    30fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3100:	8d 81       	ldd	r24, Y+5	; 0x05
    3102:	9e 81       	ldd	r25, Y+6	; 0x06
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	9e 83       	std	Y+6, r25	; 0x06
    3108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    310a:	8d 81       	ldd	r24, Y+5	; 0x05
    310c:	9e 81       	ldd	r25, Y+6	; 0x06
    310e:	00 97       	sbiw	r24, 0x00	; 0
    3110:	69 f7       	brne	.-38     	; 0x30ec <lcd_init+0x8f6>
    3112:	14 c0       	rjmp	.+40     	; 0x313c <lcd_init+0x946>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3114:	6f 81       	ldd	r22, Y+7	; 0x07
    3116:	78 85       	ldd	r23, Y+8	; 0x08
    3118:	89 85       	ldd	r24, Y+9	; 0x09
    311a:	9a 85       	ldd	r25, Y+10	; 0x0a
    311c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3120:	dc 01       	movw	r26, r24
    3122:	cb 01       	movw	r24, r22
    3124:	9e 83       	std	Y+6, r25	; 0x06
    3126:	8d 83       	std	Y+5, r24	; 0x05
    3128:	8d 81       	ldd	r24, Y+5	; 0x05
    312a:	9e 81       	ldd	r25, Y+6	; 0x06
    312c:	9a 83       	std	Y+2, r25	; 0x02
    312e:	89 83       	std	Y+1, r24	; 0x01
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	9a 81       	ldd	r25, Y+2	; 0x02
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	f1 f7       	brne	.-4      	; 0x3134 <lcd_init+0x93e>
    3138:	9a 83       	std	Y+2, r25	; 0x02
    313a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    313c:	c0 59       	subi	r28, 0x90	; 144
    313e:	df 4f       	sbci	r29, 0xFF	; 255
    3140:	0f b6       	in	r0, 0x3f	; 63
    3142:	f8 94       	cli
    3144:	de bf       	out	0x3e, r29	; 62
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	cd bf       	out	0x3d, r28	; 61
    314a:	cf 91       	pop	r28
    314c:	df 91       	pop	r29
    314e:	1f 91       	pop	r17
    3150:	0f 91       	pop	r16
    3152:	08 95       	ret

00003154 <lcd_command>:
void lcd_command(uint8_t cmd)
{
    3154:	0f 93       	push	r16
    3156:	1f 93       	push	r17
    3158:	df 93       	push	r29
    315a:	cf 93       	push	r28
    315c:	cd b7       	in	r28, 0x3d	; 61
    315e:	de b7       	in	r29, 0x3e	; 62
    3160:	c7 54       	subi	r28, 0x47	; 71
    3162:	d0 40       	sbci	r29, 0x00	; 0
    3164:	0f b6       	in	r0, 0x3f	; 63
    3166:	f8 94       	cli
    3168:	de bf       	out	0x3e, r29	; 62
    316a:	0f be       	out	0x3f, r0	; 63
    316c:	cd bf       	out	0x3d, r28	; 61
    316e:	fe 01       	movw	r30, r28
    3170:	e9 5b       	subi	r30, 0xB9	; 185
    3172:	ff 4f       	sbci	r31, 0xFF	; 255
    3174:	80 83       	st	Z, r24
    DIO_voidSetPortValue(LCD_DATA_PORT, ((PORTC&0x0f)|(cmd&0xf0)));
    3176:	e5 e3       	ldi	r30, 0x35	; 53
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	80 81       	ld	r24, Z
    317c:	98 2f       	mov	r25, r24
    317e:	9f 70       	andi	r25, 0x0F	; 15
    3180:	fe 01       	movw	r30, r28
    3182:	e9 5b       	subi	r30, 0xB9	; 185
    3184:	ff 4f       	sbci	r31, 0xFF	; 255
    3186:	80 81       	ld	r24, Z
    3188:	80 7f       	andi	r24, 0xF0	; 240
    318a:	89 2b       	or	r24, r25
    318c:	98 2f       	mov	r25, r24
    318e:	82 e0       	ldi	r24, 0x02	; 2
    3190:	69 2f       	mov	r22, r25
    3192:	0e 94 18 11 	call	0x2230	; 0x2230 <DIO_voidSetPortValue>
    DIO_voidSetPinValue(LS_PIN,LOW);
    3196:	82 e0       	ldi	r24, 0x02	; 2
    3198:	62 e0       	ldi	r22, 0x02	; 2
    319a:	40 e0       	ldi	r20, 0x00	; 0
    319c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    //DIO_voidSetPinValue(R_W_PIN,LOW);
    DIO_voidSetPinValue(EN_PIN,HIGH);    
    31a0:	82 e0       	ldi	r24, 0x02	; 2
    31a2:	63 e0       	ldi	r22, 0x03	; 3
    31a4:	41 e0       	ldi	r20, 0x01	; 1
    31a6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    31aa:	fe 01       	movw	r30, r28
    31ac:	ed 5b       	subi	r30, 0xBD	; 189
    31ae:	ff 4f       	sbci	r31, 0xFF	; 255
    31b0:	80 e0       	ldi	r24, 0x00	; 0
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	a0 e0       	ldi	r26, 0x00	; 0
    31b6:	b0 e4       	ldi	r27, 0x40	; 64
    31b8:	80 83       	st	Z, r24
    31ba:	91 83       	std	Z+1, r25	; 0x01
    31bc:	a2 83       	std	Z+2, r26	; 0x02
    31be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c0:	8e 01       	movw	r16, r28
    31c2:	01 5c       	subi	r16, 0xC1	; 193
    31c4:	1f 4f       	sbci	r17, 0xFF	; 255
    31c6:	fe 01       	movw	r30, r28
    31c8:	ed 5b       	subi	r30, 0xBD	; 189
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	60 81       	ld	r22, Z
    31ce:	71 81       	ldd	r23, Z+1	; 0x01
    31d0:	82 81       	ldd	r24, Z+2	; 0x02
    31d2:	93 81       	ldd	r25, Z+3	; 0x03
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	4a ef       	ldi	r20, 0xFA	; 250
    31da:	54 e4       	ldi	r21, 0x44	; 68
    31dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	f8 01       	movw	r30, r16
    31e6:	80 83       	st	Z, r24
    31e8:	91 83       	std	Z+1, r25	; 0x01
    31ea:	a2 83       	std	Z+2, r26	; 0x02
    31ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31ee:	fe 01       	movw	r30, r28
    31f0:	ff 96       	adiw	r30, 0x3f	; 63
    31f2:	60 81       	ld	r22, Z
    31f4:	71 81       	ldd	r23, Z+1	; 0x01
    31f6:	82 81       	ldd	r24, Z+2	; 0x02
    31f8:	93 81       	ldd	r25, Z+3	; 0x03
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	40 e8       	ldi	r20, 0x80	; 128
    3200:	5f e3       	ldi	r21, 0x3F	; 63
    3202:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3206:	88 23       	and	r24, r24
    3208:	2c f4       	brge	.+10     	; 0x3214 <lcd_command+0xc0>
		__ticks = 1;
    320a:	81 e0       	ldi	r24, 0x01	; 1
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	9e af       	std	Y+62, r25	; 0x3e
    3210:	8d af       	std	Y+61, r24	; 0x3d
    3212:	46 c0       	rjmp	.+140    	; 0x32a0 <lcd_command+0x14c>
	else if (__tmp > 65535)
    3214:	fe 01       	movw	r30, r28
    3216:	ff 96       	adiw	r30, 0x3f	; 63
    3218:	60 81       	ld	r22, Z
    321a:	71 81       	ldd	r23, Z+1	; 0x01
    321c:	82 81       	ldd	r24, Z+2	; 0x02
    321e:	93 81       	ldd	r25, Z+3	; 0x03
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	3f ef       	ldi	r19, 0xFF	; 255
    3224:	4f e7       	ldi	r20, 0x7F	; 127
    3226:	57 e4       	ldi	r21, 0x47	; 71
    3228:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    322c:	18 16       	cp	r1, r24
    322e:	64 f5       	brge	.+88     	; 0x3288 <lcd_command+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3230:	fe 01       	movw	r30, r28
    3232:	ed 5b       	subi	r30, 0xBD	; 189
    3234:	ff 4f       	sbci	r31, 0xFF	; 255
    3236:	60 81       	ld	r22, Z
    3238:	71 81       	ldd	r23, Z+1	; 0x01
    323a:	82 81       	ldd	r24, Z+2	; 0x02
    323c:	93 81       	ldd	r25, Z+3	; 0x03
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	40 e2       	ldi	r20, 0x20	; 32
    3244:	51 e4       	ldi	r21, 0x41	; 65
    3246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	bc 01       	movw	r22, r24
    3250:	cd 01       	movw	r24, r26
    3252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	9e af       	std	Y+62, r25	; 0x3e
    325c:	8d af       	std	Y+61, r24	; 0x3d
    325e:	0f c0       	rjmp	.+30     	; 0x327e <lcd_command+0x12a>
    3260:	88 ec       	ldi	r24, 0xC8	; 200
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	9c af       	std	Y+60, r25	; 0x3c
    3266:	8b af       	std	Y+59, r24	; 0x3b
    3268:	8b ad       	ldd	r24, Y+59	; 0x3b
    326a:	9c ad       	ldd	r25, Y+60	; 0x3c
    326c:	01 97       	sbiw	r24, 0x01	; 1
    326e:	f1 f7       	brne	.-4      	; 0x326c <lcd_command+0x118>
    3270:	9c af       	std	Y+60, r25	; 0x3c
    3272:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3274:	8d ad       	ldd	r24, Y+61	; 0x3d
    3276:	9e ad       	ldd	r25, Y+62	; 0x3e
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	9e af       	std	Y+62, r25	; 0x3e
    327c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3280:	9e ad       	ldd	r25, Y+62	; 0x3e
    3282:	00 97       	sbiw	r24, 0x00	; 0
    3284:	69 f7       	brne	.-38     	; 0x3260 <lcd_command+0x10c>
    3286:	16 c0       	rjmp	.+44     	; 0x32b4 <lcd_command+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3288:	fe 01       	movw	r30, r28
    328a:	ff 96       	adiw	r30, 0x3f	; 63
    328c:	60 81       	ld	r22, Z
    328e:	71 81       	ldd	r23, Z+1	; 0x01
    3290:	82 81       	ldd	r24, Z+2	; 0x02
    3292:	93 81       	ldd	r25, Z+3	; 0x03
    3294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	9e af       	std	Y+62, r25	; 0x3e
    329e:	8d af       	std	Y+61, r24	; 0x3d
    32a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    32a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    32a4:	9a af       	std	Y+58, r25	; 0x3a
    32a6:	89 af       	std	Y+57, r24	; 0x39
    32a8:	89 ad       	ldd	r24, Y+57	; 0x39
    32aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    32ac:	01 97       	sbiw	r24, 0x01	; 1
    32ae:	f1 f7       	brne	.-4      	; 0x32ac <lcd_command+0x158>
    32b0:	9a af       	std	Y+58, r25	; 0x3a
    32b2:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(2);    
    DIO_voidSetPinValue(EN_PIN,LOW);
    32b4:	82 e0       	ldi	r24, 0x02	; 2
    32b6:	63 e0       	ldi	r22, 0x03	; 3
    32b8:	40 e0       	ldi	r20, 0x00	; 0
    32ba:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	a0 e0       	ldi	r26, 0x00	; 0
    32c4:	b0 e4       	ldi	r27, 0x40	; 64
    32c6:	8d ab       	std	Y+53, r24	; 0x35
    32c8:	9e ab       	std	Y+54, r25	; 0x36
    32ca:	af ab       	std	Y+55, r26	; 0x37
    32cc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ce:	6d a9       	ldd	r22, Y+53	; 0x35
    32d0:	7e a9       	ldd	r23, Y+54	; 0x36
    32d2:	8f a9       	ldd	r24, Y+55	; 0x37
    32d4:	98 ad       	ldd	r25, Y+56	; 0x38
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	4a ef       	ldi	r20, 0xFA	; 250
    32dc:	54 e4       	ldi	r21, 0x44	; 68
    32de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	89 ab       	std	Y+49, r24	; 0x31
    32e8:	9a ab       	std	Y+50, r25	; 0x32
    32ea:	ab ab       	std	Y+51, r26	; 0x33
    32ec:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32ee:	69 a9       	ldd	r22, Y+49	; 0x31
    32f0:	7a a9       	ldd	r23, Y+50	; 0x32
    32f2:	8b a9       	ldd	r24, Y+51	; 0x33
    32f4:	9c a9       	ldd	r25, Y+52	; 0x34
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e8       	ldi	r20, 0x80	; 128
    32fc:	5f e3       	ldi	r21, 0x3F	; 63
    32fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3302:	88 23       	and	r24, r24
    3304:	2c f4       	brge	.+10     	; 0x3310 <lcd_command+0x1bc>
		__ticks = 1;
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	90 e0       	ldi	r25, 0x00	; 0
    330a:	98 ab       	std	Y+48, r25	; 0x30
    330c:	8f a7       	std	Y+47, r24	; 0x2f
    330e:	3f c0       	rjmp	.+126    	; 0x338e <lcd_command+0x23a>
	else if (__tmp > 65535)
    3310:	69 a9       	ldd	r22, Y+49	; 0x31
    3312:	7a a9       	ldd	r23, Y+50	; 0x32
    3314:	8b a9       	ldd	r24, Y+51	; 0x33
    3316:	9c a9       	ldd	r25, Y+52	; 0x34
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	3f ef       	ldi	r19, 0xFF	; 255
    331c:	4f e7       	ldi	r20, 0x7F	; 127
    331e:	57 e4       	ldi	r21, 0x47	; 71
    3320:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3324:	18 16       	cp	r1, r24
    3326:	4c f5       	brge	.+82     	; 0x337a <lcd_command+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3328:	6d a9       	ldd	r22, Y+53	; 0x35
    332a:	7e a9       	ldd	r23, Y+54	; 0x36
    332c:	8f a9       	ldd	r24, Y+55	; 0x37
    332e:	98 ad       	ldd	r25, Y+56	; 0x38
    3330:	20 e0       	ldi	r18, 0x00	; 0
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	40 e2       	ldi	r20, 0x20	; 32
    3336:	51 e4       	ldi	r21, 0x41	; 65
    3338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333c:	dc 01       	movw	r26, r24
    333e:	cb 01       	movw	r24, r22
    3340:	bc 01       	movw	r22, r24
    3342:	cd 01       	movw	r24, r26
    3344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3348:	dc 01       	movw	r26, r24
    334a:	cb 01       	movw	r24, r22
    334c:	98 ab       	std	Y+48, r25	; 0x30
    334e:	8f a7       	std	Y+47, r24	; 0x2f
    3350:	0f c0       	rjmp	.+30     	; 0x3370 <lcd_command+0x21c>
    3352:	88 ec       	ldi	r24, 0xC8	; 200
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	9e a7       	std	Y+46, r25	; 0x2e
    3358:	8d a7       	std	Y+45, r24	; 0x2d
    335a:	8d a5       	ldd	r24, Y+45	; 0x2d
    335c:	9e a5       	ldd	r25, Y+46	; 0x2e
    335e:	01 97       	sbiw	r24, 0x01	; 1
    3360:	f1 f7       	brne	.-4      	; 0x335e <lcd_command+0x20a>
    3362:	9e a7       	std	Y+46, r25	; 0x2e
    3364:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3366:	8f a5       	ldd	r24, Y+47	; 0x2f
    3368:	98 a9       	ldd	r25, Y+48	; 0x30
    336a:	01 97       	sbiw	r24, 0x01	; 1
    336c:	98 ab       	std	Y+48, r25	; 0x30
    336e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3370:	8f a5       	ldd	r24, Y+47	; 0x2f
    3372:	98 a9       	ldd	r25, Y+48	; 0x30
    3374:	00 97       	sbiw	r24, 0x00	; 0
    3376:	69 f7       	brne	.-38     	; 0x3352 <lcd_command+0x1fe>
    3378:	14 c0       	rjmp	.+40     	; 0x33a2 <lcd_command+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    337a:	69 a9       	ldd	r22, Y+49	; 0x31
    337c:	7a a9       	ldd	r23, Y+50	; 0x32
    337e:	8b a9       	ldd	r24, Y+51	; 0x33
    3380:	9c a9       	ldd	r25, Y+52	; 0x34
    3382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3386:	dc 01       	movw	r26, r24
    3388:	cb 01       	movw	r24, r22
    338a:	98 ab       	std	Y+48, r25	; 0x30
    338c:	8f a7       	std	Y+47, r24	; 0x2f
    338e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3390:	98 a9       	ldd	r25, Y+48	; 0x30
    3392:	9c a7       	std	Y+44, r25	; 0x2c
    3394:	8b a7       	std	Y+43, r24	; 0x2b
    3396:	8b a5       	ldd	r24, Y+43	; 0x2b
    3398:	9c a5       	ldd	r25, Y+44	; 0x2c
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	f1 f7       	brne	.-4      	; 0x339a <lcd_command+0x246>
    339e:	9c a7       	std	Y+44, r25	; 0x2c
    33a0:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);     
    DIO_voidSetPortValue(LCD_DATA_PORT, ((PORTC&0x0f)|(cmd<<4)));
    33a2:	e5 e3       	ldi	r30, 0x35	; 53
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	80 81       	ld	r24, Z
    33a8:	28 2f       	mov	r18, r24
    33aa:	2f 70       	andi	r18, 0x0F	; 15
    33ac:	fe 01       	movw	r30, r28
    33ae:	e9 5b       	subi	r30, 0xB9	; 185
    33b0:	ff 4f       	sbci	r31, 0xFF	; 255
    33b2:	80 81       	ld	r24, Z
    33b4:	88 2f       	mov	r24, r24
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	82 95       	swap	r24
    33ba:	92 95       	swap	r25
    33bc:	90 7f       	andi	r25, 0xF0	; 240
    33be:	98 27       	eor	r25, r24
    33c0:	80 7f       	andi	r24, 0xF0	; 240
    33c2:	98 27       	eor	r25, r24
    33c4:	82 2b       	or	r24, r18
    33c6:	98 2f       	mov	r25, r24
    33c8:	82 e0       	ldi	r24, 0x02	; 2
    33ca:	69 2f       	mov	r22, r25
    33cc:	0e 94 18 11 	call	0x2230	; 0x2230 <DIO_voidSetPortValue>
    DIO_voidSetPinValue(EN_PIN,HIGH);  
    33d0:	82 e0       	ldi	r24, 0x02	; 2
    33d2:	63 e0       	ldi	r22, 0x03	; 3
    33d4:	41 e0       	ldi	r20, 0x01	; 1
    33d6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    33da:	80 e0       	ldi	r24, 0x00	; 0
    33dc:	90 e0       	ldi	r25, 0x00	; 0
    33de:	a0 e0       	ldi	r26, 0x00	; 0
    33e0:	b0 e4       	ldi	r27, 0x40	; 64
    33e2:	8f a3       	std	Y+39, r24	; 0x27
    33e4:	98 a7       	std	Y+40, r25	; 0x28
    33e6:	a9 a7       	std	Y+41, r26	; 0x29
    33e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33ea:	6f a1       	ldd	r22, Y+39	; 0x27
    33ec:	78 a5       	ldd	r23, Y+40	; 0x28
    33ee:	89 a5       	ldd	r24, Y+41	; 0x29
    33f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    33f2:	20 e0       	ldi	r18, 0x00	; 0
    33f4:	30 e0       	ldi	r19, 0x00	; 0
    33f6:	4a ef       	ldi	r20, 0xFA	; 250
    33f8:	54 e4       	ldi	r21, 0x44	; 68
    33fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	8b a3       	std	Y+35, r24	; 0x23
    3404:	9c a3       	std	Y+36, r25	; 0x24
    3406:	ad a3       	std	Y+37, r26	; 0x25
    3408:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    340a:	6b a1       	ldd	r22, Y+35	; 0x23
    340c:	7c a1       	ldd	r23, Y+36	; 0x24
    340e:	8d a1       	ldd	r24, Y+37	; 0x25
    3410:	9e a1       	ldd	r25, Y+38	; 0x26
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	40 e8       	ldi	r20, 0x80	; 128
    3418:	5f e3       	ldi	r21, 0x3F	; 63
    341a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    341e:	88 23       	and	r24, r24
    3420:	2c f4       	brge	.+10     	; 0x342c <lcd_command+0x2d8>
		__ticks = 1;
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	9a a3       	std	Y+34, r25	; 0x22
    3428:	89 a3       	std	Y+33, r24	; 0x21
    342a:	3f c0       	rjmp	.+126    	; 0x34aa <lcd_command+0x356>
	else if (__tmp > 65535)
    342c:	6b a1       	ldd	r22, Y+35	; 0x23
    342e:	7c a1       	ldd	r23, Y+36	; 0x24
    3430:	8d a1       	ldd	r24, Y+37	; 0x25
    3432:	9e a1       	ldd	r25, Y+38	; 0x26
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	3f ef       	ldi	r19, 0xFF	; 255
    3438:	4f e7       	ldi	r20, 0x7F	; 127
    343a:	57 e4       	ldi	r21, 0x47	; 71
    343c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3440:	18 16       	cp	r1, r24
    3442:	4c f5       	brge	.+82     	; 0x3496 <lcd_command+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3444:	6f a1       	ldd	r22, Y+39	; 0x27
    3446:	78 a5       	ldd	r23, Y+40	; 0x28
    3448:	89 a5       	ldd	r24, Y+41	; 0x29
    344a:	9a a5       	ldd	r25, Y+42	; 0x2a
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	40 e2       	ldi	r20, 0x20	; 32
    3452:	51 e4       	ldi	r21, 0x41	; 65
    3454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	bc 01       	movw	r22, r24
    345e:	cd 01       	movw	r24, r26
    3460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	9a a3       	std	Y+34, r25	; 0x22
    346a:	89 a3       	std	Y+33, r24	; 0x21
    346c:	0f c0       	rjmp	.+30     	; 0x348c <lcd_command+0x338>
    346e:	88 ec       	ldi	r24, 0xC8	; 200
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	98 a3       	std	Y+32, r25	; 0x20
    3474:	8f 8f       	std	Y+31, r24	; 0x1f
    3476:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3478:	98 a1       	ldd	r25, Y+32	; 0x20
    347a:	01 97       	sbiw	r24, 0x01	; 1
    347c:	f1 f7       	brne	.-4      	; 0x347a <lcd_command+0x326>
    347e:	98 a3       	std	Y+32, r25	; 0x20
    3480:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3482:	89 a1       	ldd	r24, Y+33	; 0x21
    3484:	9a a1       	ldd	r25, Y+34	; 0x22
    3486:	01 97       	sbiw	r24, 0x01	; 1
    3488:	9a a3       	std	Y+34, r25	; 0x22
    348a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    348c:	89 a1       	ldd	r24, Y+33	; 0x21
    348e:	9a a1       	ldd	r25, Y+34	; 0x22
    3490:	00 97       	sbiw	r24, 0x00	; 0
    3492:	69 f7       	brne	.-38     	; 0x346e <lcd_command+0x31a>
    3494:	14 c0       	rjmp	.+40     	; 0x34be <lcd_command+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3496:	6b a1       	ldd	r22, Y+35	; 0x23
    3498:	7c a1       	ldd	r23, Y+36	; 0x24
    349a:	8d a1       	ldd	r24, Y+37	; 0x25
    349c:	9e a1       	ldd	r25, Y+38	; 0x26
    349e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a2:	dc 01       	movw	r26, r24
    34a4:	cb 01       	movw	r24, r22
    34a6:	9a a3       	std	Y+34, r25	; 0x22
    34a8:	89 a3       	std	Y+33, r24	; 0x21
    34aa:	89 a1       	ldd	r24, Y+33	; 0x21
    34ac:	9a a1       	ldd	r25, Y+34	; 0x22
    34ae:	9e 8f       	std	Y+30, r25	; 0x1e
    34b0:	8d 8f       	std	Y+29, r24	; 0x1d
    34b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34b6:	01 97       	sbiw	r24, 0x01	; 1
    34b8:	f1 f7       	brne	.-4      	; 0x34b6 <lcd_command+0x362>
    34ba:	9e 8f       	std	Y+30, r25	; 0x1e
    34bc:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);   
    DIO_voidSetPinValue(EN_PIN,LOW);
    34be:	82 e0       	ldi	r24, 0x02	; 2
    34c0:	63 e0       	ldi	r22, 0x03	; 3
    34c2:	40 e0       	ldi	r20, 0x00	; 0
    34c4:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	a0 e0       	ldi	r26, 0x00	; 0
    34ce:	b0 e4       	ldi	r27, 0x40	; 64
    34d0:	89 8f       	std	Y+25, r24	; 0x19
    34d2:	9a 8f       	std	Y+26, r25	; 0x1a
    34d4:	ab 8f       	std	Y+27, r26	; 0x1b
    34d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d8:	69 8d       	ldd	r22, Y+25	; 0x19
    34da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	4a ef       	ldi	r20, 0xFA	; 250
    34e6:	54 e4       	ldi	r21, 0x44	; 68
    34e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	8d 8b       	std	Y+21, r24	; 0x15
    34f2:	9e 8b       	std	Y+22, r25	; 0x16
    34f4:	af 8b       	std	Y+23, r26	; 0x17
    34f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34f8:	6d 89       	ldd	r22, Y+21	; 0x15
    34fa:	7e 89       	ldd	r23, Y+22	; 0x16
    34fc:	8f 89       	ldd	r24, Y+23	; 0x17
    34fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	40 e8       	ldi	r20, 0x80	; 128
    3506:	5f e3       	ldi	r21, 0x3F	; 63
    3508:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    350c:	88 23       	and	r24, r24
    350e:	2c f4       	brge	.+10     	; 0x351a <lcd_command+0x3c6>
		__ticks = 1;
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	9c 8b       	std	Y+20, r25	; 0x14
    3516:	8b 8b       	std	Y+19, r24	; 0x13
    3518:	3f c0       	rjmp	.+126    	; 0x3598 <lcd_command+0x444>
	else if (__tmp > 65535)
    351a:	6d 89       	ldd	r22, Y+21	; 0x15
    351c:	7e 89       	ldd	r23, Y+22	; 0x16
    351e:	8f 89       	ldd	r24, Y+23	; 0x17
    3520:	98 8d       	ldd	r25, Y+24	; 0x18
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	3f ef       	ldi	r19, 0xFF	; 255
    3526:	4f e7       	ldi	r20, 0x7F	; 127
    3528:	57 e4       	ldi	r21, 0x47	; 71
    352a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    352e:	18 16       	cp	r1, r24
    3530:	4c f5       	brge	.+82     	; 0x3584 <lcd_command+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3532:	69 8d       	ldd	r22, Y+25	; 0x19
    3534:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3536:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3538:	9c 8d       	ldd	r25, Y+28	; 0x1c
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	40 e2       	ldi	r20, 0x20	; 32
    3540:	51 e4       	ldi	r21, 0x41	; 65
    3542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	bc 01       	movw	r22, r24
    354c:	cd 01       	movw	r24, r26
    354e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	9c 8b       	std	Y+20, r25	; 0x14
    3558:	8b 8b       	std	Y+19, r24	; 0x13
    355a:	0f c0       	rjmp	.+30     	; 0x357a <lcd_command+0x426>
    355c:	88 ec       	ldi	r24, 0xC8	; 200
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	9a 8b       	std	Y+18, r25	; 0x12
    3562:	89 8b       	std	Y+17, r24	; 0x11
    3564:	89 89       	ldd	r24, Y+17	; 0x11
    3566:	9a 89       	ldd	r25, Y+18	; 0x12
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	f1 f7       	brne	.-4      	; 0x3568 <lcd_command+0x414>
    356c:	9a 8b       	std	Y+18, r25	; 0x12
    356e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3570:	8b 89       	ldd	r24, Y+19	; 0x13
    3572:	9c 89       	ldd	r25, Y+20	; 0x14
    3574:	01 97       	sbiw	r24, 0x01	; 1
    3576:	9c 8b       	std	Y+20, r25	; 0x14
    3578:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357a:	8b 89       	ldd	r24, Y+19	; 0x13
    357c:	9c 89       	ldd	r25, Y+20	; 0x14
    357e:	00 97       	sbiw	r24, 0x00	; 0
    3580:	69 f7       	brne	.-38     	; 0x355c <lcd_command+0x408>
    3582:	14 c0       	rjmp	.+40     	; 0x35ac <lcd_command+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3584:	6d 89       	ldd	r22, Y+21	; 0x15
    3586:	7e 89       	ldd	r23, Y+22	; 0x16
    3588:	8f 89       	ldd	r24, Y+23	; 0x17
    358a:	98 8d       	ldd	r25, Y+24	; 0x18
    358c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	9c 8b       	std	Y+20, r25	; 0x14
    3596:	8b 8b       	std	Y+19, r24	; 0x13
    3598:	8b 89       	ldd	r24, Y+19	; 0x13
    359a:	9c 89       	ldd	r25, Y+20	; 0x14
    359c:	98 8b       	std	Y+16, r25	; 0x10
    359e:	8f 87       	std	Y+15, r24	; 0x0f
    35a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    35a2:	98 89       	ldd	r25, Y+16	; 0x10
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	f1 f7       	brne	.-4      	; 0x35a4 <lcd_command+0x450>
    35a8:	98 8b       	std	Y+16, r25	; 0x10
    35aa:	8f 87       	std	Y+15, r24	; 0x0f
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	a0 ea       	ldi	r26, 0xA0	; 160
    35b2:	b0 e4       	ldi	r27, 0x40	; 64
    35b4:	8b 87       	std	Y+11, r24	; 0x0b
    35b6:	9c 87       	std	Y+12, r25	; 0x0c
    35b8:	ad 87       	std	Y+13, r26	; 0x0d
    35ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    35be:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	4a ef       	ldi	r20, 0xFA	; 250
    35ca:	54 e4       	ldi	r21, 0x44	; 68
    35cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d0:	dc 01       	movw	r26, r24
    35d2:	cb 01       	movw	r24, r22
    35d4:	8f 83       	std	Y+7, r24	; 0x07
    35d6:	98 87       	std	Y+8, r25	; 0x08
    35d8:	a9 87       	std	Y+9, r26	; 0x09
    35da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35dc:	6f 81       	ldd	r22, Y+7	; 0x07
    35de:	78 85       	ldd	r23, Y+8	; 0x08
    35e0:	89 85       	ldd	r24, Y+9	; 0x09
    35e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	40 e8       	ldi	r20, 0x80	; 128
    35ea:	5f e3       	ldi	r21, 0x3F	; 63
    35ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35f0:	88 23       	and	r24, r24
    35f2:	2c f4       	brge	.+10     	; 0x35fe <lcd_command+0x4aa>
		__ticks = 1;
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	9e 83       	std	Y+6, r25	; 0x06
    35fa:	8d 83       	std	Y+5, r24	; 0x05
    35fc:	3f c0       	rjmp	.+126    	; 0x367c <lcd_command+0x528>
	else if (__tmp > 65535)
    35fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3600:	78 85       	ldd	r23, Y+8	; 0x08
    3602:	89 85       	ldd	r24, Y+9	; 0x09
    3604:	9a 85       	ldd	r25, Y+10	; 0x0a
    3606:	20 e0       	ldi	r18, 0x00	; 0
    3608:	3f ef       	ldi	r19, 0xFF	; 255
    360a:	4f e7       	ldi	r20, 0x7F	; 127
    360c:	57 e4       	ldi	r21, 0x47	; 71
    360e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3612:	18 16       	cp	r1, r24
    3614:	4c f5       	brge	.+82     	; 0x3668 <lcd_command+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3616:	6b 85       	ldd	r22, Y+11	; 0x0b
    3618:	7c 85       	ldd	r23, Y+12	; 0x0c
    361a:	8d 85       	ldd	r24, Y+13	; 0x0d
    361c:	9e 85       	ldd	r25, Y+14	; 0x0e
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	40 e2       	ldi	r20, 0x20	; 32
    3624:	51 e4       	ldi	r21, 0x41	; 65
    3626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362a:	dc 01       	movw	r26, r24
    362c:	cb 01       	movw	r24, r22
    362e:	bc 01       	movw	r22, r24
    3630:	cd 01       	movw	r24, r26
    3632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	9e 83       	std	Y+6, r25	; 0x06
    363c:	8d 83       	std	Y+5, r24	; 0x05
    363e:	0f c0       	rjmp	.+30     	; 0x365e <lcd_command+0x50a>
    3640:	88 ec       	ldi	r24, 0xC8	; 200
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	9c 83       	std	Y+4, r25	; 0x04
    3646:	8b 83       	std	Y+3, r24	; 0x03
    3648:	8b 81       	ldd	r24, Y+3	; 0x03
    364a:	9c 81       	ldd	r25, Y+4	; 0x04
    364c:	01 97       	sbiw	r24, 0x01	; 1
    364e:	f1 f7       	brne	.-4      	; 0x364c <lcd_command+0x4f8>
    3650:	9c 83       	std	Y+4, r25	; 0x04
    3652:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3654:	8d 81       	ldd	r24, Y+5	; 0x05
    3656:	9e 81       	ldd	r25, Y+6	; 0x06
    3658:	01 97       	sbiw	r24, 0x01	; 1
    365a:	9e 83       	std	Y+6, r25	; 0x06
    365c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    365e:	8d 81       	ldd	r24, Y+5	; 0x05
    3660:	9e 81       	ldd	r25, Y+6	; 0x06
    3662:	00 97       	sbiw	r24, 0x00	; 0
    3664:	69 f7       	brne	.-38     	; 0x3640 <lcd_command+0x4ec>
    3666:	14 c0       	rjmp	.+40     	; 0x3690 <lcd_command+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3668:	6f 81       	ldd	r22, Y+7	; 0x07
    366a:	78 85       	ldd	r23, Y+8	; 0x08
    366c:	89 85       	ldd	r24, Y+9	; 0x09
    366e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	9e 83       	std	Y+6, r25	; 0x06
    367a:	8d 83       	std	Y+5, r24	; 0x05
    367c:	8d 81       	ldd	r24, Y+5	; 0x05
    367e:	9e 81       	ldd	r25, Y+6	; 0x06
    3680:	9a 83       	std	Y+2, r25	; 0x02
    3682:	89 83       	std	Y+1, r24	; 0x01
    3684:	89 81       	ldd	r24, Y+1	; 0x01
    3686:	9a 81       	ldd	r25, Y+2	; 0x02
    3688:	01 97       	sbiw	r24, 0x01	; 1
    368a:	f1 f7       	brne	.-4      	; 0x3688 <lcd_command+0x534>
    368c:	9a 83       	std	Y+2, r25	; 0x02
    368e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);  
	
    _delay_ms(5); 	 	        
}
    3690:	c9 5b       	subi	r28, 0xB9	; 185
    3692:	df 4f       	sbci	r29, 0xFF	; 255
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	f8 94       	cli
    3698:	de bf       	out	0x3e, r29	; 62
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	cd bf       	out	0x3d, r28	; 61
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	1f 91       	pop	r17
    36a4:	0f 91       	pop	r16
    36a6:	08 95       	ret

000036a8 <lcd_sendChar>:
void lcd_sendChar(uint8_t data)
{
    36a8:	df 93       	push	r29
    36aa:	cf 93       	push	r28
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	e9 97       	sbiw	r28, 0x39	; 57
    36b2:	0f b6       	in	r0, 0x3f	; 63
    36b4:	f8 94       	cli
    36b6:	de bf       	out	0x3e, r29	; 62
    36b8:	0f be       	out	0x3f, r0	; 63
    36ba:	cd bf       	out	0x3d, r28	; 61
    36bc:	89 af       	std	Y+57, r24	; 0x39
    DIO_voidSetPortValue(LCD_DATA_PORT,((PORTC&0x0f)|(data&0xf0)));
    36be:	e5 e3       	ldi	r30, 0x35	; 53
    36c0:	f0 e0       	ldi	r31, 0x00	; 0
    36c2:	80 81       	ld	r24, Z
    36c4:	98 2f       	mov	r25, r24
    36c6:	9f 70       	andi	r25, 0x0F	; 15
    36c8:	89 ad       	ldd	r24, Y+57	; 0x39
    36ca:	80 7f       	andi	r24, 0xF0	; 240
    36cc:	89 2b       	or	r24, r25
    36ce:	98 2f       	mov	r25, r24
    36d0:	82 e0       	ldi	r24, 0x02	; 2
    36d2:	69 2f       	mov	r22, r25
    36d4:	0e 94 18 11 	call	0x2230	; 0x2230 <DIO_voidSetPortValue>
    DIO_voidSetPinValue(LS_PIN,HIGH);
    36d8:	82 e0       	ldi	r24, 0x02	; 2
    36da:	62 e0       	ldi	r22, 0x02	; 2
    36dc:	41 e0       	ldi	r20, 0x01	; 1
    36de:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    //DIO_voidSetPinValue(R_W_PIN,LOW);
    DIO_voidSetPinValue(EN_PIN,HIGH);    
    36e2:	82 e0       	ldi	r24, 0x02	; 2
    36e4:	63 e0       	ldi	r22, 0x03	; 3
    36e6:	41 e0       	ldi	r20, 0x01	; 1
    36e8:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    36ec:	80 e0       	ldi	r24, 0x00	; 0
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	a0 e0       	ldi	r26, 0x00	; 0
    36f2:	b0 e4       	ldi	r27, 0x40	; 64
    36f4:	8d ab       	std	Y+53, r24	; 0x35
    36f6:	9e ab       	std	Y+54, r25	; 0x36
    36f8:	af ab       	std	Y+55, r26	; 0x37
    36fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fc:	6d a9       	ldd	r22, Y+53	; 0x35
    36fe:	7e a9       	ldd	r23, Y+54	; 0x36
    3700:	8f a9       	ldd	r24, Y+55	; 0x37
    3702:	98 ad       	ldd	r25, Y+56	; 0x38
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	4a ef       	ldi	r20, 0xFA	; 250
    370a:	54 e4       	ldi	r21, 0x44	; 68
    370c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	89 ab       	std	Y+49, r24	; 0x31
    3716:	9a ab       	std	Y+50, r25	; 0x32
    3718:	ab ab       	std	Y+51, r26	; 0x33
    371a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    371c:	69 a9       	ldd	r22, Y+49	; 0x31
    371e:	7a a9       	ldd	r23, Y+50	; 0x32
    3720:	8b a9       	ldd	r24, Y+51	; 0x33
    3722:	9c a9       	ldd	r25, Y+52	; 0x34
    3724:	20 e0       	ldi	r18, 0x00	; 0
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	40 e8       	ldi	r20, 0x80	; 128
    372a:	5f e3       	ldi	r21, 0x3F	; 63
    372c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3730:	88 23       	and	r24, r24
    3732:	2c f4       	brge	.+10     	; 0x373e <lcd_sendChar+0x96>
		__ticks = 1;
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	98 ab       	std	Y+48, r25	; 0x30
    373a:	8f a7       	std	Y+47, r24	; 0x2f
    373c:	3f c0       	rjmp	.+126    	; 0x37bc <lcd_sendChar+0x114>
	else if (__tmp > 65535)
    373e:	69 a9       	ldd	r22, Y+49	; 0x31
    3740:	7a a9       	ldd	r23, Y+50	; 0x32
    3742:	8b a9       	ldd	r24, Y+51	; 0x33
    3744:	9c a9       	ldd	r25, Y+52	; 0x34
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	3f ef       	ldi	r19, 0xFF	; 255
    374a:	4f e7       	ldi	r20, 0x7F	; 127
    374c:	57 e4       	ldi	r21, 0x47	; 71
    374e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3752:	18 16       	cp	r1, r24
    3754:	4c f5       	brge	.+82     	; 0x37a8 <lcd_sendChar+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3756:	6d a9       	ldd	r22, Y+53	; 0x35
    3758:	7e a9       	ldd	r23, Y+54	; 0x36
    375a:	8f a9       	ldd	r24, Y+55	; 0x37
    375c:	98 ad       	ldd	r25, Y+56	; 0x38
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	40 e2       	ldi	r20, 0x20	; 32
    3764:	51 e4       	ldi	r21, 0x41	; 65
    3766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376a:	dc 01       	movw	r26, r24
    376c:	cb 01       	movw	r24, r22
    376e:	bc 01       	movw	r22, r24
    3770:	cd 01       	movw	r24, r26
    3772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	98 ab       	std	Y+48, r25	; 0x30
    377c:	8f a7       	std	Y+47, r24	; 0x2f
    377e:	0f c0       	rjmp	.+30     	; 0x379e <lcd_sendChar+0xf6>
    3780:	88 ec       	ldi	r24, 0xC8	; 200
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	9e a7       	std	Y+46, r25	; 0x2e
    3786:	8d a7       	std	Y+45, r24	; 0x2d
    3788:	8d a5       	ldd	r24, Y+45	; 0x2d
    378a:	9e a5       	ldd	r25, Y+46	; 0x2e
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	f1 f7       	brne	.-4      	; 0x378c <lcd_sendChar+0xe4>
    3790:	9e a7       	std	Y+46, r25	; 0x2e
    3792:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3794:	8f a5       	ldd	r24, Y+47	; 0x2f
    3796:	98 a9       	ldd	r25, Y+48	; 0x30
    3798:	01 97       	sbiw	r24, 0x01	; 1
    379a:	98 ab       	std	Y+48, r25	; 0x30
    379c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379e:	8f a5       	ldd	r24, Y+47	; 0x2f
    37a0:	98 a9       	ldd	r25, Y+48	; 0x30
    37a2:	00 97       	sbiw	r24, 0x00	; 0
    37a4:	69 f7       	brne	.-38     	; 0x3780 <lcd_sendChar+0xd8>
    37a6:	14 c0       	rjmp	.+40     	; 0x37d0 <lcd_sendChar+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a8:	69 a9       	ldd	r22, Y+49	; 0x31
    37aa:	7a a9       	ldd	r23, Y+50	; 0x32
    37ac:	8b a9       	ldd	r24, Y+51	; 0x33
    37ae:	9c a9       	ldd	r25, Y+52	; 0x34
    37b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	98 ab       	std	Y+48, r25	; 0x30
    37ba:	8f a7       	std	Y+47, r24	; 0x2f
    37bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    37be:	98 a9       	ldd	r25, Y+48	; 0x30
    37c0:	9c a7       	std	Y+44, r25	; 0x2c
    37c2:	8b a7       	std	Y+43, r24	; 0x2b
    37c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    37c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	f1 f7       	brne	.-4      	; 0x37c8 <lcd_sendChar+0x120>
    37cc:	9c a7       	std	Y+44, r25	; 0x2c
    37ce:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);    
    DIO_voidSetPinValue(EN_PIN,LOW);
    37d0:	82 e0       	ldi	r24, 0x02	; 2
    37d2:	63 e0       	ldi	r22, 0x03	; 3
    37d4:	40 e0       	ldi	r20, 0x00	; 0
    37d6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	a0 e0       	ldi	r26, 0x00	; 0
    37e0:	b0 e4       	ldi	r27, 0x40	; 64
    37e2:	8f a3       	std	Y+39, r24	; 0x27
    37e4:	98 a7       	std	Y+40, r25	; 0x28
    37e6:	a9 a7       	std	Y+41, r26	; 0x29
    37e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37ea:	6f a1       	ldd	r22, Y+39	; 0x27
    37ec:	78 a5       	ldd	r23, Y+40	; 0x28
    37ee:	89 a5       	ldd	r24, Y+41	; 0x29
    37f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    37f2:	20 e0       	ldi	r18, 0x00	; 0
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	4a ef       	ldi	r20, 0xFA	; 250
    37f8:	54 e4       	ldi	r21, 0x44	; 68
    37fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	8b a3       	std	Y+35, r24	; 0x23
    3804:	9c a3       	std	Y+36, r25	; 0x24
    3806:	ad a3       	std	Y+37, r26	; 0x25
    3808:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    380a:	6b a1       	ldd	r22, Y+35	; 0x23
    380c:	7c a1       	ldd	r23, Y+36	; 0x24
    380e:	8d a1       	ldd	r24, Y+37	; 0x25
    3810:	9e a1       	ldd	r25, Y+38	; 0x26
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	40 e8       	ldi	r20, 0x80	; 128
    3818:	5f e3       	ldi	r21, 0x3F	; 63
    381a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    381e:	88 23       	and	r24, r24
    3820:	2c f4       	brge	.+10     	; 0x382c <lcd_sendChar+0x184>
		__ticks = 1;
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	90 e0       	ldi	r25, 0x00	; 0
    3826:	9a a3       	std	Y+34, r25	; 0x22
    3828:	89 a3       	std	Y+33, r24	; 0x21
    382a:	3f c0       	rjmp	.+126    	; 0x38aa <lcd_sendChar+0x202>
	else if (__tmp > 65535)
    382c:	6b a1       	ldd	r22, Y+35	; 0x23
    382e:	7c a1       	ldd	r23, Y+36	; 0x24
    3830:	8d a1       	ldd	r24, Y+37	; 0x25
    3832:	9e a1       	ldd	r25, Y+38	; 0x26
    3834:	20 e0       	ldi	r18, 0x00	; 0
    3836:	3f ef       	ldi	r19, 0xFF	; 255
    3838:	4f e7       	ldi	r20, 0x7F	; 127
    383a:	57 e4       	ldi	r21, 0x47	; 71
    383c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3840:	18 16       	cp	r1, r24
    3842:	4c f5       	brge	.+82     	; 0x3896 <lcd_sendChar+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3844:	6f a1       	ldd	r22, Y+39	; 0x27
    3846:	78 a5       	ldd	r23, Y+40	; 0x28
    3848:	89 a5       	ldd	r24, Y+41	; 0x29
    384a:	9a a5       	ldd	r25, Y+42	; 0x2a
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	40 e2       	ldi	r20, 0x20	; 32
    3852:	51 e4       	ldi	r21, 0x41	; 65
    3854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	bc 01       	movw	r22, r24
    385e:	cd 01       	movw	r24, r26
    3860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	9a a3       	std	Y+34, r25	; 0x22
    386a:	89 a3       	std	Y+33, r24	; 0x21
    386c:	0f c0       	rjmp	.+30     	; 0x388c <lcd_sendChar+0x1e4>
    386e:	88 ec       	ldi	r24, 0xC8	; 200
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	98 a3       	std	Y+32, r25	; 0x20
    3874:	8f 8f       	std	Y+31, r24	; 0x1f
    3876:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3878:	98 a1       	ldd	r25, Y+32	; 0x20
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	f1 f7       	brne	.-4      	; 0x387a <lcd_sendChar+0x1d2>
    387e:	98 a3       	std	Y+32, r25	; 0x20
    3880:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3882:	89 a1       	ldd	r24, Y+33	; 0x21
    3884:	9a a1       	ldd	r25, Y+34	; 0x22
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	9a a3       	std	Y+34, r25	; 0x22
    388a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    388c:	89 a1       	ldd	r24, Y+33	; 0x21
    388e:	9a a1       	ldd	r25, Y+34	; 0x22
    3890:	00 97       	sbiw	r24, 0x00	; 0
    3892:	69 f7       	brne	.-38     	; 0x386e <lcd_sendChar+0x1c6>
    3894:	14 c0       	rjmp	.+40     	; 0x38be <lcd_sendChar+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3896:	6b a1       	ldd	r22, Y+35	; 0x23
    3898:	7c a1       	ldd	r23, Y+36	; 0x24
    389a:	8d a1       	ldd	r24, Y+37	; 0x25
    389c:	9e a1       	ldd	r25, Y+38	; 0x26
    389e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a2:	dc 01       	movw	r26, r24
    38a4:	cb 01       	movw	r24, r22
    38a6:	9a a3       	std	Y+34, r25	; 0x22
    38a8:	89 a3       	std	Y+33, r24	; 0x21
    38aa:	89 a1       	ldd	r24, Y+33	; 0x21
    38ac:	9a a1       	ldd	r25, Y+34	; 0x22
    38ae:	9e 8f       	std	Y+30, r25	; 0x1e
    38b0:	8d 8f       	std	Y+29, r24	; 0x1d
    38b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	f1 f7       	brne	.-4      	; 0x38b6 <lcd_sendChar+0x20e>
    38ba:	9e 8f       	std	Y+30, r25	; 0x1e
    38bc:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);     
    DIO_voidSetPortValue(LCD_DATA_PORT, ((PORTC&0x0f)|(data<<4)));
    38be:	e5 e3       	ldi	r30, 0x35	; 53
    38c0:	f0 e0       	ldi	r31, 0x00	; 0
    38c2:	80 81       	ld	r24, Z
    38c4:	28 2f       	mov	r18, r24
    38c6:	2f 70       	andi	r18, 0x0F	; 15
    38c8:	89 ad       	ldd	r24, Y+57	; 0x39
    38ca:	88 2f       	mov	r24, r24
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	82 95       	swap	r24
    38d0:	92 95       	swap	r25
    38d2:	90 7f       	andi	r25, 0xF0	; 240
    38d4:	98 27       	eor	r25, r24
    38d6:	80 7f       	andi	r24, 0xF0	; 240
    38d8:	98 27       	eor	r25, r24
    38da:	82 2b       	or	r24, r18
    38dc:	98 2f       	mov	r25, r24
    38de:	82 e0       	ldi	r24, 0x02	; 2
    38e0:	69 2f       	mov	r22, r25
    38e2:	0e 94 18 11 	call	0x2230	; 0x2230 <DIO_voidSetPortValue>
    DIO_voidSetPinValue(LS_PIN,HIGH);    
    38e6:	82 e0       	ldi	r24, 0x02	; 2
    38e8:	62 e0       	ldi	r22, 0x02	; 2
    38ea:	41 e0       	ldi	r20, 0x01	; 1
    38ec:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
	DIO_voidSetPinValue(EN_PIN,HIGH);  
    38f0:	82 e0       	ldi	r24, 0x02	; 2
    38f2:	63 e0       	ldi	r22, 0x03	; 3
    38f4:	41 e0       	ldi	r20, 0x01	; 1
    38f6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	90 e0       	ldi	r25, 0x00	; 0
    38fe:	a0 e0       	ldi	r26, 0x00	; 0
    3900:	b0 e4       	ldi	r27, 0x40	; 64
    3902:	89 8f       	std	Y+25, r24	; 0x19
    3904:	9a 8f       	std	Y+26, r25	; 0x1a
    3906:	ab 8f       	std	Y+27, r26	; 0x1b
    3908:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    390a:	69 8d       	ldd	r22, Y+25	; 0x19
    390c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    390e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3910:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	4a ef       	ldi	r20, 0xFA	; 250
    3918:	54 e4       	ldi	r21, 0x44	; 68
    391a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	8d 8b       	std	Y+21, r24	; 0x15
    3924:	9e 8b       	std	Y+22, r25	; 0x16
    3926:	af 8b       	std	Y+23, r26	; 0x17
    3928:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    392a:	6d 89       	ldd	r22, Y+21	; 0x15
    392c:	7e 89       	ldd	r23, Y+22	; 0x16
    392e:	8f 89       	ldd	r24, Y+23	; 0x17
    3930:	98 8d       	ldd	r25, Y+24	; 0x18
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	40 e8       	ldi	r20, 0x80	; 128
    3938:	5f e3       	ldi	r21, 0x3F	; 63
    393a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    393e:	88 23       	and	r24, r24
    3940:	2c f4       	brge	.+10     	; 0x394c <lcd_sendChar+0x2a4>
		__ticks = 1;
    3942:	81 e0       	ldi	r24, 0x01	; 1
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	9c 8b       	std	Y+20, r25	; 0x14
    3948:	8b 8b       	std	Y+19, r24	; 0x13
    394a:	3f c0       	rjmp	.+126    	; 0x39ca <lcd_sendChar+0x322>
	else if (__tmp > 65535)
    394c:	6d 89       	ldd	r22, Y+21	; 0x15
    394e:	7e 89       	ldd	r23, Y+22	; 0x16
    3950:	8f 89       	ldd	r24, Y+23	; 0x17
    3952:	98 8d       	ldd	r25, Y+24	; 0x18
    3954:	20 e0       	ldi	r18, 0x00	; 0
    3956:	3f ef       	ldi	r19, 0xFF	; 255
    3958:	4f e7       	ldi	r20, 0x7F	; 127
    395a:	57 e4       	ldi	r21, 0x47	; 71
    395c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3960:	18 16       	cp	r1, r24
    3962:	4c f5       	brge	.+82     	; 0x39b6 <lcd_sendChar+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3964:	69 8d       	ldd	r22, Y+25	; 0x19
    3966:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3968:	8b 8d       	ldd	r24, Y+27	; 0x1b
    396a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	40 e2       	ldi	r20, 0x20	; 32
    3972:	51 e4       	ldi	r21, 0x41	; 65
    3974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3978:	dc 01       	movw	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	bc 01       	movw	r22, r24
    397e:	cd 01       	movw	r24, r26
    3980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	9c 8b       	std	Y+20, r25	; 0x14
    398a:	8b 8b       	std	Y+19, r24	; 0x13
    398c:	0f c0       	rjmp	.+30     	; 0x39ac <lcd_sendChar+0x304>
    398e:	88 ec       	ldi	r24, 0xC8	; 200
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	9a 8b       	std	Y+18, r25	; 0x12
    3994:	89 8b       	std	Y+17, r24	; 0x11
    3996:	89 89       	ldd	r24, Y+17	; 0x11
    3998:	9a 89       	ldd	r25, Y+18	; 0x12
    399a:	01 97       	sbiw	r24, 0x01	; 1
    399c:	f1 f7       	brne	.-4      	; 0x399a <lcd_sendChar+0x2f2>
    399e:	9a 8b       	std	Y+18, r25	; 0x12
    39a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a2:	8b 89       	ldd	r24, Y+19	; 0x13
    39a4:	9c 89       	ldd	r25, Y+20	; 0x14
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	9c 8b       	std	Y+20, r25	; 0x14
    39aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ac:	8b 89       	ldd	r24, Y+19	; 0x13
    39ae:	9c 89       	ldd	r25, Y+20	; 0x14
    39b0:	00 97       	sbiw	r24, 0x00	; 0
    39b2:	69 f7       	brne	.-38     	; 0x398e <lcd_sendChar+0x2e6>
    39b4:	14 c0       	rjmp	.+40     	; 0x39de <lcd_sendChar+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39b6:	6d 89       	ldd	r22, Y+21	; 0x15
    39b8:	7e 89       	ldd	r23, Y+22	; 0x16
    39ba:	8f 89       	ldd	r24, Y+23	; 0x17
    39bc:	98 8d       	ldd	r25, Y+24	; 0x18
    39be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	9c 8b       	std	Y+20, r25	; 0x14
    39c8:	8b 8b       	std	Y+19, r24	; 0x13
    39ca:	8b 89       	ldd	r24, Y+19	; 0x13
    39cc:	9c 89       	ldd	r25, Y+20	; 0x14
    39ce:	98 8b       	std	Y+16, r25	; 0x10
    39d0:	8f 87       	std	Y+15, r24	; 0x0f
    39d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    39d4:	98 89       	ldd	r25, Y+16	; 0x10
    39d6:	01 97       	sbiw	r24, 0x01	; 1
    39d8:	f1 f7       	brne	.-4      	; 0x39d6 <lcd_sendChar+0x32e>
    39da:	98 8b       	std	Y+16, r25	; 0x10
    39dc:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);   
    DIO_voidSetPinValue(EN_PIN,LOW);  
    39de:	82 e0       	ldi	r24, 0x02	; 2
    39e0:	63 e0       	ldi	r22, 0x03	; 3
    39e2:	40 e0       	ldi	r20, 0x00	; 0
    39e4:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	a0 e0       	ldi	r26, 0x00	; 0
    39ee:	b0 e4       	ldi	r27, 0x40	; 64
    39f0:	8b 87       	std	Y+11, r24	; 0x0b
    39f2:	9c 87       	std	Y+12, r25	; 0x0c
    39f4:	ad 87       	std	Y+13, r26	; 0x0d
    39f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    39fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    39fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    39fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	4a ef       	ldi	r20, 0xFA	; 250
    3a06:	54 e4       	ldi	r21, 0x44	; 68
    3a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	8f 83       	std	Y+7, r24	; 0x07
    3a12:	98 87       	std	Y+8, r25	; 0x08
    3a14:	a9 87       	std	Y+9, r26	; 0x09
    3a16:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a18:	6f 81       	ldd	r22, Y+7	; 0x07
    3a1a:	78 85       	ldd	r23, Y+8	; 0x08
    3a1c:	89 85       	ldd	r24, Y+9	; 0x09
    3a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	40 e8       	ldi	r20, 0x80	; 128
    3a26:	5f e3       	ldi	r21, 0x3F	; 63
    3a28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a2c:	88 23       	and	r24, r24
    3a2e:	2c f4       	brge	.+10     	; 0x3a3a <lcd_sendChar+0x392>
		__ticks = 1;
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	9e 83       	std	Y+6, r25	; 0x06
    3a36:	8d 83       	std	Y+5, r24	; 0x05
    3a38:	3f c0       	rjmp	.+126    	; 0x3ab8 <lcd_sendChar+0x410>
	else if (__tmp > 65535)
    3a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a3c:	78 85       	ldd	r23, Y+8	; 0x08
    3a3e:	89 85       	ldd	r24, Y+9	; 0x09
    3a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a42:	20 e0       	ldi	r18, 0x00	; 0
    3a44:	3f ef       	ldi	r19, 0xFF	; 255
    3a46:	4f e7       	ldi	r20, 0x7F	; 127
    3a48:	57 e4       	ldi	r21, 0x47	; 71
    3a4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a4e:	18 16       	cp	r1, r24
    3a50:	4c f5       	brge	.+82     	; 0x3aa4 <lcd_sendChar+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a52:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a54:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a56:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a58:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	30 e0       	ldi	r19, 0x00	; 0
    3a5e:	40 e2       	ldi	r20, 0x20	; 32
    3a60:	51 e4       	ldi	r21, 0x41	; 65
    3a62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a66:	dc 01       	movw	r26, r24
    3a68:	cb 01       	movw	r24, r22
    3a6a:	bc 01       	movw	r22, r24
    3a6c:	cd 01       	movw	r24, r26
    3a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	9e 83       	std	Y+6, r25	; 0x06
    3a78:	8d 83       	std	Y+5, r24	; 0x05
    3a7a:	0f c0       	rjmp	.+30     	; 0x3a9a <lcd_sendChar+0x3f2>
    3a7c:	88 ec       	ldi	r24, 0xC8	; 200
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	9c 83       	std	Y+4, r25	; 0x04
    3a82:	8b 83       	std	Y+3, r24	; 0x03
    3a84:	8b 81       	ldd	r24, Y+3	; 0x03
    3a86:	9c 81       	ldd	r25, Y+4	; 0x04
    3a88:	01 97       	sbiw	r24, 0x01	; 1
    3a8a:	f1 f7       	brne	.-4      	; 0x3a88 <lcd_sendChar+0x3e0>
    3a8c:	9c 83       	std	Y+4, r25	; 0x04
    3a8e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a90:	8d 81       	ldd	r24, Y+5	; 0x05
    3a92:	9e 81       	ldd	r25, Y+6	; 0x06
    3a94:	01 97       	sbiw	r24, 0x01	; 1
    3a96:	9e 83       	std	Y+6, r25	; 0x06
    3a98:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a9a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a9e:	00 97       	sbiw	r24, 0x00	; 0
    3aa0:	69 f7       	brne	.-38     	; 0x3a7c <lcd_sendChar+0x3d4>
    3aa2:	14 c0       	rjmp	.+40     	; 0x3acc <lcd_sendChar+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    3aa6:	78 85       	ldd	r23, Y+8	; 0x08
    3aa8:	89 85       	ldd	r24, Y+9	; 0x09
    3aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab0:	dc 01       	movw	r26, r24
    3ab2:	cb 01       	movw	r24, r22
    3ab4:	9e 83       	std	Y+6, r25	; 0x06
    3ab6:	8d 83       	std	Y+5, r24	; 0x05
    3ab8:	8d 81       	ldd	r24, Y+5	; 0x05
    3aba:	9e 81       	ldd	r25, Y+6	; 0x06
    3abc:	9a 83       	std	Y+2, r25	; 0x02
    3abe:	89 83       	std	Y+1, r24	; 0x01
    3ac0:	89 81       	ldd	r24, Y+1	; 0x01
    3ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac4:	01 97       	sbiw	r24, 0x01	; 1
    3ac6:	f1 f7       	brne	.-4      	; 0x3ac4 <lcd_sendChar+0x41c>
    3ac8:	9a 83       	std	Y+2, r25	; 0x02
    3aca:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);   	

}
    3acc:	e9 96       	adiw	r28, 0x39	; 57
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	f8 94       	cli
    3ad2:	de bf       	out	0x3e, r29	; 62
    3ad4:	0f be       	out	0x3f, r0	; 63
    3ad6:	cd bf       	out	0x3d, r28	; 61
    3ad8:	cf 91       	pop	r28
    3ada:	df 91       	pop	r29
    3adc:	08 95       	ret

00003ade <lcd_sendString>:
void lcd_sendString(uint8_t * data)
{
    3ade:	df 93       	push	r29
    3ae0:	cf 93       	push	r28
    3ae2:	00 d0       	rcall	.+0      	; 0x3ae4 <lcd_sendString+0x6>
    3ae4:	0f 92       	push	r0
    3ae6:	cd b7       	in	r28, 0x3d	; 61
    3ae8:	de b7       	in	r29, 0x3e	; 62
    3aea:	9b 83       	std	Y+3, r25	; 0x03
    3aec:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i=0;
    3aee:	19 82       	std	Y+1, r1	; 0x01
    3af0:	0e c0       	rjmp	.+28     	; 0x3b0e <lcd_sendString+0x30>

	while(data[i] != '\0')
	{

		lcd_sendChar(data[i]);
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	28 2f       	mov	r18, r24
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	8a 81       	ldd	r24, Y+2	; 0x02
    3afa:	9b 81       	ldd	r25, Y+3	; 0x03
    3afc:	fc 01       	movw	r30, r24
    3afe:	e2 0f       	add	r30, r18
    3b00:	f3 1f       	adc	r31, r19
    3b02:	80 81       	ld	r24, Z
    3b04:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <lcd_sendChar>
		i++;
    3b08:	89 81       	ldd	r24, Y+1	; 0x01
    3b0a:	8f 5f       	subi	r24, 0xFF	; 255
    3b0c:	89 83       	std	Y+1, r24	; 0x01
}
void lcd_sendString(uint8_t * data)
{
	uint8_t i=0;

	while(data[i] != '\0')
    3b0e:	89 81       	ldd	r24, Y+1	; 0x01
    3b10:	28 2f       	mov	r18, r24
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	8a 81       	ldd	r24, Y+2	; 0x02
    3b16:	9b 81       	ldd	r25, Y+3	; 0x03
    3b18:	fc 01       	movw	r30, r24
    3b1a:	e2 0f       	add	r30, r18
    3b1c:	f3 1f       	adc	r31, r19
    3b1e:	80 81       	ld	r24, Z
    3b20:	88 23       	and	r24, r24
    3b22:	39 f7       	brne	.-50     	; 0x3af2 <lcd_sendString+0x14>
	{

		lcd_sendChar(data[i]);
		i++;
	}
}
    3b24:	0f 90       	pop	r0
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	cf 91       	pop	r28
    3b2c:	df 91       	pop	r29
    3b2e:	08 95       	ret

00003b30 <lcd_sendNum>:
void lcd_sendNum( u16 copy_u16number)
{
    3b30:	df 93       	push	r29
    3b32:	cf 93       	push	r28
    3b34:	cd b7       	in	r28, 0x3d	; 61
    3b36:	de b7       	in	r29, 0x3e	; 62
    3b38:	2a 97       	sbiw	r28, 0x0a	; 10
    3b3a:	0f b6       	in	r0, 0x3f	; 63
    3b3c:	f8 94       	cli
    3b3e:	de bf       	out	0x3e, r29	; 62
    3b40:	0f be       	out	0x3f, r0	; 63
    3b42:	cd bf       	out	0x3d, r28	; 61
    3b44:	98 87       	std	Y+8, r25	; 0x08
    3b46:	8f 83       	std	Y+7, r24	; 0x07

	if (copy_u16number==0)
    3b48:	8f 81       	ldd	r24, Y+7	; 0x07
    3b4a:	98 85       	ldd	r25, Y+8	; 0x08
    3b4c:	00 97       	sbiw	r24, 0x00	; 0
    3b4e:	19 f4       	brne	.+6      	; 0x3b56 <lcd_sendNum+0x26>
	{
		lcd_sendChar('0');
    3b50:	80 e3       	ldi	r24, 0x30	; 48
    3b52:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <lcd_sendChar>
	}
	sint8_t i=0;
    3b56:	19 82       	std	Y+1, r1	; 0x01
    3b58:	1f c0       	rjmp	.+62     	; 0x3b98 <lcd_sendNum+0x68>
	uint8_t str_num[5];
	while(copy_u16number>0)
	{
		str_num[i]=copy_u16number%10;
    3b5a:	89 81       	ldd	r24, Y+1	; 0x01
    3b5c:	e8 2f       	mov	r30, r24
    3b5e:	ff 27       	eor	r31, r31
    3b60:	e7 fd       	sbrc	r30, 7
    3b62:	f0 95       	com	r31
    3b64:	8f 81       	ldd	r24, Y+7	; 0x07
    3b66:	98 85       	ldd	r25, Y+8	; 0x08
    3b68:	2a e0       	ldi	r18, 0x0A	; 10
    3b6a:	30 e0       	ldi	r19, 0x00	; 0
    3b6c:	b9 01       	movw	r22, r18
    3b6e:	0e 94 82 29 	call	0x5304	; 0x5304 <__udivmodhi4>
    3b72:	28 2f       	mov	r18, r24
    3b74:	ce 01       	movw	r24, r28
    3b76:	02 96       	adiw	r24, 0x02	; 2
    3b78:	e8 0f       	add	r30, r24
    3b7a:	f9 1f       	adc	r31, r25
    3b7c:	20 83       	st	Z, r18
		copy_u16number/=10;
    3b7e:	8f 81       	ldd	r24, Y+7	; 0x07
    3b80:	98 85       	ldd	r25, Y+8	; 0x08
    3b82:	2a e0       	ldi	r18, 0x0A	; 10
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	b9 01       	movw	r22, r18
    3b88:	0e 94 82 29 	call	0x5304	; 0x5304 <__udivmodhi4>
    3b8c:	cb 01       	movw	r24, r22
    3b8e:	98 87       	std	Y+8, r25	; 0x08
    3b90:	8f 83       	std	Y+7, r24	; 0x07
		i++;
    3b92:	89 81       	ldd	r24, Y+1	; 0x01
    3b94:	8f 5f       	subi	r24, 0xFF	; 255
    3b96:	89 83       	std	Y+1, r24	; 0x01
	{
		lcd_sendChar('0');
	}
	sint8_t i=0;
	uint8_t str_num[5];
	while(copy_u16number>0)
    3b98:	8f 81       	ldd	r24, Y+7	; 0x07
    3b9a:	98 85       	ldd	r25, Y+8	; 0x08
    3b9c:	00 97       	sbiw	r24, 0x00	; 0
    3b9e:	e9 f6       	brne	.-70     	; 0x3b5a <lcd_sendNum+0x2a>
	{
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	81 50       	subi	r24, 0x01	; 1
    3ba4:	89 83       	std	Y+1, r24	; 0x01
    3ba6:	7e c0       	rjmp	.+252    	; 0x3ca4 <lcd_sendNum+0x174>
	while(i>=0)
	{
		switch(str_num[i])
    3ba8:	89 81       	ldd	r24, Y+1	; 0x01
    3baa:	28 2f       	mov	r18, r24
    3bac:	33 27       	eor	r19, r19
    3bae:	27 fd       	sbrc	r18, 7
    3bb0:	30 95       	com	r19
    3bb2:	ce 01       	movw	r24, r28
    3bb4:	02 96       	adiw	r24, 0x02	; 2
    3bb6:	fc 01       	movw	r30, r24
    3bb8:	e2 0f       	add	r30, r18
    3bba:	f3 1f       	adc	r31, r19
    3bbc:	80 81       	ld	r24, Z
    3bbe:	28 2f       	mov	r18, r24
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	3a 87       	std	Y+10, r19	; 0x0a
    3bc4:	29 87       	std	Y+9, r18	; 0x09
    3bc6:	89 85       	ldd	r24, Y+9	; 0x09
    3bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bca:	84 30       	cpi	r24, 0x04	; 4
    3bcc:	91 05       	cpc	r25, r1
    3bce:	09 f4       	brne	.+2      	; 0x3bd2 <lcd_sendNum+0xa2>
    3bd0:	4f c0       	rjmp	.+158    	; 0x3c70 <lcd_sendNum+0x140>
    3bd2:	29 85       	ldd	r18, Y+9	; 0x09
    3bd4:	3a 85       	ldd	r19, Y+10	; 0x0a
    3bd6:	25 30       	cpi	r18, 0x05	; 5
    3bd8:	31 05       	cpc	r19, r1
    3bda:	d4 f4       	brge	.+52     	; 0x3c10 <lcd_sendNum+0xe0>
    3bdc:	89 85       	ldd	r24, Y+9	; 0x09
    3bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be0:	81 30       	cpi	r24, 0x01	; 1
    3be2:	91 05       	cpc	r25, r1
    3be4:	c9 f1       	breq	.+114    	; 0x3c58 <lcd_sendNum+0x128>
    3be6:	29 85       	ldd	r18, Y+9	; 0x09
    3be8:	3a 85       	ldd	r19, Y+10	; 0x0a
    3bea:	22 30       	cpi	r18, 0x02	; 2
    3bec:	31 05       	cpc	r19, r1
    3bee:	2c f4       	brge	.+10     	; 0x3bfa <lcd_sendNum+0xca>
    3bf0:	89 85       	ldd	r24, Y+9	; 0x09
    3bf2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf4:	00 97       	sbiw	r24, 0x00	; 0
    3bf6:	61 f1       	breq	.+88     	; 0x3c50 <lcd_sendNum+0x120>
    3bf8:	52 c0       	rjmp	.+164    	; 0x3c9e <lcd_sendNum+0x16e>
    3bfa:	29 85       	ldd	r18, Y+9	; 0x09
    3bfc:	3a 85       	ldd	r19, Y+10	; 0x0a
    3bfe:	22 30       	cpi	r18, 0x02	; 2
    3c00:	31 05       	cpc	r19, r1
    3c02:	71 f1       	breq	.+92     	; 0x3c60 <lcd_sendNum+0x130>
    3c04:	89 85       	ldd	r24, Y+9	; 0x09
    3c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c08:	83 30       	cpi	r24, 0x03	; 3
    3c0a:	91 05       	cpc	r25, r1
    3c0c:	69 f1       	breq	.+90     	; 0x3c68 <lcd_sendNum+0x138>
    3c0e:	47 c0       	rjmp	.+142    	; 0x3c9e <lcd_sendNum+0x16e>
    3c10:	29 85       	ldd	r18, Y+9	; 0x09
    3c12:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c14:	27 30       	cpi	r18, 0x07	; 7
    3c16:	31 05       	cpc	r19, r1
    3c18:	b9 f1       	breq	.+110    	; 0x3c88 <lcd_sendNum+0x158>
    3c1a:	89 85       	ldd	r24, Y+9	; 0x09
    3c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c1e:	88 30       	cpi	r24, 0x08	; 8
    3c20:	91 05       	cpc	r25, r1
    3c22:	5c f4       	brge	.+22     	; 0x3c3a <lcd_sendNum+0x10a>
    3c24:	29 85       	ldd	r18, Y+9	; 0x09
    3c26:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c28:	25 30       	cpi	r18, 0x05	; 5
    3c2a:	31 05       	cpc	r19, r1
    3c2c:	29 f1       	breq	.+74     	; 0x3c78 <lcd_sendNum+0x148>
    3c2e:	89 85       	ldd	r24, Y+9	; 0x09
    3c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c32:	86 30       	cpi	r24, 0x06	; 6
    3c34:	91 05       	cpc	r25, r1
    3c36:	21 f1       	breq	.+72     	; 0x3c80 <lcd_sendNum+0x150>
    3c38:	32 c0       	rjmp	.+100    	; 0x3c9e <lcd_sendNum+0x16e>
    3c3a:	29 85       	ldd	r18, Y+9	; 0x09
    3c3c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c3e:	28 30       	cpi	r18, 0x08	; 8
    3c40:	31 05       	cpc	r19, r1
    3c42:	31 f1       	breq	.+76     	; 0x3c90 <lcd_sendNum+0x160>
    3c44:	89 85       	ldd	r24, Y+9	; 0x09
    3c46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c48:	89 30       	cpi	r24, 0x09	; 9
    3c4a:	91 05       	cpc	r25, r1
    3c4c:	29 f1       	breq	.+74     	; 0x3c98 <lcd_sendNum+0x168>
    3c4e:	27 c0       	rjmp	.+78     	; 0x3c9e <lcd_sendNum+0x16e>
		{
		case 0 : lcd_sendChar('0');break;
    3c50:	80 e3       	ldi	r24, 0x30	; 48
    3c52:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <lcd_sendChar>
    3c56:	23 c0       	rjmp	.+70     	; 0x3c9e <lcd_sendNum+0x16e>
		case 1 : lcd_sendChar('1');break;
    3c58:	81 e3       	ldi	r24, 0x31	; 49
    3c5a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <lcd_sendChar>
    3c5e:	1f c0       	rjmp	.+62     	; 0x3c9e <lcd_sendNum+0x16e>
		case 2 : lcd_sendChar('2');break;
    3c60:	82 e3       	ldi	r24, 0x32	; 50
    3c62:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <lcd_sendChar>
    3c66:	1b c0       	rjmp	.+54     	; 0x3c9e <lcd_sendNum+0x16e>
		case 3 : lcd_sendChar('3');break;
    3c68:	83 e3       	ldi	r24, 0x33	; 51
    3c6a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <lcd_sendChar>
    3c6e:	17 c0       	rjmp	.+46     	; 0x3c9e <lcd_sendNum+0x16e>
		case 4 : lcd_sendChar('4');break;
    3c70:	84 e3       	ldi	r24, 0x34	; 52
    3c72:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <lcd_sendChar>
    3c76:	13 c0       	rjmp	.+38     	; 0x3c9e <lcd_sendNum+0x16e>
		case 5 : lcd_sendChar('5');break;
    3c78:	85 e3       	ldi	r24, 0x35	; 53
    3c7a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <lcd_sendChar>
    3c7e:	0f c0       	rjmp	.+30     	; 0x3c9e <lcd_sendNum+0x16e>
		case 6 : lcd_sendChar('6');break;
    3c80:	86 e3       	ldi	r24, 0x36	; 54
    3c82:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <lcd_sendChar>
    3c86:	0b c0       	rjmp	.+22     	; 0x3c9e <lcd_sendNum+0x16e>
		case 7 : lcd_sendChar('7');break;
    3c88:	87 e3       	ldi	r24, 0x37	; 55
    3c8a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <lcd_sendChar>
    3c8e:	07 c0       	rjmp	.+14     	; 0x3c9e <lcd_sendNum+0x16e>
		case 8 : lcd_sendChar('8');break;
    3c90:	88 e3       	ldi	r24, 0x38	; 56
    3c92:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <lcd_sendChar>
    3c96:	03 c0       	rjmp	.+6      	; 0x3c9e <lcd_sendNum+0x16e>
		case 9 : lcd_sendChar('9');break;
    3c98:	89 e3       	ldi	r24, 0x39	; 57
    3c9a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <lcd_sendChar>
		}

		i--;
    3c9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ca0:	81 50       	subi	r24, 0x01	; 1
    3ca2:	89 83       	std	Y+1, r24	; 0x01
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
	while(i>=0)
    3ca4:	89 81       	ldd	r24, Y+1	; 0x01
    3ca6:	88 23       	and	r24, r24
    3ca8:	0c f0       	brlt	.+2      	; 0x3cac <lcd_sendNum+0x17c>
    3caa:	7e cf       	rjmp	.-260    	; 0x3ba8 <lcd_sendNum+0x78>

		i--;
	}


}
    3cac:	2a 96       	adiw	r28, 0x0a	; 10
    3cae:	0f b6       	in	r0, 0x3f	; 63
    3cb0:	f8 94       	cli
    3cb2:	de bf       	out	0x3e, r29	; 62
    3cb4:	0f be       	out	0x3f, r0	; 63
    3cb6:	cd bf       	out	0x3d, r28	; 61
    3cb8:	cf 91       	pop	r28
    3cba:	df 91       	pop	r29
    3cbc:	08 95       	ret

00003cbe <lcd_SetPosition>:

void lcd_SetPosition(uint8_t raw, uint8_t column)
{
    3cbe:	df 93       	push	r29
    3cc0:	cf 93       	push	r28
    3cc2:	00 d0       	rcall	.+0      	; 0x3cc4 <lcd_SetPosition+0x6>
    3cc4:	cd b7       	in	r28, 0x3d	; 61
    3cc6:	de b7       	in	r29, 0x3e	; 62
    3cc8:	89 83       	std	Y+1, r24	; 0x01
    3cca:	6a 83       	std	Y+2, r22	; 0x02
	if(0==raw)   
    3ccc:	89 81       	ldd	r24, Y+1	; 0x01
    3cce:	88 23       	and	r24, r24
    3cd0:	21 f4       	brne	.+8      	; 0x3cda <lcd_SetPosition+0x1c>
	{
	lcd_command(LCD_FIRSTLINE+column);
    3cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3cd4:	80 58       	subi	r24, 0x80	; 128
    3cd6:	0e 94 aa 18 	call	0x3154	; 0x3154 <lcd_command>
	}
	if(1==raw)
    3cda:	89 81       	ldd	r24, Y+1	; 0x01
    3cdc:	81 30       	cpi	r24, 0x01	; 1
    3cde:	21 f4       	brne	.+8      	; 0x3ce8 <lcd_SetPosition+0x2a>
	{
	lcd_command(LCD_SECONDLINE+column);                                   
    3ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce2:	80 54       	subi	r24, 0x40	; 64
    3ce4:	0e 94 aa 18 	call	0x3154	; 0x3154 <lcd_command>
	}

}
    3ce8:	0f 90       	pop	r0
    3cea:	0f 90       	pop	r0
    3cec:	cf 91       	pop	r28
    3cee:	df 91       	pop	r29
    3cf0:	08 95       	ret

00003cf2 <lcd_clear>:

void lcd_clear(void)
{
    3cf2:	df 93       	push	r29
    3cf4:	cf 93       	push	r28
    3cf6:	cd b7       	in	r28, 0x3d	; 61
    3cf8:	de b7       	in	r29, 0x3e	; 62
    3cfa:	2e 97       	sbiw	r28, 0x0e	; 14
    3cfc:	0f b6       	in	r0, 0x3f	; 63
    3cfe:	f8 94       	cli
    3d00:	de bf       	out	0x3e, r29	; 62
    3d02:	0f be       	out	0x3f, r0	; 63
    3d04:	cd bf       	out	0x3d, r28	; 61
    lcd_command(DISPLAY_CLEAR);
    3d06:	81 e0       	ldi	r24, 0x01	; 1
    3d08:	0e 94 aa 18 	call	0x3154	; 0x3154 <lcd_command>
    3d0c:	80 e0       	ldi	r24, 0x00	; 0
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	a0 e0       	ldi	r26, 0x00	; 0
    3d12:	b0 e4       	ldi	r27, 0x40	; 64
    3d14:	8b 87       	std	Y+11, r24	; 0x0b
    3d16:	9c 87       	std	Y+12, r25	; 0x0c
    3d18:	ad 87       	std	Y+13, r26	; 0x0d
    3d1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d24:	20 e0       	ldi	r18, 0x00	; 0
    3d26:	30 e0       	ldi	r19, 0x00	; 0
    3d28:	4a ef       	ldi	r20, 0xFA	; 250
    3d2a:	54 e4       	ldi	r21, 0x44	; 68
    3d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d30:	dc 01       	movw	r26, r24
    3d32:	cb 01       	movw	r24, r22
    3d34:	8f 83       	std	Y+7, r24	; 0x07
    3d36:	98 87       	std	Y+8, r25	; 0x08
    3d38:	a9 87       	std	Y+9, r26	; 0x09
    3d3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d3e:	78 85       	ldd	r23, Y+8	; 0x08
    3d40:	89 85       	ldd	r24, Y+9	; 0x09
    3d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d44:	20 e0       	ldi	r18, 0x00	; 0
    3d46:	30 e0       	ldi	r19, 0x00	; 0
    3d48:	40 e8       	ldi	r20, 0x80	; 128
    3d4a:	5f e3       	ldi	r21, 0x3F	; 63
    3d4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d50:	88 23       	and	r24, r24
    3d52:	2c f4       	brge	.+10     	; 0x3d5e <lcd_clear+0x6c>
		__ticks = 1;
    3d54:	81 e0       	ldi	r24, 0x01	; 1
    3d56:	90 e0       	ldi	r25, 0x00	; 0
    3d58:	9e 83       	std	Y+6, r25	; 0x06
    3d5a:	8d 83       	std	Y+5, r24	; 0x05
    3d5c:	3f c0       	rjmp	.+126    	; 0x3ddc <lcd_clear+0xea>
	else if (__tmp > 65535)
    3d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    3d60:	78 85       	ldd	r23, Y+8	; 0x08
    3d62:	89 85       	ldd	r24, Y+9	; 0x09
    3d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d66:	20 e0       	ldi	r18, 0x00	; 0
    3d68:	3f ef       	ldi	r19, 0xFF	; 255
    3d6a:	4f e7       	ldi	r20, 0x7F	; 127
    3d6c:	57 e4       	ldi	r21, 0x47	; 71
    3d6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d72:	18 16       	cp	r1, r24
    3d74:	4c f5       	brge	.+82     	; 0x3dc8 <lcd_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	30 e0       	ldi	r19, 0x00	; 0
    3d82:	40 e2       	ldi	r20, 0x20	; 32
    3d84:	51 e4       	ldi	r21, 0x41	; 65
    3d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	cb 01       	movw	r24, r22
    3d8e:	bc 01       	movw	r22, r24
    3d90:	cd 01       	movw	r24, r26
    3d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d96:	dc 01       	movw	r26, r24
    3d98:	cb 01       	movw	r24, r22
    3d9a:	9e 83       	std	Y+6, r25	; 0x06
    3d9c:	8d 83       	std	Y+5, r24	; 0x05
    3d9e:	0f c0       	rjmp	.+30     	; 0x3dbe <lcd_clear+0xcc>
    3da0:	88 ec       	ldi	r24, 0xC8	; 200
    3da2:	90 e0       	ldi	r25, 0x00	; 0
    3da4:	9c 83       	std	Y+4, r25	; 0x04
    3da6:	8b 83       	std	Y+3, r24	; 0x03
    3da8:	8b 81       	ldd	r24, Y+3	; 0x03
    3daa:	9c 81       	ldd	r25, Y+4	; 0x04
    3dac:	01 97       	sbiw	r24, 0x01	; 1
    3dae:	f1 f7       	brne	.-4      	; 0x3dac <lcd_clear+0xba>
    3db0:	9c 83       	std	Y+4, r25	; 0x04
    3db2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3db4:	8d 81       	ldd	r24, Y+5	; 0x05
    3db6:	9e 81       	ldd	r25, Y+6	; 0x06
    3db8:	01 97       	sbiw	r24, 0x01	; 1
    3dba:	9e 83       	std	Y+6, r25	; 0x06
    3dbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc2:	00 97       	sbiw	r24, 0x00	; 0
    3dc4:	69 f7       	brne	.-38     	; 0x3da0 <lcd_clear+0xae>
    3dc6:	14 c0       	rjmp	.+40     	; 0x3df0 <lcd_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    3dca:	78 85       	ldd	r23, Y+8	; 0x08
    3dcc:	89 85       	ldd	r24, Y+9	; 0x09
    3dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	cb 01       	movw	r24, r22
    3dd8:	9e 83       	std	Y+6, r25	; 0x06
    3dda:	8d 83       	std	Y+5, r24	; 0x05
    3ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dde:	9e 81       	ldd	r25, Y+6	; 0x06
    3de0:	9a 83       	std	Y+2, r25	; 0x02
    3de2:	89 83       	std	Y+1, r24	; 0x01
    3de4:	89 81       	ldd	r24, Y+1	; 0x01
    3de6:	9a 81       	ldd	r25, Y+2	; 0x02
    3de8:	01 97       	sbiw	r24, 0x01	; 1
    3dea:	f1 f7       	brne	.-4      	; 0x3de8 <lcd_clear+0xf6>
    3dec:	9a 83       	std	Y+2, r25	; 0x02
    3dee:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    3df0:	2e 96       	adiw	r28, 0x0e	; 14
    3df2:	0f b6       	in	r0, 0x3f	; 63
    3df4:	f8 94       	cli
    3df6:	de bf       	out	0x3e, r29	; 62
    3df8:	0f be       	out	0x3f, r0	; 63
    3dfa:	cd bf       	out	0x3d, r28	; 61
    3dfc:	cf 91       	pop	r28
    3dfe:	df 91       	pop	r29
    3e00:	08 95       	ret

00003e02 <KEYPAD_voidInit>:
/**
 * @brief Initialize KeyPad Pins
 * 
 */
void KEYPAD_voidInit(void)
{
    3e02:	df 93       	push	r29
    3e04:	cf 93       	push	r28
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
    DIO_voidInpullUp(KEYPAD_PORT, KEYPAD_INPUT0);
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	65 e0       	ldi	r22, 0x05	; 5
    3e0e:	0e 94 a8 11 	call	0x2350	; 0x2350 <DIO_voidInpullUp>
    DIO_voidInpullUp(KEYPAD_PORT, KEYPAD_INPUT1);
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	66 e0       	ldi	r22, 0x06	; 6
    3e16:	0e 94 a8 11 	call	0x2350	; 0x2350 <DIO_voidInpullUp>
    DIO_voidInpullUp(KEYPAD_PORT, KEYPAD_INPUT2);
    3e1a:	80 e0       	ldi	r24, 0x00	; 0
    3e1c:	67 e0       	ldi	r22, 0x07	; 7
    3e1e:	0e 94 a8 11 	call	0x2350	; 0x2350 <DIO_voidInpullUp>


    DIO_voidSetPinDirection(KEYPAD_PORT, KEYPAD_OUTPUT0, OUTPUT);
    3e22:	80 e0       	ldi	r24, 0x00	; 0
    3e24:	61 e0       	ldi	r22, 0x01	; 1
    3e26:	41 e0       	ldi	r20, 0x01	; 1
    3e28:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KEYPAD_PORT, KEYPAD_OUTPUT1, OUTPUT);
    3e2c:	80 e0       	ldi	r24, 0x00	; 0
    3e2e:	62 e0       	ldi	r22, 0x02	; 2
    3e30:	41 e0       	ldi	r20, 0x01	; 1
    3e32:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KEYPAD_PORT, KEYPAD_OUTPUT2, OUTPUT);
    3e36:	80 e0       	ldi	r24, 0x00	; 0
    3e38:	63 e0       	ldi	r22, 0x03	; 3
    3e3a:	41 e0       	ldi	r20, 0x01	; 1
    3e3c:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KEYPAD_PORT, KEYPAD_OUTPUT3, OUTPUT);
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	64 e0       	ldi	r22, 0x04	; 4
    3e44:	41 e0       	ldi	r20, 0x01	; 1
    3e46:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_voidSetPinDirection>

    DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0, HIGH);
    3e4a:	80 e0       	ldi	r24, 0x00	; 0
    3e4c:	61 e0       	ldi	r22, 0x01	; 1
    3e4e:	41 e0       	ldi	r20, 0x01	; 1
    3e50:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT1, HIGH);
    3e54:	80 e0       	ldi	r24, 0x00	; 0
    3e56:	62 e0       	ldi	r22, 0x02	; 2
    3e58:	41 e0       	ldi	r20, 0x01	; 1
    3e5a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT2, HIGH);
    3e5e:	80 e0       	ldi	r24, 0x00	; 0
    3e60:	63 e0       	ldi	r22, 0x03	; 3
    3e62:	41 e0       	ldi	r20, 0x01	; 1
    3e64:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT3, HIGH);
    3e68:	80 e0       	ldi	r24, 0x00	; 0
    3e6a:	64 e0       	ldi	r22, 0x04	; 4
    3e6c:	41 e0       	ldi	r20, 0x01	; 1
    3e6e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
}
    3e72:	cf 91       	pop	r28
    3e74:	df 91       	pop	r29
    3e76:	08 95       	ret

00003e78 <KEYPAD_u8Read>:
 * @brief Read Pressed Button on KeyPad and Return Key
 * 
 * @return uint8_t Pressed
 */
uint8_t KEYPAD_u8Read(void)
{
    3e78:	df 93       	push	r29
    3e7a:	cf 93       	push	r28
    3e7c:	00 d0       	rcall	.+0      	; 0x3e7e <KEYPAD_u8Read+0x6>
    3e7e:	0f 92       	push	r0
    3e80:	cd b7       	in	r28, 0x3d	; 61
    3e82:	de b7       	in	r29, 0x3e	; 62
    uint8_t i, j, key = DEFAULT_KEY;
    3e84:	8e e2       	ldi	r24, 0x2E	; 46
    3e86:	89 83       	std	Y+1, r24	; 0x01
    while (1)
    {
        for (i = 0; i < ROW; i++)
    3e88:	1b 82       	std	Y+3, r1	; 0x03
    3e8a:	3f c0       	rjmp	.+126    	; 0x3f0a <KEYPAD_u8Read+0x92>
        {
            DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0 + i, LOW);
    3e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e8e:	98 2f       	mov	r25, r24
    3e90:	9f 5f       	subi	r25, 0xFF	; 255
    3e92:	80 e0       	ldi	r24, 0x00	; 0
    3e94:	69 2f       	mov	r22, r25
    3e96:	40 e0       	ldi	r20, 0x00	; 0
    3e98:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
            for (j = 0; j < COL; j++)
    3e9c:	1a 82       	std	Y+2, r1	; 0x02
    3e9e:	27 c0       	rjmp	.+78     	; 0x3eee <KEYPAD_u8Read+0x76>
            {
                if (!DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_INPUT0 + j))
    3ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea2:	98 2f       	mov	r25, r24
    3ea4:	9b 5f       	subi	r25, 0xFB	; 251
    3ea6:	80 e0       	ldi	r24, 0x00	; 0
    3ea8:	69 2f       	mov	r22, r25
    3eaa:	0e 94 1b 10 	call	0x2036	; 0x2036 <DIO_u8GetPinValue>
    3eae:	88 23       	and	r24, r24
    3eb0:	d9 f4       	brne	.+54     	; 0x3ee8 <KEYPAD_u8Read+0x70>
                {
                    key = gKEYPADArr[i][j];
    3eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb4:	28 2f       	mov	r18, r24
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eba:	48 2f       	mov	r20, r24
    3ebc:	50 e0       	ldi	r21, 0x00	; 0
    3ebe:	c9 01       	movw	r24, r18
    3ec0:	88 0f       	add	r24, r24
    3ec2:	99 1f       	adc	r25, r25
    3ec4:	82 0f       	add	r24, r18
    3ec6:	93 1f       	adc	r25, r19
    3ec8:	84 0f       	add	r24, r20
    3eca:	95 1f       	adc	r25, r21
    3ecc:	fc 01       	movw	r30, r24
    3ece:	e8 5f       	subi	r30, 0xF8	; 248
    3ed0:	fc 4f       	sbci	r31, 0xFC	; 252
    3ed2:	80 81       	ld	r24, Z
    3ed4:	89 83       	std	Y+1, r24	; 0x01
                    while (!DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_INPUT0 + j))
    3ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed8:	98 2f       	mov	r25, r24
    3eda:	9b 5f       	subi	r25, 0xFB	; 251
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	69 2f       	mov	r22, r25
    3ee0:	0e 94 1b 10 	call	0x2036	; 0x2036 <DIO_u8GetPinValue>
    3ee4:	88 23       	and	r24, r24
    3ee6:	b9 f3       	breq	.-18     	; 0x3ed6 <KEYPAD_u8Read+0x5e>
    while (1)
    {
        for (i = 0; i < ROW; i++)
        {
            DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0 + i, LOW);
            for (j = 0; j < COL; j++)
    3ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eea:	8f 5f       	subi	r24, 0xFF	; 255
    3eec:	8a 83       	std	Y+2, r24	; 0x02
    3eee:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef0:	83 30       	cpi	r24, 0x03	; 3
    3ef2:	b0 f2       	brcs	.-84     	; 0x3ea0 <KEYPAD_u8Read+0x28>
                    key = gKEYPADArr[i][j];
                    while (!DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_INPUT0 + j))
                        ;
                }
            }
            DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0 + i, HIGH);
    3ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef6:	98 2f       	mov	r25, r24
    3ef8:	9f 5f       	subi	r25, 0xFF	; 255
    3efa:	80 e0       	ldi	r24, 0x00	; 0
    3efc:	69 2f       	mov	r22, r25
    3efe:	41 e0       	ldi	r20, 0x01	; 1
    3f00:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <DIO_voidSetPinValue>
uint8_t KEYPAD_u8Read(void)
{
    uint8_t i, j, key = DEFAULT_KEY;
    while (1)
    {
        for (i = 0; i < ROW; i++)
    3f04:	8b 81       	ldd	r24, Y+3	; 0x03
    3f06:	8f 5f       	subi	r24, 0xFF	; 255
    3f08:	8b 83       	std	Y+3, r24	; 0x03
    3f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0c:	84 30       	cpi	r24, 0x04	; 4
    3f0e:	08 f4       	brcc	.+2      	; 0x3f12 <KEYPAD_u8Read+0x9a>
    3f10:	bd cf       	rjmp	.-134    	; 0x3e8c <KEYPAD_u8Read+0x14>
                        ;
                }
            }
            DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0 + i, HIGH);
        }
        return key;
    3f12:	89 81       	ldd	r24, Y+1	; 0x01
    }
}
    3f14:	0f 90       	pop	r0
    3f16:	0f 90       	pop	r0
    3f18:	0f 90       	pop	r0
    3f1a:	cf 91       	pop	r28
    3f1c:	df 91       	pop	r29
    3f1e:	08 95       	ret

00003f20 <eeprom_send_string>:

#include "I2C_interface.h"

#include "EEPROM_interface.h"
void eeprom_send_string(uint8_t *str,uint8_t address)
{
    3f20:	df 93       	push	r29
    3f22:	cf 93       	push	r28
    3f24:	00 d0       	rcall	.+0      	; 0x3f26 <eeprom_send_string+0x6>
    3f26:	00 d0       	rcall	.+0      	; 0x3f28 <eeprom_send_string+0x8>
    3f28:	0f 92       	push	r0
    3f2a:	cd b7       	in	r28, 0x3d	; 61
    3f2c:	de b7       	in	r29, 0x3e	; 62
    3f2e:	9c 83       	std	Y+4, r25	; 0x04
    3f30:	8b 83       	std	Y+3, r24	; 0x03
    3f32:	6d 83       	std	Y+5, r22	; 0x05

	uint8_t i = 0, value;
    3f34:	1a 82       	std	Y+2, r1	; 0x02
	I2C_MasterStart();
    3f36:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <I2C_MasterStart>
	I2C_SendSlaveAddressWithWrite(0b01010000);
    3f3a:	80 e5       	ldi	r24, 0x50	; 80
    3f3c:	0e 94 30 0b 	call	0x1660	; 0x1660 <I2C_SendSlaveAddressWithWrite>
	I2C_WriteDataByte(address);
    3f40:	8d 81       	ldd	r24, Y+5	; 0x05
    3f42:	0e 94 82 0b 	call	0x1704	; 0x1704 <I2C_WriteDataByte>
    3f46:	0e c0       	rjmp	.+28     	; 0x3f64 <eeprom_send_string+0x44>
	while (str[i] != '\0')
	{
		I2C_WriteDataByte(str[i]);
    3f48:	8a 81       	ldd	r24, Y+2	; 0x02
    3f4a:	28 2f       	mov	r18, r24
    3f4c:	30 e0       	ldi	r19, 0x00	; 0
    3f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f50:	9c 81       	ldd	r25, Y+4	; 0x04
    3f52:	fc 01       	movw	r30, r24
    3f54:	e2 0f       	add	r30, r18
    3f56:	f3 1f       	adc	r31, r19
    3f58:	80 81       	ld	r24, Z
    3f5a:	0e 94 82 0b 	call	0x1704	; 0x1704 <I2C_WriteDataByte>
		i++;
    3f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f60:	8f 5f       	subi	r24, 0xFF	; 255
    3f62:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t i = 0, value;
	I2C_MasterStart();
	I2C_SendSlaveAddressWithWrite(0b01010000);
	I2C_WriteDataByte(address);
	while (str[i] != '\0')
    3f64:	8a 81       	ldd	r24, Y+2	; 0x02
    3f66:	28 2f       	mov	r18, r24
    3f68:	30 e0       	ldi	r19, 0x00	; 0
    3f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f6e:	fc 01       	movw	r30, r24
    3f70:	e2 0f       	add	r30, r18
    3f72:	f3 1f       	adc	r31, r19
    3f74:	80 81       	ld	r24, Z
    3f76:	88 23       	and	r24, r24
    3f78:	39 f7       	brne	.-50     	; 0x3f48 <eeprom_send_string+0x28>
	{
		I2C_WriteDataByte(str[i]);
		i++;
	}
	I2C_MasterStop();
    3f7a:	0e 94 b6 0b 	call	0x176c	; 0x176c <I2C_MasterStop>
}
    3f7e:	0f 90       	pop	r0
    3f80:	0f 90       	pop	r0
    3f82:	0f 90       	pop	r0
    3f84:	0f 90       	pop	r0
    3f86:	0f 90       	pop	r0
    3f88:	cf 91       	pop	r28
    3f8a:	df 91       	pop	r29
    3f8c:	08 95       	ret

00003f8e <eeprom_recieve_string>:
void eeprom_recieve_string(uint8_t *str,uint8_t address)
{
    3f8e:	0f 93       	push	r16
    3f90:	1f 93       	push	r17
    3f92:	df 93       	push	r29
    3f94:	cf 93       	push	r28
    3f96:	00 d0       	rcall	.+0      	; 0x3f98 <eeprom_recieve_string+0xa>
    3f98:	00 d0       	rcall	.+0      	; 0x3f9a <eeprom_recieve_string+0xc>
    3f9a:	0f 92       	push	r0
    3f9c:	cd b7       	in	r28, 0x3d	; 61
    3f9e:	de b7       	in	r29, 0x3e	; 62
    3fa0:	9c 83       	std	Y+4, r25	; 0x04
    3fa2:	8b 83       	std	Y+3, r24	; 0x03
    3fa4:	6d 83       	std	Y+5, r22	; 0x05

	uint8_t i = 0, value;
    3fa6:	1a 82       	std	Y+2, r1	; 0x02
	I2C_MasterStart();
    3fa8:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <I2C_MasterStart>
	I2C_SendSlaveAddressWithWrite(0b01010000);
    3fac:	80 e5       	ldi	r24, 0x50	; 80
    3fae:	0e 94 30 0b 	call	0x1660	; 0x1660 <I2C_SendSlaveAddressWithWrite>
	I2C_WriteDataByte(address);
    3fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fb4:	0e 94 82 0b 	call	0x1704	; 0x1704 <I2C_WriteDataByte>
    3fb8:	16 c0       	rjmp	.+44     	; 0x3fe6 <eeprom_recieve_string+0x58>

	while (str[i] != '\0')
	{
		I2C_MasterStart();
    3fba:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <I2C_MasterStart>
		I2C_SendSlaveAddressWithRead(0b01010000);
    3fbe:	80 e5       	ldi	r24, 0x50	; 80
    3fc0:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <I2C_SendSlaveAddressWithRead>
		str[i] = I2C_ReadDataByte();
    3fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc6:	28 2f       	mov	r18, r24
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	8b 81       	ldd	r24, Y+3	; 0x03
    3fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    3fce:	8c 01       	movw	r16, r24
    3fd0:	02 0f       	add	r16, r18
    3fd2:	13 1f       	adc	r17, r19
    3fd4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <I2C_ReadDataByte>
    3fd8:	f8 01       	movw	r30, r16
    3fda:	80 83       	st	Z, r24

		I2C_MasterStop();
    3fdc:	0e 94 b6 0b 	call	0x176c	; 0x176c <I2C_MasterStop>
		i++;
    3fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe2:	8f 5f       	subi	r24, 0xFF	; 255
    3fe4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0, value;
	I2C_MasterStart();
	I2C_SendSlaveAddressWithWrite(0b01010000);
	I2C_WriteDataByte(address);

	while (str[i] != '\0')
    3fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe8:	28 2f       	mov	r18, r24
    3fea:	30 e0       	ldi	r19, 0x00	; 0
    3fec:	8b 81       	ldd	r24, Y+3	; 0x03
    3fee:	9c 81       	ldd	r25, Y+4	; 0x04
    3ff0:	fc 01       	movw	r30, r24
    3ff2:	e2 0f       	add	r30, r18
    3ff4:	f3 1f       	adc	r31, r19
    3ff6:	80 81       	ld	r24, Z
    3ff8:	88 23       	and	r24, r24
    3ffa:	f9 f6       	brne	.-66     	; 0x3fba <eeprom_recieve_string+0x2c>
		str[i] = I2C_ReadDataByte();

		I2C_MasterStop();
		i++;
	}
	str[i]='\0';
    3ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ffe:	28 2f       	mov	r18, r24
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	8b 81       	ldd	r24, Y+3	; 0x03
    4004:	9c 81       	ldd	r25, Y+4	; 0x04
    4006:	fc 01       	movw	r30, r24
    4008:	e2 0f       	add	r30, r18
    400a:	f3 1f       	adc	r31, r19
    400c:	10 82       	st	Z, r1

}
    400e:	0f 90       	pop	r0
    4010:	0f 90       	pop	r0
    4012:	0f 90       	pop	r0
    4014:	0f 90       	pop	r0
    4016:	0f 90       	pop	r0
    4018:	cf 91       	pop	r28
    401a:	df 91       	pop	r29
    401c:	1f 91       	pop	r17
    401e:	0f 91       	pop	r16
    4020:	08 95       	ret

00004022 <change_stringToBin>:

uint8_t change_stringToBin(uint8_t *str)
{
    4022:	df 93       	push	r29
    4024:	cf 93       	push	r28
    4026:	cd b7       	in	r28, 0x3d	; 61
    4028:	de b7       	in	r29, 0x3e	; 62
    402a:	2d 97       	sbiw	r28, 0x0d	; 13
    402c:	0f b6       	in	r0, 0x3f	; 63
    402e:	f8 94       	cli
    4030:	de bf       	out	0x3e, r29	; 62
    4032:	0f be       	out	0x3f, r0	; 63
    4034:	cd bf       	out	0x3d, r28	; 61
    4036:	9d 87       	std	Y+13, r25	; 0x0d
    4038:	8c 87       	std	Y+12, r24	; 0x0c
	uint32_t num = 0;
    403a:	18 86       	std	Y+8, r1	; 0x08
    403c:	19 86       	std	Y+9, r1	; 0x09
    403e:	1a 86       	std	Y+10, r1	; 0x0a
    4040:	1b 86       	std	Y+11, r1	; 0x0b
	uint32_t bin = 0;
    4042:	1c 82       	std	Y+4, r1	; 0x04
    4044:	1d 82       	std	Y+5, r1	; 0x05
    4046:	1e 82       	std	Y+6, r1	; 0x06
    4048:	1f 82       	std	Y+7, r1	; 0x07
	uint8_t temp = 0;
    404a:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t weight = 1;
    404c:	81 e0       	ldi	r24, 0x01	; 1
    404e:	8a 83       	std	Y+2, r24	; 0x02

	for (uint8_t i = 0; i < 8; i++)
    4050:	19 82       	std	Y+1, r1	; 0x01
    4052:	29 c0       	rjmp	.+82     	; 0x40a6 <change_stringToBin+0x84>
	{
		num = num * 10 + str[i] - '0';
    4054:	88 85       	ldd	r24, Y+8	; 0x08
    4056:	99 85       	ldd	r25, Y+9	; 0x09
    4058:	aa 85       	ldd	r26, Y+10	; 0x0a
    405a:	bb 85       	ldd	r27, Y+11	; 0x0b
    405c:	2a e0       	ldi	r18, 0x0A	; 10
    405e:	30 e0       	ldi	r19, 0x00	; 0
    4060:	40 e0       	ldi	r20, 0x00	; 0
    4062:	50 e0       	ldi	r21, 0x00	; 0
    4064:	bc 01       	movw	r22, r24
    4066:	cd 01       	movw	r24, r26
    4068:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsi3>
    406c:	ab 01       	movw	r20, r22
    406e:	bc 01       	movw	r22, r24
    4070:	89 81       	ldd	r24, Y+1	; 0x01
    4072:	28 2f       	mov	r18, r24
    4074:	30 e0       	ldi	r19, 0x00	; 0
    4076:	8c 85       	ldd	r24, Y+12	; 0x0c
    4078:	9d 85       	ldd	r25, Y+13	; 0x0d
    407a:	fc 01       	movw	r30, r24
    407c:	e2 0f       	add	r30, r18
    407e:	f3 1f       	adc	r31, r19
    4080:	80 81       	ld	r24, Z
    4082:	88 2f       	mov	r24, r24
    4084:	90 e0       	ldi	r25, 0x00	; 0
    4086:	a0 e0       	ldi	r26, 0x00	; 0
    4088:	b0 e0       	ldi	r27, 0x00	; 0
    408a:	84 0f       	add	r24, r20
    408c:	95 1f       	adc	r25, r21
    408e:	a6 1f       	adc	r26, r22
    4090:	b7 1f       	adc	r27, r23
    4092:	c0 97       	sbiw	r24, 0x30	; 48
    4094:	a1 09       	sbc	r26, r1
    4096:	b1 09       	sbc	r27, r1
    4098:	88 87       	std	Y+8, r24	; 0x08
    409a:	99 87       	std	Y+9, r25	; 0x09
    409c:	aa 87       	std	Y+10, r26	; 0x0a
    409e:	bb 87       	std	Y+11, r27	; 0x0b
	uint32_t num = 0;
	uint32_t bin = 0;
	uint8_t temp = 0;
	uint8_t weight = 1;

	for (uint8_t i = 0; i < 8; i++)
    40a0:	89 81       	ldd	r24, Y+1	; 0x01
    40a2:	8f 5f       	subi	r24, 0xFF	; 255
    40a4:	89 83       	std	Y+1, r24	; 0x01
    40a6:	89 81       	ldd	r24, Y+1	; 0x01
    40a8:	88 30       	cpi	r24, 0x08	; 8
    40aa:	a0 f2       	brcs	.-88     	; 0x4054 <change_stringToBin+0x32>
    40ac:	46 c0       	rjmp	.+140    	; 0x413a <change_stringToBin+0x118>
		num = num * 10 + str[i] - '0';
	}

	while (num > 0)
	{
		temp = num % 10;
    40ae:	88 85       	ldd	r24, Y+8	; 0x08
    40b0:	99 85       	ldd	r25, Y+9	; 0x09
    40b2:	aa 85       	ldd	r26, Y+10	; 0x0a
    40b4:	bb 85       	ldd	r27, Y+11	; 0x0b
    40b6:	2a e0       	ldi	r18, 0x0A	; 10
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	40 e0       	ldi	r20, 0x00	; 0
    40bc:	50 e0       	ldi	r21, 0x00	; 0
    40be:	bc 01       	movw	r22, r24
    40c0:	cd 01       	movw	r24, r26
    40c2:	0e 94 96 29 	call	0x532c	; 0x532c <__udivmodsi4>
    40c6:	dc 01       	movw	r26, r24
    40c8:	cb 01       	movw	r24, r22
    40ca:	8b 83       	std	Y+3, r24	; 0x03
		num = num / 10;
    40cc:	88 85       	ldd	r24, Y+8	; 0x08
    40ce:	99 85       	ldd	r25, Y+9	; 0x09
    40d0:	aa 85       	ldd	r26, Y+10	; 0x0a
    40d2:	bb 85       	ldd	r27, Y+11	; 0x0b
    40d4:	2a e0       	ldi	r18, 0x0A	; 10
    40d6:	30 e0       	ldi	r19, 0x00	; 0
    40d8:	40 e0       	ldi	r20, 0x00	; 0
    40da:	50 e0       	ldi	r21, 0x00	; 0
    40dc:	bc 01       	movw	r22, r24
    40de:	cd 01       	movw	r24, r26
    40e0:	0e 94 96 29 	call	0x532c	; 0x532c <__udivmodsi4>
    40e4:	da 01       	movw	r26, r20
    40e6:	c9 01       	movw	r24, r18
    40e8:	88 87       	std	Y+8, r24	; 0x08
    40ea:	99 87       	std	Y+9, r25	; 0x09
    40ec:	aa 87       	std	Y+10, r26	; 0x0a
    40ee:	bb 87       	std	Y+11, r27	; 0x0b
		bin = bin + temp * weight;
    40f0:	8b 81       	ldd	r24, Y+3	; 0x03
    40f2:	28 2f       	mov	r18, r24
    40f4:	30 e0       	ldi	r19, 0x00	; 0
    40f6:	8a 81       	ldd	r24, Y+2	; 0x02
    40f8:	88 2f       	mov	r24, r24
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	ac 01       	movw	r20, r24
    40fe:	24 9f       	mul	r18, r20
    4100:	c0 01       	movw	r24, r0
    4102:	25 9f       	mul	r18, r21
    4104:	90 0d       	add	r25, r0
    4106:	34 9f       	mul	r19, r20
    4108:	90 0d       	add	r25, r0
    410a:	11 24       	eor	r1, r1
    410c:	9c 01       	movw	r18, r24
    410e:	44 27       	eor	r20, r20
    4110:	37 fd       	sbrc	r19, 7
    4112:	40 95       	com	r20
    4114:	54 2f       	mov	r21, r20
    4116:	8c 81       	ldd	r24, Y+4	; 0x04
    4118:	9d 81       	ldd	r25, Y+5	; 0x05
    411a:	ae 81       	ldd	r26, Y+6	; 0x06
    411c:	bf 81       	ldd	r27, Y+7	; 0x07
    411e:	82 0f       	add	r24, r18
    4120:	93 1f       	adc	r25, r19
    4122:	a4 1f       	adc	r26, r20
    4124:	b5 1f       	adc	r27, r21
    4126:	8c 83       	std	Y+4, r24	; 0x04
    4128:	9d 83       	std	Y+5, r25	; 0x05
    412a:	ae 83       	std	Y+6, r26	; 0x06
    412c:	bf 83       	std	Y+7, r27	; 0x07
		weight *= 2;
    412e:	8a 81       	ldd	r24, Y+2	; 0x02
    4130:	88 2f       	mov	r24, r24
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	88 0f       	add	r24, r24
    4136:	99 1f       	adc	r25, r25
    4138:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t i = 0; i < 8; i++)
	{
		num = num * 10 + str[i] - '0';
	}

	while (num > 0)
    413a:	88 85       	ldd	r24, Y+8	; 0x08
    413c:	99 85       	ldd	r25, Y+9	; 0x09
    413e:	aa 85       	ldd	r26, Y+10	; 0x0a
    4140:	bb 85       	ldd	r27, Y+11	; 0x0b
    4142:	00 97       	sbiw	r24, 0x00	; 0
    4144:	a1 05       	cpc	r26, r1
    4146:	b1 05       	cpc	r27, r1
    4148:	09 f0       	breq	.+2      	; 0x414c <change_stringToBin+0x12a>
    414a:	b1 cf       	rjmp	.-158    	; 0x40ae <change_stringToBin+0x8c>
		temp = num % 10;
		num = num / 10;
		bin = bin + temp * weight;
		weight *= 2;
	}
	return bin;
    414c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    414e:	2d 96       	adiw	r28, 0x0d	; 13
    4150:	0f b6       	in	r0, 0x3f	; 63
    4152:	f8 94       	cli
    4154:	de bf       	out	0x3e, r29	; 62
    4156:	0f be       	out	0x3f, r0	; 63
    4158:	cd bf       	out	0x3d, r28	; 61
    415a:	cf 91       	pop	r28
    415c:	df 91       	pop	r29
    415e:	08 95       	ret

00004160 <EX_Callback>:
/**
 * @brief Call Back Function 
 * 
 */
void EX_Callback(void)
{
    4160:	df 93       	push	r29
    4162:	cf 93       	push	r28
    4164:	cd b7       	in	r28, 0x3d	; 61
    4166:	de b7       	in	r29, 0x3e	; 62
	BUTTONFLag = VALID;
    4168:	81 e0       	ldi	r24, 0x01	; 1
    416a:	80 93 58 03 	sts	0x0358, r24
	SPI_VidSendByte('f');
    416e:	86 e6       	ldi	r24, 0x66	; 102
    4170:	0e 94 45 0a 	call	0x148a	; 0x148a <SPI_VidSendByte>
	card_gflag = SPI_U8RecieveByte();
    4174:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <SPI_U8RecieveByte>
    4178:	80 93 59 03 	sts	0x0359, r24

	if (gflag == 0 || card_gflag == '0')
    417c:	80 91 5a 03 	lds	r24, 0x035A
    4180:	88 23       	and	r24, r24
    4182:	21 f0       	breq	.+8      	; 0x418c <EX_Callback+0x2c>
    4184:	80 91 59 03 	lds	r24, 0x0359
    4188:	80 33       	cpi	r24, 0x30	; 48
    418a:	39 f4       	brne	.+14     	; 0x419a <EX_Callback+0x3a>
	{
		SER_UARTvoidSendString((uint8_t *)"Invalid");
    418c:	80 e6       	ldi	r24, 0x60	; 96
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
		CallBackFLag = INVALID;
    4194:	10 92 57 03 	sts	0x0357, r1
    4198:	07 c0       	rjmp	.+14     	; 0x41a8 <EX_Callback+0x48>
	}
	else
	{
		SER_UARTvoidSendString((uint8_t *)"card and atm is valid");
    419a:	88 e6       	ldi	r24, 0x68	; 104
    419c:	90 e0       	ldi	r25, 0x00	; 0
    419e:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
		CallBackFLag = VALID;
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	80 93 57 03 	sts	0x0357, r24
	}
}
    41a8:	cf 91       	pop	r28
    41aa:	df 91       	pop	r29
    41ac:	08 95       	ret

000041ae <APP_Init>:
/**
 * @brief Initialize all Peripheral
 * 
 */
void APP_Init(void)
{
    41ae:	df 93       	push	r29
    41b0:	cf 93       	push	r28
    41b2:	cd b7       	in	r28, 0x3d	; 61
    41b4:	de b7       	in	r29, 0x3e	; 62
	UART_ENInit();
    41b6:	0e 94 0c 08 	call	0x1018	; 0x1018 <UART_ENInit>
	I2C_MasterInit();
    41ba:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <I2C_MasterInit>
	KEYPAD_voidInit();
    41be:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <KEYPAD_voidInit>
	lcd_init();
    41c2:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <lcd_init>
	SPI_VidInitMaster();
    41c6:	0e 94 f7 09 	call	0x13ee	; 0x13ee <SPI_VidInitMaster>
	MOTOR_voidInit();
    41ca:	0e 94 00 13 	call	0x2600	; 0x2600 <MOTOR_voidInit>
	ADC_VoidInit();
    41ce:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <ADC_VoidInit>
	LM35_VoidInit();
    41d2:	0e 94 a6 13 	call	0x274c	; 0x274c <LM35_VoidInit>

	/* Set Direction for EXTI */
	DIO_voidSetPinDirection(PORT_D, PIN2, INPUT);
    41d6:	83 e0       	ldi	r24, 0x03	; 3
    41d8:	62 e0       	ldi	r22, 0x02	; 2
    41da:	40 e0       	ldi	r20, 0x00	; 0
    41dc:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <DIO_voidSetPinDirection>
	DIO_voidInpullUp(PORT_D, PIN2);
    41e0:	83 e0       	ldi	r24, 0x03	; 3
    41e2:	62 e0       	ldi	r22, 0x02	; 2
    41e4:	0e 94 a8 11 	call	0x2350	; 0x2350 <DIO_voidInpullUp>
	EXTI_ENEnable(EXTI_INT0);
    41e8:	80 e0       	ldi	r24, 0x00	; 0
    41ea:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <EXTI_ENEnable>
	EXTI_ENTriggerEdge(EXTI_INT0, FALLING_EDGE);
    41ee:	80 e0       	ldi	r24, 0x00	; 0
    41f0:	62 e0       	ldi	r22, 0x02	; 2
    41f2:	0e 94 76 0c 	call	0x18ec	; 0x18ec <EXTI_ENTriggerEdge>
	EXTI_SetCallBack(EXTI_INT0, EX_Callback);
    41f6:	20 eb       	ldi	r18, 0xB0	; 176
    41f8:	30 e2       	ldi	r19, 0x20	; 32
    41fa:	80 e0       	ldi	r24, 0x00	; 0
    41fc:	b9 01       	movw	r22, r18
    41fe:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <EXTI_SetCallBack>
}
    4202:	cf 91       	pop	r28
    4204:	df 91       	pop	r29
    4206:	08 95       	ret

00004208 <ADC_ATM>:
 * @brief Home Screen for ATM ask for ATM OR Temperature
 * 
 * @return uint8_t keypad Pressed Value
 */
uint8_t ADC_ATM(void)
{
    4208:	df 93       	push	r29
    420a:	cf 93       	push	r28
    420c:	0f 92       	push	r0
    420e:	cd b7       	in	r28, 0x3d	; 61
    4210:	de b7       	in	r29, 0x3e	; 62
	uint8_t value = 0;
    4212:	19 82       	std	Y+1, r1	; 0x01
	/* CLR LCD */
	lcd_clear();
    4214:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <lcd_clear>

	lcd_sendString((uint8_t *)"1-Temp");
    4218:	8e e7       	ldi	r24, 0x7E	; 126
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <lcd_sendString>
	lcd_SetPosition(1, 0);
    4220:	81 e0       	ldi	r24, 0x01	; 1
    4222:	60 e0       	ldi	r22, 0x00	; 0
    4224:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <lcd_SetPosition>
	lcd_sendString((uint8_t *)"2-ATM");
    4228:	85 e8       	ldi	r24, 0x85	; 133
    422a:	90 e0       	ldi	r25, 0x00	; 0
    422c:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <lcd_sendString>

	value = KEYPAD_u8Read();
    4230:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <KEYPAD_u8Read>
    4234:	89 83       	std	Y+1, r24	; 0x01
    4236:	03 c0       	rjmp	.+6      	; 0x423e <ADC_ATM+0x36>
	while (value == DEFAULT_KEY)
	{

		value = KEYPAD_u8Read();
    4238:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <KEYPAD_u8Read>
    423c:	89 83       	std	Y+1, r24	; 0x01
	lcd_sendString((uint8_t *)"1-Temp");
	lcd_SetPosition(1, 0);
	lcd_sendString((uint8_t *)"2-ATM");

	value = KEYPAD_u8Read();
	while (value == DEFAULT_KEY)
    423e:	89 81       	ldd	r24, Y+1	; 0x01
    4240:	8e 32       	cpi	r24, 0x2E	; 46
    4242:	d1 f3       	breq	.-12     	; 0x4238 <ADC_ATM+0x30>
	{

		value = KEYPAD_u8Read();
	}
	return value;
    4244:	89 81       	ldd	r24, Y+1	; 0x01
}
    4246:	0f 90       	pop	r0
    4248:	cf 91       	pop	r28
    424a:	df 91       	pop	r29
    424c:	08 95       	ret

0000424e <ADMIN_Mode>:
/**
 * @brief This function for Admin Mode to store data on eeprom and enter new number, balance and MaxAmount 
 * 
 */
void ADMIN_Mode(void)
{
    424e:	df 93       	push	r29
    4250:	cf 93       	push	r28
    4252:	cd b7       	in	r28, 0x3d	; 61
    4254:	de b7       	in	r29, 0x3e	; 62
    4256:	e9 97       	sbiw	r28, 0x39	; 57
    4258:	0f b6       	in	r0, 0x3f	; 63
    425a:	f8 94       	cli
    425c:	de bf       	out	0x3e, r29	; 62
    425e:	0f be       	out	0x3f, r0	; 63
    4260:	cd bf       	out	0x3d, r28	; 61
	uint8_t *Admin = (uint8_t *)"ADMIN";
    4262:	8b e8       	ldi	r24, 0x8B	; 139
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	9a 83       	std	Y+2, r25	; 0x02
    4268:	89 83       	std	Y+1, r24	; 0x01
	/* used for take password, card number and balance */
	uint8_t Data[55] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
    426a:	87 e3       	ldi	r24, 0x37	; 55
    426c:	fe 01       	movw	r30, r28
    426e:	33 96       	adiw	r30, 0x03	; 3
    4270:	df 01       	movw	r26, r30
    4272:	98 2f       	mov	r25, r24
    4274:	1d 92       	st	X+, r1
    4276:	9a 95       	dec	r25
    4278:	e9 f7       	brne	.-6      	; 0x4274 <ADMIN_Mode+0x26>
    427a:	81 e0       	ldi	r24, 0x01	; 1
    427c:	8b 83       	std	Y+3, r24	; 0x03
    427e:	81 e0       	ldi	r24, 0x01	; 1
    4280:	8c 83       	std	Y+4, r24	; 0x04
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	8d 83       	std	Y+5, r24	; 0x05
    4286:	81 e0       	ldi	r24, 0x01	; 1
    4288:	8e 83       	std	Y+6, r24	; 0x06
    428a:	81 e0       	ldi	r24, 0x01	; 1
    428c:	8f 83       	std	Y+7, r24	; 0x07
    428e:	81 e0       	ldi	r24, 0x01	; 1
    4290:	88 87       	std	Y+8, r24	; 0x08
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	89 87       	std	Y+9, r24	; 0x09
    4296:	81 e0       	ldi	r24, 0x01	; 1
    4298:	8a 87       	std	Y+10, r24	; 0x0a
    429a:	81 e0       	ldi	r24, 0x01	; 1
    429c:	8b 87       	std	Y+11, r24	; 0x0b

	gflag = 0;
    429e:	10 92 5a 03 	sts	0x035A, r1
	SER_UARTvoidSendString((uint8_t *)"Enter Password of Admin Mode: ");
    42a2:	81 e9       	ldi	r24, 0x91	; 145
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
	SER_UARTvoidReceiveString(Data);
    42aa:	ce 01       	movw	r24, r28
    42ac:	03 96       	adiw	r24, 0x03	; 3
    42ae:	0e 94 44 07 	call	0xe88	; 0xe88 <SER_UARTvoidReceiveString>
	if (String_u8Comp(Data, Admin) == STRING_EQUL)
    42b2:	ce 01       	movw	r24, r28
    42b4:	03 96       	adiw	r24, 0x03	; 3
    42b6:	29 81       	ldd	r18, Y+1	; 0x01
    42b8:	3a 81       	ldd	r19, Y+2	; 0x02
    42ba:	b9 01       	movw	r22, r18
    42bc:	0e 94 91 27 	call	0x4f22	; 0x4f22 <String_u8Comp>
    42c0:	88 23       	and	r24, r24
    42c2:	61 f5       	brne	.+88     	; 0x431c <ADMIN_Mode+0xce>
	{
		SER_UARTvoidSendString((uint8_t *)"Correct Password");
    42c4:	80 eb       	ldi	r24, 0xB0	; 176
    42c6:	90 e0       	ldi	r25, 0x00	; 0
    42c8:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
		SER_UARTvoidSendString((uint8_t *)"Card Number : ");
    42cc:	81 ec       	ldi	r24, 0xC1	; 193
    42ce:	90 e0       	ldi	r25, 0x00	; 0
    42d0:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
		SER_UARTvoidReceiveString(Data);
    42d4:	ce 01       	movw	r24, r28
    42d6:	03 96       	adiw	r24, 0x03	; 3
    42d8:	0e 94 44 07 	call	0xe88	; 0xe88 <SER_UARTvoidReceiveString>
		/* Send Card Number To EEPROM */
		eeprom_send_string(Data, 0x01);
    42dc:	ce 01       	movw	r24, r28
    42de:	03 96       	adiw	r24, 0x03	; 3
    42e0:	61 e0       	ldi	r22, 0x01	; 1
    42e2:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <eeprom_send_string>

		/* Send Balance to EEPROM */
		SER_UARTvoidSendString((uint8_t *)"Enter Balance: ");
    42e6:	80 ed       	ldi	r24, 0xD0	; 208
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
		SER_UARTvoidReceiveString(Data);
    42ee:	ce 01       	movw	r24, r28
    42f0:	03 96       	adiw	r24, 0x03	; 3
    42f2:	0e 94 44 07 	call	0xe88	; 0xe88 <SER_UARTvoidReceiveString>
		eeprom_send_string(Data, 0xB1);
    42f6:	ce 01       	movw	r24, r28
    42f8:	03 96       	adiw	r24, 0x03	; 3
    42fa:	61 eb       	ldi	r22, 0xB1	; 177
    42fc:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <eeprom_send_string>

		/* Send Max Amount to EEPROM */
		SER_UARTvoidSendString((uint8_t *)"Enter Max Amount: ");
    4300:	80 ee       	ldi	r24, 0xE0	; 224
    4302:	90 e0       	ldi	r25, 0x00	; 0
    4304:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
		SER_UARTvoidReceiveString(Max_Amount);
    4308:	84 e1       	ldi	r24, 0x14	; 20
    430a:	93 e0       	ldi	r25, 0x03	; 3
    430c:	0e 94 44 07 	call	0xe88	; 0xe88 <SER_UARTvoidReceiveString>
		eeprom_send_string(Max_Amount, 0xF3);
    4310:	84 e1       	ldi	r24, 0x14	; 20
    4312:	93 e0       	ldi	r25, 0x03	; 3
    4314:	63 ef       	ldi	r22, 0xF3	; 243
    4316:	0e 94 90 1f 	call	0x3f20	; 0x3f20 <eeprom_send_string>
    431a:	06 c0       	rjmp	.+12     	; 0x4328 <ADMIN_Mode+0xda>
	}
	else
	{
		SER_UARTvoidSendString((uint8_t *)"Wrong Password ");
    431c:	83 ef       	ldi	r24, 0xF3	; 243
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
		ADC_ATM();
    4324:	0e 94 04 21 	call	0x4208	; 0x4208 <ADC_ATM>
	}
}
    4328:	e9 96       	adiw	r28, 0x39	; 57
    432a:	0f b6       	in	r0, 0x3f	; 63
    432c:	f8 94       	cli
    432e:	de bf       	out	0x3e, r29	; 62
    4330:	0f be       	out	0x3f, r0	; 63
    4332:	cd bf       	out	0x3d, r28	; 61
    4334:	cf 91       	pop	r28
    4336:	df 91       	pop	r29
    4338:	08 95       	ret

0000433a <USER_Mode>:
/**
 * @brief This Function For user Mode to check user password and deposit and turn on motor if Approved
 * 
 */
void USER_Mode(void)
{
    433a:	df 93       	push	r29
    433c:	cf 93       	push	r28
    433e:	cd b7       	in	r28, 0x3d	; 61
    4340:	de b7       	in	r29, 0x3e	; 62
    4342:	ca 54       	subi	r28, 0x4A	; 74
    4344:	d1 40       	sbci	r29, 0x01	; 1
    4346:	0f b6       	in	r0, 0x3f	; 63
    4348:	f8 94       	cli
    434a:	de bf       	out	0x3e, r29	; 62
    434c:	0f be       	out	0x3f, r0	; 63
    434e:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0;
    4350:	fe 01       	movw	r30, r28
    4352:	ea 5b       	subi	r30, 0xBA	; 186
    4354:	ff 4f       	sbci	r31, 0xFF	; 255
    4356:	10 82       	st	Z, r1
	uint8_t value = 0;
    4358:	fe 01       	movw	r30, r28
    435a:	eb 5b       	subi	r30, 0xBB	; 187
    435c:	ff 4f       	sbci	r31, 0xFF	; 255
    435e:	10 82       	st	Z, r1
	uint8_t Dep_money[5] = {1, 1, 1, 1};
    4360:	ce 01       	movw	r24, r28
    4362:	89 5b       	subi	r24, 0xB9	; 185
    4364:	9f 4f       	sbci	r25, 0xFF	; 255
    4366:	25 e0       	ldi	r18, 0x05	; 5
    4368:	fc 01       	movw	r30, r24
    436a:	df 01       	movw	r26, r30
    436c:	82 2f       	mov	r24, r18
    436e:	1d 92       	st	X+, r1
    4370:	8a 95       	dec	r24
    4372:	e9 f7       	brne	.-6      	; 0x436e <USER_Mode+0x34>
    4374:	fe 01       	movw	r30, r28
    4376:	e9 5b       	subi	r30, 0xB9	; 185
    4378:	ff 4f       	sbci	r31, 0xFF	; 255
    437a:	81 e0       	ldi	r24, 0x01	; 1
    437c:	80 83       	st	Z, r24
    437e:	fe 01       	movw	r30, r28
    4380:	e9 5b       	subi	r30, 0xB9	; 185
    4382:	ff 4f       	sbci	r31, 0xFF	; 255
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	81 83       	std	Z+1, r24	; 0x01
    4388:	fe 01       	movw	r30, r28
    438a:	e9 5b       	subi	r30, 0xB9	; 185
    438c:	ff 4f       	sbci	r31, 0xFF	; 255
    438e:	81 e0       	ldi	r24, 0x01	; 1
    4390:	82 83       	std	Z+2, r24	; 0x02
    4392:	fe 01       	movw	r30, r28
    4394:	e9 5b       	subi	r30, 0xB9	; 185
    4396:	ff 4f       	sbci	r31, 0xFF	; 255
    4398:	81 e0       	ldi	r24, 0x01	; 1
    439a:	83 83       	std	Z+3, r24	; 0x03
	uint8_t Temp[255] = {1, 1, 1, 1, 1};
    439c:	ce 01       	movw	r24, r28
    439e:	84 5b       	subi	r24, 0xB4	; 180
    43a0:	9f 4f       	sbci	r25, 0xFF	; 255
    43a2:	2f ef       	ldi	r18, 0xFF	; 255
    43a4:	fc 01       	movw	r30, r24
    43a6:	df 01       	movw	r26, r30
    43a8:	82 2f       	mov	r24, r18
    43aa:	1d 92       	st	X+, r1
    43ac:	8a 95       	dec	r24
    43ae:	e9 f7       	brne	.-6      	; 0x43aa <USER_Mode+0x70>
    43b0:	fe 01       	movw	r30, r28
    43b2:	e4 5b       	subi	r30, 0xB4	; 180
    43b4:	ff 4f       	sbci	r31, 0xFF	; 255
    43b6:	81 e0       	ldi	r24, 0x01	; 1
    43b8:	80 83       	st	Z, r24
    43ba:	fe 01       	movw	r30, r28
    43bc:	e4 5b       	subi	r30, 0xB4	; 180
    43be:	ff 4f       	sbci	r31, 0xFF	; 255
    43c0:	81 e0       	ldi	r24, 0x01	; 1
    43c2:	81 83       	std	Z+1, r24	; 0x01
    43c4:	fe 01       	movw	r30, r28
    43c6:	e4 5b       	subi	r30, 0xB4	; 180
    43c8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ca:	81 e0       	ldi	r24, 0x01	; 1
    43cc:	82 83       	std	Z+2, r24	; 0x02
    43ce:	fe 01       	movw	r30, r28
    43d0:	e4 5b       	subi	r30, 0xB4	; 180
    43d2:	ff 4f       	sbci	r31, 0xFF	; 255
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	83 83       	std	Z+3, r24	; 0x03
    43d8:	fe 01       	movw	r30, r28
    43da:	e4 5b       	subi	r30, 0xB4	; 180
    43dc:	ff 4f       	sbci	r31, 0xFF	; 255
    43de:	81 e0       	ldi	r24, 0x01	; 1
    43e0:	84 83       	std	Z+4, r24	; 0x04
	static volatile uint8_t Card_Pass[5] = {1, 1, 1, 1};

	Get_Pass(Card_Pass);
    43e2:	86 e4       	ldi	r24, 0x46	; 70
    43e4:	93 e0       	ldi	r25, 0x03	; 3
    43e6:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <Get_Pass>

	if (Pass_check(Card_Pass))
    43ea:	86 e4       	ldi	r24, 0x46	; 70
    43ec:	93 e0       	ldi	r25, 0x03	; 3
    43ee:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <Pass_check>
    43f2:	88 23       	and	r24, r24
    43f4:	09 f4       	brne	.+2      	; 0x43f8 <USER_Mode+0xbe>
    43f6:	25 c2       	rjmp	.+1098   	; 0x4842 <USER_Mode+0x508>
	{

		lcd_clear();
    43f8:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <lcd_clear>
		lcd_sendString((uint8_t *)"enter withdraw amount");
    43fc:	83 e0       	ldi	r24, 0x03	; 3
    43fe:	91 e0       	ldi	r25, 0x01	; 1
    4400:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <lcd_sendString>
		/*receive the balance of user from eeprom*/
		eeprom_recieve_string(Temp, 0xB1);
    4404:	ce 01       	movw	r24, r28
    4406:	84 5b       	subi	r24, 0xB4	; 180
    4408:	9f 4f       	sbci	r25, 0xFF	; 255
    440a:	61 eb       	ldi	r22, 0xB1	; 177
    440c:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <eeprom_recieve_string>
    4410:	36 c0       	rjmp	.+108    	; 0x447e <USER_Mode+0x144>

		while (i != 4)
		{
			value = KEYPAD_u8Read();
    4412:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <KEYPAD_u8Read>
    4416:	fe 01       	movw	r30, r28
    4418:	eb 5b       	subi	r30, 0xBB	; 187
    441a:	ff 4f       	sbci	r31, 0xFF	; 255
    441c:	80 83       	st	Z, r24
			if (value != DEFAULT_KEY)
    441e:	fe 01       	movw	r30, r28
    4420:	eb 5b       	subi	r30, 0xBB	; 187
    4422:	ff 4f       	sbci	r31, 0xFF	; 255
    4424:	80 81       	ld	r24, Z
    4426:	8e 32       	cpi	r24, 0x2E	; 46
    4428:	51 f1       	breq	.+84     	; 0x447e <USER_Mode+0x144>
			{

				Dep_money[i] = value;
    442a:	fe 01       	movw	r30, r28
    442c:	ea 5b       	subi	r30, 0xBA	; 186
    442e:	ff 4f       	sbci	r31, 0xFF	; 255
    4430:	80 81       	ld	r24, Z
    4432:	28 2f       	mov	r18, r24
    4434:	30 e0       	ldi	r19, 0x00	; 0
    4436:	ce 01       	movw	r24, r28
    4438:	89 5b       	subi	r24, 0xB9	; 185
    443a:	9f 4f       	sbci	r25, 0xFF	; 255
    443c:	dc 01       	movw	r26, r24
    443e:	a2 0f       	add	r26, r18
    4440:	b3 1f       	adc	r27, r19
    4442:	fe 01       	movw	r30, r28
    4444:	eb 5b       	subi	r30, 0xBB	; 187
    4446:	ff 4f       	sbci	r31, 0xFF	; 255
    4448:	80 81       	ld	r24, Z
    444a:	8c 93       	st	X, r24
				lcd_SetPosition(1, 1 + i);
    444c:	fe 01       	movw	r30, r28
    444e:	ea 5b       	subi	r30, 0xBA	; 186
    4450:	ff 4f       	sbci	r31, 0xFF	; 255
    4452:	80 81       	ld	r24, Z
    4454:	98 2f       	mov	r25, r24
    4456:	9f 5f       	subi	r25, 0xFF	; 255
    4458:	81 e0       	ldi	r24, 0x01	; 1
    445a:	69 2f       	mov	r22, r25
    445c:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <lcd_SetPosition>
				lcd_sendChar(value);
    4460:	fe 01       	movw	r30, r28
    4462:	eb 5b       	subi	r30, 0xBB	; 187
    4464:	ff 4f       	sbci	r31, 0xFF	; 255
    4466:	80 81       	ld	r24, Z
    4468:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <lcd_sendChar>
				i++;
    446c:	de 01       	movw	r26, r28
    446e:	aa 5b       	subi	r26, 0xBA	; 186
    4470:	bf 4f       	sbci	r27, 0xFF	; 255
    4472:	fe 01       	movw	r30, r28
    4474:	ea 5b       	subi	r30, 0xBA	; 186
    4476:	ff 4f       	sbci	r31, 0xFF	; 255
    4478:	80 81       	ld	r24, Z
    447a:	8f 5f       	subi	r24, 0xFF	; 255
    447c:	8c 93       	st	X, r24
		lcd_clear();
		lcd_sendString((uint8_t *)"enter withdraw amount");
		/*receive the balance of user from eeprom*/
		eeprom_recieve_string(Temp, 0xB1);

		while (i != 4)
    447e:	fe 01       	movw	r30, r28
    4480:	ea 5b       	subi	r30, 0xBA	; 186
    4482:	ff 4f       	sbci	r31, 0xFF	; 255
    4484:	80 81       	ld	r24, Z
    4486:	84 30       	cpi	r24, 0x04	; 4
    4488:	21 f6       	brne	.-120    	; 0x4412 <USER_Mode+0xd8>
				lcd_SetPosition(1, 1 + i);
				lcd_sendChar(value);
				i++;
			}
		}
		Dep_money[i] = '\0';
    448a:	fe 01       	movw	r30, r28
    448c:	ea 5b       	subi	r30, 0xBA	; 186
    448e:	ff 4f       	sbci	r31, 0xFF	; 255
    4490:	80 81       	ld	r24, Z
    4492:	28 2f       	mov	r18, r24
    4494:	30 e0       	ldi	r19, 0x00	; 0
    4496:	ce 01       	movw	r24, r28
    4498:	89 5b       	subi	r24, 0xB9	; 185
    449a:	9f 4f       	sbci	r25, 0xFF	; 255
    449c:	fc 01       	movw	r30, r24
    449e:	e2 0f       	add	r30, r18
    44a0:	f3 1f       	adc	r31, r19
    44a2:	10 82       	st	Z, r1

		eeprom_recieve_string(Max_Amount, 0xF3);
    44a4:	84 e1       	ldi	r24, 0x14	; 20
    44a6:	93 e0       	ldi	r25, 0x03	; 3
    44a8:	63 ef       	ldi	r22, 0xF3	; 243
    44aa:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <eeprom_recieve_string>

		uint32_t max_dec = String_u8ToNumb(Max_Amount);
    44ae:	84 e1       	ldi	r24, 0x14	; 20
    44b0:	93 e0       	ldi	r25, 0x03	; 3
    44b2:	0e 94 2a 28 	call	0x5054	; 0x5054 <String_u8ToNumb>
    44b6:	dc 01       	movw	r26, r24
    44b8:	cb 01       	movw	r24, r22
    44ba:	fe 01       	movw	r30, r28
    44bc:	ef 5b       	subi	r30, 0xBF	; 191
    44be:	ff 4f       	sbci	r31, 0xFF	; 255
    44c0:	80 83       	st	Z, r24
    44c2:	91 83       	std	Z+1, r25	; 0x01
    44c4:	a2 83       	std	Z+2, r26	; 0x02
    44c6:	b3 83       	std	Z+3, r27	; 0x03
		uint32_t dep_dec = String_u8ToNumb(Dep_money);
    44c8:	ce 01       	movw	r24, r28
    44ca:	89 5b       	subi	r24, 0xB9	; 185
    44cc:	9f 4f       	sbci	r25, 0xFF	; 255
    44ce:	0e 94 2a 28 	call	0x5054	; 0x5054 <String_u8ToNumb>
    44d2:	dc 01       	movw	r26, r24
    44d4:	cb 01       	movw	r24, r22
    44d6:	fe 01       	movw	r30, r28
    44d8:	fd 96       	adiw	r30, 0x3d	; 61
    44da:	80 83       	st	Z, r24
    44dc:	91 83       	std	Z+1, r25	; 0x01
    44de:	a2 83       	std	Z+2, r26	; 0x02
    44e0:	b3 83       	std	Z+3, r27	; 0x03
		uint32_t bal_dec = String_u8ToNumb(Temp);
    44e2:	ce 01       	movw	r24, r28
    44e4:	84 5b       	subi	r24, 0xB4	; 180
    44e6:	9f 4f       	sbci	r25, 0xFF	; 255
    44e8:	0e 94 2a 28 	call	0x5054	; 0x5054 <String_u8ToNumb>
    44ec:	dc 01       	movw	r26, r24
    44ee:	cb 01       	movw	r24, r22
    44f0:	89 af       	std	Y+57, r24	; 0x39
    44f2:	9a af       	std	Y+58, r25	; 0x3a
    44f4:	ab af       	std	Y+59, r26	; 0x3b
    44f6:	bc af       	std	Y+60, r27	; 0x3c

		if (Compare_Money(max_dec, dep_dec) == INVALID)
    44f8:	fe 01       	movw	r30, r28
    44fa:	ef 5b       	subi	r30, 0xBF	; 191
    44fc:	ff 4f       	sbci	r31, 0xFF	; 255
    44fe:	80 81       	ld	r24, Z
    4500:	91 81       	ldd	r25, Z+1	; 0x01
    4502:	a2 81       	ldd	r26, Z+2	; 0x02
    4504:	b3 81       	ldd	r27, Z+3	; 0x03
    4506:	fe 01       	movw	r30, r28
    4508:	fd 96       	adiw	r30, 0x3d	; 61
    450a:	20 81       	ld	r18, Z
    450c:	31 81       	ldd	r19, Z+1	; 0x01
    450e:	42 81       	ldd	r20, Z+2	; 0x02
    4510:	53 81       	ldd	r21, Z+3	; 0x03
    4512:	bc 01       	movw	r22, r24
    4514:	cd 01       	movw	r24, r26
    4516:	0e 94 a3 24 	call	0x4946	; 0x4946 <Compare_Money>
    451a:	88 23       	and	r24, r24
    451c:	09 f0       	breq	.+2      	; 0x4520 <USER_Mode+0x1e6>
    451e:	81 c0       	rjmp	.+258    	; 0x4622 <USER_Mode+0x2e8>
		{
			lcd_clear();
    4520:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <lcd_clear>
			lcd_sendString((uint8_t *)"invalid: ");
    4524:	89 e1       	ldi	r24, 0x19	; 25
    4526:	91 e0       	ldi	r25, 0x01	; 1
    4528:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <lcd_sendString>
			lcd_SetPosition(1, 0);
    452c:	81 e0       	ldi	r24, 0x01	; 1
    452e:	60 e0       	ldi	r22, 0x00	; 0
    4530:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <lcd_SetPosition>
			lcd_sendString((uint8_t *)"exceed maxamount");
    4534:	83 e2       	ldi	r24, 0x23	; 35
    4536:	91 e0       	ldi	r25, 0x01	; 1
    4538:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <lcd_sendString>
    453c:	80 e0       	ldi	r24, 0x00	; 0
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	aa e7       	ldi	r26, 0x7A	; 122
    4542:	b4 e4       	ldi	r27, 0x44	; 68
    4544:	8d ab       	std	Y+53, r24	; 0x35
    4546:	9e ab       	std	Y+54, r25	; 0x36
    4548:	af ab       	std	Y+55, r26	; 0x37
    454a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    454c:	6d a9       	ldd	r22, Y+53	; 0x35
    454e:	7e a9       	ldd	r23, Y+54	; 0x36
    4550:	8f a9       	ldd	r24, Y+55	; 0x37
    4552:	98 ad       	ldd	r25, Y+56	; 0x38
    4554:	20 e0       	ldi	r18, 0x00	; 0
    4556:	30 e0       	ldi	r19, 0x00	; 0
    4558:	4a ef       	ldi	r20, 0xFA	; 250
    455a:	54 e4       	ldi	r21, 0x44	; 68
    455c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4560:	dc 01       	movw	r26, r24
    4562:	cb 01       	movw	r24, r22
    4564:	89 ab       	std	Y+49, r24	; 0x31
    4566:	9a ab       	std	Y+50, r25	; 0x32
    4568:	ab ab       	std	Y+51, r26	; 0x33
    456a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    456c:	69 a9       	ldd	r22, Y+49	; 0x31
    456e:	7a a9       	ldd	r23, Y+50	; 0x32
    4570:	8b a9       	ldd	r24, Y+51	; 0x33
    4572:	9c a9       	ldd	r25, Y+52	; 0x34
    4574:	20 e0       	ldi	r18, 0x00	; 0
    4576:	30 e0       	ldi	r19, 0x00	; 0
    4578:	40 e8       	ldi	r20, 0x80	; 128
    457a:	5f e3       	ldi	r21, 0x3F	; 63
    457c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4580:	88 23       	and	r24, r24
    4582:	2c f4       	brge	.+10     	; 0x458e <USER_Mode+0x254>
		__ticks = 1;
    4584:	81 e0       	ldi	r24, 0x01	; 1
    4586:	90 e0       	ldi	r25, 0x00	; 0
    4588:	98 ab       	std	Y+48, r25	; 0x30
    458a:	8f a7       	std	Y+47, r24	; 0x2f
    458c:	3f c0       	rjmp	.+126    	; 0x460c <USER_Mode+0x2d2>
	else if (__tmp > 65535)
    458e:	69 a9       	ldd	r22, Y+49	; 0x31
    4590:	7a a9       	ldd	r23, Y+50	; 0x32
    4592:	8b a9       	ldd	r24, Y+51	; 0x33
    4594:	9c a9       	ldd	r25, Y+52	; 0x34
    4596:	20 e0       	ldi	r18, 0x00	; 0
    4598:	3f ef       	ldi	r19, 0xFF	; 255
    459a:	4f e7       	ldi	r20, 0x7F	; 127
    459c:	57 e4       	ldi	r21, 0x47	; 71
    459e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45a2:	18 16       	cp	r1, r24
    45a4:	4c f5       	brge	.+82     	; 0x45f8 <USER_Mode+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45a6:	6d a9       	ldd	r22, Y+53	; 0x35
    45a8:	7e a9       	ldd	r23, Y+54	; 0x36
    45aa:	8f a9       	ldd	r24, Y+55	; 0x37
    45ac:	98 ad       	ldd	r25, Y+56	; 0x38
    45ae:	20 e0       	ldi	r18, 0x00	; 0
    45b0:	30 e0       	ldi	r19, 0x00	; 0
    45b2:	40 e2       	ldi	r20, 0x20	; 32
    45b4:	51 e4       	ldi	r21, 0x41	; 65
    45b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ba:	dc 01       	movw	r26, r24
    45bc:	cb 01       	movw	r24, r22
    45be:	bc 01       	movw	r22, r24
    45c0:	cd 01       	movw	r24, r26
    45c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c6:	dc 01       	movw	r26, r24
    45c8:	cb 01       	movw	r24, r22
    45ca:	98 ab       	std	Y+48, r25	; 0x30
    45cc:	8f a7       	std	Y+47, r24	; 0x2f
    45ce:	0f c0       	rjmp	.+30     	; 0x45ee <USER_Mode+0x2b4>
    45d0:	88 ec       	ldi	r24, 0xC8	; 200
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	9e a7       	std	Y+46, r25	; 0x2e
    45d6:	8d a7       	std	Y+45, r24	; 0x2d
    45d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    45da:	9e a5       	ldd	r25, Y+46	; 0x2e
    45dc:	01 97       	sbiw	r24, 0x01	; 1
    45de:	f1 f7       	brne	.-4      	; 0x45dc <USER_Mode+0x2a2>
    45e0:	9e a7       	std	Y+46, r25	; 0x2e
    45e2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    45e6:	98 a9       	ldd	r25, Y+48	; 0x30
    45e8:	01 97       	sbiw	r24, 0x01	; 1
    45ea:	98 ab       	std	Y+48, r25	; 0x30
    45ec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    45f0:	98 a9       	ldd	r25, Y+48	; 0x30
    45f2:	00 97       	sbiw	r24, 0x00	; 0
    45f4:	69 f7       	brne	.-38     	; 0x45d0 <USER_Mode+0x296>
    45f6:	25 c1       	rjmp	.+586    	; 0x4842 <USER_Mode+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45f8:	69 a9       	ldd	r22, Y+49	; 0x31
    45fa:	7a a9       	ldd	r23, Y+50	; 0x32
    45fc:	8b a9       	ldd	r24, Y+51	; 0x33
    45fe:	9c a9       	ldd	r25, Y+52	; 0x34
    4600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4604:	dc 01       	movw	r26, r24
    4606:	cb 01       	movw	r24, r22
    4608:	98 ab       	std	Y+48, r25	; 0x30
    460a:	8f a7       	std	Y+47, r24	; 0x2f
    460c:	8f a5       	ldd	r24, Y+47	; 0x2f
    460e:	98 a9       	ldd	r25, Y+48	; 0x30
    4610:	9c a7       	std	Y+44, r25	; 0x2c
    4612:	8b a7       	std	Y+43, r24	; 0x2b
    4614:	8b a5       	ldd	r24, Y+43	; 0x2b
    4616:	9c a5       	ldd	r25, Y+44	; 0x2c
    4618:	01 97       	sbiw	r24, 0x01	; 1
    461a:	f1 f7       	brne	.-4      	; 0x4618 <USER_Mode+0x2de>
    461c:	9c a7       	std	Y+44, r25	; 0x2c
    461e:	8b a7       	std	Y+43, r24	; 0x2b
    4620:	10 c1       	rjmp	.+544    	; 0x4842 <USER_Mode+0x508>
			_delay_ms(1000);
		}
		else if (Compare_Money(bal_dec, dep_dec) == INVALID)
    4622:	89 ad       	ldd	r24, Y+57	; 0x39
    4624:	9a ad       	ldd	r25, Y+58	; 0x3a
    4626:	ab ad       	ldd	r26, Y+59	; 0x3b
    4628:	bc ad       	ldd	r27, Y+60	; 0x3c
    462a:	fe 01       	movw	r30, r28
    462c:	fd 96       	adiw	r30, 0x3d	; 61
    462e:	20 81       	ld	r18, Z
    4630:	31 81       	ldd	r19, Z+1	; 0x01
    4632:	42 81       	ldd	r20, Z+2	; 0x02
    4634:	53 81       	ldd	r21, Z+3	; 0x03
    4636:	bc 01       	movw	r22, r24
    4638:	cd 01       	movw	r24, r26
    463a:	0e 94 a3 24 	call	0x4946	; 0x4946 <Compare_Money>
    463e:	88 23       	and	r24, r24
    4640:	09 f0       	breq	.+2      	; 0x4644 <USER_Mode+0x30a>
    4642:	81 c0       	rjmp	.+258    	; 0x4746 <USER_Mode+0x40c>
		{
			lcd_clear();
    4644:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <lcd_clear>
			lcd_sendString((uint8_t *)"invalid: ");
    4648:	89 e1       	ldi	r24, 0x19	; 25
    464a:	91 e0       	ldi	r25, 0x01	; 1
    464c:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <lcd_sendString>
			lcd_SetPosition(1, 0);
    4650:	81 e0       	ldi	r24, 0x01	; 1
    4652:	60 e0       	ldi	r22, 0x00	; 0
    4654:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <lcd_SetPosition>
			lcd_sendString((uint8_t *)"exceed balance");
    4658:	84 e3       	ldi	r24, 0x34	; 52
    465a:	91 e0       	ldi	r25, 0x01	; 1
    465c:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <lcd_sendString>
    4660:	80 e0       	ldi	r24, 0x00	; 0
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	aa e7       	ldi	r26, 0x7A	; 122
    4666:	b4 e4       	ldi	r27, 0x44	; 68
    4668:	8f a3       	std	Y+39, r24	; 0x27
    466a:	98 a7       	std	Y+40, r25	; 0x28
    466c:	a9 a7       	std	Y+41, r26	; 0x29
    466e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4670:	6f a1       	ldd	r22, Y+39	; 0x27
    4672:	78 a5       	ldd	r23, Y+40	; 0x28
    4674:	89 a5       	ldd	r24, Y+41	; 0x29
    4676:	9a a5       	ldd	r25, Y+42	; 0x2a
    4678:	20 e0       	ldi	r18, 0x00	; 0
    467a:	30 e0       	ldi	r19, 0x00	; 0
    467c:	4a ef       	ldi	r20, 0xFA	; 250
    467e:	54 e4       	ldi	r21, 0x44	; 68
    4680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4684:	dc 01       	movw	r26, r24
    4686:	cb 01       	movw	r24, r22
    4688:	8b a3       	std	Y+35, r24	; 0x23
    468a:	9c a3       	std	Y+36, r25	; 0x24
    468c:	ad a3       	std	Y+37, r26	; 0x25
    468e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4690:	6b a1       	ldd	r22, Y+35	; 0x23
    4692:	7c a1       	ldd	r23, Y+36	; 0x24
    4694:	8d a1       	ldd	r24, Y+37	; 0x25
    4696:	9e a1       	ldd	r25, Y+38	; 0x26
    4698:	20 e0       	ldi	r18, 0x00	; 0
    469a:	30 e0       	ldi	r19, 0x00	; 0
    469c:	40 e8       	ldi	r20, 0x80	; 128
    469e:	5f e3       	ldi	r21, 0x3F	; 63
    46a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46a4:	88 23       	and	r24, r24
    46a6:	2c f4       	brge	.+10     	; 0x46b2 <USER_Mode+0x378>
		__ticks = 1;
    46a8:	81 e0       	ldi	r24, 0x01	; 1
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	9a a3       	std	Y+34, r25	; 0x22
    46ae:	89 a3       	std	Y+33, r24	; 0x21
    46b0:	3f c0       	rjmp	.+126    	; 0x4730 <USER_Mode+0x3f6>
	else if (__tmp > 65535)
    46b2:	6b a1       	ldd	r22, Y+35	; 0x23
    46b4:	7c a1       	ldd	r23, Y+36	; 0x24
    46b6:	8d a1       	ldd	r24, Y+37	; 0x25
    46b8:	9e a1       	ldd	r25, Y+38	; 0x26
    46ba:	20 e0       	ldi	r18, 0x00	; 0
    46bc:	3f ef       	ldi	r19, 0xFF	; 255
    46be:	4f e7       	ldi	r20, 0x7F	; 127
    46c0:	57 e4       	ldi	r21, 0x47	; 71
    46c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46c6:	18 16       	cp	r1, r24
    46c8:	4c f5       	brge	.+82     	; 0x471c <USER_Mode+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46ca:	6f a1       	ldd	r22, Y+39	; 0x27
    46cc:	78 a5       	ldd	r23, Y+40	; 0x28
    46ce:	89 a5       	ldd	r24, Y+41	; 0x29
    46d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    46d2:	20 e0       	ldi	r18, 0x00	; 0
    46d4:	30 e0       	ldi	r19, 0x00	; 0
    46d6:	40 e2       	ldi	r20, 0x20	; 32
    46d8:	51 e4       	ldi	r21, 0x41	; 65
    46da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46de:	dc 01       	movw	r26, r24
    46e0:	cb 01       	movw	r24, r22
    46e2:	bc 01       	movw	r22, r24
    46e4:	cd 01       	movw	r24, r26
    46e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46ea:	dc 01       	movw	r26, r24
    46ec:	cb 01       	movw	r24, r22
    46ee:	9a a3       	std	Y+34, r25	; 0x22
    46f0:	89 a3       	std	Y+33, r24	; 0x21
    46f2:	0f c0       	rjmp	.+30     	; 0x4712 <USER_Mode+0x3d8>
    46f4:	88 ec       	ldi	r24, 0xC8	; 200
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	98 a3       	std	Y+32, r25	; 0x20
    46fa:	8f 8f       	std	Y+31, r24	; 0x1f
    46fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    46fe:	98 a1       	ldd	r25, Y+32	; 0x20
    4700:	01 97       	sbiw	r24, 0x01	; 1
    4702:	f1 f7       	brne	.-4      	; 0x4700 <USER_Mode+0x3c6>
    4704:	98 a3       	std	Y+32, r25	; 0x20
    4706:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4708:	89 a1       	ldd	r24, Y+33	; 0x21
    470a:	9a a1       	ldd	r25, Y+34	; 0x22
    470c:	01 97       	sbiw	r24, 0x01	; 1
    470e:	9a a3       	std	Y+34, r25	; 0x22
    4710:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4712:	89 a1       	ldd	r24, Y+33	; 0x21
    4714:	9a a1       	ldd	r25, Y+34	; 0x22
    4716:	00 97       	sbiw	r24, 0x00	; 0
    4718:	69 f7       	brne	.-38     	; 0x46f4 <USER_Mode+0x3ba>
    471a:	93 c0       	rjmp	.+294    	; 0x4842 <USER_Mode+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    471c:	6b a1       	ldd	r22, Y+35	; 0x23
    471e:	7c a1       	ldd	r23, Y+36	; 0x24
    4720:	8d a1       	ldd	r24, Y+37	; 0x25
    4722:	9e a1       	ldd	r25, Y+38	; 0x26
    4724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4728:	dc 01       	movw	r26, r24
    472a:	cb 01       	movw	r24, r22
    472c:	9a a3       	std	Y+34, r25	; 0x22
    472e:	89 a3       	std	Y+33, r24	; 0x21
    4730:	89 a1       	ldd	r24, Y+33	; 0x21
    4732:	9a a1       	ldd	r25, Y+34	; 0x22
    4734:	9e 8f       	std	Y+30, r25	; 0x1e
    4736:	8d 8f       	std	Y+29, r24	; 0x1d
    4738:	8d 8d       	ldd	r24, Y+29	; 0x1d
    473a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    473c:	01 97       	sbiw	r24, 0x01	; 1
    473e:	f1 f7       	brne	.-4      	; 0x473c <USER_Mode+0x402>
    4740:	9e 8f       	std	Y+30, r25	; 0x1e
    4742:	8d 8f       	std	Y+29, r24	; 0x1d
    4744:	7e c0       	rjmp	.+252    	; 0x4842 <USER_Mode+0x508>
			_delay_ms(1000);
		}
		else
		{
			lcd_clear();
    4746:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <lcd_clear>
			lcd_sendString((uint8_t *)"Approved");
    474a:	83 e4       	ldi	r24, 0x43	; 67
    474c:	91 e0       	ldi	r25, 0x01	; 1
    474e:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <lcd_sendString>
			MOTOR_voidRotateClkWise(1, 0);
    4752:	81 e0       	ldi	r24, 0x01	; 1
    4754:	60 e0       	ldi	r22, 0x00	; 0
    4756:	0e 94 0c 13 	call	0x2618	; 0x2618 <MOTOR_voidRotateClkWise>
    475a:	80 e0       	ldi	r24, 0x00	; 0
    475c:	90 e0       	ldi	r25, 0x00	; 0
    475e:	aa e7       	ldi	r26, 0x7A	; 122
    4760:	b4 e4       	ldi	r27, 0x44	; 68
    4762:	89 8f       	std	Y+25, r24	; 0x19
    4764:	9a 8f       	std	Y+26, r25	; 0x1a
    4766:	ab 8f       	std	Y+27, r26	; 0x1b
    4768:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    476a:	69 8d       	ldd	r22, Y+25	; 0x19
    476c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    476e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4770:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4772:	20 e0       	ldi	r18, 0x00	; 0
    4774:	30 e0       	ldi	r19, 0x00	; 0
    4776:	4a ef       	ldi	r20, 0xFA	; 250
    4778:	54 e4       	ldi	r21, 0x44	; 68
    477a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    477e:	dc 01       	movw	r26, r24
    4780:	cb 01       	movw	r24, r22
    4782:	8d 8b       	std	Y+21, r24	; 0x15
    4784:	9e 8b       	std	Y+22, r25	; 0x16
    4786:	af 8b       	std	Y+23, r26	; 0x17
    4788:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    478a:	6d 89       	ldd	r22, Y+21	; 0x15
    478c:	7e 89       	ldd	r23, Y+22	; 0x16
    478e:	8f 89       	ldd	r24, Y+23	; 0x17
    4790:	98 8d       	ldd	r25, Y+24	; 0x18
    4792:	20 e0       	ldi	r18, 0x00	; 0
    4794:	30 e0       	ldi	r19, 0x00	; 0
    4796:	40 e8       	ldi	r20, 0x80	; 128
    4798:	5f e3       	ldi	r21, 0x3F	; 63
    479a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    479e:	88 23       	and	r24, r24
    47a0:	2c f4       	brge	.+10     	; 0x47ac <USER_Mode+0x472>
		__ticks = 1;
    47a2:	81 e0       	ldi	r24, 0x01	; 1
    47a4:	90 e0       	ldi	r25, 0x00	; 0
    47a6:	9c 8b       	std	Y+20, r25	; 0x14
    47a8:	8b 8b       	std	Y+19, r24	; 0x13
    47aa:	3f c0       	rjmp	.+126    	; 0x482a <USER_Mode+0x4f0>
	else if (__tmp > 65535)
    47ac:	6d 89       	ldd	r22, Y+21	; 0x15
    47ae:	7e 89       	ldd	r23, Y+22	; 0x16
    47b0:	8f 89       	ldd	r24, Y+23	; 0x17
    47b2:	98 8d       	ldd	r25, Y+24	; 0x18
    47b4:	20 e0       	ldi	r18, 0x00	; 0
    47b6:	3f ef       	ldi	r19, 0xFF	; 255
    47b8:	4f e7       	ldi	r20, 0x7F	; 127
    47ba:	57 e4       	ldi	r21, 0x47	; 71
    47bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47c0:	18 16       	cp	r1, r24
    47c2:	4c f5       	brge	.+82     	; 0x4816 <USER_Mode+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47c4:	69 8d       	ldd	r22, Y+25	; 0x19
    47c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47cc:	20 e0       	ldi	r18, 0x00	; 0
    47ce:	30 e0       	ldi	r19, 0x00	; 0
    47d0:	40 e2       	ldi	r20, 0x20	; 32
    47d2:	51 e4       	ldi	r21, 0x41	; 65
    47d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47d8:	dc 01       	movw	r26, r24
    47da:	cb 01       	movw	r24, r22
    47dc:	bc 01       	movw	r22, r24
    47de:	cd 01       	movw	r24, r26
    47e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47e4:	dc 01       	movw	r26, r24
    47e6:	cb 01       	movw	r24, r22
    47e8:	9c 8b       	std	Y+20, r25	; 0x14
    47ea:	8b 8b       	std	Y+19, r24	; 0x13
    47ec:	0f c0       	rjmp	.+30     	; 0x480c <USER_Mode+0x4d2>
    47ee:	88 ec       	ldi	r24, 0xC8	; 200
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	9a 8b       	std	Y+18, r25	; 0x12
    47f4:	89 8b       	std	Y+17, r24	; 0x11
    47f6:	89 89       	ldd	r24, Y+17	; 0x11
    47f8:	9a 89       	ldd	r25, Y+18	; 0x12
    47fa:	01 97       	sbiw	r24, 0x01	; 1
    47fc:	f1 f7       	brne	.-4      	; 0x47fa <USER_Mode+0x4c0>
    47fe:	9a 8b       	std	Y+18, r25	; 0x12
    4800:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4802:	8b 89       	ldd	r24, Y+19	; 0x13
    4804:	9c 89       	ldd	r25, Y+20	; 0x14
    4806:	01 97       	sbiw	r24, 0x01	; 1
    4808:	9c 8b       	std	Y+20, r25	; 0x14
    480a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    480c:	8b 89       	ldd	r24, Y+19	; 0x13
    480e:	9c 89       	ldd	r25, Y+20	; 0x14
    4810:	00 97       	sbiw	r24, 0x00	; 0
    4812:	69 f7       	brne	.-38     	; 0x47ee <USER_Mode+0x4b4>
    4814:	14 c0       	rjmp	.+40     	; 0x483e <USER_Mode+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4816:	6d 89       	ldd	r22, Y+21	; 0x15
    4818:	7e 89       	ldd	r23, Y+22	; 0x16
    481a:	8f 89       	ldd	r24, Y+23	; 0x17
    481c:	98 8d       	ldd	r25, Y+24	; 0x18
    481e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4822:	dc 01       	movw	r26, r24
    4824:	cb 01       	movw	r24, r22
    4826:	9c 8b       	std	Y+20, r25	; 0x14
    4828:	8b 8b       	std	Y+19, r24	; 0x13
    482a:	8b 89       	ldd	r24, Y+19	; 0x13
    482c:	9c 89       	ldd	r25, Y+20	; 0x14
    482e:	98 8b       	std	Y+16, r25	; 0x10
    4830:	8f 87       	std	Y+15, r24	; 0x0f
    4832:	8f 85       	ldd	r24, Y+15	; 0x0f
    4834:	98 89       	ldd	r25, Y+16	; 0x10
    4836:	01 97       	sbiw	r24, 0x01	; 1
    4838:	f1 f7       	brne	.-4      	; 0x4836 <USER_Mode+0x4fc>
    483a:	98 8b       	std	Y+16, r25	; 0x10
    483c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			MOTOR_voidStop();
    483e:	0e 94 9a 13 	call	0x2734	; 0x2734 <MOTOR_voidStop>
		}
	}
	lcd_clear();
    4842:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <lcd_clear>
	lcd_sendString((uint8_t *)"please take the card");
    4846:	8c e4       	ldi	r24, 0x4C	; 76
    4848:	91 e0       	ldi	r25, 0x01	; 1
    484a:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <lcd_sendString>
    484e:	80 e0       	ldi	r24, 0x00	; 0
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	aa e7       	ldi	r26, 0x7A	; 122
    4854:	b4 e4       	ldi	r27, 0x44	; 68
    4856:	8b 87       	std	Y+11, r24	; 0x0b
    4858:	9c 87       	std	Y+12, r25	; 0x0c
    485a:	ad 87       	std	Y+13, r26	; 0x0d
    485c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    485e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4860:	7c 85       	ldd	r23, Y+12	; 0x0c
    4862:	8d 85       	ldd	r24, Y+13	; 0x0d
    4864:	9e 85       	ldd	r25, Y+14	; 0x0e
    4866:	20 e0       	ldi	r18, 0x00	; 0
    4868:	30 e0       	ldi	r19, 0x00	; 0
    486a:	4a ef       	ldi	r20, 0xFA	; 250
    486c:	54 e4       	ldi	r21, 0x44	; 68
    486e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4872:	dc 01       	movw	r26, r24
    4874:	cb 01       	movw	r24, r22
    4876:	8f 83       	std	Y+7, r24	; 0x07
    4878:	98 87       	std	Y+8, r25	; 0x08
    487a:	a9 87       	std	Y+9, r26	; 0x09
    487c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    487e:	6f 81       	ldd	r22, Y+7	; 0x07
    4880:	78 85       	ldd	r23, Y+8	; 0x08
    4882:	89 85       	ldd	r24, Y+9	; 0x09
    4884:	9a 85       	ldd	r25, Y+10	; 0x0a
    4886:	20 e0       	ldi	r18, 0x00	; 0
    4888:	30 e0       	ldi	r19, 0x00	; 0
    488a:	40 e8       	ldi	r20, 0x80	; 128
    488c:	5f e3       	ldi	r21, 0x3F	; 63
    488e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4892:	88 23       	and	r24, r24
    4894:	2c f4       	brge	.+10     	; 0x48a0 <USER_Mode+0x566>
		__ticks = 1;
    4896:	81 e0       	ldi	r24, 0x01	; 1
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	9e 83       	std	Y+6, r25	; 0x06
    489c:	8d 83       	std	Y+5, r24	; 0x05
    489e:	3f c0       	rjmp	.+126    	; 0x491e <USER_Mode+0x5e4>
	else if (__tmp > 65535)
    48a0:	6f 81       	ldd	r22, Y+7	; 0x07
    48a2:	78 85       	ldd	r23, Y+8	; 0x08
    48a4:	89 85       	ldd	r24, Y+9	; 0x09
    48a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    48a8:	20 e0       	ldi	r18, 0x00	; 0
    48aa:	3f ef       	ldi	r19, 0xFF	; 255
    48ac:	4f e7       	ldi	r20, 0x7F	; 127
    48ae:	57 e4       	ldi	r21, 0x47	; 71
    48b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48b4:	18 16       	cp	r1, r24
    48b6:	4c f5       	brge	.+82     	; 0x490a <USER_Mode+0x5d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    48ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    48bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    48be:	9e 85       	ldd	r25, Y+14	; 0x0e
    48c0:	20 e0       	ldi	r18, 0x00	; 0
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	40 e2       	ldi	r20, 0x20	; 32
    48c6:	51 e4       	ldi	r21, 0x41	; 65
    48c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48cc:	dc 01       	movw	r26, r24
    48ce:	cb 01       	movw	r24, r22
    48d0:	bc 01       	movw	r22, r24
    48d2:	cd 01       	movw	r24, r26
    48d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48d8:	dc 01       	movw	r26, r24
    48da:	cb 01       	movw	r24, r22
    48dc:	9e 83       	std	Y+6, r25	; 0x06
    48de:	8d 83       	std	Y+5, r24	; 0x05
    48e0:	0f c0       	rjmp	.+30     	; 0x4900 <USER_Mode+0x5c6>
    48e2:	88 ec       	ldi	r24, 0xC8	; 200
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	9c 83       	std	Y+4, r25	; 0x04
    48e8:	8b 83       	std	Y+3, r24	; 0x03
    48ea:	8b 81       	ldd	r24, Y+3	; 0x03
    48ec:	9c 81       	ldd	r25, Y+4	; 0x04
    48ee:	01 97       	sbiw	r24, 0x01	; 1
    48f0:	f1 f7       	brne	.-4      	; 0x48ee <USER_Mode+0x5b4>
    48f2:	9c 83       	std	Y+4, r25	; 0x04
    48f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48f6:	8d 81       	ldd	r24, Y+5	; 0x05
    48f8:	9e 81       	ldd	r25, Y+6	; 0x06
    48fa:	01 97       	sbiw	r24, 0x01	; 1
    48fc:	9e 83       	std	Y+6, r25	; 0x06
    48fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4900:	8d 81       	ldd	r24, Y+5	; 0x05
    4902:	9e 81       	ldd	r25, Y+6	; 0x06
    4904:	00 97       	sbiw	r24, 0x00	; 0
    4906:	69 f7       	brne	.-38     	; 0x48e2 <USER_Mode+0x5a8>
    4908:	14 c0       	rjmp	.+40     	; 0x4932 <USER_Mode+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    490a:	6f 81       	ldd	r22, Y+7	; 0x07
    490c:	78 85       	ldd	r23, Y+8	; 0x08
    490e:	89 85       	ldd	r24, Y+9	; 0x09
    4910:	9a 85       	ldd	r25, Y+10	; 0x0a
    4912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4916:	dc 01       	movw	r26, r24
    4918:	cb 01       	movw	r24, r22
    491a:	9e 83       	std	Y+6, r25	; 0x06
    491c:	8d 83       	std	Y+5, r24	; 0x05
    491e:	8d 81       	ldd	r24, Y+5	; 0x05
    4920:	9e 81       	ldd	r25, Y+6	; 0x06
    4922:	9a 83       	std	Y+2, r25	; 0x02
    4924:	89 83       	std	Y+1, r24	; 0x01
    4926:	89 81       	ldd	r24, Y+1	; 0x01
    4928:	9a 81       	ldd	r25, Y+2	; 0x02
    492a:	01 97       	sbiw	r24, 0x01	; 1
    492c:	f1 f7       	brne	.-4      	; 0x492a <USER_Mode+0x5f0>
    492e:	9a 83       	std	Y+2, r25	; 0x02
    4930:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    4932:	c6 5b       	subi	r28, 0xB6	; 182
    4934:	de 4f       	sbci	r29, 0xFE	; 254
    4936:	0f b6       	in	r0, 0x3f	; 63
    4938:	f8 94       	cli
    493a:	de bf       	out	0x3e, r29	; 62
    493c:	0f be       	out	0x3f, r0	; 63
    493e:	cd bf       	out	0x3d, r28	; 61
    4940:	cf 91       	pop	r28
    4942:	df 91       	pop	r29
    4944:	08 95       	ret

00004946 <Compare_Money>:
 * @param Max_money MAX AMOUNT Cal withdraw
 * @param User_money Deposit 
 * @return uint8_t* VALID | INVALID
 */
uint8_t Compare_Money(uint32_t Max_money, uint32_t User_money)
{
    4946:	df 93       	push	r29
    4948:	cf 93       	push	r28
    494a:	cd b7       	in	r28, 0x3d	; 61
    494c:	de b7       	in	r29, 0x3e	; 62
    494e:	29 97       	sbiw	r28, 0x09	; 9
    4950:	0f b6       	in	r0, 0x3f	; 63
    4952:	f8 94       	cli
    4954:	de bf       	out	0x3e, r29	; 62
    4956:	0f be       	out	0x3f, r0	; 63
    4958:	cd bf       	out	0x3d, r28	; 61
    495a:	69 83       	std	Y+1, r22	; 0x01
    495c:	7a 83       	std	Y+2, r23	; 0x02
    495e:	8b 83       	std	Y+3, r24	; 0x03
    4960:	9c 83       	std	Y+4, r25	; 0x04
    4962:	2d 83       	std	Y+5, r18	; 0x05
    4964:	3e 83       	std	Y+6, r19	; 0x06
    4966:	4f 83       	std	Y+7, r20	; 0x07
    4968:	58 87       	std	Y+8, r21	; 0x08

	if (Max_money < User_money)
    496a:	29 81       	ldd	r18, Y+1	; 0x01
    496c:	3a 81       	ldd	r19, Y+2	; 0x02
    496e:	4b 81       	ldd	r20, Y+3	; 0x03
    4970:	5c 81       	ldd	r21, Y+4	; 0x04
    4972:	8d 81       	ldd	r24, Y+5	; 0x05
    4974:	9e 81       	ldd	r25, Y+6	; 0x06
    4976:	af 81       	ldd	r26, Y+7	; 0x07
    4978:	b8 85       	ldd	r27, Y+8	; 0x08
    497a:	28 17       	cp	r18, r24
    497c:	39 07       	cpc	r19, r25
    497e:	4a 07       	cpc	r20, r26
    4980:	5b 07       	cpc	r21, r27
    4982:	10 f4       	brcc	.+4      	; 0x4988 <Compare_Money+0x42>
	{
		return INVALID;
    4984:	19 86       	std	Y+9, r1	; 0x09
    4986:	02 c0       	rjmp	.+4      	; 0x498c <Compare_Money+0x46>
	}
	else
	{
		return VALID;
    4988:	81 e0       	ldi	r24, 0x01	; 1
    498a:	89 87       	std	Y+9, r24	; 0x09
    498c:	89 85       	ldd	r24, Y+9	; 0x09
	}
}
    498e:	29 96       	adiw	r28, 0x09	; 9
    4990:	0f b6       	in	r0, 0x3f	; 63
    4992:	f8 94       	cli
    4994:	de bf       	out	0x3e, r29	; 62
    4996:	0f be       	out	0x3f, r0	; 63
    4998:	cd bf       	out	0x3d, r28	; 61
    499a:	cf 91       	pop	r28
    499c:	df 91       	pop	r29
    499e:	08 95       	ret

000049a0 <Pass_check>:
 * 
 * @param Card_Pass store passwrod on Card_Pass
 * @return uint8_t CORRECT | INCORRECT
 */
uint8_t Pass_check(uint8_t *Card_Pass)
{
    49a0:	df 93       	push	r29
    49a2:	cf 93       	push	r28
    49a4:	cd b7       	in	r28, 0x3d	; 61
    49a6:	de b7       	in	r29, 0x3e	; 62
    49a8:	e4 97       	sbiw	r28, 0x34	; 52
    49aa:	0f b6       	in	r0, 0x3f	; 63
    49ac:	f8 94       	cli
    49ae:	de bf       	out	0x3e, r29	; 62
    49b0:	0f be       	out	0x3f, r0	; 63
    49b2:	cd bf       	out	0x3d, r28	; 61
    49b4:	9c ab       	std	Y+52, r25	; 0x34
    49b6:	8b ab       	std	Y+51, r24	; 0x33
	uint8_t Pin[5];
	uint8_t i = 0;
    49b8:	1d a6       	std	Y+45, r1	; 0x2d
	uint8_t value;

	uint8_t Flag = 0;
    49ba:	1b a6       	std	Y+43, r1	; 0x2b

	lcd_clear();
    49bc:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <lcd_clear>
	lcd_sendString((uint8_t *)"Please Enter PIN");
    49c0:	81 e6       	ldi	r24, 0x61	; 97
    49c2:	91 e0       	ldi	r25, 0x01	; 1
    49c4:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <lcd_sendString>
    49c8:	1d c0       	rjmp	.+58     	; 0x4a04 <Pass_check+0x64>

	while (i != 4)
	{
		value = KEYPAD_u8Read();
    49ca:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <KEYPAD_u8Read>
    49ce:	8c a7       	std	Y+44, r24	; 0x2c
		if (value != DEFAULT_KEY)
    49d0:	8c a5       	ldd	r24, Y+44	; 0x2c
    49d2:	8e 32       	cpi	r24, 0x2E	; 46
    49d4:	b9 f0       	breq	.+46     	; 0x4a04 <Pass_check+0x64>
		{
			Pin[i] = value;
    49d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    49d8:	28 2f       	mov	r18, r24
    49da:	30 e0       	ldi	r19, 0x00	; 0
    49dc:	ce 01       	movw	r24, r28
    49de:	8e 96       	adiw	r24, 0x2e	; 46
    49e0:	fc 01       	movw	r30, r24
    49e2:	e2 0f       	add	r30, r18
    49e4:	f3 1f       	adc	r31, r19
    49e6:	8c a5       	ldd	r24, Y+44	; 0x2c
    49e8:	80 83       	st	Z, r24
			lcd_SetPosition(1, 1 + i);
    49ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    49ec:	98 2f       	mov	r25, r24
    49ee:	9f 5f       	subi	r25, 0xFF	; 255
    49f0:	81 e0       	ldi	r24, 0x01	; 1
    49f2:	69 2f       	mov	r22, r25
    49f4:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <lcd_SetPosition>
			lcd_sendChar('*');
    49f8:	8a e2       	ldi	r24, 0x2A	; 42
    49fa:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <lcd_sendChar>
			i++;
    49fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    4a00:	8f 5f       	subi	r24, 0xFF	; 255
    4a02:	8d a7       	std	Y+45, r24	; 0x2d
	uint8_t Flag = 0;

	lcd_clear();
	lcd_sendString((uint8_t *)"Please Enter PIN");

	while (i != 4)
    4a04:	8d a5       	ldd	r24, Y+45	; 0x2d
    4a06:	84 30       	cpi	r24, 0x04	; 4
    4a08:	01 f7       	brne	.-64     	; 0x49ca <Pass_check+0x2a>
			lcd_SetPosition(1, 1 + i);
			lcd_sendChar('*');
			i++;
		}
	}
	Pin[4] = '\0';
    4a0a:	1a aa       	std	Y+50, r1	; 0x32

	lcd_clear();
    4a0c:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <lcd_clear>
	lcd_sendString((uint8_t *)"PASS finished");
    4a10:	82 e7       	ldi	r24, 0x72	; 114
    4a12:	91 e0       	ldi	r25, 0x01	; 1
    4a14:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <lcd_sendString>
    4a18:	80 e0       	ldi	r24, 0x00	; 0
    4a1a:	90 e0       	ldi	r25, 0x00	; 0
    4a1c:	aa e7       	ldi	r26, 0x7A	; 122
    4a1e:	b4 e4       	ldi	r27, 0x44	; 68
    4a20:	8f a3       	std	Y+39, r24	; 0x27
    4a22:	98 a7       	std	Y+40, r25	; 0x28
    4a24:	a9 a7       	std	Y+41, r26	; 0x29
    4a26:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a28:	6f a1       	ldd	r22, Y+39	; 0x27
    4a2a:	78 a5       	ldd	r23, Y+40	; 0x28
    4a2c:	89 a5       	ldd	r24, Y+41	; 0x29
    4a2e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a30:	20 e0       	ldi	r18, 0x00	; 0
    4a32:	30 e0       	ldi	r19, 0x00	; 0
    4a34:	4a ef       	ldi	r20, 0xFA	; 250
    4a36:	54 e4       	ldi	r21, 0x44	; 68
    4a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a3c:	dc 01       	movw	r26, r24
    4a3e:	cb 01       	movw	r24, r22
    4a40:	8b a3       	std	Y+35, r24	; 0x23
    4a42:	9c a3       	std	Y+36, r25	; 0x24
    4a44:	ad a3       	std	Y+37, r26	; 0x25
    4a46:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a48:	6b a1       	ldd	r22, Y+35	; 0x23
    4a4a:	7c a1       	ldd	r23, Y+36	; 0x24
    4a4c:	8d a1       	ldd	r24, Y+37	; 0x25
    4a4e:	9e a1       	ldd	r25, Y+38	; 0x26
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	40 e8       	ldi	r20, 0x80	; 128
    4a56:	5f e3       	ldi	r21, 0x3F	; 63
    4a58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a5c:	88 23       	and	r24, r24
    4a5e:	2c f4       	brge	.+10     	; 0x4a6a <Pass_check+0xca>
		__ticks = 1;
    4a60:	81 e0       	ldi	r24, 0x01	; 1
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	9a a3       	std	Y+34, r25	; 0x22
    4a66:	89 a3       	std	Y+33, r24	; 0x21
    4a68:	3f c0       	rjmp	.+126    	; 0x4ae8 <Pass_check+0x148>
	else if (__tmp > 65535)
    4a6a:	6b a1       	ldd	r22, Y+35	; 0x23
    4a6c:	7c a1       	ldd	r23, Y+36	; 0x24
    4a6e:	8d a1       	ldd	r24, Y+37	; 0x25
    4a70:	9e a1       	ldd	r25, Y+38	; 0x26
    4a72:	20 e0       	ldi	r18, 0x00	; 0
    4a74:	3f ef       	ldi	r19, 0xFF	; 255
    4a76:	4f e7       	ldi	r20, 0x7F	; 127
    4a78:	57 e4       	ldi	r21, 0x47	; 71
    4a7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a7e:	18 16       	cp	r1, r24
    4a80:	4c f5       	brge	.+82     	; 0x4ad4 <Pass_check+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a82:	6f a1       	ldd	r22, Y+39	; 0x27
    4a84:	78 a5       	ldd	r23, Y+40	; 0x28
    4a86:	89 a5       	ldd	r24, Y+41	; 0x29
    4a88:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a8a:	20 e0       	ldi	r18, 0x00	; 0
    4a8c:	30 e0       	ldi	r19, 0x00	; 0
    4a8e:	40 e2       	ldi	r20, 0x20	; 32
    4a90:	51 e4       	ldi	r21, 0x41	; 65
    4a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a96:	dc 01       	movw	r26, r24
    4a98:	cb 01       	movw	r24, r22
    4a9a:	bc 01       	movw	r22, r24
    4a9c:	cd 01       	movw	r24, r26
    4a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aa2:	dc 01       	movw	r26, r24
    4aa4:	cb 01       	movw	r24, r22
    4aa6:	9a a3       	std	Y+34, r25	; 0x22
    4aa8:	89 a3       	std	Y+33, r24	; 0x21
    4aaa:	0f c0       	rjmp	.+30     	; 0x4aca <Pass_check+0x12a>
    4aac:	88 ec       	ldi	r24, 0xC8	; 200
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	98 a3       	std	Y+32, r25	; 0x20
    4ab2:	8f 8f       	std	Y+31, r24	; 0x1f
    4ab4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ab6:	98 a1       	ldd	r25, Y+32	; 0x20
    4ab8:	01 97       	sbiw	r24, 0x01	; 1
    4aba:	f1 f7       	brne	.-4      	; 0x4ab8 <Pass_check+0x118>
    4abc:	98 a3       	std	Y+32, r25	; 0x20
    4abe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ac0:	89 a1       	ldd	r24, Y+33	; 0x21
    4ac2:	9a a1       	ldd	r25, Y+34	; 0x22
    4ac4:	01 97       	sbiw	r24, 0x01	; 1
    4ac6:	9a a3       	std	Y+34, r25	; 0x22
    4ac8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aca:	89 a1       	ldd	r24, Y+33	; 0x21
    4acc:	9a a1       	ldd	r25, Y+34	; 0x22
    4ace:	00 97       	sbiw	r24, 0x00	; 0
    4ad0:	69 f7       	brne	.-38     	; 0x4aac <Pass_check+0x10c>
    4ad2:	14 c0       	rjmp	.+40     	; 0x4afc <Pass_check+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ad4:	6b a1       	ldd	r22, Y+35	; 0x23
    4ad6:	7c a1       	ldd	r23, Y+36	; 0x24
    4ad8:	8d a1       	ldd	r24, Y+37	; 0x25
    4ada:	9e a1       	ldd	r25, Y+38	; 0x26
    4adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ae0:	dc 01       	movw	r26, r24
    4ae2:	cb 01       	movw	r24, r22
    4ae4:	9a a3       	std	Y+34, r25	; 0x22
    4ae6:	89 a3       	std	Y+33, r24	; 0x21
    4ae8:	89 a1       	ldd	r24, Y+33	; 0x21
    4aea:	9a a1       	ldd	r25, Y+34	; 0x22
    4aec:	9e 8f       	std	Y+30, r25	; 0x1e
    4aee:	8d 8f       	std	Y+29, r24	; 0x1d
    4af0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4af2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4af4:	01 97       	sbiw	r24, 0x01	; 1
    4af6:	f1 f7       	brne	.-4      	; 0x4af4 <Pass_check+0x154>
    4af8:	9e 8f       	std	Y+30, r25	; 0x1e
    4afa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);

	if (String_u8Comp(Pin, Card_Pass) == STRING_EQUL)
    4afc:	ce 01       	movw	r24, r28
    4afe:	8e 96       	adiw	r24, 0x2e	; 46
    4b00:	2b a9       	ldd	r18, Y+51	; 0x33
    4b02:	3c a9       	ldd	r19, Y+52	; 0x34
    4b04:	b9 01       	movw	r22, r18
    4b06:	0e 94 91 27 	call	0x4f22	; 0x4f22 <String_u8Comp>
    4b0a:	88 23       	and	r24, r24
    4b0c:	09 f0       	breq	.+2      	; 0x4b10 <Pass_check+0x170>
    4b0e:	7b c0       	rjmp	.+246    	; 0x4c06 <Pass_check+0x266>
	{
		lcd_clear();
    4b10:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <lcd_clear>
		lcd_sendString((uint8_t *)"PASS Correct");
    4b14:	80 e8       	ldi	r24, 0x80	; 128
    4b16:	91 e0       	ldi	r25, 0x01	; 1
    4b18:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <lcd_sendString>
		Flag = CORRECT;
    4b1c:	81 e0       	ldi	r24, 0x01	; 1
    4b1e:	8b a7       	std	Y+43, r24	; 0x2b
    4b20:	80 e0       	ldi	r24, 0x00	; 0
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	aa e7       	ldi	r26, 0x7A	; 122
    4b26:	b4 e4       	ldi	r27, 0x44	; 68
    4b28:	89 8f       	std	Y+25, r24	; 0x19
    4b2a:	9a 8f       	std	Y+26, r25	; 0x1a
    4b2c:	ab 8f       	std	Y+27, r26	; 0x1b
    4b2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b30:	69 8d       	ldd	r22, Y+25	; 0x19
    4b32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	30 e0       	ldi	r19, 0x00	; 0
    4b3c:	4a ef       	ldi	r20, 0xFA	; 250
    4b3e:	54 e4       	ldi	r21, 0x44	; 68
    4b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b44:	dc 01       	movw	r26, r24
    4b46:	cb 01       	movw	r24, r22
    4b48:	8d 8b       	std	Y+21, r24	; 0x15
    4b4a:	9e 8b       	std	Y+22, r25	; 0x16
    4b4c:	af 8b       	std	Y+23, r26	; 0x17
    4b4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b50:	6d 89       	ldd	r22, Y+21	; 0x15
    4b52:	7e 89       	ldd	r23, Y+22	; 0x16
    4b54:	8f 89       	ldd	r24, Y+23	; 0x17
    4b56:	98 8d       	ldd	r25, Y+24	; 0x18
    4b58:	20 e0       	ldi	r18, 0x00	; 0
    4b5a:	30 e0       	ldi	r19, 0x00	; 0
    4b5c:	40 e8       	ldi	r20, 0x80	; 128
    4b5e:	5f e3       	ldi	r21, 0x3F	; 63
    4b60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b64:	88 23       	and	r24, r24
    4b66:	2c f4       	brge	.+10     	; 0x4b72 <Pass_check+0x1d2>
		__ticks = 1;
    4b68:	81 e0       	ldi	r24, 0x01	; 1
    4b6a:	90 e0       	ldi	r25, 0x00	; 0
    4b6c:	9c 8b       	std	Y+20, r25	; 0x14
    4b6e:	8b 8b       	std	Y+19, r24	; 0x13
    4b70:	3f c0       	rjmp	.+126    	; 0x4bf0 <Pass_check+0x250>
	else if (__tmp > 65535)
    4b72:	6d 89       	ldd	r22, Y+21	; 0x15
    4b74:	7e 89       	ldd	r23, Y+22	; 0x16
    4b76:	8f 89       	ldd	r24, Y+23	; 0x17
    4b78:	98 8d       	ldd	r25, Y+24	; 0x18
    4b7a:	20 e0       	ldi	r18, 0x00	; 0
    4b7c:	3f ef       	ldi	r19, 0xFF	; 255
    4b7e:	4f e7       	ldi	r20, 0x7F	; 127
    4b80:	57 e4       	ldi	r21, 0x47	; 71
    4b82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b86:	18 16       	cp	r1, r24
    4b88:	4c f5       	brge	.+82     	; 0x4bdc <Pass_check+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b8a:	69 8d       	ldd	r22, Y+25	; 0x19
    4b8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b92:	20 e0       	ldi	r18, 0x00	; 0
    4b94:	30 e0       	ldi	r19, 0x00	; 0
    4b96:	40 e2       	ldi	r20, 0x20	; 32
    4b98:	51 e4       	ldi	r21, 0x41	; 65
    4b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b9e:	dc 01       	movw	r26, r24
    4ba0:	cb 01       	movw	r24, r22
    4ba2:	bc 01       	movw	r22, r24
    4ba4:	cd 01       	movw	r24, r26
    4ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4baa:	dc 01       	movw	r26, r24
    4bac:	cb 01       	movw	r24, r22
    4bae:	9c 8b       	std	Y+20, r25	; 0x14
    4bb0:	8b 8b       	std	Y+19, r24	; 0x13
    4bb2:	0f c0       	rjmp	.+30     	; 0x4bd2 <Pass_check+0x232>
    4bb4:	88 ec       	ldi	r24, 0xC8	; 200
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	9a 8b       	std	Y+18, r25	; 0x12
    4bba:	89 8b       	std	Y+17, r24	; 0x11
    4bbc:	89 89       	ldd	r24, Y+17	; 0x11
    4bbe:	9a 89       	ldd	r25, Y+18	; 0x12
    4bc0:	01 97       	sbiw	r24, 0x01	; 1
    4bc2:	f1 f7       	brne	.-4      	; 0x4bc0 <Pass_check+0x220>
    4bc4:	9a 8b       	std	Y+18, r25	; 0x12
    4bc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    4bca:	9c 89       	ldd	r25, Y+20	; 0x14
    4bcc:	01 97       	sbiw	r24, 0x01	; 1
    4bce:	9c 8b       	std	Y+20, r25	; 0x14
    4bd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bd2:	8b 89       	ldd	r24, Y+19	; 0x13
    4bd4:	9c 89       	ldd	r25, Y+20	; 0x14
    4bd6:	00 97       	sbiw	r24, 0x00	; 0
    4bd8:	69 f7       	brne	.-38     	; 0x4bb4 <Pass_check+0x214>
    4bda:	8e c0       	rjmp	.+284    	; 0x4cf8 <Pass_check+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bdc:	6d 89       	ldd	r22, Y+21	; 0x15
    4bde:	7e 89       	ldd	r23, Y+22	; 0x16
    4be0:	8f 89       	ldd	r24, Y+23	; 0x17
    4be2:	98 8d       	ldd	r25, Y+24	; 0x18
    4be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4be8:	dc 01       	movw	r26, r24
    4bea:	cb 01       	movw	r24, r22
    4bec:	9c 8b       	std	Y+20, r25	; 0x14
    4bee:	8b 8b       	std	Y+19, r24	; 0x13
    4bf0:	8b 89       	ldd	r24, Y+19	; 0x13
    4bf2:	9c 89       	ldd	r25, Y+20	; 0x14
    4bf4:	98 8b       	std	Y+16, r25	; 0x10
    4bf6:	8f 87       	std	Y+15, r24	; 0x0f
    4bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4bfa:	98 89       	ldd	r25, Y+16	; 0x10
    4bfc:	01 97       	sbiw	r24, 0x01	; 1
    4bfe:	f1 f7       	brne	.-4      	; 0x4bfc <Pass_check+0x25c>
    4c00:	98 8b       	std	Y+16, r25	; 0x10
    4c02:	8f 87       	std	Y+15, r24	; 0x0f
    4c04:	79 c0       	rjmp	.+242    	; 0x4cf8 <Pass_check+0x358>
		_delay_ms(1000);
	}
	else
	{
		lcd_clear();
    4c06:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <lcd_clear>
		lcd_sendString((uint8_t *)"PASS incorrect");
    4c0a:	8d e8       	ldi	r24, 0x8D	; 141
    4c0c:	91 e0       	ldi	r25, 0x01	; 1
    4c0e:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <lcd_sendString>
		Flag = INCORRECT;
    4c12:	1b a6       	std	Y+43, r1	; 0x2b
    4c14:	80 e0       	ldi	r24, 0x00	; 0
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	aa e7       	ldi	r26, 0x7A	; 122
    4c1a:	b4 e4       	ldi	r27, 0x44	; 68
    4c1c:	8b 87       	std	Y+11, r24	; 0x0b
    4c1e:	9c 87       	std	Y+12, r25	; 0x0c
    4c20:	ad 87       	std	Y+13, r26	; 0x0d
    4c22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c2c:	20 e0       	ldi	r18, 0x00	; 0
    4c2e:	30 e0       	ldi	r19, 0x00	; 0
    4c30:	4a ef       	ldi	r20, 0xFA	; 250
    4c32:	54 e4       	ldi	r21, 0x44	; 68
    4c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c38:	dc 01       	movw	r26, r24
    4c3a:	cb 01       	movw	r24, r22
    4c3c:	8f 83       	std	Y+7, r24	; 0x07
    4c3e:	98 87       	std	Y+8, r25	; 0x08
    4c40:	a9 87       	std	Y+9, r26	; 0x09
    4c42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c44:	6f 81       	ldd	r22, Y+7	; 0x07
    4c46:	78 85       	ldd	r23, Y+8	; 0x08
    4c48:	89 85       	ldd	r24, Y+9	; 0x09
    4c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c4c:	20 e0       	ldi	r18, 0x00	; 0
    4c4e:	30 e0       	ldi	r19, 0x00	; 0
    4c50:	40 e8       	ldi	r20, 0x80	; 128
    4c52:	5f e3       	ldi	r21, 0x3F	; 63
    4c54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c58:	88 23       	and	r24, r24
    4c5a:	2c f4       	brge	.+10     	; 0x4c66 <Pass_check+0x2c6>
		__ticks = 1;
    4c5c:	81 e0       	ldi	r24, 0x01	; 1
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	9e 83       	std	Y+6, r25	; 0x06
    4c62:	8d 83       	std	Y+5, r24	; 0x05
    4c64:	3f c0       	rjmp	.+126    	; 0x4ce4 <Pass_check+0x344>
	else if (__tmp > 65535)
    4c66:	6f 81       	ldd	r22, Y+7	; 0x07
    4c68:	78 85       	ldd	r23, Y+8	; 0x08
    4c6a:	89 85       	ldd	r24, Y+9	; 0x09
    4c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c6e:	20 e0       	ldi	r18, 0x00	; 0
    4c70:	3f ef       	ldi	r19, 0xFF	; 255
    4c72:	4f e7       	ldi	r20, 0x7F	; 127
    4c74:	57 e4       	ldi	r21, 0x47	; 71
    4c76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c7a:	18 16       	cp	r1, r24
    4c7c:	4c f5       	brge	.+82     	; 0x4cd0 <Pass_check+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c86:	20 e0       	ldi	r18, 0x00	; 0
    4c88:	30 e0       	ldi	r19, 0x00	; 0
    4c8a:	40 e2       	ldi	r20, 0x20	; 32
    4c8c:	51 e4       	ldi	r21, 0x41	; 65
    4c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c92:	dc 01       	movw	r26, r24
    4c94:	cb 01       	movw	r24, r22
    4c96:	bc 01       	movw	r22, r24
    4c98:	cd 01       	movw	r24, r26
    4c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c9e:	dc 01       	movw	r26, r24
    4ca0:	cb 01       	movw	r24, r22
    4ca2:	9e 83       	std	Y+6, r25	; 0x06
    4ca4:	8d 83       	std	Y+5, r24	; 0x05
    4ca6:	0f c0       	rjmp	.+30     	; 0x4cc6 <Pass_check+0x326>
    4ca8:	88 ec       	ldi	r24, 0xC8	; 200
    4caa:	90 e0       	ldi	r25, 0x00	; 0
    4cac:	9c 83       	std	Y+4, r25	; 0x04
    4cae:	8b 83       	std	Y+3, r24	; 0x03
    4cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    4cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    4cb4:	01 97       	sbiw	r24, 0x01	; 1
    4cb6:	f1 f7       	brne	.-4      	; 0x4cb4 <Pass_check+0x314>
    4cb8:	9c 83       	std	Y+4, r25	; 0x04
    4cba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    4cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    4cc0:	01 97       	sbiw	r24, 0x01	; 1
    4cc2:	9e 83       	std	Y+6, r25	; 0x06
    4cc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    4cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    4cca:	00 97       	sbiw	r24, 0x00	; 0
    4ccc:	69 f7       	brne	.-38     	; 0x4ca8 <Pass_check+0x308>
    4cce:	14 c0       	rjmp	.+40     	; 0x4cf8 <Pass_check+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    4cd2:	78 85       	ldd	r23, Y+8	; 0x08
    4cd4:	89 85       	ldd	r24, Y+9	; 0x09
    4cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cdc:	dc 01       	movw	r26, r24
    4cde:	cb 01       	movw	r24, r22
    4ce0:	9e 83       	std	Y+6, r25	; 0x06
    4ce2:	8d 83       	std	Y+5, r24	; 0x05
    4ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ce8:	9a 83       	std	Y+2, r25	; 0x02
    4cea:	89 83       	std	Y+1, r24	; 0x01
    4cec:	89 81       	ldd	r24, Y+1	; 0x01
    4cee:	9a 81       	ldd	r25, Y+2	; 0x02
    4cf0:	01 97       	sbiw	r24, 0x01	; 1
    4cf2:	f1 f7       	brne	.-4      	; 0x4cf0 <Pass_check+0x350>
    4cf4:	9a 83       	std	Y+2, r25	; 0x02
    4cf6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}

	return Flag;
    4cf8:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    4cfa:	e4 96       	adiw	r28, 0x34	; 52
    4cfc:	0f b6       	in	r0, 0x3f	; 63
    4cfe:	f8 94       	cli
    4d00:	de bf       	out	0x3e, r29	; 62
    4d02:	0f be       	out	0x3f, r0	; 63
    4d04:	cd bf       	out	0x3d, r28	; 61
    4d06:	cf 91       	pop	r28
    4d08:	df 91       	pop	r29
    4d0a:	08 95       	ret

00004d0c <TEMP>:
/**
 * @brief Display Temp on Lcd if user select Temp Mode
 * 
 */
void TEMP(void)
{
    4d0c:	df 93       	push	r29
    4d0e:	cf 93       	push	r28
    4d10:	cd b7       	in	r28, 0x3d	; 61
    4d12:	de b7       	in	r29, 0x3e	; 62
    4d14:	6d 97       	sbiw	r28, 0x1d	; 29
    4d16:	0f b6       	in	r0, 0x3f	; 63
    4d18:	f8 94       	cli
    4d1a:	de bf       	out	0x3e, r29	; 62
    4d1c:	0f be       	out	0x3f, r0	; 63
    4d1e:	cd bf       	out	0x3d, r28	; 61
	uint8_t value = 0;
    4d20:	1d 8e       	std	Y+29, r1	; 0x1d
	value = LM35_U16Read(0);
    4d22:	80 e0       	ldi	r24, 0x00	; 0
    4d24:	0e 94 b4 13 	call	0x2768	; 0x2768 <LM35_U16Read>
    4d28:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_clear();
    4d2a:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <lcd_clear>
	lcd_sendString((uint8_t *)"temp is ");
    4d2e:	8c e9       	ldi	r24, 0x9C	; 156
    4d30:	91 e0       	ldi	r25, 0x01	; 1
    4d32:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <lcd_sendString>
    4d36:	80 e0       	ldi	r24, 0x00	; 0
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	aa e7       	ldi	r26, 0x7A	; 122
    4d3c:	b4 e4       	ldi	r27, 0x44	; 68
    4d3e:	89 8f       	std	Y+25, r24	; 0x19
    4d40:	9a 8f       	std	Y+26, r25	; 0x1a
    4d42:	ab 8f       	std	Y+27, r26	; 0x1b
    4d44:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d46:	69 8d       	ldd	r22, Y+25	; 0x19
    4d48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d4e:	20 e0       	ldi	r18, 0x00	; 0
    4d50:	30 e0       	ldi	r19, 0x00	; 0
    4d52:	4a ef       	ldi	r20, 0xFA	; 250
    4d54:	54 e4       	ldi	r21, 0x44	; 68
    4d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d5a:	dc 01       	movw	r26, r24
    4d5c:	cb 01       	movw	r24, r22
    4d5e:	8d 8b       	std	Y+21, r24	; 0x15
    4d60:	9e 8b       	std	Y+22, r25	; 0x16
    4d62:	af 8b       	std	Y+23, r26	; 0x17
    4d64:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d66:	6d 89       	ldd	r22, Y+21	; 0x15
    4d68:	7e 89       	ldd	r23, Y+22	; 0x16
    4d6a:	8f 89       	ldd	r24, Y+23	; 0x17
    4d6c:	98 8d       	ldd	r25, Y+24	; 0x18
    4d6e:	20 e0       	ldi	r18, 0x00	; 0
    4d70:	30 e0       	ldi	r19, 0x00	; 0
    4d72:	40 e8       	ldi	r20, 0x80	; 128
    4d74:	5f e3       	ldi	r21, 0x3F	; 63
    4d76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d7a:	88 23       	and	r24, r24
    4d7c:	2c f4       	brge	.+10     	; 0x4d88 <TEMP+0x7c>
		__ticks = 1;
    4d7e:	81 e0       	ldi	r24, 0x01	; 1
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	9c 8b       	std	Y+20, r25	; 0x14
    4d84:	8b 8b       	std	Y+19, r24	; 0x13
    4d86:	3f c0       	rjmp	.+126    	; 0x4e06 <TEMP+0xfa>
	else if (__tmp > 65535)
    4d88:	6d 89       	ldd	r22, Y+21	; 0x15
    4d8a:	7e 89       	ldd	r23, Y+22	; 0x16
    4d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    4d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    4d90:	20 e0       	ldi	r18, 0x00	; 0
    4d92:	3f ef       	ldi	r19, 0xFF	; 255
    4d94:	4f e7       	ldi	r20, 0x7F	; 127
    4d96:	57 e4       	ldi	r21, 0x47	; 71
    4d98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d9c:	18 16       	cp	r1, r24
    4d9e:	4c f5       	brge	.+82     	; 0x4df2 <TEMP+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4da0:	69 8d       	ldd	r22, Y+25	; 0x19
    4da2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4da4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4da6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4da8:	20 e0       	ldi	r18, 0x00	; 0
    4daa:	30 e0       	ldi	r19, 0x00	; 0
    4dac:	40 e2       	ldi	r20, 0x20	; 32
    4dae:	51 e4       	ldi	r21, 0x41	; 65
    4db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4db4:	dc 01       	movw	r26, r24
    4db6:	cb 01       	movw	r24, r22
    4db8:	bc 01       	movw	r22, r24
    4dba:	cd 01       	movw	r24, r26
    4dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dc0:	dc 01       	movw	r26, r24
    4dc2:	cb 01       	movw	r24, r22
    4dc4:	9c 8b       	std	Y+20, r25	; 0x14
    4dc6:	8b 8b       	std	Y+19, r24	; 0x13
    4dc8:	0f c0       	rjmp	.+30     	; 0x4de8 <TEMP+0xdc>
    4dca:	88 ec       	ldi	r24, 0xC8	; 200
    4dcc:	90 e0       	ldi	r25, 0x00	; 0
    4dce:	9a 8b       	std	Y+18, r25	; 0x12
    4dd0:	89 8b       	std	Y+17, r24	; 0x11
    4dd2:	89 89       	ldd	r24, Y+17	; 0x11
    4dd4:	9a 89       	ldd	r25, Y+18	; 0x12
    4dd6:	01 97       	sbiw	r24, 0x01	; 1
    4dd8:	f1 f7       	brne	.-4      	; 0x4dd6 <TEMP+0xca>
    4dda:	9a 8b       	std	Y+18, r25	; 0x12
    4ddc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dde:	8b 89       	ldd	r24, Y+19	; 0x13
    4de0:	9c 89       	ldd	r25, Y+20	; 0x14
    4de2:	01 97       	sbiw	r24, 0x01	; 1
    4de4:	9c 8b       	std	Y+20, r25	; 0x14
    4de6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4de8:	8b 89       	ldd	r24, Y+19	; 0x13
    4dea:	9c 89       	ldd	r25, Y+20	; 0x14
    4dec:	00 97       	sbiw	r24, 0x00	; 0
    4dee:	69 f7       	brne	.-38     	; 0x4dca <TEMP+0xbe>
    4df0:	14 c0       	rjmp	.+40     	; 0x4e1a <TEMP+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4df2:	6d 89       	ldd	r22, Y+21	; 0x15
    4df4:	7e 89       	ldd	r23, Y+22	; 0x16
    4df6:	8f 89       	ldd	r24, Y+23	; 0x17
    4df8:	98 8d       	ldd	r25, Y+24	; 0x18
    4dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dfe:	dc 01       	movw	r26, r24
    4e00:	cb 01       	movw	r24, r22
    4e02:	9c 8b       	std	Y+20, r25	; 0x14
    4e04:	8b 8b       	std	Y+19, r24	; 0x13
    4e06:	8b 89       	ldd	r24, Y+19	; 0x13
    4e08:	9c 89       	ldd	r25, Y+20	; 0x14
    4e0a:	98 8b       	std	Y+16, r25	; 0x10
    4e0c:	8f 87       	std	Y+15, r24	; 0x0f
    4e0e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e10:	98 89       	ldd	r25, Y+16	; 0x10
    4e12:	01 97       	sbiw	r24, 0x01	; 1
    4e14:	f1 f7       	brne	.-4      	; 0x4e12 <TEMP+0x106>
    4e16:	98 8b       	std	Y+16, r25	; 0x10
    4e18:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	lcd_SetPosition(1, 0);
    4e1a:	81 e0       	ldi	r24, 0x01	; 1
    4e1c:	60 e0       	ldi	r22, 0x00	; 0
    4e1e:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <lcd_SetPosition>
	lcd_sendNum(value);
    4e22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e24:	88 2f       	mov	r24, r24
    4e26:	90 e0       	ldi	r25, 0x00	; 0
    4e28:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <lcd_sendNum>
    4e2c:	80 e0       	ldi	r24, 0x00	; 0
    4e2e:	90 e8       	ldi	r25, 0x80	; 128
    4e30:	ab e3       	ldi	r26, 0x3B	; 59
    4e32:	b5 e4       	ldi	r27, 0x45	; 69
    4e34:	8b 87       	std	Y+11, r24	; 0x0b
    4e36:	9c 87       	std	Y+12, r25	; 0x0c
    4e38:	ad 87       	std	Y+13, r26	; 0x0d
    4e3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e44:	20 e0       	ldi	r18, 0x00	; 0
    4e46:	30 e0       	ldi	r19, 0x00	; 0
    4e48:	4a ef       	ldi	r20, 0xFA	; 250
    4e4a:	54 e4       	ldi	r21, 0x44	; 68
    4e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e50:	dc 01       	movw	r26, r24
    4e52:	cb 01       	movw	r24, r22
    4e54:	8f 83       	std	Y+7, r24	; 0x07
    4e56:	98 87       	std	Y+8, r25	; 0x08
    4e58:	a9 87       	std	Y+9, r26	; 0x09
    4e5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e5c:	6f 81       	ldd	r22, Y+7	; 0x07
    4e5e:	78 85       	ldd	r23, Y+8	; 0x08
    4e60:	89 85       	ldd	r24, Y+9	; 0x09
    4e62:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e64:	20 e0       	ldi	r18, 0x00	; 0
    4e66:	30 e0       	ldi	r19, 0x00	; 0
    4e68:	40 e8       	ldi	r20, 0x80	; 128
    4e6a:	5f e3       	ldi	r21, 0x3F	; 63
    4e6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e70:	88 23       	and	r24, r24
    4e72:	2c f4       	brge	.+10     	; 0x4e7e <TEMP+0x172>
		__ticks = 1;
    4e74:	81 e0       	ldi	r24, 0x01	; 1
    4e76:	90 e0       	ldi	r25, 0x00	; 0
    4e78:	9e 83       	std	Y+6, r25	; 0x06
    4e7a:	8d 83       	std	Y+5, r24	; 0x05
    4e7c:	3f c0       	rjmp	.+126    	; 0x4efc <TEMP+0x1f0>
	else if (__tmp > 65535)
    4e7e:	6f 81       	ldd	r22, Y+7	; 0x07
    4e80:	78 85       	ldd	r23, Y+8	; 0x08
    4e82:	89 85       	ldd	r24, Y+9	; 0x09
    4e84:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e86:	20 e0       	ldi	r18, 0x00	; 0
    4e88:	3f ef       	ldi	r19, 0xFF	; 255
    4e8a:	4f e7       	ldi	r20, 0x7F	; 127
    4e8c:	57 e4       	ldi	r21, 0x47	; 71
    4e8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e92:	18 16       	cp	r1, r24
    4e94:	4c f5       	brge	.+82     	; 0x4ee8 <TEMP+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e96:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e98:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e9e:	20 e0       	ldi	r18, 0x00	; 0
    4ea0:	30 e0       	ldi	r19, 0x00	; 0
    4ea2:	40 e2       	ldi	r20, 0x20	; 32
    4ea4:	51 e4       	ldi	r21, 0x41	; 65
    4ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4eaa:	dc 01       	movw	r26, r24
    4eac:	cb 01       	movw	r24, r22
    4eae:	bc 01       	movw	r22, r24
    4eb0:	cd 01       	movw	r24, r26
    4eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb6:	dc 01       	movw	r26, r24
    4eb8:	cb 01       	movw	r24, r22
    4eba:	9e 83       	std	Y+6, r25	; 0x06
    4ebc:	8d 83       	std	Y+5, r24	; 0x05
    4ebe:	0f c0       	rjmp	.+30     	; 0x4ede <TEMP+0x1d2>
    4ec0:	88 ec       	ldi	r24, 0xC8	; 200
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	9c 83       	std	Y+4, r25	; 0x04
    4ec6:	8b 83       	std	Y+3, r24	; 0x03
    4ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    4eca:	9c 81       	ldd	r25, Y+4	; 0x04
    4ecc:	01 97       	sbiw	r24, 0x01	; 1
    4ece:	f1 f7       	brne	.-4      	; 0x4ecc <TEMP+0x1c0>
    4ed0:	9c 83       	std	Y+4, r25	; 0x04
    4ed2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ed4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ed6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ed8:	01 97       	sbiw	r24, 0x01	; 1
    4eda:	9e 83       	std	Y+6, r25	; 0x06
    4edc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ede:	8d 81       	ldd	r24, Y+5	; 0x05
    4ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    4ee2:	00 97       	sbiw	r24, 0x00	; 0
    4ee4:	69 f7       	brne	.-38     	; 0x4ec0 <TEMP+0x1b4>
    4ee6:	14 c0       	rjmp	.+40     	; 0x4f10 <TEMP+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ee8:	6f 81       	ldd	r22, Y+7	; 0x07
    4eea:	78 85       	ldd	r23, Y+8	; 0x08
    4eec:	89 85       	ldd	r24, Y+9	; 0x09
    4eee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ef4:	dc 01       	movw	r26, r24
    4ef6:	cb 01       	movw	r24, r22
    4ef8:	9e 83       	std	Y+6, r25	; 0x06
    4efa:	8d 83       	std	Y+5, r24	; 0x05
    4efc:	8d 81       	ldd	r24, Y+5	; 0x05
    4efe:	9e 81       	ldd	r25, Y+6	; 0x06
    4f00:	9a 83       	std	Y+2, r25	; 0x02
    4f02:	89 83       	std	Y+1, r24	; 0x01
    4f04:	89 81       	ldd	r24, Y+1	; 0x01
    4f06:	9a 81       	ldd	r25, Y+2	; 0x02
    4f08:	01 97       	sbiw	r24, 0x01	; 1
    4f0a:	f1 f7       	brne	.-4      	; 0x4f08 <TEMP+0x1fc>
    4f0c:	9a 83       	std	Y+2, r25	; 0x02
    4f0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
}
    4f10:	6d 96       	adiw	r28, 0x1d	; 29
    4f12:	0f b6       	in	r0, 0x3f	; 63
    4f14:	f8 94       	cli
    4f16:	de bf       	out	0x3e, r29	; 62
    4f18:	0f be       	out	0x3f, r0	; 63
    4f1a:	cd bf       	out	0x3d, r28	; 61
    4f1c:	cf 91       	pop	r28
    4f1e:	df 91       	pop	r29
    4f20:	08 95       	ret

00004f22 <String_u8Comp>:
 * @param Str1 first string
 * @param Str2 second string
 * @return uint8_t string is equal = 0 or not equal =1 
 */
uint8_t String_u8Comp(uint8_t *Str1, uint8_t *Str2)
{
    4f22:	df 93       	push	r29
    4f24:	cf 93       	push	r28
    4f26:	00 d0       	rcall	.+0      	; 0x4f28 <String_u8Comp+0x6>
    4f28:	00 d0       	rcall	.+0      	; 0x4f2a <String_u8Comp+0x8>
    4f2a:	00 d0       	rcall	.+0      	; 0x4f2c <String_u8Comp+0xa>
    4f2c:	cd b7       	in	r28, 0x3d	; 61
    4f2e:	de b7       	in	r29, 0x3e	; 62
    4f30:	9c 83       	std	Y+4, r25	; 0x04
    4f32:	8b 83       	std	Y+3, r24	; 0x03
    4f34:	7e 83       	std	Y+6, r23	; 0x06
    4f36:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t i = 0, Flag = 0;
    4f38:	1a 82       	std	Y+2, r1	; 0x02
    4f3a:	19 82       	std	Y+1, r1	; 0x01
    4f3c:	1a c0       	rjmp	.+52     	; 0x4f72 <String_u8Comp+0x50>

	while (Str1[i] || Str2[i])
	{
		if (Str1[i] != Str2[i])
    4f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f40:	28 2f       	mov	r18, r24
    4f42:	30 e0       	ldi	r19, 0x00	; 0
    4f44:	8b 81       	ldd	r24, Y+3	; 0x03
    4f46:	9c 81       	ldd	r25, Y+4	; 0x04
    4f48:	fc 01       	movw	r30, r24
    4f4a:	e2 0f       	add	r30, r18
    4f4c:	f3 1f       	adc	r31, r19
    4f4e:	40 81       	ld	r20, Z
    4f50:	8a 81       	ldd	r24, Y+2	; 0x02
    4f52:	28 2f       	mov	r18, r24
    4f54:	30 e0       	ldi	r19, 0x00	; 0
    4f56:	8d 81       	ldd	r24, Y+5	; 0x05
    4f58:	9e 81       	ldd	r25, Y+6	; 0x06
    4f5a:	fc 01       	movw	r30, r24
    4f5c:	e2 0f       	add	r30, r18
    4f5e:	f3 1f       	adc	r31, r19
    4f60:	80 81       	ld	r24, Z
    4f62:	48 17       	cp	r20, r24
    4f64:	19 f0       	breq	.+6      	; 0x4f6c <String_u8Comp+0x4a>
		{
			Flag = 1;
    4f66:	81 e0       	ldi	r24, 0x01	; 1
    4f68:	89 83       	std	Y+1, r24	; 0x01
    4f6a:	19 c0       	rjmp	.+50     	; 0x4f9e <String_u8Comp+0x7c>
			break;
		}
		i++;
    4f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f6e:	8f 5f       	subi	r24, 0xFF	; 255
    4f70:	8a 83       	std	Y+2, r24	; 0x02
 */
uint8_t String_u8Comp(uint8_t *Str1, uint8_t *Str2)
{
	uint8_t i = 0, Flag = 0;

	while (Str1[i] || Str2[i])
    4f72:	8a 81       	ldd	r24, Y+2	; 0x02
    4f74:	28 2f       	mov	r18, r24
    4f76:	30 e0       	ldi	r19, 0x00	; 0
    4f78:	8b 81       	ldd	r24, Y+3	; 0x03
    4f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f7c:	fc 01       	movw	r30, r24
    4f7e:	e2 0f       	add	r30, r18
    4f80:	f3 1f       	adc	r31, r19
    4f82:	80 81       	ld	r24, Z
    4f84:	88 23       	and	r24, r24
    4f86:	d9 f6       	brne	.-74     	; 0x4f3e <String_u8Comp+0x1c>
    4f88:	8a 81       	ldd	r24, Y+2	; 0x02
    4f8a:	28 2f       	mov	r18, r24
    4f8c:	30 e0       	ldi	r19, 0x00	; 0
    4f8e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f90:	9e 81       	ldd	r25, Y+6	; 0x06
    4f92:	fc 01       	movw	r30, r24
    4f94:	e2 0f       	add	r30, r18
    4f96:	f3 1f       	adc	r31, r19
    4f98:	80 81       	ld	r24, Z
    4f9a:	88 23       	and	r24, r24
    4f9c:	81 f6       	brne	.-96     	; 0x4f3e <String_u8Comp+0x1c>
			Flag = 1;
			break;
		}
		i++;
	}
	return Flag;
    4f9e:	89 81       	ldd	r24, Y+1	; 0x01
}
    4fa0:	26 96       	adiw	r28, 0x06	; 6
    4fa2:	0f b6       	in	r0, 0x3f	; 63
    4fa4:	f8 94       	cli
    4fa6:	de bf       	out	0x3e, r29	; 62
    4fa8:	0f be       	out	0x3f, r0	; 63
    4faa:	cd bf       	out	0x3d, r28	; 61
    4fac:	cf 91       	pop	r28
    4fae:	df 91       	pop	r29
    4fb0:	08 95       	ret

00004fb2 <Get_Pass>:
 * @brief send garbag value to slave to receive his own data
 * 
 * @param str receive data form slave
 */
void Get_Pass(uint8_t *str)
{
    4fb2:	0f 93       	push	r16
    4fb4:	1f 93       	push	r17
    4fb6:	df 93       	push	r29
    4fb8:	cf 93       	push	r28
    4fba:	00 d0       	rcall	.+0      	; 0x4fbc <Get_Pass+0xa>
    4fbc:	cd b7       	in	r28, 0x3d	; 61
    4fbe:	de b7       	in	r29, 0x3e	; 62
    4fc0:	9a 83       	std	Y+2, r25	; 0x02
    4fc2:	89 83       	std	Y+1, r24	; 0x01
	SPI_VidSendByte('p');
    4fc4:	80 e7       	ldi	r24, 0x70	; 112
    4fc6:	0e 94 45 0a 	call	0x148a	; 0x148a <SPI_VidSendByte>
	str[0] = SPI_U8RecieveByte();
    4fca:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <SPI_U8RecieveByte>
    4fce:	e9 81       	ldd	r30, Y+1	; 0x01
    4fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    4fd2:	80 83       	st	Z, r24
	SPI_VidSendByte('p');
    4fd4:	80 e7       	ldi	r24, 0x70	; 112
    4fd6:	0e 94 45 0a 	call	0x148a	; 0x148a <SPI_VidSendByte>
	str[0] = SPI_U8RecieveByte();
    4fda:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <SPI_U8RecieveByte>
    4fde:	e9 81       	ldd	r30, Y+1	; 0x01
    4fe0:	fa 81       	ldd	r31, Y+2	; 0x02
    4fe2:	80 83       	st	Z, r24
	SPI_VidSendByte('p');
    4fe4:	80 e7       	ldi	r24, 0x70	; 112
    4fe6:	0e 94 45 0a 	call	0x148a	; 0x148a <SPI_VidSendByte>
	str[0] = SPI_U8RecieveByte();
    4fea:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <SPI_U8RecieveByte>
    4fee:	e9 81       	ldd	r30, Y+1	; 0x01
    4ff0:	fa 81       	ldd	r31, Y+2	; 0x02
    4ff2:	80 83       	st	Z, r24
	SPI_VidSendByte('p');
    4ff4:	80 e7       	ldi	r24, 0x70	; 112
    4ff6:	0e 94 45 0a 	call	0x148a	; 0x148a <SPI_VidSendByte>
	str[1] = SPI_U8RecieveByte();
    4ffa:	89 81       	ldd	r24, Y+1	; 0x01
    4ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ffe:	8c 01       	movw	r16, r24
    5000:	0f 5f       	subi	r16, 0xFF	; 255
    5002:	1f 4f       	sbci	r17, 0xFF	; 255
    5004:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <SPI_U8RecieveByte>
    5008:	f8 01       	movw	r30, r16
    500a:	80 83       	st	Z, r24
	SPI_VidSendByte('p');
    500c:	80 e7       	ldi	r24, 0x70	; 112
    500e:	0e 94 45 0a 	call	0x148a	; 0x148a <SPI_VidSendByte>
	str[2] = SPI_U8RecieveByte();
    5012:	89 81       	ldd	r24, Y+1	; 0x01
    5014:	9a 81       	ldd	r25, Y+2	; 0x02
    5016:	8c 01       	movw	r16, r24
    5018:	0e 5f       	subi	r16, 0xFE	; 254
    501a:	1f 4f       	sbci	r17, 0xFF	; 255
    501c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <SPI_U8RecieveByte>
    5020:	f8 01       	movw	r30, r16
    5022:	80 83       	st	Z, r24
	SPI_VidSendByte('X');
    5024:	88 e5       	ldi	r24, 0x58	; 88
    5026:	0e 94 45 0a 	call	0x148a	; 0x148a <SPI_VidSendByte>
	str[3] = SPI_U8RecieveByte();
    502a:	89 81       	ldd	r24, Y+1	; 0x01
    502c:	9a 81       	ldd	r25, Y+2	; 0x02
    502e:	8c 01       	movw	r16, r24
    5030:	0d 5f       	subi	r16, 0xFD	; 253
    5032:	1f 4f       	sbci	r17, 0xFF	; 255
    5034:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <SPI_U8RecieveByte>
    5038:	f8 01       	movw	r30, r16
    503a:	80 83       	st	Z, r24
	str[4] = '\0';
    503c:	89 81       	ldd	r24, Y+1	; 0x01
    503e:	9a 81       	ldd	r25, Y+2	; 0x02
    5040:	fc 01       	movw	r30, r24
    5042:	34 96       	adiw	r30, 0x04	; 4
    5044:	10 82       	st	Z, r1
}
    5046:	0f 90       	pop	r0
    5048:	0f 90       	pop	r0
    504a:	cf 91       	pop	r28
    504c:	df 91       	pop	r29
    504e:	1f 91       	pop	r17
    5050:	0f 91       	pop	r16
    5052:	08 95       	ret

00005054 <String_u8ToNumb>:
 * 
 * @param Str Pointer to the first element in the array
 * @return uint32_t Number after Converted to Real Numb
 */
uint32_t String_u8ToNumb(uint8_t *Str)
{
    5054:	df 93       	push	r29
    5056:	cf 93       	push	r28
    5058:	cd b7       	in	r28, 0x3d	; 61
    505a:	de b7       	in	r29, 0x3e	; 62
    505c:	27 97       	sbiw	r28, 0x07	; 7
    505e:	0f b6       	in	r0, 0x3f	; 63
    5060:	f8 94       	cli
    5062:	de bf       	out	0x3e, r29	; 62
    5064:	0f be       	out	0x3f, r0	; 63
    5066:	cd bf       	out	0x3d, r28	; 61
    5068:	9f 83       	std	Y+7, r25	; 0x07
    506a:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t i;
	uint32_t Result = 0;
    506c:	19 82       	std	Y+1, r1	; 0x01
    506e:	1a 82       	std	Y+2, r1	; 0x02
    5070:	1b 82       	std	Y+3, r1	; 0x03
    5072:	1c 82       	std	Y+4, r1	; 0x04
	for (i = 0; Str[i]; i++)
    5074:	1d 82       	std	Y+5, r1	; 0x05
    5076:	29 c0       	rjmp	.+82     	; 0x50ca <String_u8ToNumb+0x76>
	{
		Result = Result * 10 + Str[i] - '0';
    5078:	89 81       	ldd	r24, Y+1	; 0x01
    507a:	9a 81       	ldd	r25, Y+2	; 0x02
    507c:	ab 81       	ldd	r26, Y+3	; 0x03
    507e:	bc 81       	ldd	r27, Y+4	; 0x04
    5080:	2a e0       	ldi	r18, 0x0A	; 10
    5082:	30 e0       	ldi	r19, 0x00	; 0
    5084:	40 e0       	ldi	r20, 0x00	; 0
    5086:	50 e0       	ldi	r21, 0x00	; 0
    5088:	bc 01       	movw	r22, r24
    508a:	cd 01       	movw	r24, r26
    508c:	0e 94 63 29 	call	0x52c6	; 0x52c6 <__mulsi3>
    5090:	ab 01       	movw	r20, r22
    5092:	bc 01       	movw	r22, r24
    5094:	8d 81       	ldd	r24, Y+5	; 0x05
    5096:	28 2f       	mov	r18, r24
    5098:	30 e0       	ldi	r19, 0x00	; 0
    509a:	8e 81       	ldd	r24, Y+6	; 0x06
    509c:	9f 81       	ldd	r25, Y+7	; 0x07
    509e:	fc 01       	movw	r30, r24
    50a0:	e2 0f       	add	r30, r18
    50a2:	f3 1f       	adc	r31, r19
    50a4:	80 81       	ld	r24, Z
    50a6:	88 2f       	mov	r24, r24
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	a0 e0       	ldi	r26, 0x00	; 0
    50ac:	b0 e0       	ldi	r27, 0x00	; 0
    50ae:	84 0f       	add	r24, r20
    50b0:	95 1f       	adc	r25, r21
    50b2:	a6 1f       	adc	r26, r22
    50b4:	b7 1f       	adc	r27, r23
    50b6:	c0 97       	sbiw	r24, 0x30	; 48
    50b8:	a1 09       	sbc	r26, r1
    50ba:	b1 09       	sbc	r27, r1
    50bc:	89 83       	std	Y+1, r24	; 0x01
    50be:	9a 83       	std	Y+2, r25	; 0x02
    50c0:	ab 83       	std	Y+3, r26	; 0x03
    50c2:	bc 83       	std	Y+4, r27	; 0x04
 */
uint32_t String_u8ToNumb(uint8_t *Str)
{
	uint8_t i;
	uint32_t Result = 0;
	for (i = 0; Str[i]; i++)
    50c4:	8d 81       	ldd	r24, Y+5	; 0x05
    50c6:	8f 5f       	subi	r24, 0xFF	; 255
    50c8:	8d 83       	std	Y+5, r24	; 0x05
    50ca:	8d 81       	ldd	r24, Y+5	; 0x05
    50cc:	28 2f       	mov	r18, r24
    50ce:	30 e0       	ldi	r19, 0x00	; 0
    50d0:	8e 81       	ldd	r24, Y+6	; 0x06
    50d2:	9f 81       	ldd	r25, Y+7	; 0x07
    50d4:	fc 01       	movw	r30, r24
    50d6:	e2 0f       	add	r30, r18
    50d8:	f3 1f       	adc	r31, r19
    50da:	80 81       	ld	r24, Z
    50dc:	88 23       	and	r24, r24
    50de:	61 f6       	brne	.-104    	; 0x5078 <String_u8ToNumb+0x24>
	{
		Result = Result * 10 + Str[i] - '0';
	}
	return Result;
    50e0:	89 81       	ldd	r24, Y+1	; 0x01
    50e2:	9a 81       	ldd	r25, Y+2	; 0x02
    50e4:	ab 81       	ldd	r26, Y+3	; 0x03
    50e6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    50e8:	bc 01       	movw	r22, r24
    50ea:	cd 01       	movw	r24, r26
    50ec:	27 96       	adiw	r28, 0x07	; 7
    50ee:	0f b6       	in	r0, 0x3f	; 63
    50f0:	f8 94       	cli
    50f2:	de bf       	out	0x3e, r29	; 62
    50f4:	0f be       	out	0x3f, r0	; 63
    50f6:	cd bf       	out	0x3d, r28	; 61
    50f8:	cf 91       	pop	r28
    50fa:	df 91       	pop	r29
    50fc:	08 95       	ret

000050fe <main>:
uint8_t volatile gflag = 0;
extern volatile uint8_t CallBackFLag;
extern volatile uint8_t BUTTONFLag;

int main()
{
    50fe:	df 93       	push	r29
    5100:	cf 93       	push	r28
    5102:	cd b7       	in	r28, 0x3d	; 61
    5104:	de b7       	in	r29, 0x3e	; 62
    5106:	cc 54       	subi	r28, 0x4C	; 76
    5108:	d0 40       	sbci	r29, 0x00	; 0
    510a:	0f b6       	in	r0, 0x3f	; 63
    510c:	f8 94       	cli
    510e:	de bf       	out	0x3e, r29	; 62
    5110:	0f be       	out	0x3f, r0	; 63
    5112:	cd bf       	out	0x3d, r28	; 61
	uint8_t Data[55];
	uint8_t value = 0;
    5114:	1d 8a       	std	Y+21, r1	; 0x15
	uint8_t *Admin = (uint8_t *)"ADMIN";
    5116:	85 ea       	ldi	r24, 0xA5	; 165
    5118:	91 e0       	ldi	r25, 0x01	; 1
    511a:	9c 8b       	std	Y+20, r25	; 0x14
    511c:	8b 8b       	std	Y+19, r24	; 0x13
	uint8_t *User = (uint8_t *)"USER";
    511e:	8b ea       	ldi	r24, 0xAB	; 171
    5120:	91 e0       	ldi	r25, 0x01	; 1
    5122:	9a 8b       	std	Y+18, r25	; 0x12
    5124:	89 8b       	std	Y+17, r24	; 0x11

	APP_Init();
    5126:	0e 94 d7 20 	call	0x41ae	; 0x41ae <APP_Init>

	while (1)
	{
		value = ADC_ATM();
    512a:	0e 94 04 21 	call	0x4208	; 0x4208 <ADC_ATM>
    512e:	8d 8b       	std	Y+21, r24	; 0x15
		if (value == TEMP_MODE)
    5130:	8d 89       	ldd	r24, Y+21	; 0x15
    5132:	81 33       	cpi	r24, 0x31	; 49
    5134:	19 f4       	brne	.+6      	; 0x513c <main+0x3e>
		{
			TEMP();
    5136:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <TEMP>
    513a:	f7 cf       	rjmp	.-18     	; 0x512a <main+0x2c>
		}
		else if (value == ATM_MODE)
    513c:	8d 89       	ldd	r24, Y+21	; 0x15
    513e:	82 33       	cpi	r24, 0x32	; 50
    5140:	09 f0       	breq	.+2      	; 0x5144 <main+0x46>
    5142:	48 c0       	rjmp	.+144    	; 0x51d4 <main+0xd6>
		{
			SER_UARTvoidSendString((uint8_t *)"you want ADMIN or USER MODE: ");
    5144:	80 eb       	ldi	r24, 0xB0	; 176
    5146:	91 e0       	ldi	r25, 0x01	; 1
    5148:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
			SER_UARTvoidReceiveString(Data);
    514c:	ce 01       	movw	r24, r28
    514e:	46 96       	adiw	r24, 0x16	; 22
    5150:	0e 94 44 07 	call	0xe88	; 0xe88 <SER_UARTvoidReceiveString>

			/* Admin */
			if (String_u8Comp(Data, Admin) == STRING_EQUL)
    5154:	ce 01       	movw	r24, r28
    5156:	46 96       	adiw	r24, 0x16	; 22
    5158:	2b 89       	ldd	r18, Y+19	; 0x13
    515a:	3c 89       	ldd	r19, Y+20	; 0x14
    515c:	b9 01       	movw	r22, r18
    515e:	0e 94 91 27 	call	0x4f22	; 0x4f22 <String_u8Comp>
    5162:	88 23       	and	r24, r24
    5164:	59 f4       	brne	.+22     	; 0x517c <main+0x7e>
			{
				SPI_VidSendByte('f');
    5166:	86 e6       	ldi	r24, 0x66	; 102
    5168:	0e 94 45 0a 	call	0x148a	; 0x148a <SPI_VidSendByte>
				uint8_t B1 = SPI_U8RecieveByte();
    516c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <SPI_U8RecieveByte>
    5170:	88 8b       	std	Y+16, r24	; 0x10
				gflag = INVALID;
    5172:	10 92 5a 03 	sts	0x035A, r1

				ADMIN_Mode();
    5176:	0e 94 27 21 	call	0x424e	; 0x424e <ADMIN_Mode>
    517a:	d7 cf       	rjmp	.-82     	; 0x512a <main+0x2c>
			}
			else if (String_u8Comp(Data, User) == STRING_EQUL)
    517c:	ce 01       	movw	r24, r28
    517e:	46 96       	adiw	r24, 0x16	; 22
    5180:	29 89       	ldd	r18, Y+17	; 0x11
    5182:	3a 89       	ldd	r19, Y+18	; 0x12
    5184:	b9 01       	movw	r22, r18
    5186:	0e 94 91 27 	call	0x4f22	; 0x4f22 <String_u8Comp>
    518a:	88 23       	and	r24, r24
    518c:	f1 f4       	brne	.+60     	; 0x51ca <main+0xcc>
			{
				SPI_VidSendByte('f');
    518e:	86 e6       	ldi	r24, 0x66	; 102
    5190:	0e 94 45 0a 	call	0x148a	; 0x148a <SPI_VidSendByte>
				uint8_t B1 = SPI_U8RecieveByte();
    5194:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <SPI_U8RecieveByte>
    5198:	8f 87       	std	Y+15, r24	; 0x0f
				static uint8_t FlFag = 5;
				gflag = VALID;
    519a:	81 e0       	ldi	r24, 0x01	; 1
    519c:	80 93 5a 03 	sts	0x035A, r24

				SER_UARTvoidSendString((uint8_t *)"waiting for card to insert");
    51a0:	8e ec       	ldi	r24, 0xCE	; 206
    51a2:	91 e0       	ldi	r25, 0x01	; 1
    51a4:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
				while (BUTTONFLag != VALID)
    51a8:	80 91 58 03 	lds	r24, 0x0358
    51ac:	81 30       	cpi	r24, 0x01	; 1
    51ae:	e1 f7       	brne	.-8      	; 0x51a8 <main+0xaa>
					;

				if (CallBackFLag == VALID)
    51b0:	80 91 57 03 	lds	r24, 0x0357
    51b4:	81 30       	cpi	r24, 0x01	; 1
    51b6:	31 f4       	brne	.+12     	; 0x51c4 <main+0xc6>
				{
					SER_UARTvoidSendString("USERMODE");
    51b8:	89 ee       	ldi	r24, 0xE9	; 233
    51ba:	91 e0       	ldi	r25, 0x01	; 1
    51bc:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
					USER_Mode();
    51c0:	0e 94 9d 21 	call	0x433a	; 0x433a <USER_Mode>
				}
				BUTTONFLag = INVALID;
    51c4:	10 92 58 03 	sts	0x0358, r1
    51c8:	b0 cf       	rjmp	.-160    	; 0x512a <main+0x2c>
			}
			else
			{
				SER_UARTvoidSendString((uint8_t *)"Wrong Enter");
    51ca:	82 ef       	ldi	r24, 0xF2	; 242
    51cc:	91 e0       	ldi	r25, 0x01	; 1
    51ce:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
    51d2:	ab cf       	rjmp	.-170    	; 0x512a <main+0x2c>
			}
		}
		else
		{
			lcd_clear();
    51d4:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <lcd_clear>
			lcd_sendString((uint8_t *)"Wrong Enter");
    51d8:	82 ef       	ldi	r24, 0xF2	; 242
    51da:	91 e0       	ldi	r25, 0x01	; 1
    51dc:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <lcd_sendString>
    51e0:	80 e0       	ldi	r24, 0x00	; 0
    51e2:	90 e0       	ldi	r25, 0x00	; 0
    51e4:	aa e7       	ldi	r26, 0x7A	; 122
    51e6:	b4 e4       	ldi	r27, 0x44	; 68
    51e8:	8b 87       	std	Y+11, r24	; 0x0b
    51ea:	9c 87       	std	Y+12, r25	; 0x0c
    51ec:	ad 87       	std	Y+13, r26	; 0x0d
    51ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    51f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    51f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    51f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    51f8:	20 e0       	ldi	r18, 0x00	; 0
    51fa:	30 e0       	ldi	r19, 0x00	; 0
    51fc:	4a ef       	ldi	r20, 0xFA	; 250
    51fe:	54 e4       	ldi	r21, 0x44	; 68
    5200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5204:	dc 01       	movw	r26, r24
    5206:	cb 01       	movw	r24, r22
    5208:	8f 83       	std	Y+7, r24	; 0x07
    520a:	98 87       	std	Y+8, r25	; 0x08
    520c:	a9 87       	std	Y+9, r26	; 0x09
    520e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5210:	6f 81       	ldd	r22, Y+7	; 0x07
    5212:	78 85       	ldd	r23, Y+8	; 0x08
    5214:	89 85       	ldd	r24, Y+9	; 0x09
    5216:	9a 85       	ldd	r25, Y+10	; 0x0a
    5218:	20 e0       	ldi	r18, 0x00	; 0
    521a:	30 e0       	ldi	r19, 0x00	; 0
    521c:	40 e8       	ldi	r20, 0x80	; 128
    521e:	5f e3       	ldi	r21, 0x3F	; 63
    5220:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5224:	88 23       	and	r24, r24
    5226:	2c f4       	brge	.+10     	; 0x5232 <main+0x134>
		__ticks = 1;
    5228:	81 e0       	ldi	r24, 0x01	; 1
    522a:	90 e0       	ldi	r25, 0x00	; 0
    522c:	9e 83       	std	Y+6, r25	; 0x06
    522e:	8d 83       	std	Y+5, r24	; 0x05
    5230:	3f c0       	rjmp	.+126    	; 0x52b0 <main+0x1b2>
	else if (__tmp > 65535)
    5232:	6f 81       	ldd	r22, Y+7	; 0x07
    5234:	78 85       	ldd	r23, Y+8	; 0x08
    5236:	89 85       	ldd	r24, Y+9	; 0x09
    5238:	9a 85       	ldd	r25, Y+10	; 0x0a
    523a:	20 e0       	ldi	r18, 0x00	; 0
    523c:	3f ef       	ldi	r19, 0xFF	; 255
    523e:	4f e7       	ldi	r20, 0x7F	; 127
    5240:	57 e4       	ldi	r21, 0x47	; 71
    5242:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5246:	18 16       	cp	r1, r24
    5248:	4c f5       	brge	.+82     	; 0x529c <main+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    524a:	6b 85       	ldd	r22, Y+11	; 0x0b
    524c:	7c 85       	ldd	r23, Y+12	; 0x0c
    524e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5250:	9e 85       	ldd	r25, Y+14	; 0x0e
    5252:	20 e0       	ldi	r18, 0x00	; 0
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	40 e2       	ldi	r20, 0x20	; 32
    5258:	51 e4       	ldi	r21, 0x41	; 65
    525a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    525e:	dc 01       	movw	r26, r24
    5260:	cb 01       	movw	r24, r22
    5262:	bc 01       	movw	r22, r24
    5264:	cd 01       	movw	r24, r26
    5266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    526a:	dc 01       	movw	r26, r24
    526c:	cb 01       	movw	r24, r22
    526e:	9e 83       	std	Y+6, r25	; 0x06
    5270:	8d 83       	std	Y+5, r24	; 0x05
    5272:	0f c0       	rjmp	.+30     	; 0x5292 <main+0x194>
    5274:	88 ec       	ldi	r24, 0xC8	; 200
    5276:	90 e0       	ldi	r25, 0x00	; 0
    5278:	9c 83       	std	Y+4, r25	; 0x04
    527a:	8b 83       	std	Y+3, r24	; 0x03
    527c:	8b 81       	ldd	r24, Y+3	; 0x03
    527e:	9c 81       	ldd	r25, Y+4	; 0x04
    5280:	01 97       	sbiw	r24, 0x01	; 1
    5282:	f1 f7       	brne	.-4      	; 0x5280 <main+0x182>
    5284:	9c 83       	std	Y+4, r25	; 0x04
    5286:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5288:	8d 81       	ldd	r24, Y+5	; 0x05
    528a:	9e 81       	ldd	r25, Y+6	; 0x06
    528c:	01 97       	sbiw	r24, 0x01	; 1
    528e:	9e 83       	std	Y+6, r25	; 0x06
    5290:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5292:	8d 81       	ldd	r24, Y+5	; 0x05
    5294:	9e 81       	ldd	r25, Y+6	; 0x06
    5296:	00 97       	sbiw	r24, 0x00	; 0
    5298:	69 f7       	brne	.-38     	; 0x5274 <main+0x176>
    529a:	47 cf       	rjmp	.-370    	; 0x512a <main+0x2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    529c:	6f 81       	ldd	r22, Y+7	; 0x07
    529e:	78 85       	ldd	r23, Y+8	; 0x08
    52a0:	89 85       	ldd	r24, Y+9	; 0x09
    52a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    52a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52a8:	dc 01       	movw	r26, r24
    52aa:	cb 01       	movw	r24, r22
    52ac:	9e 83       	std	Y+6, r25	; 0x06
    52ae:	8d 83       	std	Y+5, r24	; 0x05
    52b0:	8d 81       	ldd	r24, Y+5	; 0x05
    52b2:	9e 81       	ldd	r25, Y+6	; 0x06
    52b4:	9a 83       	std	Y+2, r25	; 0x02
    52b6:	89 83       	std	Y+1, r24	; 0x01
    52b8:	89 81       	ldd	r24, Y+1	; 0x01
    52ba:	9a 81       	ldd	r25, Y+2	; 0x02
    52bc:	01 97       	sbiw	r24, 0x01	; 1
    52be:	f1 f7       	brne	.-4      	; 0x52bc <main+0x1be>
    52c0:	9a 83       	std	Y+2, r25	; 0x02
    52c2:	89 83       	std	Y+1, r24	; 0x01
    52c4:	32 cf       	rjmp	.-412    	; 0x512a <main+0x2c>

000052c6 <__mulsi3>:
    52c6:	62 9f       	mul	r22, r18
    52c8:	d0 01       	movw	r26, r0
    52ca:	73 9f       	mul	r23, r19
    52cc:	f0 01       	movw	r30, r0
    52ce:	82 9f       	mul	r24, r18
    52d0:	e0 0d       	add	r30, r0
    52d2:	f1 1d       	adc	r31, r1
    52d4:	64 9f       	mul	r22, r20
    52d6:	e0 0d       	add	r30, r0
    52d8:	f1 1d       	adc	r31, r1
    52da:	92 9f       	mul	r25, r18
    52dc:	f0 0d       	add	r31, r0
    52de:	83 9f       	mul	r24, r19
    52e0:	f0 0d       	add	r31, r0
    52e2:	74 9f       	mul	r23, r20
    52e4:	f0 0d       	add	r31, r0
    52e6:	65 9f       	mul	r22, r21
    52e8:	f0 0d       	add	r31, r0
    52ea:	99 27       	eor	r25, r25
    52ec:	72 9f       	mul	r23, r18
    52ee:	b0 0d       	add	r27, r0
    52f0:	e1 1d       	adc	r30, r1
    52f2:	f9 1f       	adc	r31, r25
    52f4:	63 9f       	mul	r22, r19
    52f6:	b0 0d       	add	r27, r0
    52f8:	e1 1d       	adc	r30, r1
    52fa:	f9 1f       	adc	r31, r25
    52fc:	bd 01       	movw	r22, r26
    52fe:	cf 01       	movw	r24, r30
    5300:	11 24       	eor	r1, r1
    5302:	08 95       	ret

00005304 <__udivmodhi4>:
    5304:	aa 1b       	sub	r26, r26
    5306:	bb 1b       	sub	r27, r27
    5308:	51 e1       	ldi	r21, 0x11	; 17
    530a:	07 c0       	rjmp	.+14     	; 0x531a <__udivmodhi4_ep>

0000530c <__udivmodhi4_loop>:
    530c:	aa 1f       	adc	r26, r26
    530e:	bb 1f       	adc	r27, r27
    5310:	a6 17       	cp	r26, r22
    5312:	b7 07       	cpc	r27, r23
    5314:	10 f0       	brcs	.+4      	; 0x531a <__udivmodhi4_ep>
    5316:	a6 1b       	sub	r26, r22
    5318:	b7 0b       	sbc	r27, r23

0000531a <__udivmodhi4_ep>:
    531a:	88 1f       	adc	r24, r24
    531c:	99 1f       	adc	r25, r25
    531e:	5a 95       	dec	r21
    5320:	a9 f7       	brne	.-22     	; 0x530c <__udivmodhi4_loop>
    5322:	80 95       	com	r24
    5324:	90 95       	com	r25
    5326:	bc 01       	movw	r22, r24
    5328:	cd 01       	movw	r24, r26
    532a:	08 95       	ret

0000532c <__udivmodsi4>:
    532c:	a1 e2       	ldi	r26, 0x21	; 33
    532e:	1a 2e       	mov	r1, r26
    5330:	aa 1b       	sub	r26, r26
    5332:	bb 1b       	sub	r27, r27
    5334:	fd 01       	movw	r30, r26
    5336:	0d c0       	rjmp	.+26     	; 0x5352 <__udivmodsi4_ep>

00005338 <__udivmodsi4_loop>:
    5338:	aa 1f       	adc	r26, r26
    533a:	bb 1f       	adc	r27, r27
    533c:	ee 1f       	adc	r30, r30
    533e:	ff 1f       	adc	r31, r31
    5340:	a2 17       	cp	r26, r18
    5342:	b3 07       	cpc	r27, r19
    5344:	e4 07       	cpc	r30, r20
    5346:	f5 07       	cpc	r31, r21
    5348:	20 f0       	brcs	.+8      	; 0x5352 <__udivmodsi4_ep>
    534a:	a2 1b       	sub	r26, r18
    534c:	b3 0b       	sbc	r27, r19
    534e:	e4 0b       	sbc	r30, r20
    5350:	f5 0b       	sbc	r31, r21

00005352 <__udivmodsi4_ep>:
    5352:	66 1f       	adc	r22, r22
    5354:	77 1f       	adc	r23, r23
    5356:	88 1f       	adc	r24, r24
    5358:	99 1f       	adc	r25, r25
    535a:	1a 94       	dec	r1
    535c:	69 f7       	brne	.-38     	; 0x5338 <__udivmodsi4_loop>
    535e:	60 95       	com	r22
    5360:	70 95       	com	r23
    5362:	80 95       	com	r24
    5364:	90 95       	com	r25
    5366:	9b 01       	movw	r18, r22
    5368:	ac 01       	movw	r20, r24
    536a:	bd 01       	movw	r22, r26
    536c:	cf 01       	movw	r24, r30
    536e:	08 95       	ret

00005370 <__prologue_saves__>:
    5370:	2f 92       	push	r2
    5372:	3f 92       	push	r3
    5374:	4f 92       	push	r4
    5376:	5f 92       	push	r5
    5378:	6f 92       	push	r6
    537a:	7f 92       	push	r7
    537c:	8f 92       	push	r8
    537e:	9f 92       	push	r9
    5380:	af 92       	push	r10
    5382:	bf 92       	push	r11
    5384:	cf 92       	push	r12
    5386:	df 92       	push	r13
    5388:	ef 92       	push	r14
    538a:	ff 92       	push	r15
    538c:	0f 93       	push	r16
    538e:	1f 93       	push	r17
    5390:	cf 93       	push	r28
    5392:	df 93       	push	r29
    5394:	cd b7       	in	r28, 0x3d	; 61
    5396:	de b7       	in	r29, 0x3e	; 62
    5398:	ca 1b       	sub	r28, r26
    539a:	db 0b       	sbc	r29, r27
    539c:	0f b6       	in	r0, 0x3f	; 63
    539e:	f8 94       	cli
    53a0:	de bf       	out	0x3e, r29	; 62
    53a2:	0f be       	out	0x3f, r0	; 63
    53a4:	cd bf       	out	0x3d, r28	; 61
    53a6:	09 94       	ijmp

000053a8 <__epilogue_restores__>:
    53a8:	2a 88       	ldd	r2, Y+18	; 0x12
    53aa:	39 88       	ldd	r3, Y+17	; 0x11
    53ac:	48 88       	ldd	r4, Y+16	; 0x10
    53ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    53b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    53b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    53b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    53b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    53b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    53ba:	b9 84       	ldd	r11, Y+9	; 0x09
    53bc:	c8 84       	ldd	r12, Y+8	; 0x08
    53be:	df 80       	ldd	r13, Y+7	; 0x07
    53c0:	ee 80       	ldd	r14, Y+6	; 0x06
    53c2:	fd 80       	ldd	r15, Y+5	; 0x05
    53c4:	0c 81       	ldd	r16, Y+4	; 0x04
    53c6:	1b 81       	ldd	r17, Y+3	; 0x03
    53c8:	aa 81       	ldd	r26, Y+2	; 0x02
    53ca:	b9 81       	ldd	r27, Y+1	; 0x01
    53cc:	ce 0f       	add	r28, r30
    53ce:	d1 1d       	adc	r29, r1
    53d0:	0f b6       	in	r0, 0x3f	; 63
    53d2:	f8 94       	cli
    53d4:	de bf       	out	0x3e, r29	; 62
    53d6:	0f be       	out	0x3f, r0	; 63
    53d8:	cd bf       	out	0x3d, r28	; 61
    53da:	ed 01       	movw	r28, r26
    53dc:	08 95       	ret

000053de <_exit>:
    53de:	f8 94       	cli

000053e0 <__stop_program>:
    53e0:	ff cf       	rjmp	.-2      	; 0x53e0 <__stop_program>
