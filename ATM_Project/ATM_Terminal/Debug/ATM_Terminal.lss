
ATM_Terminal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002ee  00800060  00005416  000054aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080034e  0080034e  00005798  2**0
                  ALLOC
  3 .stab         00005a0c  00000000  00000000  00005798  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000025fa  00000000  00000000  0000b1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000d79e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000d93e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000db30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000ff3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  000112c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00012498  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00012658  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001294e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000132bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7a 0d 	jmp	0x1af4	; 0x1af4 <__vector_1>
       8:	0c 94 ad 0d 	jmp	0x1b5a	; 0x1b5a <__vector_2>
       c:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 b8 09 	jmp	0x1370	; 0x1370 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	f4 e5       	ldi	r31, 0x54	; 84
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 34       	cpi	r26, 0x4E	; 78
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ae e4       	ldi	r26, 0x4E	; 78
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 35       	cpi	r26, 0x5D	; 93
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 28 	call	0x511a	; 0x511a <main>
      8a:	0c 94 09 2a 	jmp	0x5412	; 0x5412 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d2 29 	jmp	0x53a4	; 0x53a4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ef       	ldi	r26, 0xFE	; 254
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ee 29 	jmp	0x53dc	; 0x53dc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 de 29 	jmp	0x53bc	; 0x53bc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fa 29 	jmp	0x53f4	; 0x53f4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 de 29 	jmp	0x53bc	; 0x53bc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fa 29 	jmp	0x53f4	; 0x53f4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d2 29 	jmp	0x53a4	; 0x53a4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e ef       	ldi	r24, 0xFE	; 254
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ee 29 	jmp	0x53dc	; 0x53dc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 da 29 	jmp	0x53b4	; 0x53b4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e ef       	ldi	r22, 0xFE	; 254
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f6 29 	jmp	0x53ec	; 0x53ec <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 de 29 	jmp	0x53bc	; 0x53bc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 fa 29 	jmp	0x53f4	; 0x53f4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 de 29 	jmp	0x53bc	; 0x53bc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 fa 29 	jmp	0x53f4	; 0x53f4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 de 29 	jmp	0x53bc	; 0x53bc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 fa 29 	jmp	0x53f4	; 0x53f4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e2 29 	jmp	0x53c4	; 0x53c4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 fe 29 	jmp	0x53fc	; 0x53fc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 da 29 	jmp	0x53b4	; 0x53b4 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 f6 29 	jmp	0x53ec	; 0x53ec <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ea 5f       	subi	r30, 0xFA	; 250
     aca:	fd 4f       	sbci	r31, 0xFD	; 253
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <SER_UARTvoidSendString>:
 * @brief Send String
 * 
 * @param Str String is sending
 */
void SER_UARTvoidSendString(uint8_t *Str)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <SER_UARTvoidSendString+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9b 83       	std	Y+3, r25	; 0x03
     e3c:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i = 0;
     e3e:	19 82       	std	Y+1, r1	; 0x01
    for (i = 0; Str[i]; i++)
     e40:	19 82       	std	Y+1, r1	; 0x01
     e42:	0e c0       	rjmp	.+28     	; 0xe60 <SER_UARTvoidSendString+0x32>
    {
        UART_ENSendData(Str[i]);
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	9b 81       	ldd	r25, Y+3	; 0x03
     e4e:	fc 01       	movw	r30, r24
     e50:	e2 0f       	add	r30, r18
     e52:	f3 1f       	adc	r31, r19
     e54:	80 81       	ld	r24, Z
     e56:	0e 94 b5 08 	call	0x116a	; 0x116a <UART_ENSendData>
 * @param Str String is sending
 */
void SER_UARTvoidSendString(uint8_t *Str)
{
    uint8_t i = 0;
    for (i = 0; Str[i]; i++)
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
     e5e:	89 83       	std	Y+1, r24	; 0x01
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	9b 81       	ldd	r25, Y+3	; 0x03
     e6a:	fc 01       	movw	r30, r24
     e6c:	e2 0f       	add	r30, r18
     e6e:	f3 1f       	adc	r31, r19
     e70:	80 81       	ld	r24, Z
     e72:	88 23       	and	r24, r24
     e74:	39 f7       	brne	.-50     	; 0xe44 <SER_UARTvoidSendString+0x16>
    {
        UART_ENSendData(Str[i]);
    }
    UART_ENSendData('\r');
     e76:	8d e0       	ldi	r24, 0x0D	; 13
     e78:	0e 94 b5 08 	call	0x116a	; 0x116a <UART_ENSendData>
}
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <SER_UARTvoidReceiveString>:
 * @brief Recevie String
 * 
 * @param Str Store String in Str
 */
void SER_UARTvoidReceiveString(uint8_t *Str)
{
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	00 d0       	rcall	.+0      	; 0xe92 <SER_UARTvoidReceiveString+0xa>
     e92:	0f 92       	push	r0
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
     e98:	9b 83       	std	Y+3, r25	; 0x03
     e9a:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i = 0;
     e9c:	19 82       	std	Y+1, r1	; 0x01
    Str[i] = UART_u8ReceiveData();
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	9b 81       	ldd	r25, Y+3	; 0x03
     ea8:	8c 01       	movw	r16, r24
     eaa:	02 0f       	add	r16, r18
     eac:	13 1f       	adc	r17, r19
     eae:	0e 94 df 08 	call	0x11be	; 0x11be <UART_u8ReceiveData>
     eb2:	f8 01       	movw	r30, r16
     eb4:	80 83       	st	Z, r24
     eb6:	0f c0       	rjmp	.+30     	; 0xed6 <SER_UARTvoidReceiveString+0x4e>
    while (Str[i] != '\r')
    {
        i++;
     eb8:	89 81       	ldd	r24, Y+1	; 0x01
     eba:	8f 5f       	subi	r24, 0xFF	; 255
     ebc:	89 83       	std	Y+1, r24	; 0x01
        Str[i] = UART_u8ReceiveData();
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	9b 81       	ldd	r25, Y+3	; 0x03
     ec8:	8c 01       	movw	r16, r24
     eca:	02 0f       	add	r16, r18
     ecc:	13 1f       	adc	r17, r19
     ece:	0e 94 df 08 	call	0x11be	; 0x11be <UART_u8ReceiveData>
     ed2:	f8 01       	movw	r30, r16
     ed4:	80 83       	st	Z, r24
 */
void SER_UARTvoidReceiveString(uint8_t *Str)
{
    uint8_t i = 0;
    Str[i] = UART_u8ReceiveData();
    while (Str[i] != '\r')
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	8a 81       	ldd	r24, Y+2	; 0x02
     ede:	9b 81       	ldd	r25, Y+3	; 0x03
     ee0:	fc 01       	movw	r30, r24
     ee2:	e2 0f       	add	r30, r18
     ee4:	f3 1f       	adc	r31, r19
     ee6:	80 81       	ld	r24, Z
     ee8:	8d 30       	cpi	r24, 0x0D	; 13
     eea:	31 f7       	brne	.-52     	; 0xeb8 <SER_UARTvoidReceiveString+0x30>
    {
        i++;
        Str[i] = UART_u8ReceiveData();
    }
    /* replace to NULL */
    Str[i] = 0;
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	28 2f       	mov	r18, r24
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	9b 81       	ldd	r25, Y+3	; 0x03
     ef6:	fc 01       	movw	r30, r24
     ef8:	e2 0f       	add	r30, r18
     efa:	f3 1f       	adc	r31, r19
     efc:	10 82       	st	Z, r1
}
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	08 95       	ret

00000f0e <SER_UARTvoidReceiveStringNoBLOCKING>:
 * @brief Receive No Blocking 
 * 
 * @param Str Store String in Str
 */
void SER_UARTvoidReceiveStringNoBLOCKING(uint8_t *Str)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <SER_UARTvoidReceiveStringNoBLOCKING+0x6>
     f14:	00 d0       	rcall	.+0      	; 0xf16 <SER_UARTvoidReceiveStringNoBLOCKING+0x8>
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	9c 83       	std	Y+4, r25	; 0x04
     f1c:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t i = 0, Data = 0;
     f1e:	19 82       	std	Y+1, r1	; 0x01
     f20:	1a 82       	std	Y+2, r1	; 0x02
    do
    {
        if (UART_u8ReceiveNoBlock(&Data))
     f22:	ce 01       	movw	r24, r28
     f24:	02 96       	adiw	r24, 0x02	; 2
     f26:	0e 94 ee 08 	call	0x11dc	; 0x11dc <UART_u8ReceiveNoBlock>
     f2a:	88 23       	and	r24, r24
     f2c:	c1 f0       	breq	.+48     	; 0xf5e <SER_UARTvoidReceiveStringNoBLOCKING+0x50>
        {
            Str[i] = Data;
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	fc 01       	movw	r30, r24
     f3a:	e2 0f       	add	r30, r18
     f3c:	f3 1f       	adc	r31, r19
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	80 83       	st	Z, r24
            i++;
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	8f 5f       	subi	r24, 0xFF	; 255
     f46:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
            break;
        }
    } while (Str[i] - 1 != '\r');
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	fc 01       	movw	r30, r24
     f54:	e2 0f       	add	r30, r18
     f56:	f3 1f       	adc	r31, r19
     f58:	80 81       	ld	r24, Z
     f5a:	8e 30       	cpi	r24, 0x0E	; 14
     f5c:	11 f7       	brne	.-60     	; 0xf22 <SER_UARTvoidReceiveStringNoBLOCKING+0x14>

    /* replace to NULL */
    Str[i - 1] = '\0';
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	88 2f       	mov	r24, r24
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	9c 01       	movw	r18, r24
     f66:	21 50       	subi	r18, 0x01	; 1
     f68:	30 40       	sbci	r19, 0x00	; 0
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	fc 01       	movw	r30, r24
     f70:	e2 0f       	add	r30, r18
     f72:	f3 1f       	adc	r31, r19
     f74:	10 82       	st	Z, r1
}
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <SER_UARTvoidSendLongNum>:
 * @brief Send Number
 * 
 * @param Numb Number
 */
void SER_UARTvoidSendLongNum(uint32_t Numb)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	00 d0       	rcall	.+0      	; 0xf8a <SER_UARTvoidSendLongNum+0x6>
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <SER_UARTvoidSendLongNum+0x8>
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	69 83       	std	Y+1, r22	; 0x01
     f92:	7a 83       	std	Y+2, r23	; 0x02
     f94:	8b 83       	std	Y+3, r24	; 0x03
     f96:	9c 83       	std	Y+4, r25	; 0x04
    UART_ENSendData((uint8_t)(Numb & 0x000000FF));
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	0e 94 b5 08 	call	0x116a	; 0x116a <UART_ENSendData>
    UART_ENSendData((uint8_t)((Numb >> 8) & 0x000000FF));
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	9a 81       	ldd	r25, Y+2	; 0x02
     fa2:	ab 81       	ldd	r26, Y+3	; 0x03
     fa4:	bc 81       	ldd	r27, Y+4	; 0x04
     fa6:	89 2f       	mov	r24, r25
     fa8:	9a 2f       	mov	r25, r26
     faa:	ab 2f       	mov	r26, r27
     fac:	bb 27       	eor	r27, r27
     fae:	0e 94 b5 08 	call	0x116a	; 0x116a <UART_ENSendData>
    UART_ENSendData((uint8_t)((Numb >> 16) & 0x000000FF));
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	ab 81       	ldd	r26, Y+3	; 0x03
     fb8:	bc 81       	ldd	r27, Y+4	; 0x04
     fba:	cd 01       	movw	r24, r26
     fbc:	aa 27       	eor	r26, r26
     fbe:	bb 27       	eor	r27, r27
     fc0:	0e 94 b5 08 	call	0x116a	; 0x116a <UART_ENSendData>
    UART_ENSendData((uint8_t)((Numb >> 24) & 0x000000FF));
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	ab 81       	ldd	r26, Y+3	; 0x03
     fca:	bc 81       	ldd	r27, Y+4	; 0x04
     fcc:	8b 2f       	mov	r24, r27
     fce:	99 27       	eor	r25, r25
     fd0:	aa 27       	eor	r26, r26
     fd2:	bb 27       	eor	r27, r27
     fd4:	0e 94 b5 08 	call	0x116a	; 0x116a <UART_ENSendData>
}
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <SER_UARTu32ReceiveLongNum>:
 * @brief Receive Number
 * 
 * @return Number
 */
uint32_t SER_UARTu32ReceiveLongNum(void)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	28 97       	sbiw	r28, 0x08	; 8
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
    /* Receive 32Bit divide on 4 Times */
    uint8_t B1 = UART_u8ReceiveData();
     ffa:	0e 94 df 08 	call	0x11be	; 0x11be <UART_u8ReceiveData>
     ffe:	88 87       	std	Y+8, r24	; 0x08
    uint8_t B2 = UART_u8ReceiveData();
    1000:	0e 94 df 08 	call	0x11be	; 0x11be <UART_u8ReceiveData>
    1004:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t B3 = UART_u8ReceiveData();
    1006:	0e 94 df 08 	call	0x11be	; 0x11be <UART_u8ReceiveData>
    100a:	8e 83       	std	Y+6, r24	; 0x06
    uint8_t B4 = UART_u8ReceiveData();
    100c:	0e 94 df 08 	call	0x11be	; 0x11be <UART_u8ReceiveData>
    1010:	8d 83       	std	Y+5, r24	; 0x05

    /*  */
    uint32_t u32_Numb = B1 | ((uint32_t)B2 << 8) | ((uint32_t)B3 << 16) | ((uint32_t)B4 << 24);
    1012:	88 85       	ldd	r24, Y+8	; 0x08
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	40 e0       	ldi	r20, 0x00	; 0
    101a:	50 e0       	ldi	r21, 0x00	; 0
    101c:	8f 81       	ldd	r24, Y+7	; 0x07
    101e:	88 2f       	mov	r24, r24
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	a0 e0       	ldi	r26, 0x00	; 0
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ba 2f       	mov	r27, r26
    1028:	a9 2f       	mov	r26, r25
    102a:	98 2f       	mov	r25, r24
    102c:	88 27       	eor	r24, r24
    102e:	28 2b       	or	r18, r24
    1030:	39 2b       	or	r19, r25
    1032:	4a 2b       	or	r20, r26
    1034:	5b 2b       	or	r21, r27
    1036:	8e 81       	ldd	r24, Y+6	; 0x06
    1038:	88 2f       	mov	r24, r24
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	a0 e0       	ldi	r26, 0x00	; 0
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	dc 01       	movw	r26, r24
    1042:	99 27       	eor	r25, r25
    1044:	88 27       	eor	r24, r24
    1046:	28 2b       	or	r18, r24
    1048:	39 2b       	or	r19, r25
    104a:	4a 2b       	or	r20, r26
    104c:	5b 2b       	or	r21, r27
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a0 e0       	ldi	r26, 0x00	; 0
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	b8 2f       	mov	r27, r24
    105a:	aa 27       	eor	r26, r26
    105c:	99 27       	eor	r25, r25
    105e:	88 27       	eor	r24, r24
    1060:	82 2b       	or	r24, r18
    1062:	93 2b       	or	r25, r19
    1064:	a4 2b       	or	r26, r20
    1066:	b5 2b       	or	r27, r21
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	9a 83       	std	Y+2, r25	; 0x02
    106c:	ab 83       	std	Y+3, r26	; 0x03
    106e:	bc 83       	std	Y+4, r27	; 0x04

    return u32_Numb;
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	9a 81       	ldd	r25, Y+2	; 0x02
    1074:	ab 81       	ldd	r26, Y+3	; 0x03
    1076:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1078:	bc 01       	movw	r22, r24
    107a:	cd 01       	movw	r24, r26
    107c:	28 96       	adiw	r28, 0x08	; 8
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	f8 94       	cli
    1082:	de bf       	out	0x3e, r29	; 62
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	cd bf       	out	0x3d, r28	; 61
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <UART_ENInit>:
 * @brief Initialized UART 
 * 
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENInit(void)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	0f 92       	push	r0
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    EN_ERRORSTATE_t Enstate;
    Enstate = E_OK;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	89 83       	std	Y+1, r24	; 0x01
    /* Clear  URSEL to update UBRRH*/
    CLRBIT(UCSRC, URSEL);
    109c:	a0 e4       	ldi	r26, 0x40	; 64
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e0 e4       	ldi	r30, 0x40	; 64
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	8f 77       	andi	r24, 0x7F	; 127
    10a8:	8c 93       	st	X, r24
    /* Boud Rate */
    UBRRH = HIGHUBRR;
    10aa:	e0 e4       	ldi	r30, 0x40	; 64
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	10 82       	st	Z, r1
    UBRRL = LOWUBRR;
    10b0:	e9 e2       	ldi	r30, 0x29	; 41
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	83 e3       	ldi	r24, 0x33	; 51
    10b6:	80 83       	st	Z, r24
#if UART_SPEED == DOUBLE
    SETBIT(UCSRA, U2X);

/* UART NORMAL Speed */
#elif UART_SPEED == NORMAL
    CLRBIT(UCSRA, U2X);
    10b8:	ab e2       	ldi	r26, 0x2B	; 43
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	eb e2       	ldi	r30, 0x2B	; 43
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	8d 7f       	andi	r24, 0xFD	; 253
    10c4:	8c 93       	st	X, r24
#endif

/* Select STOP Bit */
#if STOPBIT == _1BIT
    /* Set URSEL to update UCSRC*/
    SETBIT(UCSRC, URSEL);
    10c6:	a0 e4       	ldi	r26, 0x40	; 64
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e0 e4       	ldi	r30, 0x40	; 64
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	80 68       	ori	r24, 0x80	; 128
    10d2:	8c 93       	st	X, r24
    CLRBIT(UCSRC, USBS);
    10d4:	a0 e4       	ldi	r26, 0x40	; 64
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e0 e4       	ldi	r30, 0x40	; 64
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	87 7f       	andi	r24, 0xF7	; 247
    10e0:	8c 93       	st	X, r24

/* Disable Parity */
#if UART_PARITY == DISABLED

    /* Set URSEL to update UCSRC*/
    SETBIT(UCSRC, URSEL);
    10e2:	a0 e4       	ldi	r26, 0x40	; 64
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e0 e4       	ldi	r30, 0x40	; 64
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	80 68       	ori	r24, 0x80	; 128
    10ee:	8c 93       	st	X, r24

    CLRBIT(UCSRC, UPM0);
    10f0:	a0 e4       	ldi	r26, 0x40	; 64
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e0 e4       	ldi	r30, 0x40	; 64
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	8f 7e       	andi	r24, 0xEF	; 239
    10fc:	8c 93       	st	X, r24
    CLRBIT(UCSRC, UPM1);
    10fe:	a0 e4       	ldi	r26, 0x40	; 64
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e0 e4       	ldi	r30, 0x40	; 64
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	8f 7d       	andi	r24, 0xDF	; 223
    110a:	8c 93       	st	X, r24
    CLRBIT(UCSRC, UCSZ0);
    SETBIT(UCSRC, UCSZ1);
    CLRBIT(UCSRB, UCSZ2);
#elif DATAFRAM == _8BIT
    /* Set URSEL to update UCSRC*/
    SETBIT(UCSRC, URSEL);
    110c:	a0 e4       	ldi	r26, 0x40	; 64
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e0 e4       	ldi	r30, 0x40	; 64
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	80 68       	ori	r24, 0x80	; 128
    1118:	8c 93       	st	X, r24
    SETBIT(UCSRC, UCSZ0);
    111a:	a0 e4       	ldi	r26, 0x40	; 64
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e0 e4       	ldi	r30, 0x40	; 64
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	82 60       	ori	r24, 0x02	; 2
    1126:	8c 93       	st	X, r24
    SETBIT(UCSRC, UCSZ1);
    1128:	a0 e4       	ldi	r26, 0x40	; 64
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e0 e4       	ldi	r30, 0x40	; 64
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	84 60       	ori	r24, 0x04	; 4
    1134:	8c 93       	st	X, r24
    CLRBIT(UCSRB, UCSZ2);
    1136:	aa e2       	ldi	r26, 0x2A	; 42
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	ea e2       	ldi	r30, 0x2A	; 42
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	8b 7f       	andi	r24, 0xFB	; 251
    1142:	8c 93       	st	X, r24

    /**
     * @brief Receiver Enable
     * 
     */
    SETBIT(UCSRB, RXEN);
    1144:	aa e2       	ldi	r26, 0x2A	; 42
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	ea e2       	ldi	r30, 0x2A	; 42
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	80 61       	ori	r24, 0x10	; 16
    1150:	8c 93       	st	X, r24
    /**
     * @brief Transmitter Enable
     * 
     */
    SETBIT(UCSRB, TXEN);
    1152:	aa e2       	ldi	r26, 0x2A	; 42
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	ea e2       	ldi	r30, 0x2A	; 42
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	88 60       	ori	r24, 0x08	; 8
    115e:	8c 93       	st	X, r24

    return Enstate;
    1160:	89 81       	ldd	r24, Y+1	; 0x01
} /* UART_ENInit */
    1162:	0f 90       	pop	r0
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <UART_ENSendData>:
 * 
 * @param Data char want to send
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENSendData(uint8_t Data)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	0f 92       	push	r0
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	89 83       	std	Y+1, r24	; 0x01
    /* Wait to Data Register Empty */
    while (!GETBIT(UCSRA, UDRE))
    1176:	eb e2       	ldi	r30, 0x2B	; 43
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	82 95       	swap	r24
    117e:	86 95       	lsr	r24
    1180:	87 70       	andi	r24, 0x07	; 7
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	81 70       	andi	r24, 0x01	; 1
    1188:	90 70       	andi	r25, 0x00	; 0
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	a1 f3       	breq	.-24     	; 0x1176 <UART_ENSendData+0xc>
        ;

    UDR = Data;
    118e:	ec e2       	ldi	r30, 0x2C	; 44
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	80 83       	st	Z, r24
    return E_OK;
    1196:	81 e0       	ldi	r24, 0x01	; 1
}
    1198:	0f 90       	pop	r0
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <UART_ENSendNoBlock>:
 * 
 * @param Data char want to send
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENSendNoBlock(uint8_t Data)
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	0f 92       	push	r0
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	89 83       	std	Y+1, r24	; 0x01
    UDR = Data;
    11ac:	ec e2       	ldi	r30, 0x2C	; 44
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	80 83       	st	Z, r24
    return E_OK;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
}
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <UART_u8ReceiveData>:
 * @brief Receive Data From another device
 * 
 * @return uint8_t Data From Register
 */
uint8_t UART_u8ReceiveData(void)
{
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    while (!GETBIT(UCSRA, RXC))
    11c6:	eb e2       	ldi	r30, 0x2B	; 43
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	88 23       	and	r24, r24
    11ce:	dc f7       	brge	.-10     	; 0x11c6 <UART_u8ReceiveData+0x8>
        ;
    return UDR;
    11d0:	ec e2       	ldi	r30, 0x2C	; 44
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
}
    11d6:	cf 91       	pop	r28
    11d8:	df 91       	pop	r29
    11da:	08 95       	ret

000011dc <UART_u8ReceiveNoBlock>:
 * 
 * @param Data 
 * @return uint8_t Data From Register
 */
uint8_t UART_u8ReceiveNoBlock(uint8_t *Data)
{
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <UART_u8ReceiveNoBlock+0x6>
    11e2:	0f 92       	push	r0
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	9b 83       	std	Y+3, r25	; 0x03
    11ea:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t status = 0;
    11ec:	19 82       	std	Y+1, r1	; 0x01
    if (GETBIT(UCSRA, RXC))
    11ee:	eb e2       	ldi	r30, 0x2B	; 43
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	88 23       	and	r24, r24
    11f6:	44 f4       	brge	.+16     	; 0x1208 <UART_u8ReceiveNoBlock+0x2c>
    {
        *Data = UDR;
    11f8:	ec e2       	ldi	r30, 0x2C	; 44
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1200:	fb 81       	ldd	r31, Y+3	; 0x03
    1202:	80 83       	st	Z, r24
        status = 1;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        /* do nothing */
    }
    return status;
    1208:	89 81       	ldd	r24, Y+1	; 0x01
}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <UART_voidTXInterruptEnable>:
/**
 * @brief Enable Transmit Interrupt
 * 
 */
void UART_voidTXInterruptEnable(void)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    SETBIT(UCSRB, TXCIE);
    121e:	aa e2       	ldi	r26, 0x2A	; 42
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	ea e2       	ldi	r30, 0x2A	; 42
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	80 81       	ld	r24, Z
    1228:	80 64       	ori	r24, 0x40	; 64
    122a:	8c 93       	st	X, r24
    SETBIT(SREG, I_BIT);
    122c:	af e5       	ldi	r26, 0x5F	; 95
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	ef e5       	ldi	r30, 0x5F	; 95
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	80 68       	ori	r24, 0x80	; 128
    1238:	8c 93       	st	X, r24
}
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <UART_voidRXInterruptEnable>:
/**
 * @brief Enable Receive Interrupt
 * 
 */
void UART_voidRXInterruptEnable(void)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    SETBIT(UCSRB, RXCIE);
    1248:	aa e2       	ldi	r26, 0x2A	; 42
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ea e2       	ldi	r30, 0x2A	; 42
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 68       	ori	r24, 0x80	; 128
    1254:	8c 93       	st	X, r24
    SETBIT(SREG, I_BIT);
    1256:	af e5       	ldi	r26, 0x5F	; 95
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	ef e5       	ldi	r30, 0x5F	; 95
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	80 68       	ori	r24, 0x80	; 128
    1262:	8c 93       	st	X, r24
}
    1264:	cf 91       	pop	r28
    1266:	df 91       	pop	r29
    1268:	08 95       	ret

0000126a <UART_voidSendString_Ashync>:
 * @brief Asynchronous Function Send 
 * 
 * @param str Data to send
 */
void UART_voidSendString_Ashync(uint8_t *str)
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	00 d0       	rcall	.+0      	; 0x1270 <UART_voidSendString_Ashync+0x6>
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	9a 83       	std	Y+2, r25	; 0x02
    1276:	89 83       	std	Y+1, r24	; 0x01
    /* Flag using For Protection if call function before string is end */
    if (gFlag == 1)
    1278:	80 91 06 03 	lds	r24, 0x0306
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	79 f4       	brne	.+30     	; 0x129e <UART_voidSendString_Ashync+0x34>
    {
        /* Send First Letter we bsend b2y fy ISR*/
        UART_ENSendNoBlock(str[0]);
    1280:	e9 81       	ldd	r30, Y+1	; 0x01
    1282:	fa 81       	ldd	r31, Y+2	; 0x02
    1284:	80 81       	ld	r24, Z
    1286:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <UART_ENSendNoBlock>

        /* Flag will Fired when data is Sent Then go to isr */
        UART_voidTXInterruptEnable();
    128a:	0e 94 0b 09 	call	0x1216	; 0x1216 <UART_voidTXInterruptEnable>
        gPsend_str = str;
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	9a 81       	ldd	r25, Y+2	; 0x02
    1292:	90 93 4f 03 	sts	0x034F, r25
    1296:	80 93 4e 03 	sts	0x034E, r24
        gFlag = 0;
    129a:	10 92 06 03 	sts	0x0306, r1
    }
}
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <UART_voidReceiveString_Ashync>:
 * @brief Asynchronous Function Receive 
 * 
 * @param Str Data to Receive
 */
void UART_voidReceiveString_Ashync(uint8_t *Str)
{
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	00 d0       	rcall	.+0      	; 0x12ae <UART_voidReceiveString_Ashync+0x6>
    12ae:	cd b7       	in	r28, 0x3d	; 61
    12b0:	de b7       	in	r29, 0x3e	; 62
    12b2:	9a 83       	std	Y+2, r25	; 0x02
    12b4:	89 83       	std	Y+1, r24	; 0x01
    UART_voidRXInterruptEnable();
    12b6:	0e 94 20 09 	call	0x1240	; 0x1240 <UART_voidRXInterruptEnable>
    gPrece_str = Str;
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	9a 81       	ldd	r25, Y+2	; 0x02
    12be:	90 93 51 03 	sts	0x0351, r25
    12c2:	80 93 50 03 	sts	0x0350, r24
}
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <__vector_15>:
/**
 * @brief Transmit interrupt 
 * 
 */
void __vector_15(void)
{
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	11 24       	eor	r1, r1
    12da:	2f 93       	push	r18
    12dc:	3f 93       	push	r19
    12de:	4f 93       	push	r20
    12e0:	5f 93       	push	r21
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    /* Start with Second Letter */
    /* First Letter is sent in Function Ashync */
    static uint8_t i = 1;

    if (gPsend_str[i] != '\0')
    12fa:	20 91 4e 03 	lds	r18, 0x034E
    12fe:	30 91 4f 03 	lds	r19, 0x034F
    1302:	80 91 07 03 	lds	r24, 0x0307
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	f9 01       	movw	r30, r18
    130c:	e8 0f       	add	r30, r24
    130e:	f9 1f       	adc	r31, r25
    1310:	80 81       	ld	r24, Z
    1312:	88 23       	and	r24, r24
    1314:	a1 f0       	breq	.+40     	; 0x133e <__vector_15+0x6e>
    {
        UART_ENSendNoBlock(gPsend_str[i]);
    1316:	20 91 4e 03 	lds	r18, 0x034E
    131a:	30 91 4f 03 	lds	r19, 0x034F
    131e:	80 91 07 03 	lds	r24, 0x0307
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	f9 01       	movw	r30, r18
    1328:	e8 0f       	add	r30, r24
    132a:	f9 1f       	adc	r31, r25
    132c:	80 81       	ld	r24, Z
    132e:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <UART_ENSendNoBlock>
        i++;
    1332:	80 91 07 03 	lds	r24, 0x0307
    1336:	8f 5f       	subi	r24, 0xFF	; 255
    1338:	80 93 07 03 	sts	0x0307, r24
    133c:	06 c0       	rjmp	.+12     	; 0x134a <__vector_15+0x7a>
    }
    /* String is End So start with Second Letter */
    else
    {
        i = 1;
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	80 93 07 03 	sts	0x0307, r24
        gFlag = 1;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	80 93 06 03 	sts	0x0306, r24
    }
}
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	ff 91       	pop	r31
    1350:	ef 91       	pop	r30
    1352:	bf 91       	pop	r27
    1354:	af 91       	pop	r26
    1356:	9f 91       	pop	r25
    1358:	8f 91       	pop	r24
    135a:	7f 91       	pop	r23
    135c:	6f 91       	pop	r22
    135e:	5f 91       	pop	r21
    1360:	4f 91       	pop	r20
    1362:	3f 91       	pop	r19
    1364:	2f 91       	pop	r18
    1366:	0f 90       	pop	r0
    1368:	0f be       	out	0x3f, r0	; 63
    136a:	0f 90       	pop	r0
    136c:	1f 90       	pop	r1
    136e:	18 95       	reti

00001370 <__vector_13>:
/**
 * @brief Receive interrupt
 * 
 */
void __vector_13(void)
{
    1370:	1f 92       	push	r1
    1372:	0f 92       	push	r0
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	0f 92       	push	r0
    1378:	11 24       	eor	r1, r1
    137a:	2f 93       	push	r18
    137c:	3f 93       	push	r19
    137e:	4f 93       	push	r20
    1380:	5f 93       	push	r21
    1382:	6f 93       	push	r22
    1384:	7f 93       	push	r23
    1386:	8f 93       	push	r24
    1388:	9f 93       	push	r25
    138a:	af 93       	push	r26
    138c:	bf 93       	push	r27
    138e:	ef 93       	push	r30
    1390:	ff 93       	push	r31
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	cd b7       	in	r28, 0x3d	; 61
    1398:	de b7       	in	r29, 0x3e	; 62
    static uint8_t i = 0;
    if (UART_u8ReceiveNoBlock(gPrece_str[i]))
    139a:	20 91 50 03 	lds	r18, 0x0350
    139e:	30 91 51 03 	lds	r19, 0x0351
    13a2:	80 91 52 03 	lds	r24, 0x0352
    13a6:	88 2f       	mov	r24, r24
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	f9 01       	movw	r30, r18
    13ac:	e8 0f       	add	r30, r24
    13ae:	f9 1f       	adc	r31, r25
    13b0:	80 81       	ld	r24, Z
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 ee 08 	call	0x11dc	; 0x11dc <UART_u8ReceiveNoBlock>
    13ba:	88 23       	and	r24, r24
    13bc:	29 f0       	breq	.+10     	; 0x13c8 <__vector_13+0x58>
    {
        i++;
    13be:	80 91 52 03 	lds	r24, 0x0352
    13c2:	8f 5f       	subi	r24, 0xFF	; 255
    13c4:	80 93 52 03 	sts	0x0352, r24
    }
    if (i > 98)
    13c8:	80 91 52 03 	lds	r24, 0x0352
    13cc:	83 36       	cpi	r24, 0x63	; 99
    13ce:	10 f0       	brcs	.+4      	; 0x13d4 <__vector_13+0x64>
        i = 0;
    13d0:	10 92 52 03 	sts	0x0352, r1
}
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	ff 91       	pop	r31
    13da:	ef 91       	pop	r30
    13dc:	bf 91       	pop	r27
    13de:	af 91       	pop	r26
    13e0:	9f 91       	pop	r25
    13e2:	8f 91       	pop	r24
    13e4:	7f 91       	pop	r23
    13e6:	6f 91       	pop	r22
    13e8:	5f 91       	pop	r21
    13ea:	4f 91       	pop	r20
    13ec:	3f 91       	pop	r19
    13ee:	2f 91       	pop	r18
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	0f 90       	pop	r0
    13f6:	1f 90       	pop	r1
    13f8:	18 95       	reti

000013fa <SPI_VidInitMaster>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void SPI_VidInitMaster(void) 
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	cd b7       	in	r28, 0x3d	; 61
    1400:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	DDRB = DDRB | (1<<PB4);
    1402:	a7 e3       	ldi	r26, 0x37	; 55
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e7 e3       	ldi	r30, 0x37	; 55
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	80 61       	ori	r24, 0x10	; 16
    140e:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB5);
    1410:	a7 e3       	ldi	r26, 0x37	; 55
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e7 e3       	ldi	r30, 0x37	; 55
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	80 62       	ori	r24, 0x20	; 32
    141c:	8c 93       	st	X, r24
	DDRB = DDRB & ~(1<<PB6);
    141e:	a7 e3       	ldi	r26, 0x37	; 55
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e7 e3       	ldi	r30, 0x37	; 55
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	8f 7b       	andi	r24, 0xBF	; 191
    142a:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB7);
    142c:	a7 e3       	ldi	r26, 0x37	; 55
    142e:	b0 e0       	ldi	r27, 0x00	; 0
    1430:	e7 e3       	ldi	r30, 0x37	; 55
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	80 68       	ori	r24, 0x80	; 128
    1438:	8c 93       	st	X, r24
	
	SPCR = (1<<SPE) | (1<<MSTR); // enable SPI + enable Master + choose SPI clock = Fosc/4
    143a:	ed e2       	ldi	r30, 0x2D	; 45
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 e5       	ldi	r24, 0x50	; 80
    1440:	80 83       	st	Z, r24
}
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <SPI_VidInitSlave>:

void SPI_VidInitSlave(void)
{ 
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	DDRB = DDRB & (~(1<<PB4));  
    1450:	a7 e3       	ldi	r26, 0x37	; 55
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e7 e3       	ldi	r30, 0x37	; 55
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	8f 7e       	andi	r24, 0xEF	; 239
    145c:	8c 93       	st	X, r24
	DDRB = DDRB & (~(1<<PB5));
    145e:	a7 e3       	ldi	r26, 0x37	; 55
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e7 e3       	ldi	r30, 0x37	; 55
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	8f 7d       	andi	r24, 0xDF	; 223
    146a:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB6);
    146c:	a7 e3       	ldi	r26, 0x37	; 55
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	e7 e3       	ldi	r30, 0x37	; 55
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 81       	ld	r24, Z
    1476:	80 64       	ori	r24, 0x40	; 64
    1478:	8c 93       	st	X, r24
	DDRB = DDRB & (~(1<<PB7));
    147a:	a7 e3       	ldi	r26, 0x37	; 55
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e7 e3       	ldi	r30, 0x37	; 55
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8f 77       	andi	r24, 0x7F	; 127
    1486:	8c 93       	st	X, r24
	SPCR = (1<<SPE); // just enable SPI + choose SPI clock = Fosc/4
    1488:	ed e2       	ldi	r30, 0x2D	; 45
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 e4       	ldi	r24, 0x40	; 64
    148e:	80 83       	st	Z, r24
}
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <SPI_VidSendByte>:

void SPI_VidSendByte(const uint8_t copy_U8Data) 
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	0f 92       	push	r0
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	89 83       	std	Y+1, r24	; 0x01
	SPDR = copy_U8Data; //send data by SPI
    14a2:	ef e2       	ldi	r30, 0x2F	; 47
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	80 83       	st	Z, r24
	while (!((SPSR) & (1 << SPIF))); //wait until SPI interrupt flag=1 (data is sent correctly)
    14aa:	ee e2       	ldi	r30, 0x2E	; 46
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	88 23       	and	r24, r24
    14b2:	dc f7       	brge	.-10     	; 0x14aa <SPI_VidSendByte+0x14>
}
    14b4:	0f 90       	pop	r0
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <SPI_U8RecieveByte>:

uint8_t SPI_U8RecieveByte(void)
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	cd b7       	in	r28, 0x3d	; 61
    14c2:	de b7       	in	r29, 0x3e	; 62
    while (!(GETBIT(SPSR, SPIF)));  //wait until SPI interrupt flag=1(data is receive correctly)
    14c4:	ee e2       	ldi	r30, 0x2E	; 46
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	88 23       	and	r24, r24
    14cc:	dc f7       	brge	.-10     	; 0x14c4 <SPI_U8RecieveByte+0x8>
   return SPDR; //return the received byte from SPI data register
    14ce:	ef e2       	ldi	r30, 0x2F	; 47
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
}
    14d4:	cf 91       	pop	r28
    14d6:	df 91       	pop	r29
    14d8:	08 95       	ret

000014da <SPI_VidSendString>:

void SPI_VidSendString(const uint8_t *copy_str)
{
    14da:	df 93       	push	r29
    14dc:	cf 93       	push	r28
    14de:	00 d0       	rcall	.+0      	; 0x14e0 <SPI_VidSendString+0x6>
    14e0:	0f 92       	push	r0
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
    14e6:	9b 83       	std	Y+3, r25	; 0x03
    14e8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    14ea:	19 82       	std	Y+1, r1	; 0x01
    14ec:	0e c0       	rjmp	.+28     	; 0x150a <SPI_VidSendString+0x30>
	while(copy_str[i] != '\0')
	{
		SPI_VidSendByte(copy_str[i]);
    14ee:	89 81       	ldd	r24, Y+1	; 0x01
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	9b 81       	ldd	r25, Y+3	; 0x03
    14f8:	fc 01       	movw	r30, r24
    14fa:	e2 0f       	add	r30, r18
    14fc:	f3 1f       	adc	r31, r19
    14fe:	80 81       	ld	r24, Z
    1500:	0e 94 4b 0a 	call	0x1496	; 0x1496 <SPI_VidSendByte>
		i++;
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	8f 5f       	subi	r24, 0xFF	; 255
    1508:	89 83       	std	Y+1, r24	; 0x01
}

void SPI_VidSendString(const uint8_t *copy_str)
{
	uint8_t i = 0;
	while(copy_str[i] != '\0')
    150a:	89 81       	ldd	r24, Y+1	; 0x01
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	9b 81       	ldd	r25, Y+3	; 0x03
    1514:	fc 01       	movw	r30, r24
    1516:	e2 0f       	add	r30, r18
    1518:	f3 1f       	adc	r31, r19
    151a:	80 81       	ld	r24, Z
    151c:	88 23       	and	r24, r24
    151e:	39 f7       	brne	.-50     	; 0x14ee <SPI_VidSendString+0x14>
	{
		SPI_VidSendByte(copy_str[i]);
		i++;
	}
}
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <SPI_VidRecieveString>:

void SPI_VidRecieveString(uint8_t *str)
{
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	00 d0       	rcall	.+0      	; 0x1536 <SPI_VidRecieveString+0xa>
    1536:	0f 92       	push	r0
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	9b 83       	std	Y+3, r25	; 0x03
    153e:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t i=0;
    1540:	19 82       	std	Y+1, r1	; 0x01
		str[i]=SPI_U8RecieveByte();
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	9b 81       	ldd	r25, Y+3	; 0x03
    154c:	8c 01       	movw	r16, r24
    154e:	02 0f       	add	r16, r18
    1550:	13 1f       	adc	r17, r19
    1552:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SPI_U8RecieveByte>
    1556:	f8 01       	movw	r30, r16
    1558:	80 83       	st	Z, r24
    155a:	0f c0       	rjmp	.+30     	; 0x157a <SPI_VidRecieveString+0x4e>
		while(str[i]!='\r'){
		i++;
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	8f 5f       	subi	r24, 0xFF	; 255
    1560:	89 83       	std	Y+1, r24	; 0x01
			str[i]=SPI_U8RecieveByte();
    1562:	89 81       	ldd	r24, Y+1	; 0x01
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	9b 81       	ldd	r25, Y+3	; 0x03
    156c:	8c 01       	movw	r16, r24
    156e:	02 0f       	add	r16, r18
    1570:	13 1f       	adc	r17, r19
    1572:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SPI_U8RecieveByte>
    1576:	f8 01       	movw	r30, r16
    1578:	80 83       	st	Z, r24

void SPI_VidRecieveString(uint8_t *str)
{
		uint8_t i=0;
		str[i]=SPI_U8RecieveByte();
		while(str[i]!='\r'){
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	9b 81       	ldd	r25, Y+3	; 0x03
    1584:	fc 01       	movw	r30, r24
    1586:	e2 0f       	add	r30, r18
    1588:	f3 1f       	adc	r31, r19
    158a:	80 81       	ld	r24, Z
    158c:	8d 30       	cpi	r24, 0x0D	; 13
    158e:	31 f7       	brne	.-52     	; 0x155c <SPI_VidRecieveString+0x30>
		i++;
			str[i]=SPI_U8RecieveByte();
		}
		str[i]='\0';
    1590:	89 81       	ldd	r24, Y+1	; 0x01
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	9b 81       	ldd	r25, Y+3	; 0x03
    159a:	fc 01       	movw	r30, r24
    159c:	e2 0f       	add	r30, r18
    159e:	f3 1f       	adc	r31, r19
    15a0:	10 82       	st	Z, r1



}
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	1f 91       	pop	r17
    15ae:	0f 91       	pop	r16
    15b0:	08 95       	ret

000015b2 <I2C_MasterInit>:

//#include "I2C_Private.h"

//#include <util/delay.h>

void I2C_MasterInit(void){
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
	// prescaler =1
		CLRBIT(TWSR,0);
    15ba:	a1 e2       	ldi	r26, 0x21	; 33
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e1 e2       	ldi	r30, 0x21	; 33
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	8e 7f       	andi	r24, 0xFE	; 254
    15c6:	8c 93       	st	X, r24
		CLRBIT(TWSR,1);
    15c8:	a1 e2       	ldi	r26, 0x21	; 33
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e1 e2       	ldi	r30, 0x21	; 33
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8d 7f       	andi	r24, 0xFD	; 253
    15d4:	8c 93       	st	X, r24
		TWBR=32;//400khz
    15d6:	e0 e2       	ldi	r30, 0x20	; 32
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 e2       	ldi	r24, 0x20	; 32
    15dc:	80 83       	st	Z, r24
		//SETBIT(TWCR,6);// enable ACK

		SETBIT(TWCR,2);// enable
    15de:	a6 e5       	ldi	r26, 0x56	; 86
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e6 e5       	ldi	r30, 0x56	; 86
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	84 60       	ori	r24, 0x04	; 4
    15ea:	8c 93       	st	X, r24

		TWAR=0b00000111;
    15ec:	e2 e2       	ldi	r30, 0x22	; 34
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	87 e0       	ldi	r24, 0x07	; 7
    15f2:	80 83       	st	Z, r24



}
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <I2C_MasterStart>:
void I2C_MasterStart(void){
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	cd b7       	in	r28, 0x3d	; 61
    1600:	de b7       	in	r29, 0x3e	; 62

	SETBIT(TWCR,5);// enable start bit
    1602:	a6 e5       	ldi	r26, 0x56	; 86
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e6 e5       	ldi	r30, 0x56	; 86
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	80 62       	ori	r24, 0x20	; 32
    160e:	8c 93       	st	X, r24
	SETBIT(TWCR,7);// clear flag
    1610:	a6 e5       	ldi	r26, 0x56	; 86
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e6 e5       	ldi	r30, 0x56	; 86
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	80 68       	ori	r24, 0x80	; 128
    161c:	8c 93       	st	X, r24

	while(GETBIT(TWCR,7)==0);
    161e:	e6 e5       	ldi	r30, 0x56	; 86
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	88 23       	and	r24, r24
    1626:	dc f7       	brge	.-10     	; 0x161e <I2C_MasterStart+0x24>

}
    1628:	cf 91       	pop	r28
    162a:	df 91       	pop	r29
    162c:	08 95       	ret

0000162e <I2C_SlaveInit>:


void I2C_SlaveInit(void){
    162e:	df 93       	push	r29
    1630:	cf 93       	push	r28
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
	TWBR=32;//400khz
    1636:	e0 e2       	ldi	r30, 0x20	; 32
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 e2       	ldi	r24, 0x20	; 32
    163c:	80 83       	st	Z, r24


	TWAR=0b00000010;
    163e:	e2 e2       	ldi	r30, 0x22	; 34
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	82 e0       	ldi	r24, 0x02	; 2
    1644:	80 83       	st	Z, r24
	SETBIT(TWCR,6);// enable ack
    1646:	a6 e5       	ldi	r26, 0x56	; 86
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e6 e5       	ldi	r30, 0x56	; 86
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	80 64       	ori	r24, 0x40	; 64
    1652:	8c 93       	st	X, r24

	SETBIT(TWCR,2);// enable i2c
    1654:	a6 e5       	ldi	r26, 0x56	; 86
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e6 e5       	ldi	r30, 0x56	; 86
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	84 60       	ori	r24, 0x04	; 4
    1660:	8c 93       	st	X, r24

	//SETBIT(TWCR,7);// clear flag
	//while(GETBIT(TWCR,7)==0);


	I2C_ReadDataByte();
    1662:	0e 94 a2 0b 	call	0x1744	; 0x1744 <I2C_ReadDataByte>


}
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <I2C_SendSlaveAddressWithWrite>:

void I2C_SendSlaveAddressWithWrite(uint8_t address){
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	0f 92       	push	r0
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	89 83       	std	Y+1, r24	; 0x01
	TWDR=(address<<1);
    1678:	e3 e2       	ldi	r30, 0x23	; 35
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	88 0f       	add	r24, r24
    1680:	80 83       	st	Z, r24
	/* Write operation */
		CLRBIT(TWDR,0);
    1682:	a3 e2       	ldi	r26, 0x23	; 35
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e3 e2       	ldi	r30, 0x23	; 35
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	8e 7f       	andi	r24, 0xFE	; 254
    168e:	8c 93       	st	X, r24
			CLRBIT(TWCR,5);// clear start bit
    1690:	a6 e5       	ldi	r26, 0x56	; 86
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e6 e5       	ldi	r30, 0x56	; 86
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	8f 7d       	andi	r24, 0xDF	; 223
    169c:	8c 93       	st	X, r24
			SETBIT(TWCR,7);// clear flag
    169e:	a6 e5       	ldi	r26, 0x56	; 86
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e6 e5       	ldi	r30, 0x56	; 86
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	80 68       	ori	r24, 0x80	; 128
    16aa:	8c 93       	st	X, r24
			while(GETBIT(TWCR,7)==0);
    16ac:	e6 e5       	ldi	r30, 0x56	; 86
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	80 81       	ld	r24, Z
    16b2:	88 23       	and	r24, r24
    16b4:	dc f7       	brge	.-10     	; 0x16ac <I2C_SendSlaveAddressWithWrite+0x40>
}
    16b6:	0f 90       	pop	r0
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <I2C_SendSlaveAddressWithRead>:

void I2C_SendSlaveAddressWithRead(uint8_t address){
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	0f 92       	push	r0
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	89 83       	std	Y+1, r24	; 0x01
	TWDR=(address<<1);
    16ca:	e3 e2       	ldi	r30, 0x23	; 35
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	88 0f       	add	r24, r24
    16d2:	80 83       	st	Z, r24
	SETBIT(TWDR,0);// read
    16d4:	a3 e2       	ldi	r26, 0x23	; 35
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e3 e2       	ldi	r30, 0x23	; 35
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	81 60       	ori	r24, 0x01	; 1
    16e0:	8c 93       	st	X, r24

	CLRBIT(TWCR,5);// clear start bit
    16e2:	a6 e5       	ldi	r26, 0x56	; 86
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e6 e5       	ldi	r30, 0x56	; 86
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8f 7d       	andi	r24, 0xDF	; 223
    16ee:	8c 93       	st	X, r24
	SETBIT(TWCR,7);// clear flag
    16f0:	a6 e5       	ldi	r26, 0x56	; 86
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e6 e5       	ldi	r30, 0x56	; 86
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	80 68       	ori	r24, 0x80	; 128
    16fc:	8c 93       	st	X, r24
	while(GETBIT(TWCR,7)==0);
    16fe:	e6 e5       	ldi	r30, 0x56	; 86
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	88 23       	and	r24, r24
    1706:	dc f7       	brge	.-10     	; 0x16fe <I2C_SendSlaveAddressWithRead+0x40>
}
    1708:	0f 90       	pop	r0
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <I2C_WriteDataByte>:

void I2C_WriteDataByte(uint8_t data){
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	0f 92       	push	r0
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	89 83       	std	Y+1, r24	; 0x01

TWDR=data;
    171c:	e3 e2       	ldi	r30, 0x23	; 35
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	80 83       	st	Z, r24
SETBIT(TWCR,7);// clear flag
    1724:	a6 e5       	ldi	r26, 0x56	; 86
    1726:	b0 e0       	ldi	r27, 0x00	; 0
    1728:	e6 e5       	ldi	r30, 0x56	; 86
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	80 81       	ld	r24, Z
    172e:	80 68       	ori	r24, 0x80	; 128
    1730:	8c 93       	st	X, r24
while(GETBIT(TWCR,7)==0);
    1732:	e6 e5       	ldi	r30, 0x56	; 86
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	88 23       	and	r24, r24
    173a:	dc f7       	brge	.-10     	; 0x1732 <I2C_WriteDataByte+0x22>

}
    173c:	0f 90       	pop	r0
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <I2C_ReadDataByte>:
uint8_t I2C_ReadDataByte(void){
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	0f 92       	push	r0
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;
SETBIT(TWCR,7);// clear flag
    174e:	a6 e5       	ldi	r26, 0x56	; 86
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e6 e5       	ldi	r30, 0x56	; 86
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	80 68       	ori	r24, 0x80	; 128
    175a:	8c 93       	st	X, r24
while(GETBIT(TWCR,7)==0);
    175c:	e6 e5       	ldi	r30, 0x56	; 86
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	88 23       	and	r24, r24
    1764:	dc f7       	brge	.-10     	; 0x175c <I2C_ReadDataByte+0x18>

value=TWDR;
    1766:	e3 e2       	ldi	r30, 0x23	; 35
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	89 83       	std	Y+1, r24	; 0x01
return value;
    176e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1770:	0f 90       	pop	r0
    1772:	cf 91       	pop	r28
    1774:	df 91       	pop	r29
    1776:	08 95       	ret

00001778 <I2C_MasterStop>:
void I2C_MasterStop(void){
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62

	SETBIT(TWCR,4);// enable stop bit
    1780:	a6 e5       	ldi	r26, 0x56	; 86
    1782:	b0 e0       	ldi	r27, 0x00	; 0
    1784:	e6 e5       	ldi	r30, 0x56	; 86
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	80 61       	ori	r24, 0x10	; 16
    178c:	8c 93       	st	X, r24
	SETBIT(TWCR,2);// enable i2c bit
    178e:	a6 e5       	ldi	r26, 0x56	; 86
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e6 e5       	ldi	r30, 0x56	; 86
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	84 60       	ori	r24, 0x04	; 4
    179a:	8c 93       	st	X, r24

	SETBIT(TWCR,7);// clear flag
    179c:	a6 e5       	ldi	r26, 0x56	; 86
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e6 e5       	ldi	r30, 0x56	; 86
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	80 68       	ori	r24, 0x80	; 128
    17a8:	8c 93       	st	X, r24



}
    17aa:	cf 91       	pop	r28
    17ac:	df 91       	pop	r29
    17ae:	08 95       	ret

000017b0 <EXTI_ENEnable>:
 * 
 * @param Interrupt EXTI_INT0 | EXTI_INT1 | EXTI_INT2
 * @return EN_ERRORSTATE_t 
 */
EN_EXTIERRORSTATE_t EXTI_ENEnable(EN_EXTI_t Interrupt)
{
    17b0:	df 93       	push	r29
    17b2:	cf 93       	push	r28
    17b4:	00 d0       	rcall	.+0      	; 0x17b6 <EXTI_ENEnable+0x6>
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <EXTI_ENEnable+0x8>
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	8a 83       	std	Y+2, r24	; 0x02
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    17be:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	3c 83       	std	Y+4, r19	; 0x04
    17c8:	2b 83       	std	Y+3, r18	; 0x03
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	9c 81       	ldd	r25, Y+4	; 0x04
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	91 05       	cpc	r25, r1
    17d2:	c1 f0       	breq	.+48     	; 0x1804 <EXTI_ENEnable+0x54>
    17d4:	2b 81       	ldd	r18, Y+3	; 0x03
    17d6:	3c 81       	ldd	r19, Y+4	; 0x04
    17d8:	22 30       	cpi	r18, 0x02	; 2
    17da:	31 05       	cpc	r19, r1
    17dc:	11 f1       	breq	.+68     	; 0x1822 <EXTI_ENEnable+0x72>
    17de:	8b 81       	ldd	r24, Y+3	; 0x03
    17e0:	9c 81       	ldd	r25, Y+4	; 0x04
    17e2:	00 97       	sbiw	r24, 0x00	; 0
    17e4:	69 f5       	brne	.+90     	; 0x1840 <EXTI_ENEnable+0x90>
	{
	case EXTI_INT0:
		SETBIT(GICR, INT0);
    17e6:	ab e5       	ldi	r26, 0x5B	; 91
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	eb e5       	ldi	r30, 0x5B	; 91
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	80 64       	ori	r24, 0x40	; 64
    17f2:	8c 93       	st	X, r24
		SETBIT(SREG, I_BIT);
    17f4:	af e5       	ldi	r26, 0x5F	; 95
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	ef e5       	ldi	r30, 0x5F	; 95
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	80 68       	ori	r24, 0x80	; 128
    1800:	8c 93       	st	X, r24
    1802:	20 c0       	rjmp	.+64     	; 0x1844 <EXTI_ENEnable+0x94>
		break;
	case EXTI_INT1:
		SETBIT(GICR, INT1);
    1804:	ab e5       	ldi	r26, 0x5B	; 91
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	eb e5       	ldi	r30, 0x5B	; 91
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	80 68       	ori	r24, 0x80	; 128
    1810:	8c 93       	st	X, r24
		SETBIT(SREG, I_BIT);
    1812:	af e5       	ldi	r26, 0x5F	; 95
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	ef e5       	ldi	r30, 0x5F	; 95
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	80 68       	ori	r24, 0x80	; 128
    181e:	8c 93       	st	X, r24
    1820:	11 c0       	rjmp	.+34     	; 0x1844 <EXTI_ENEnable+0x94>
		break;
	case EXTI_INT2:
		SETBIT(GICR, INT2);
    1822:	ab e5       	ldi	r26, 0x5B	; 91
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	eb e5       	ldi	r30, 0x5B	; 91
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	80 62       	ori	r24, 0x20	; 32
    182e:	8c 93       	st	X, r24
		SETBIT(SREG, I_BIT);
    1830:	af e5       	ldi	r26, 0x5F	; 95
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	ef e5       	ldi	r30, 0x5F	; 95
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	80 68       	ori	r24, 0x80	; 128
    183c:	8c 93       	st	X, r24
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <EXTI_ENEnable+0x94>
		break;
	default:
		state = E_EXT_ERROR;
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    1844:	89 81       	ldd	r24, Y+1	; 0x01
}
    1846:	0f 90       	pop	r0
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	cf 91       	pop	r28
    1850:	df 91       	pop	r29
    1852:	08 95       	ret

00001854 <EXTI_ENisable>:

EN_EXTIERRORSTATE_t EXTI_ENisable(EN_EXTI_t Interrupt)
{
    1854:	df 93       	push	r29
    1856:	cf 93       	push	r28
    1858:	00 d0       	rcall	.+0      	; 0x185a <EXTI_ENisable+0x6>
    185a:	00 d0       	rcall	.+0      	; 0x185c <EXTI_ENisable+0x8>
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	8a 83       	std	Y+2, r24	; 0x02
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    1862:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	3c 83       	std	Y+4, r19	; 0x04
    186c:	2b 83       	std	Y+3, r18	; 0x03
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	9c 81       	ldd	r25, Y+4	; 0x04
    1872:	81 30       	cpi	r24, 0x01	; 1
    1874:	91 05       	cpc	r25, r1
    1876:	c1 f0       	breq	.+48     	; 0x18a8 <EXTI_ENisable+0x54>
    1878:	2b 81       	ldd	r18, Y+3	; 0x03
    187a:	3c 81       	ldd	r19, Y+4	; 0x04
    187c:	22 30       	cpi	r18, 0x02	; 2
    187e:	31 05       	cpc	r19, r1
    1880:	11 f1       	breq	.+68     	; 0x18c6 <EXTI_ENisable+0x72>
    1882:	8b 81       	ldd	r24, Y+3	; 0x03
    1884:	9c 81       	ldd	r25, Y+4	; 0x04
    1886:	00 97       	sbiw	r24, 0x00	; 0
    1888:	69 f5       	brne	.+90     	; 0x18e4 <EXTI_ENisable+0x90>
	{
	case EXTI_INT0:
		CLRBIT(GICR, INT0);
    188a:	ab e5       	ldi	r26, 0x5B	; 91
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	eb e5       	ldi	r30, 0x5B	; 91
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	8f 7b       	andi	r24, 0xBF	; 191
    1896:	8c 93       	st	X, r24
		CLRBIT(SREG, I_BIT);
    1898:	af e5       	ldi	r26, 0x5F	; 95
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	ef e5       	ldi	r30, 0x5F	; 95
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	8f 77       	andi	r24, 0x7F	; 127
    18a4:	8c 93       	st	X, r24
    18a6:	20 c0       	rjmp	.+64     	; 0x18e8 <EXTI_ENisable+0x94>
		break;
	case EXTI_INT1:
		CLRBIT(GICR, INT1);
    18a8:	ab e5       	ldi	r26, 0x5B	; 91
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	eb e5       	ldi	r30, 0x5B	; 91
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	8f 77       	andi	r24, 0x7F	; 127
    18b4:	8c 93       	st	X, r24
		CLRBIT(SREG, I_BIT);
    18b6:	af e5       	ldi	r26, 0x5F	; 95
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	ef e5       	ldi	r30, 0x5F	; 95
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	8f 77       	andi	r24, 0x7F	; 127
    18c2:	8c 93       	st	X, r24
    18c4:	11 c0       	rjmp	.+34     	; 0x18e8 <EXTI_ENisable+0x94>
		break;
	case EXTI_INT2:
		CLRBIT(GICR, INT2);
    18c6:	ab e5       	ldi	r26, 0x5B	; 91
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	eb e5       	ldi	r30, 0x5B	; 91
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	8f 7d       	andi	r24, 0xDF	; 223
    18d2:	8c 93       	st	X, r24
		CLRBIT(SREG, I_BIT);
    18d4:	af e5       	ldi	r26, 0x5F	; 95
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	ef e5       	ldi	r30, 0x5F	; 95
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	8f 77       	andi	r24, 0x7F	; 127
    18e0:	8c 93       	st	X, r24
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <EXTI_ENisable+0x94>
		break;
	default:
		state = E_EXT_ERROR;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
} /* EXTI_voidDisable */
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	cf 91       	pop	r28
    18f4:	df 91       	pop	r29
    18f6:	08 95       	ret

000018f8 <EXTI_ENTriggerEdge>:

EN_EXTIERRORSTATE_t EXTI_ENTriggerEdge(EN_EXTI_t Interrupt, EN_TriggerEdge_t Edge)
{
    18f8:	df 93       	push	r29
    18fa:	cf 93       	push	r28
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	29 97       	sbiw	r28, 0x09	; 9
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	8a 83       	std	Y+2, r24	; 0x02
    190e:	6b 83       	std	Y+3, r22	; 0x03
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    1910:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    1912:	8a 81       	ldd	r24, Y+2	; 0x02
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	39 87       	std	Y+9, r19	; 0x09
    191a:	28 87       	std	Y+8, r18	; 0x08
    191c:	88 85       	ldd	r24, Y+8	; 0x08
    191e:	99 85       	ldd	r25, Y+9	; 0x09
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	91 05       	cpc	r25, r1
    1924:	d9 f0       	breq	.+54     	; 0x195c <EXTI_ENTriggerEdge+0x64>
    1926:	28 85       	ldd	r18, Y+8	; 0x08
    1928:	39 85       	ldd	r19, Y+9	; 0x09
    192a:	22 30       	cpi	r18, 0x02	; 2
    192c:	31 05       	cpc	r19, r1
    192e:	09 f4       	brne	.+2      	; 0x1932 <EXTI_ENTriggerEdge+0x3a>
    1930:	73 c0       	rjmp	.+230    	; 0x1a18 <EXTI_ENTriggerEdge+0x120>
    1932:	88 85       	ldd	r24, Y+8	; 0x08
    1934:	99 85       	ldd	r25, Y+9	; 0x09
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	09 f0       	breq	.+2      	; 0x193c <EXTI_ENTriggerEdge+0x44>
    193a:	91 c0       	rjmp	.+290    	; 0x1a5e <EXTI_ENTriggerEdge+0x166>
	{
	case EXTI_INT0:
		MCUCR &= 0xFC;
    193c:	a5 e5       	ldi	r26, 0x55	; 85
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	e5 e5       	ldi	r30, 0x55	; 85
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	8c 7f       	andi	r24, 0xFC	; 252
    1948:	8c 93       	st	X, r24
		MCUCR |= Edge;
    194a:	a5 e5       	ldi	r26, 0x55	; 85
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e5 e5       	ldi	r30, 0x55	; 85
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	90 81       	ld	r25, Z
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	89 2b       	or	r24, r25
    1958:	8c 93       	st	X, r24
    195a:	83 c0       	rjmp	.+262    	; 0x1a62 <EXTI_ENTriggerEdge+0x16a>
		break;
	case EXTI_INT1:
		switch (Edge)
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	3f 83       	std	Y+7, r19	; 0x07
    1964:	2e 83       	std	Y+6, r18	; 0x06
    1966:	8e 81       	ldd	r24, Y+6	; 0x06
    1968:	9f 81       	ldd	r25, Y+7	; 0x07
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	91 05       	cpc	r25, r1
    196e:	21 f1       	breq	.+72     	; 0x19b8 <EXTI_ENTriggerEdge+0xc0>
    1970:	2e 81       	ldd	r18, Y+6	; 0x06
    1972:	3f 81       	ldd	r19, Y+7	; 0x07
    1974:	22 30       	cpi	r18, 0x02	; 2
    1976:	31 05       	cpc	r19, r1
    1978:	2c f4       	brge	.+10     	; 0x1984 <EXTI_ENTriggerEdge+0x8c>
    197a:	8e 81       	ldd	r24, Y+6	; 0x06
    197c:	9f 81       	ldd	r25, Y+7	; 0x07
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	61 f0       	breq	.+24     	; 0x199a <EXTI_ENTriggerEdge+0xa2>
    1982:	47 c0       	rjmp	.+142    	; 0x1a12 <EXTI_ENTriggerEdge+0x11a>
    1984:	2e 81       	ldd	r18, Y+6	; 0x06
    1986:	3f 81       	ldd	r19, Y+7	; 0x07
    1988:	22 30       	cpi	r18, 0x02	; 2
    198a:	31 05       	cpc	r19, r1
    198c:	21 f1       	breq	.+72     	; 0x19d6 <EXTI_ENTriggerEdge+0xde>
    198e:	8e 81       	ldd	r24, Y+6	; 0x06
    1990:	9f 81       	ldd	r25, Y+7	; 0x07
    1992:	83 30       	cpi	r24, 0x03	; 3
    1994:	91 05       	cpc	r25, r1
    1996:	71 f1       	breq	.+92     	; 0x19f4 <EXTI_ENTriggerEdge+0xfc>
    1998:	3c c0       	rjmp	.+120    	; 0x1a12 <EXTI_ENTriggerEdge+0x11a>
		{
		case LOW_LEVEL:
			CLRBIT(MCUCR, ISC10);
    199a:	a5 e5       	ldi	r26, 0x55	; 85
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	e5 e5       	ldi	r30, 0x55	; 85
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	8b 7f       	andi	r24, 0xFB	; 251
    19a6:	8c 93       	st	X, r24
			CLRBIT(MCUCR, ISC11);
    19a8:	a5 e5       	ldi	r26, 0x55	; 85
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e5 e5       	ldi	r30, 0x55	; 85
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	87 7f       	andi	r24, 0xF7	; 247
    19b4:	8c 93       	st	X, r24
    19b6:	55 c0       	rjmp	.+170    	; 0x1a62 <EXTI_ENTriggerEdge+0x16a>
			break;
		case ANY_LOGIC_CHANGE:
			SETBIT(MCUCR, ISC10);
    19b8:	a5 e5       	ldi	r26, 0x55	; 85
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e5 e5       	ldi	r30, 0x55	; 85
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	84 60       	ori	r24, 0x04	; 4
    19c4:	8c 93       	st	X, r24
			CLRBIT(MCUCR, ISC11);
    19c6:	a5 e5       	ldi	r26, 0x55	; 85
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e5 e5       	ldi	r30, 0x55	; 85
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	87 7f       	andi	r24, 0xF7	; 247
    19d2:	8c 93       	st	X, r24
    19d4:	46 c0       	rjmp	.+140    	; 0x1a62 <EXTI_ENTriggerEdge+0x16a>
			break;
		case FALLING_EDGE:
			CLRBIT(MCUCR, ISC10);
    19d6:	a5 e5       	ldi	r26, 0x55	; 85
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e5 e5       	ldi	r30, 0x55	; 85
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	8b 7f       	andi	r24, 0xFB	; 251
    19e2:	8c 93       	st	X, r24
			SETBIT(MCUCR, ISC11);
    19e4:	a5 e5       	ldi	r26, 0x55	; 85
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	e5 e5       	ldi	r30, 0x55	; 85
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	88 60       	ori	r24, 0x08	; 8
    19f0:	8c 93       	st	X, r24
    19f2:	37 c0       	rjmp	.+110    	; 0x1a62 <EXTI_ENTriggerEdge+0x16a>
			break;
		case RISING_EDGE:
			SETBIT(MCUCR, ISC10);
    19f4:	a5 e5       	ldi	r26, 0x55	; 85
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e5 e5       	ldi	r30, 0x55	; 85
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	84 60       	ori	r24, 0x04	; 4
    1a00:	8c 93       	st	X, r24
			SETBIT(MCUCR, ISC11);
    1a02:	a5 e5       	ldi	r26, 0x55	; 85
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e5 e5       	ldi	r30, 0x55	; 85
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	88 60       	ori	r24, 0x08	; 8
    1a0e:	8c 93       	st	X, r24
    1a10:	28 c0       	rjmp	.+80     	; 0x1a62 <EXTI_ENTriggerEdge+0x16a>
			break;
		default:
			state = E_EXT_ERROR;
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	25 c0       	rjmp	.+74     	; 0x1a62 <EXTI_ENTriggerEdge+0x16a>
			break;
		}
		break;
	case EXTI_INT2:
		switch (Edge)
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	3d 83       	std	Y+5, r19	; 0x05
    1a20:	2c 83       	std	Y+4, r18	; 0x04
    1a22:	8c 81       	ldd	r24, Y+4	; 0x04
    1a24:	9d 81       	ldd	r25, Y+5	; 0x05
    1a26:	82 30       	cpi	r24, 0x02	; 2
    1a28:	91 05       	cpc	r25, r1
    1a2a:	31 f0       	breq	.+12     	; 0x1a38 <EXTI_ENTriggerEdge+0x140>
    1a2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1a30:	23 30       	cpi	r18, 0x03	; 3
    1a32:	31 05       	cpc	r19, r1
    1a34:	49 f0       	breq	.+18     	; 0x1a48 <EXTI_ENTriggerEdge+0x150>
    1a36:	10 c0       	rjmp	.+32     	; 0x1a58 <EXTI_ENTriggerEdge+0x160>
		{
		case FALLING_EDGE:
			CLRBIT(MCUCSR, ISC2);
    1a38:	a4 e5       	ldi	r26, 0x54	; 84
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e4 e5       	ldi	r30, 0x54	; 84
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	8f 7b       	andi	r24, 0xBF	; 191
    1a44:	8c 93       	st	X, r24
    1a46:	0d c0       	rjmp	.+26     	; 0x1a62 <EXTI_ENTriggerEdge+0x16a>
			break;
		case RISING_EDGE:
			SETBIT(MCUCSR, ISC2);
    1a48:	a4 e5       	ldi	r26, 0x54	; 84
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e4 e5       	ldi	r30, 0x54	; 84
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	80 64       	ori	r24, 0x40	; 64
    1a54:	8c 93       	st	X, r24
    1a56:	05 c0       	rjmp	.+10     	; 0x1a62 <EXTI_ENTriggerEdge+0x16a>
			break;
		default:
			state = E_EXT_ERROR;
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	89 83       	std	Y+1, r24	; 0x01
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <EXTI_ENTriggerEdge+0x16a>
			break;
		}
		break;

	default:
		state = E_EXT_ERROR;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
} /* EXTI_voidTriggerEdge */
    1a64:	29 96       	adiw	r28, 0x09	; 9
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	08 95       	ret

00001a76 <EXTI_SetCallBack>:

EN_EXTIERRORSTATE_t EXTI_SetCallBack(EN_EXTI_t Interrupt, void (*LocalPtr)(void))
{
    1a76:	df 93       	push	r29
    1a78:	cf 93       	push	r28
    1a7a:	00 d0       	rcall	.+0      	; 0x1a7c <EXTI_SetCallBack+0x6>
    1a7c:	00 d0       	rcall	.+0      	; 0x1a7e <EXTI_SetCallBack+0x8>
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <EXTI_SetCallBack+0xa>
    1a80:	cd b7       	in	r28, 0x3d	; 61
    1a82:	de b7       	in	r29, 0x3e	; 62
    1a84:	8a 83       	std	Y+2, r24	; 0x02
    1a86:	7c 83       	std	Y+4, r23	; 0x04
    1a88:	6b 83       	std	Y+3, r22	; 0x03
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    1a8a:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	3e 83       	std	Y+6, r19	; 0x06
    1a94:	2d 83       	std	Y+5, r18	; 0x05
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9a:	81 30       	cpi	r24, 0x01	; 1
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	81 f0       	breq	.+32     	; 0x1ac0 <EXTI_SetCallBack+0x4a>
    1aa0:	2d 81       	ldd	r18, Y+5	; 0x05
    1aa2:	3e 81       	ldd	r19, Y+6	; 0x06
    1aa4:	22 30       	cpi	r18, 0x02	; 2
    1aa6:	31 05       	cpc	r19, r1
    1aa8:	91 f0       	breq	.+36     	; 0x1ace <EXTI_SetCallBack+0x58>
    1aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1aac:	9e 81       	ldd	r25, Y+6	; 0x06
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	a9 f4       	brne	.+42     	; 0x1adc <EXTI_SetCallBack+0x66>
	{
	case EXTI_INT0:
		EXTI_INT0_FPtr = LocalPtr;
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	90 93 54 03 	sts	0x0354, r25
    1aba:	80 93 53 03 	sts	0x0353, r24
    1abe:	10 c0       	rjmp	.+32     	; 0x1ae0 <EXTI_SetCallBack+0x6a>
		break;
	case EXTI_INT1:
		EXTI_INT1_FPtr = LocalPtr;
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac4:	90 93 56 03 	sts	0x0356, r25
    1ac8:	80 93 55 03 	sts	0x0355, r24
    1acc:	09 c0       	rjmp	.+18     	; 0x1ae0 <EXTI_SetCallBack+0x6a>
		break;
	case EXTI_INT2:
		EXTI_INT2_FPtr = LocalPtr;
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	90 93 58 03 	sts	0x0358, r25
    1ad6:	80 93 57 03 	sts	0x0357, r24
    1ada:	02 c0       	rjmp	.+4      	; 0x1ae0 <EXTI_SetCallBack+0x6a>
		break;
	default:
		state = E_EXT_ERROR;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01

} /* EXTI_SetCallBack */
    1ae2:	26 96       	adiw	r28, 0x06	; 6
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <__vector_1>:

void __vector_1(void)
{
    1af4:	1f 92       	push	r1
    1af6:	0f 92       	push	r0
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	0f 92       	push	r0
    1afc:	11 24       	eor	r1, r1
    1afe:	2f 93       	push	r18
    1b00:	3f 93       	push	r19
    1b02:	4f 93       	push	r20
    1b04:	5f 93       	push	r21
    1b06:	6f 93       	push	r22
    1b08:	7f 93       	push	r23
    1b0a:	8f 93       	push	r24
    1b0c:	9f 93       	push	r25
    1b0e:	af 93       	push	r26
    1b10:	bf 93       	push	r27
    1b12:	ef 93       	push	r30
    1b14:	ff 93       	push	r31
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	cd b7       	in	r28, 0x3d	; 61
    1b1c:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_INT0_FPtr != NULLPTR)
    1b1e:	80 91 53 03 	lds	r24, 0x0353
    1b22:	90 91 54 03 	lds	r25, 0x0354
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	29 f0       	breq	.+10     	; 0x1b34 <__vector_1+0x40>
	{
		EXTI_INT0_FPtr();
    1b2a:	e0 91 53 03 	lds	r30, 0x0353
    1b2e:	f0 91 54 03 	lds	r31, 0x0354
    1b32:	09 95       	icall
	}
}
    1b34:	cf 91       	pop	r28
    1b36:	df 91       	pop	r29
    1b38:	ff 91       	pop	r31
    1b3a:	ef 91       	pop	r30
    1b3c:	bf 91       	pop	r27
    1b3e:	af 91       	pop	r26
    1b40:	9f 91       	pop	r25
    1b42:	8f 91       	pop	r24
    1b44:	7f 91       	pop	r23
    1b46:	6f 91       	pop	r22
    1b48:	5f 91       	pop	r21
    1b4a:	4f 91       	pop	r20
    1b4c:	3f 91       	pop	r19
    1b4e:	2f 91       	pop	r18
    1b50:	0f 90       	pop	r0
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	0f 90       	pop	r0
    1b56:	1f 90       	pop	r1
    1b58:	18 95       	reti

00001b5a <__vector_2>:

void __vector_2(void)
{
    1b5a:	1f 92       	push	r1
    1b5c:	0f 92       	push	r0
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	0f 92       	push	r0
    1b62:	11 24       	eor	r1, r1
    1b64:	2f 93       	push	r18
    1b66:	3f 93       	push	r19
    1b68:	4f 93       	push	r20
    1b6a:	5f 93       	push	r21
    1b6c:	6f 93       	push	r22
    1b6e:	7f 93       	push	r23
    1b70:	8f 93       	push	r24
    1b72:	9f 93       	push	r25
    1b74:	af 93       	push	r26
    1b76:	bf 93       	push	r27
    1b78:	ef 93       	push	r30
    1b7a:	ff 93       	push	r31
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_INT1_FPtr != NULLPTR)
    1b84:	80 91 55 03 	lds	r24, 0x0355
    1b88:	90 91 56 03 	lds	r25, 0x0356
    1b8c:	00 97       	sbiw	r24, 0x00	; 0
    1b8e:	29 f0       	breq	.+10     	; 0x1b9a <__vector_2+0x40>
	{
		EXTI_INT1_FPtr();
    1b90:	e0 91 55 03 	lds	r30, 0x0355
    1b94:	f0 91 56 03 	lds	r31, 0x0356
    1b98:	09 95       	icall
	}
}
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	ff 91       	pop	r31
    1ba0:	ef 91       	pop	r30
    1ba2:	bf 91       	pop	r27
    1ba4:	af 91       	pop	r26
    1ba6:	9f 91       	pop	r25
    1ba8:	8f 91       	pop	r24
    1baa:	7f 91       	pop	r23
    1bac:	6f 91       	pop	r22
    1bae:	5f 91       	pop	r21
    1bb0:	4f 91       	pop	r20
    1bb2:	3f 91       	pop	r19
    1bb4:	2f 91       	pop	r18
    1bb6:	0f 90       	pop	r0
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	0f 90       	pop	r0
    1bbc:	1f 90       	pop	r1
    1bbe:	18 95       	reti

00001bc0 <__vector_3>:

void __vector_3(void)
{
    1bc0:	1f 92       	push	r1
    1bc2:	0f 92       	push	r0
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	0f 92       	push	r0
    1bc8:	11 24       	eor	r1, r1
    1bca:	2f 93       	push	r18
    1bcc:	3f 93       	push	r19
    1bce:	4f 93       	push	r20
    1bd0:	5f 93       	push	r21
    1bd2:	6f 93       	push	r22
    1bd4:	7f 93       	push	r23
    1bd6:	8f 93       	push	r24
    1bd8:	9f 93       	push	r25
    1bda:	af 93       	push	r26
    1bdc:	bf 93       	push	r27
    1bde:	ef 93       	push	r30
    1be0:	ff 93       	push	r31
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_INT2_FPtr != NULLPTR)
    1bea:	80 91 57 03 	lds	r24, 0x0357
    1bee:	90 91 58 03 	lds	r25, 0x0358
    1bf2:	00 97       	sbiw	r24, 0x00	; 0
    1bf4:	29 f0       	breq	.+10     	; 0x1c00 <__vector_3+0x40>
	{
		EXTI_INT2_FPtr();
    1bf6:	e0 91 57 03 	lds	r30, 0x0357
    1bfa:	f0 91 58 03 	lds	r31, 0x0358
    1bfe:	09 95       	icall
	}
}
    1c00:	cf 91       	pop	r28
    1c02:	df 91       	pop	r29
    1c04:	ff 91       	pop	r31
    1c06:	ef 91       	pop	r30
    1c08:	bf 91       	pop	r27
    1c0a:	af 91       	pop	r26
    1c0c:	9f 91       	pop	r25
    1c0e:	8f 91       	pop	r24
    1c10:	7f 91       	pop	r23
    1c12:	6f 91       	pop	r22
    1c14:	5f 91       	pop	r21
    1c16:	4f 91       	pop	r20
    1c18:	3f 91       	pop	r19
    1c1a:	2f 91       	pop	r18
    1c1c:	0f 90       	pop	r0
    1c1e:	0f be       	out	0x3f, r0	; 63
    1c20:	0f 90       	pop	r0
    1c22:	1f 90       	pop	r1
    1c24:	18 95       	reti

00001c26 <DIO_voidSetPinValue>:
 * @param EN_Pin    PIN Number
 * @param EN_Value  HIGH or LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	28 97       	sbiw	r28, 0x08	; 8
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	8a 83       	std	Y+2, r24	; 0x02
    1c3c:	6b 83       	std	Y+3, r22	; 0x03
    1c3e:	4c 83       	std	Y+4, r20	; 0x04
    EN_ERRORSTATE_t state;
    state = E_OK;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Value == LOW)
    1c44:	8c 81       	ldd	r24, Y+4	; 0x04
    1c46:	88 23       	and	r24, r24
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <DIO_voidSetPinValue+0x26>
    1c4a:	76 c0       	rjmp	.+236    	; 0x1d38 <DIO_voidSetPinValue+0x112>
    {
        switch (EN_Port)
    1c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	38 87       	std	Y+8, r19	; 0x08
    1c54:	2f 83       	std	Y+7, r18	; 0x07
    1c56:	8f 81       	ldd	r24, Y+7	; 0x07
    1c58:	98 85       	ldd	r25, Y+8	; 0x08
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	59 f1       	breq	.+86     	; 0x1cb6 <DIO_voidSetPinValue+0x90>
    1c60:	2f 81       	ldd	r18, Y+7	; 0x07
    1c62:	38 85       	ldd	r19, Y+8	; 0x08
    1c64:	22 30       	cpi	r18, 0x02	; 2
    1c66:	31 05       	cpc	r19, r1
    1c68:	2c f4       	brge	.+10     	; 0x1c74 <DIO_voidSetPinValue+0x4e>
    1c6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c6c:	98 85       	ldd	r25, Y+8	; 0x08
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	69 f0       	breq	.+26     	; 0x1c8c <DIO_voidSetPinValue+0x66>
    1c72:	60 c0       	rjmp	.+192    	; 0x1d34 <DIO_voidSetPinValue+0x10e>
    1c74:	2f 81       	ldd	r18, Y+7	; 0x07
    1c76:	38 85       	ldd	r19, Y+8	; 0x08
    1c78:	22 30       	cpi	r18, 0x02	; 2
    1c7a:	31 05       	cpc	r19, r1
    1c7c:	89 f1       	breq	.+98     	; 0x1ce0 <DIO_voidSetPinValue+0xba>
    1c7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c80:	98 85       	ldd	r25, Y+8	; 0x08
    1c82:	83 30       	cpi	r24, 0x03	; 3
    1c84:	91 05       	cpc	r25, r1
    1c86:	09 f4       	brne	.+2      	; 0x1c8a <DIO_voidSetPinValue+0x64>
    1c88:	40 c0       	rjmp	.+128    	; 0x1d0a <DIO_voidSetPinValue+0xe4>
    1c8a:	54 c0       	rjmp	.+168    	; 0x1d34 <DIO_voidSetPinValue+0x10e>
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
    1c8c:	ab e3       	ldi	r26, 0x3B	; 59
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	eb e3       	ldi	r30, 0x3B	; 59
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	48 2f       	mov	r20, r24
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 2e       	mov	r0, r18
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <DIO_voidSetPinValue+0x84>
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	0a 94       	dec	r0
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <DIO_voidSetPinValue+0x80>
    1cae:	80 95       	com	r24
    1cb0:	84 23       	and	r24, r20
    1cb2:	8c 93       	st	X, r24
    1cb4:	b5 c0       	rjmp	.+362    	; 0x1e20 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
    1cb6:	a8 e3       	ldi	r26, 0x38	; 56
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e8 e3       	ldi	r30, 0x38	; 56
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	48 2f       	mov	r20, r24
    1cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc4:	28 2f       	mov	r18, r24
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	81 e0       	ldi	r24, 0x01	; 1
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	02 2e       	mov	r0, r18
    1cce:	02 c0       	rjmp	.+4      	; 0x1cd4 <DIO_voidSetPinValue+0xae>
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	0a 94       	dec	r0
    1cd6:	e2 f7       	brpl	.-8      	; 0x1cd0 <DIO_voidSetPinValue+0xaa>
    1cd8:	80 95       	com	r24
    1cda:	84 23       	and	r24, r20
    1cdc:	8c 93       	st	X, r24
    1cde:	a0 c0       	rjmp	.+320    	; 0x1e20 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
    1ce0:	a5 e3       	ldi	r26, 0x35	; 53
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e5 e3       	ldi	r30, 0x35	; 53
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	48 2f       	mov	r20, r24
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	02 2e       	mov	r0, r18
    1cf8:	02 c0       	rjmp	.+4      	; 0x1cfe <DIO_voidSetPinValue+0xd8>
    1cfa:	88 0f       	add	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	0a 94       	dec	r0
    1d00:	e2 f7       	brpl	.-8      	; 0x1cfa <DIO_voidSetPinValue+0xd4>
    1d02:	80 95       	com	r24
    1d04:	84 23       	and	r24, r20
    1d06:	8c 93       	st	X, r24
    1d08:	8b c0       	rjmp	.+278    	; 0x1e20 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
    1d0a:	a2 e3       	ldi	r26, 0x32	; 50
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	e2 e3       	ldi	r30, 0x32	; 50
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	48 2f       	mov	r20, r24
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	02 2e       	mov	r0, r18
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <DIO_voidSetPinValue+0x102>
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	0a 94       	dec	r0
    1d2a:	e2 f7       	brpl	.-8      	; 0x1d24 <DIO_voidSetPinValue+0xfe>
    1d2c:	80 95       	com	r24
    1d2e:	84 23       	and	r24, r20
    1d30:	8c 93       	st	X, r24
    1d32:	76 c0       	rjmp	.+236    	; 0x1e20 <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_ERROR;
    1d34:	19 82       	std	Y+1, r1	; 0x01
    1d36:	74 c0       	rjmp	.+232    	; 0x1e20 <DIO_voidSetPinValue+0x1fa>
            break;
        }
    }
    else if (EN_Value == HIGH)
    1d38:	8c 81       	ldd	r24, Y+4	; 0x04
    1d3a:	81 30       	cpi	r24, 0x01	; 1
    1d3c:	09 f0       	breq	.+2      	; 0x1d40 <DIO_voidSetPinValue+0x11a>
    1d3e:	70 c0       	rjmp	.+224    	; 0x1e20 <DIO_voidSetPinValue+0x1fa>
    {
        switch (EN_Port)
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	28 2f       	mov	r18, r24
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	3e 83       	std	Y+6, r19	; 0x06
    1d48:	2d 83       	std	Y+5, r18	; 0x05
    1d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4e:	81 30       	cpi	r24, 0x01	; 1
    1d50:	91 05       	cpc	r25, r1
    1d52:	49 f1       	breq	.+82     	; 0x1da6 <DIO_voidSetPinValue+0x180>
    1d54:	2d 81       	ldd	r18, Y+5	; 0x05
    1d56:	3e 81       	ldd	r19, Y+6	; 0x06
    1d58:	22 30       	cpi	r18, 0x02	; 2
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	2c f4       	brge	.+10     	; 0x1d68 <DIO_voidSetPinValue+0x142>
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	00 97       	sbiw	r24, 0x00	; 0
    1d64:	61 f0       	breq	.+24     	; 0x1d7e <DIO_voidSetPinValue+0x158>
    1d66:	5b c0       	rjmp	.+182    	; 0x1e1e <DIO_voidSetPinValue+0x1f8>
    1d68:	2d 81       	ldd	r18, Y+5	; 0x05
    1d6a:	3e 81       	ldd	r19, Y+6	; 0x06
    1d6c:	22 30       	cpi	r18, 0x02	; 2
    1d6e:	31 05       	cpc	r19, r1
    1d70:	71 f1       	breq	.+92     	; 0x1dce <DIO_voidSetPinValue+0x1a8>
    1d72:	8d 81       	ldd	r24, Y+5	; 0x05
    1d74:	9e 81       	ldd	r25, Y+6	; 0x06
    1d76:	83 30       	cpi	r24, 0x03	; 3
    1d78:	91 05       	cpc	r25, r1
    1d7a:	e9 f1       	breq	.+122    	; 0x1df6 <DIO_voidSetPinValue+0x1d0>
    1d7c:	50 c0       	rjmp	.+160    	; 0x1e1e <DIO_voidSetPinValue+0x1f8>
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
    1d7e:	ab e3       	ldi	r26, 0x3B	; 59
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	eb e3       	ldi	r30, 0x3B	; 59
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	48 2f       	mov	r20, r24
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	02 2e       	mov	r0, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <DIO_voidSetPinValue+0x176>
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	0a 94       	dec	r0
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <DIO_voidSetPinValue+0x172>
    1da0:	84 2b       	or	r24, r20
    1da2:	8c 93       	st	X, r24
    1da4:	3d c0       	rjmp	.+122    	; 0x1e20 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
    1da6:	a8 e3       	ldi	r26, 0x38	; 56
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e8 e3       	ldi	r30, 0x38	; 56
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	48 2f       	mov	r20, r24
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 2e       	mov	r0, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <DIO_voidSetPinValue+0x19e>
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	0a 94       	dec	r0
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <DIO_voidSetPinValue+0x19a>
    1dc8:	84 2b       	or	r24, r20
    1dca:	8c 93       	st	X, r24
    1dcc:	29 c0       	rjmp	.+82     	; 0x1e20 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
    1dce:	a5 e3       	ldi	r26, 0x35	; 53
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e5 e3       	ldi	r30, 0x35	; 53
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	48 2f       	mov	r20, r24
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	02 2e       	mov	r0, r18
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <DIO_voidSetPinValue+0x1c6>
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	0a 94       	dec	r0
    1dee:	e2 f7       	brpl	.-8      	; 0x1de8 <DIO_voidSetPinValue+0x1c2>
    1df0:	84 2b       	or	r24, r20
    1df2:	8c 93       	st	X, r24
    1df4:	15 c0       	rjmp	.+42     	; 0x1e20 <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
    1df6:	a2 e3       	ldi	r26, 0x32	; 50
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e2 e3       	ldi	r30, 0x32	; 50
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	48 2f       	mov	r20, r24
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	02 2e       	mov	r0, r18
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <DIO_voidSetPinValue+0x1ee>
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	0a 94       	dec	r0
    1e16:	e2 f7       	brpl	.-8      	; 0x1e10 <DIO_voidSetPinValue+0x1ea>
    1e18:	84 2b       	or	r24, r20
    1e1a:	8c 93       	st	X, r24
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_ERROR;
    1e1e:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinValue */
    1e22:	28 96       	adiw	r28, 0x08	; 8
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <DIO_voidSetPinDirection>:
 * @param EN_Pin  PIN Number
 * @param EN_Direction Direction of the Pin INPUT | OUTPUT
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	28 97       	sbiw	r28, 0x08	; 8
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	8a 83       	std	Y+2, r24	; 0x02
    1e4a:	6b 83       	std	Y+3, r22	; 0x03
    1e4c:	4c 83       	std	Y+4, r20	; 0x04
    EN_ERRORSTATE_t state;
    state = E_OK;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Direction == INPUT)
    1e52:	8c 81       	ldd	r24, Y+4	; 0x04
    1e54:	88 23       	and	r24, r24
    1e56:	09 f0       	breq	.+2      	; 0x1e5a <DIO_voidSetPinDirection+0x26>
    1e58:	76 c0       	rjmp	.+236    	; 0x1f46 <DIO_voidSetPinDirection+0x112>
    {
        switch (EN_port)
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	38 87       	std	Y+8, r19	; 0x08
    1e62:	2f 83       	std	Y+7, r18	; 0x07
    1e64:	8f 81       	ldd	r24, Y+7	; 0x07
    1e66:	98 85       	ldd	r25, Y+8	; 0x08
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	59 f1       	breq	.+86     	; 0x1ec4 <DIO_voidSetPinDirection+0x90>
    1e6e:	2f 81       	ldd	r18, Y+7	; 0x07
    1e70:	38 85       	ldd	r19, Y+8	; 0x08
    1e72:	22 30       	cpi	r18, 0x02	; 2
    1e74:	31 05       	cpc	r19, r1
    1e76:	2c f4       	brge	.+10     	; 0x1e82 <DIO_voidSetPinDirection+0x4e>
    1e78:	8f 81       	ldd	r24, Y+7	; 0x07
    1e7a:	98 85       	ldd	r25, Y+8	; 0x08
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	69 f0       	breq	.+26     	; 0x1e9a <DIO_voidSetPinDirection+0x66>
    1e80:	60 c0       	rjmp	.+192    	; 0x1f42 <DIO_voidSetPinDirection+0x10e>
    1e82:	2f 81       	ldd	r18, Y+7	; 0x07
    1e84:	38 85       	ldd	r19, Y+8	; 0x08
    1e86:	22 30       	cpi	r18, 0x02	; 2
    1e88:	31 05       	cpc	r19, r1
    1e8a:	89 f1       	breq	.+98     	; 0x1eee <DIO_voidSetPinDirection+0xba>
    1e8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1e8e:	98 85       	ldd	r25, Y+8	; 0x08
    1e90:	83 30       	cpi	r24, 0x03	; 3
    1e92:	91 05       	cpc	r25, r1
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <DIO_voidSetPinDirection+0x64>
    1e96:	40 c0       	rjmp	.+128    	; 0x1f18 <DIO_voidSetPinDirection+0xe4>
    1e98:	54 c0       	rjmp	.+168    	; 0x1f42 <DIO_voidSetPinDirection+0x10e>
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
    1e9a:	aa e3       	ldi	r26, 0x3A	; 58
    1e9c:	b0 e0       	ldi	r27, 0x00	; 0
    1e9e:	ea e3       	ldi	r30, 0x3A	; 58
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	80 81       	ld	r24, Z
    1ea4:	48 2f       	mov	r20, r24
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	02 2e       	mov	r0, r18
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <DIO_voidSetPinDirection+0x84>
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	0a 94       	dec	r0
    1eba:	e2 f7       	brpl	.-8      	; 0x1eb4 <DIO_voidSetPinDirection+0x80>
    1ebc:	80 95       	com	r24
    1ebe:	84 23       	and	r24, r20
    1ec0:	8c 93       	st	X, r24
    1ec2:	b5 c0       	rjmp	.+362    	; 0x202e <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
    1ec4:	a7 e3       	ldi	r26, 0x37	; 55
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e7 e3       	ldi	r30, 0x37	; 55
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	48 2f       	mov	r20, r24
    1ed0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	02 2e       	mov	r0, r18
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <DIO_voidSetPinDirection+0xae>
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	0a 94       	dec	r0
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <DIO_voidSetPinDirection+0xaa>
    1ee6:	80 95       	com	r24
    1ee8:	84 23       	and	r24, r20
    1eea:	8c 93       	st	X, r24
    1eec:	a0 c0       	rjmp	.+320    	; 0x202e <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
    1eee:	a4 e3       	ldi	r26, 0x34	; 52
    1ef0:	b0 e0       	ldi	r27, 0x00	; 0
    1ef2:	e4 e3       	ldi	r30, 0x34	; 52
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	48 2f       	mov	r20, r24
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	02 2e       	mov	r0, r18
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <DIO_voidSetPinDirection+0xd8>
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	0a 94       	dec	r0
    1f0e:	e2 f7       	brpl	.-8      	; 0x1f08 <DIO_voidSetPinDirection+0xd4>
    1f10:	80 95       	com	r24
    1f12:	84 23       	and	r24, r20
    1f14:	8c 93       	st	X, r24
    1f16:	8b c0       	rjmp	.+278    	; 0x202e <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
    1f18:	a1 e3       	ldi	r26, 0x31	; 49
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e1 e3       	ldi	r30, 0x31	; 49
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	48 2f       	mov	r20, r24
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	02 2e       	mov	r0, r18
    1f30:	02 c0       	rjmp	.+4      	; 0x1f36 <DIO_voidSetPinDirection+0x102>
    1f32:	88 0f       	add	r24, r24
    1f34:	99 1f       	adc	r25, r25
    1f36:	0a 94       	dec	r0
    1f38:	e2 f7       	brpl	.-8      	; 0x1f32 <DIO_voidSetPinDirection+0xfe>
    1f3a:	80 95       	com	r24
    1f3c:	84 23       	and	r24, r20
    1f3e:	8c 93       	st	X, r24
    1f40:	76 c0       	rjmp	.+236    	; 0x202e <DIO_voidSetPinDirection+0x1fa>
            break;
        default:
            state = E_ERROR;
    1f42:	19 82       	std	Y+1, r1	; 0x01
    1f44:	74 c0       	rjmp	.+232    	; 0x202e <DIO_voidSetPinDirection+0x1fa>
            break;
        }
    }
    else if (EN_Direction == OUTPUT)
    1f46:	8c 81       	ldd	r24, Y+4	; 0x04
    1f48:	81 30       	cpi	r24, 0x01	; 1
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <DIO_voidSetPinDirection+0x11a>
    1f4c:	70 c0       	rjmp	.+224    	; 0x202e <DIO_voidSetPinDirection+0x1fa>
    {
        switch (EN_port)
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	3e 83       	std	Y+6, r19	; 0x06
    1f56:	2d 83       	std	Y+5, r18	; 0x05
    1f58:	8d 81       	ldd	r24, Y+5	; 0x05
    1f5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5c:	81 30       	cpi	r24, 0x01	; 1
    1f5e:	91 05       	cpc	r25, r1
    1f60:	49 f1       	breq	.+82     	; 0x1fb4 <DIO_voidSetPinDirection+0x180>
    1f62:	2d 81       	ldd	r18, Y+5	; 0x05
    1f64:	3e 81       	ldd	r19, Y+6	; 0x06
    1f66:	22 30       	cpi	r18, 0x02	; 2
    1f68:	31 05       	cpc	r19, r1
    1f6a:	2c f4       	brge	.+10     	; 0x1f76 <DIO_voidSetPinDirection+0x142>
    1f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	61 f0       	breq	.+24     	; 0x1f8c <DIO_voidSetPinDirection+0x158>
    1f74:	5b c0       	rjmp	.+182    	; 0x202c <DIO_voidSetPinDirection+0x1f8>
    1f76:	2d 81       	ldd	r18, Y+5	; 0x05
    1f78:	3e 81       	ldd	r19, Y+6	; 0x06
    1f7a:	22 30       	cpi	r18, 0x02	; 2
    1f7c:	31 05       	cpc	r19, r1
    1f7e:	71 f1       	breq	.+92     	; 0x1fdc <DIO_voidSetPinDirection+0x1a8>
    1f80:	8d 81       	ldd	r24, Y+5	; 0x05
    1f82:	9e 81       	ldd	r25, Y+6	; 0x06
    1f84:	83 30       	cpi	r24, 0x03	; 3
    1f86:	91 05       	cpc	r25, r1
    1f88:	e9 f1       	breq	.+122    	; 0x2004 <DIO_voidSetPinDirection+0x1d0>
    1f8a:	50 c0       	rjmp	.+160    	; 0x202c <DIO_voidSetPinDirection+0x1f8>
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
    1f8c:	aa e3       	ldi	r26, 0x3A	; 58
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	ea e3       	ldi	r30, 0x3A	; 58
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	48 2f       	mov	r20, r24
    1f98:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	02 2e       	mov	r0, r18
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <DIO_voidSetPinDirection+0x176>
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	0a 94       	dec	r0
    1fac:	e2 f7       	brpl	.-8      	; 0x1fa6 <DIO_voidSetPinDirection+0x172>
    1fae:	84 2b       	or	r24, r20
    1fb0:	8c 93       	st	X, r24
    1fb2:	3d c0       	rjmp	.+122    	; 0x202e <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
    1fb4:	a7 e3       	ldi	r26, 0x37	; 55
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e7 e3       	ldi	r30, 0x37	; 55
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	48 2f       	mov	r20, r24
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	28 2f       	mov	r18, r24
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	02 2e       	mov	r0, r18
    1fcc:	02 c0       	rjmp	.+4      	; 0x1fd2 <DIO_voidSetPinDirection+0x19e>
    1fce:	88 0f       	add	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	0a 94       	dec	r0
    1fd4:	e2 f7       	brpl	.-8      	; 0x1fce <DIO_voidSetPinDirection+0x19a>
    1fd6:	84 2b       	or	r24, r20
    1fd8:	8c 93       	st	X, r24
    1fda:	29 c0       	rjmp	.+82     	; 0x202e <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
    1fdc:	a4 e3       	ldi	r26, 0x34	; 52
    1fde:	b0 e0       	ldi	r27, 0x00	; 0
    1fe0:	e4 e3       	ldi	r30, 0x34	; 52
    1fe2:	f0 e0       	ldi	r31, 0x00	; 0
    1fe4:	80 81       	ld	r24, Z
    1fe6:	48 2f       	mov	r20, r24
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	02 2e       	mov	r0, r18
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <DIO_voidSetPinDirection+0x1c6>
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	0a 94       	dec	r0
    1ffc:	e2 f7       	brpl	.-8      	; 0x1ff6 <DIO_voidSetPinDirection+0x1c2>
    1ffe:	84 2b       	or	r24, r20
    2000:	8c 93       	st	X, r24
    2002:	15 c0       	rjmp	.+42     	; 0x202e <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
    2004:	a1 e3       	ldi	r26, 0x31	; 49
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e1 e3       	ldi	r30, 0x31	; 49
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	48 2f       	mov	r20, r24
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	81 e0       	ldi	r24, 0x01	; 1
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	02 2e       	mov	r0, r18
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <DIO_voidSetPinDirection+0x1ee>
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	0a 94       	dec	r0
    2024:	e2 f7       	brpl	.-8      	; 0x201e <DIO_voidSetPinDirection+0x1ea>
    2026:	84 2b       	or	r24, r20
    2028:	8c 93       	st	X, r24
    202a:	01 c0       	rjmp	.+2      	; 0x202e <DIO_voidSetPinDirection+0x1fa>
            break;
        default:
            state = E_ERROR;
    202c:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
    202e:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinDirection */
    2030:	28 96       	adiw	r28, 0x08	; 8
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <DIO_u8GetPinValue>:
 * @param EN_Port           PORT Name
 * @param EN_Pin            PIN Number
 * @return EN_value_type    return Pin HIGH | LOW
 */
EN_value_type DIO_u8GetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	00 d0       	rcall	.+0      	; 0x2048 <DIO_u8GetPinValue+0x6>
    2048:	00 d0       	rcall	.+0      	; 0x204a <DIO_u8GetPinValue+0x8>
    204a:	0f 92       	push	r0
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	8a 83       	std	Y+2, r24	; 0x02
    2052:	6b 83       	std	Y+3, r22	; 0x03
    EN_value_type EN_ret_val;
    switch (EN_Port)
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	3d 83       	std	Y+5, r19	; 0x05
    205c:	2c 83       	std	Y+4, r18	; 0x04
    205e:	4c 81       	ldd	r20, Y+4	; 0x04
    2060:	5d 81       	ldd	r21, Y+5	; 0x05
    2062:	41 30       	cpi	r20, 0x01	; 1
    2064:	51 05       	cpc	r21, r1
    2066:	41 f1       	breq	.+80     	; 0x20b8 <DIO_u8GetPinValue+0x76>
    2068:	8c 81       	ldd	r24, Y+4	; 0x04
    206a:	9d 81       	ldd	r25, Y+5	; 0x05
    206c:	82 30       	cpi	r24, 0x02	; 2
    206e:	91 05       	cpc	r25, r1
    2070:	34 f4       	brge	.+12     	; 0x207e <DIO_u8GetPinValue+0x3c>
    2072:	2c 81       	ldd	r18, Y+4	; 0x04
    2074:	3d 81       	ldd	r19, Y+5	; 0x05
    2076:	21 15       	cp	r18, r1
    2078:	31 05       	cpc	r19, r1
    207a:	61 f0       	breq	.+24     	; 0x2094 <DIO_u8GetPinValue+0x52>
    207c:	52 c0       	rjmp	.+164    	; 0x2122 <DIO_u8GetPinValue+0xe0>
    207e:	4c 81       	ldd	r20, Y+4	; 0x04
    2080:	5d 81       	ldd	r21, Y+5	; 0x05
    2082:	42 30       	cpi	r20, 0x02	; 2
    2084:	51 05       	cpc	r21, r1
    2086:	51 f1       	breq	.+84     	; 0x20dc <DIO_u8GetPinValue+0x9a>
    2088:	8c 81       	ldd	r24, Y+4	; 0x04
    208a:	9d 81       	ldd	r25, Y+5	; 0x05
    208c:	83 30       	cpi	r24, 0x03	; 3
    208e:	91 05       	cpc	r25, r1
    2090:	b9 f1       	breq	.+110    	; 0x2100 <DIO_u8GetPinValue+0xbe>
    2092:	47 c0       	rjmp	.+142    	; 0x2122 <DIO_u8GetPinValue+0xe0>
    {
    case PORT_A:
        EN_ret_val = GETBIT(PINA, EN_Pin);
    2094:	e9 e3       	ldi	r30, 0x39	; 57
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	80 81       	ld	r24, Z
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	88 2f       	mov	r24, r24
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	a9 01       	movw	r20, r18
    20a6:	02 c0       	rjmp	.+4      	; 0x20ac <DIO_u8GetPinValue+0x6a>
    20a8:	55 95       	asr	r21
    20aa:	47 95       	ror	r20
    20ac:	8a 95       	dec	r24
    20ae:	e2 f7       	brpl	.-8      	; 0x20a8 <DIO_u8GetPinValue+0x66>
    20b0:	ca 01       	movw	r24, r20
    20b2:	81 70       	andi	r24, 0x01	; 1
    20b4:	89 83       	std	Y+1, r24	; 0x01
    20b6:	35 c0       	rjmp	.+106    	; 0x2122 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_B:
        EN_ret_val = GETBIT(PINB, EN_Pin);
    20b8:	e6 e3       	ldi	r30, 0x36	; 54
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	80 81       	ld	r24, Z
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	88 2f       	mov	r24, r24
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	a9 01       	movw	r20, r18
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <DIO_u8GetPinValue+0x8e>
    20cc:	55 95       	asr	r21
    20ce:	47 95       	ror	r20
    20d0:	8a 95       	dec	r24
    20d2:	e2 f7       	brpl	.-8      	; 0x20cc <DIO_u8GetPinValue+0x8a>
    20d4:	ca 01       	movw	r24, r20
    20d6:	81 70       	andi	r24, 0x01	; 1
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	23 c0       	rjmp	.+70     	; 0x2122 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_C:
        EN_ret_val = GETBIT(PINC, EN_Pin);
    20dc:	e3 e3       	ldi	r30, 0x33	; 51
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	80 81       	ld	r24, Z
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	88 2f       	mov	r24, r24
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	a9 01       	movw	r20, r18
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <DIO_u8GetPinValue+0xb2>
    20f0:	55 95       	asr	r21
    20f2:	47 95       	ror	r20
    20f4:	8a 95       	dec	r24
    20f6:	e2 f7       	brpl	.-8      	; 0x20f0 <DIO_u8GetPinValue+0xae>
    20f8:	ca 01       	movw	r24, r20
    20fa:	81 70       	andi	r24, 0x01	; 1
    20fc:	89 83       	std	Y+1, r24	; 0x01
    20fe:	11 c0       	rjmp	.+34     	; 0x2122 <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_D:
        EN_ret_val = GETBIT(PIND, EN_Pin);
    2100:	e0 e3       	ldi	r30, 0x30	; 48
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	88 2f       	mov	r24, r24
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	a9 01       	movw	r20, r18
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <DIO_u8GetPinValue+0xd6>
    2114:	55 95       	asr	r21
    2116:	47 95       	ror	r20
    2118:	8a 95       	dec	r24
    211a:	e2 f7       	brpl	.-8      	; 0x2114 <DIO_u8GetPinValue+0xd2>
    211c:	ca 01       	movw	r24, r20
    211e:	81 70       	andi	r24, 0x01	; 1
    2120:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return EN_ret_val;
    2122:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_u8GetPinValue */
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <DIO_voidTogPin>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidTogPin(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	00 d0       	rcall	.+0      	; 0x213a <DIO_voidTogPin+0x6>
    213a:	00 d0       	rcall	.+0      	; 0x213c <DIO_voidTogPin+0x8>
    213c:	0f 92       	push	r0
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	8a 83       	std	Y+2, r24	; 0x02
    2144:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	28 2f       	mov	r18, r24
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	3d 83       	std	Y+5, r19	; 0x05
    2152:	2c 83       	std	Y+4, r18	; 0x04
    2154:	8c 81       	ldd	r24, Y+4	; 0x04
    2156:	9d 81       	ldd	r25, Y+5	; 0x05
    2158:	81 30       	cpi	r24, 0x01	; 1
    215a:	91 05       	cpc	r25, r1
    215c:	49 f1       	breq	.+82     	; 0x21b0 <DIO_voidTogPin+0x7c>
    215e:	2c 81       	ldd	r18, Y+4	; 0x04
    2160:	3d 81       	ldd	r19, Y+5	; 0x05
    2162:	22 30       	cpi	r18, 0x02	; 2
    2164:	31 05       	cpc	r19, r1
    2166:	2c f4       	brge	.+10     	; 0x2172 <DIO_voidTogPin+0x3e>
    2168:	8c 81       	ldd	r24, Y+4	; 0x04
    216a:	9d 81       	ldd	r25, Y+5	; 0x05
    216c:	00 97       	sbiw	r24, 0x00	; 0
    216e:	61 f0       	breq	.+24     	; 0x2188 <DIO_voidTogPin+0x54>
    2170:	5b c0       	rjmp	.+182    	; 0x2228 <DIO_voidTogPin+0xf4>
    2172:	2c 81       	ldd	r18, Y+4	; 0x04
    2174:	3d 81       	ldd	r19, Y+5	; 0x05
    2176:	22 30       	cpi	r18, 0x02	; 2
    2178:	31 05       	cpc	r19, r1
    217a:	71 f1       	breq	.+92     	; 0x21d8 <DIO_voidTogPin+0xa4>
    217c:	8c 81       	ldd	r24, Y+4	; 0x04
    217e:	9d 81       	ldd	r25, Y+5	; 0x05
    2180:	83 30       	cpi	r24, 0x03	; 3
    2182:	91 05       	cpc	r25, r1
    2184:	e9 f1       	breq	.+122    	; 0x2200 <DIO_voidTogPin+0xcc>
    2186:	50 c0       	rjmp	.+160    	; 0x2228 <DIO_voidTogPin+0xf4>
    {
    case PORT_A:
        TGLBIT(PORTA, EN_Pin);
    2188:	ab e3       	ldi	r26, 0x3B	; 59
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	eb e3       	ldi	r30, 0x3B	; 59
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	48 2f       	mov	r20, r24
    2194:	8b 81       	ldd	r24, Y+3	; 0x03
    2196:	28 2f       	mov	r18, r24
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	81 e0       	ldi	r24, 0x01	; 1
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	02 2e       	mov	r0, r18
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <DIO_voidTogPin+0x72>
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	0a 94       	dec	r0
    21a8:	e2 f7       	brpl	.-8      	; 0x21a2 <DIO_voidTogPin+0x6e>
    21aa:	84 27       	eor	r24, r20
    21ac:	8c 93       	st	X, r24
    21ae:	3d c0       	rjmp	.+122    	; 0x222a <DIO_voidTogPin+0xf6>
        break;
    case PORT_B:
        TGLBIT(PORTB, EN_Pin);
    21b0:	a8 e3       	ldi	r26, 0x38	; 56
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e8 e3       	ldi	r30, 0x38	; 56
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	48 2f       	mov	r20, r24
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	02 2e       	mov	r0, r18
    21c8:	02 c0       	rjmp	.+4      	; 0x21ce <DIO_voidTogPin+0x9a>
    21ca:	88 0f       	add	r24, r24
    21cc:	99 1f       	adc	r25, r25
    21ce:	0a 94       	dec	r0
    21d0:	e2 f7       	brpl	.-8      	; 0x21ca <DIO_voidTogPin+0x96>
    21d2:	84 27       	eor	r24, r20
    21d4:	8c 93       	st	X, r24
    21d6:	29 c0       	rjmp	.+82     	; 0x222a <DIO_voidTogPin+0xf6>
        break;
    case PORT_C:
        TGLBIT(PORTC, EN_Pin);
    21d8:	a5 e3       	ldi	r26, 0x35	; 53
    21da:	b0 e0       	ldi	r27, 0x00	; 0
    21dc:	e5 e3       	ldi	r30, 0x35	; 53
    21de:	f0 e0       	ldi	r31, 0x00	; 0
    21e0:	80 81       	ld	r24, Z
    21e2:	48 2f       	mov	r20, r24
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	02 2e       	mov	r0, r18
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <DIO_voidTogPin+0xc2>
    21f2:	88 0f       	add	r24, r24
    21f4:	99 1f       	adc	r25, r25
    21f6:	0a 94       	dec	r0
    21f8:	e2 f7       	brpl	.-8      	; 0x21f2 <DIO_voidTogPin+0xbe>
    21fa:	84 27       	eor	r24, r20
    21fc:	8c 93       	st	X, r24
    21fe:	15 c0       	rjmp	.+42     	; 0x222a <DIO_voidTogPin+0xf6>
        break;
    case PORT_D:
        TGLBIT(PORTD, EN_Pin);
    2200:	a2 e3       	ldi	r26, 0x32	; 50
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	e2 e3       	ldi	r30, 0x32	; 50
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	48 2f       	mov	r20, r24
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	02 2e       	mov	r0, r18
    2218:	02 c0       	rjmp	.+4      	; 0x221e <DIO_voidTogPin+0xea>
    221a:	88 0f       	add	r24, r24
    221c:	99 1f       	adc	r25, r25
    221e:	0a 94       	dec	r0
    2220:	e2 f7       	brpl	.-8      	; 0x221a <DIO_voidTogPin+0xe6>
    2222:	84 27       	eor	r24, r20
    2224:	8c 93       	st	X, r24
    2226:	01 c0       	rjmp	.+2      	; 0x222a <DIO_voidTogPin+0xf6>
        break;
    default:
        state = E_ERROR;
    2228:	19 82       	std	Y+1, r1	; 0x01
        break;
    }

    return state;
    222a:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidTogPin */
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	0f 90       	pop	r0
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	cf 91       	pop	r28
    2238:	df 91       	pop	r29
    223a:	08 95       	ret

0000223c <DIO_voidSetPortValue>:
 * @param EN_Port PORT Name
 * @param EN_Value HIGH | LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPortValue(EN_port_num EN_Port, EN_value_type EN_Value)
{
    223c:	df 93       	push	r29
    223e:	cf 93       	push	r28
    2240:	00 d0       	rcall	.+0      	; 0x2242 <DIO_voidSetPortValue+0x6>
    2242:	00 d0       	rcall	.+0      	; 0x2244 <DIO_voidSetPortValue+0x8>
    2244:	0f 92       	push	r0
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	8a 83       	std	Y+2, r24	; 0x02
    224c:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	3d 83       	std	Y+5, r19	; 0x05
    225a:	2c 83       	std	Y+4, r18	; 0x04
    225c:	8c 81       	ldd	r24, Y+4	; 0x04
    225e:	9d 81       	ldd	r25, Y+5	; 0x05
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	91 05       	cpc	r25, r1
    2264:	d1 f0       	breq	.+52     	; 0x229a <DIO_voidSetPortValue+0x5e>
    2266:	2c 81       	ldd	r18, Y+4	; 0x04
    2268:	3d 81       	ldd	r19, Y+5	; 0x05
    226a:	22 30       	cpi	r18, 0x02	; 2
    226c:	31 05       	cpc	r19, r1
    226e:	2c f4       	brge	.+10     	; 0x227a <DIO_voidSetPortValue+0x3e>
    2270:	8c 81       	ldd	r24, Y+4	; 0x04
    2272:	9d 81       	ldd	r25, Y+5	; 0x05
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	61 f0       	breq	.+24     	; 0x2290 <DIO_voidSetPortValue+0x54>
    2278:	1f c0       	rjmp	.+62     	; 0x22b8 <DIO_voidSetPortValue+0x7c>
    227a:	2c 81       	ldd	r18, Y+4	; 0x04
    227c:	3d 81       	ldd	r19, Y+5	; 0x05
    227e:	22 30       	cpi	r18, 0x02	; 2
    2280:	31 05       	cpc	r19, r1
    2282:	81 f0       	breq	.+32     	; 0x22a4 <DIO_voidSetPortValue+0x68>
    2284:	8c 81       	ldd	r24, Y+4	; 0x04
    2286:	9d 81       	ldd	r25, Y+5	; 0x05
    2288:	83 30       	cpi	r24, 0x03	; 3
    228a:	91 05       	cpc	r25, r1
    228c:	81 f0       	breq	.+32     	; 0x22ae <DIO_voidSetPortValue+0x72>
    228e:	14 c0       	rjmp	.+40     	; 0x22b8 <DIO_voidSetPortValue+0x7c>
    {
    case PORT_A:
        PORTA = EN_Value;
    2290:	eb e3       	ldi	r30, 0x3B	; 59
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	80 83       	st	Z, r24
    2298:	10 c0       	rjmp	.+32     	; 0x22ba <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_B:
        PORTB = EN_Value;
    229a:	e8 e3       	ldi	r30, 0x38	; 56
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	80 83       	st	Z, r24
    22a2:	0b c0       	rjmp	.+22     	; 0x22ba <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_C:
        PORTC = EN_Value;
    22a4:	e5 e3       	ldi	r30, 0x35	; 53
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	8b 81       	ldd	r24, Y+3	; 0x03
    22aa:	80 83       	st	Z, r24
    22ac:	06 c0       	rjmp	.+12     	; 0x22ba <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_D:
        PORTD = EN_Value;
    22ae:	e2 e3       	ldi	r30, 0x32	; 50
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	80 83       	st	Z, r24
    22b6:	01 c0       	rjmp	.+2      	; 0x22ba <DIO_voidSetPortValue+0x7e>
        break;
    default:
        state = E_ERROR;
    22b8:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    22ba:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPortValue */
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	cf 91       	pop	r28
    22c8:	df 91       	pop	r29
    22ca:	08 95       	ret

000022cc <DIO_voidSetPortDirection>:
 * @param EN_Port PORT Name
 * @param EN_Direction PORT Direction
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPortDirection(EN_port_num EN_Port, EN_direction_type EN_Direction)
{
    22cc:	df 93       	push	r29
    22ce:	cf 93       	push	r28
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <DIO_voidSetPortDirection+0x6>
    22d2:	00 d0       	rcall	.+0      	; 0x22d4 <DIO_voidSetPortDirection+0x8>
    22d4:	0f 92       	push	r0
    22d6:	cd b7       	in	r28, 0x3d	; 61
    22d8:	de b7       	in	r29, 0x3e	; 62
    22da:	8a 83       	std	Y+2, r24	; 0x02
    22dc:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	28 2f       	mov	r18, r24
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	3d 83       	std	Y+5, r19	; 0x05
    22ea:	2c 83       	std	Y+4, r18	; 0x04
    22ec:	8c 81       	ldd	r24, Y+4	; 0x04
    22ee:	9d 81       	ldd	r25, Y+5	; 0x05
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	91 05       	cpc	r25, r1
    22f4:	d1 f0       	breq	.+52     	; 0x232a <DIO_voidSetPortDirection+0x5e>
    22f6:	2c 81       	ldd	r18, Y+4	; 0x04
    22f8:	3d 81       	ldd	r19, Y+5	; 0x05
    22fa:	22 30       	cpi	r18, 0x02	; 2
    22fc:	31 05       	cpc	r19, r1
    22fe:	2c f4       	brge	.+10     	; 0x230a <DIO_voidSetPortDirection+0x3e>
    2300:	8c 81       	ldd	r24, Y+4	; 0x04
    2302:	9d 81       	ldd	r25, Y+5	; 0x05
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	61 f0       	breq	.+24     	; 0x2320 <DIO_voidSetPortDirection+0x54>
    2308:	1f c0       	rjmp	.+62     	; 0x2348 <DIO_voidSetPortDirection+0x7c>
    230a:	2c 81       	ldd	r18, Y+4	; 0x04
    230c:	3d 81       	ldd	r19, Y+5	; 0x05
    230e:	22 30       	cpi	r18, 0x02	; 2
    2310:	31 05       	cpc	r19, r1
    2312:	81 f0       	breq	.+32     	; 0x2334 <DIO_voidSetPortDirection+0x68>
    2314:	8c 81       	ldd	r24, Y+4	; 0x04
    2316:	9d 81       	ldd	r25, Y+5	; 0x05
    2318:	83 30       	cpi	r24, 0x03	; 3
    231a:	91 05       	cpc	r25, r1
    231c:	81 f0       	breq	.+32     	; 0x233e <DIO_voidSetPortDirection+0x72>
    231e:	14 c0       	rjmp	.+40     	; 0x2348 <DIO_voidSetPortDirection+0x7c>
    {
    case PORT_A:
        DDRA = EN_Direction;
    2320:	ea e3       	ldi	r30, 0x3A	; 58
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	80 83       	st	Z, r24
    2328:	10 c0       	rjmp	.+32     	; 0x234a <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_B:
        DDRB = EN_Direction;
    232a:	e7 e3       	ldi	r30, 0x37	; 55
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	80 83       	st	Z, r24
    2332:	0b c0       	rjmp	.+22     	; 0x234a <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_C:
        DDRC = EN_Direction;
    2334:	e4 e3       	ldi	r30, 0x34	; 52
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	80 83       	st	Z, r24
    233c:	06 c0       	rjmp	.+12     	; 0x234a <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_D:
        DDRD = EN_Direction;
    233e:	e1 e3       	ldi	r30, 0x31	; 49
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	80 83       	st	Z, r24
    2346:	01 c0       	rjmp	.+2      	; 0x234a <DIO_voidSetPortDirection+0x7e>
        break;
    default:
        state = E_ERROR;
    2348:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    234a:	89 81       	ldd	r24, Y+1	; 0x01

} /* DIO_voidSetPortDirection */
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	08 95       	ret

0000235c <DIO_voidInpullUp>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidInpullUp(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    235c:	df 93       	push	r29
    235e:	cf 93       	push	r28
    2360:	00 d0       	rcall	.+0      	; 0x2362 <DIO_voidInpullUp+0x6>
    2362:	00 d0       	rcall	.+0      	; 0x2364 <DIO_voidInpullUp+0x8>
    2364:	0f 92       	push	r0
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	8a 83       	std	Y+2, r24	; 0x02
    236c:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	28 2f       	mov	r18, r24
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	3d 83       	std	Y+5, r19	; 0x05
    237a:	2c 83       	std	Y+4, r18	; 0x04
    237c:	8c 81       	ldd	r24, Y+4	; 0x04
    237e:	9d 81       	ldd	r25, Y+5	; 0x05
    2380:	81 30       	cpi	r24, 0x01	; 1
    2382:	91 05       	cpc	r25, r1
    2384:	09 f4       	brne	.+2      	; 0x2388 <DIO_voidInpullUp+0x2c>
    2386:	3e c0       	rjmp	.+124    	; 0x2404 <DIO_voidInpullUp+0xa8>
    2388:	2c 81       	ldd	r18, Y+4	; 0x04
    238a:	3d 81       	ldd	r19, Y+5	; 0x05
    238c:	22 30       	cpi	r18, 0x02	; 2
    238e:	31 05       	cpc	r19, r1
    2390:	2c f4       	brge	.+10     	; 0x239c <DIO_voidInpullUp+0x40>
    2392:	8c 81       	ldd	r24, Y+4	; 0x04
    2394:	9d 81       	ldd	r25, Y+5	; 0x05
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	71 f0       	breq	.+28     	; 0x23b6 <DIO_voidInpullUp+0x5a>
    239a:	a9 c0       	rjmp	.+338    	; 0x24ee <DIO_voidInpullUp+0x192>
    239c:	2c 81       	ldd	r18, Y+4	; 0x04
    239e:	3d 81       	ldd	r19, Y+5	; 0x05
    23a0:	22 30       	cpi	r18, 0x02	; 2
    23a2:	31 05       	cpc	r19, r1
    23a4:	09 f4       	brne	.+2      	; 0x23a8 <DIO_voidInpullUp+0x4c>
    23a6:	55 c0       	rjmp	.+170    	; 0x2452 <DIO_voidInpullUp+0xf6>
    23a8:	8c 81       	ldd	r24, Y+4	; 0x04
    23aa:	9d 81       	ldd	r25, Y+5	; 0x05
    23ac:	83 30       	cpi	r24, 0x03	; 3
    23ae:	91 05       	cpc	r25, r1
    23b0:	09 f4       	brne	.+2      	; 0x23b4 <DIO_voidInpullUp+0x58>
    23b2:	76 c0       	rjmp	.+236    	; 0x24a0 <DIO_voidInpullUp+0x144>
    23b4:	9c c0       	rjmp	.+312    	; 0x24ee <DIO_voidInpullUp+0x192>
    {
    case PORT_A:
        CLRBIT(DDRA, EN_Pin);
    23b6:	aa e3       	ldi	r26, 0x3A	; 58
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	ea e3       	ldi	r30, 0x3A	; 58
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	48 2f       	mov	r20, r24
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <DIO_voidInpullUp+0x76>
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	2a 95       	dec	r18
    23d4:	e2 f7       	brpl	.-8      	; 0x23ce <DIO_voidInpullUp+0x72>
    23d6:	80 95       	com	r24
    23d8:	84 23       	and	r24, r20
    23da:	8c 93       	st	X, r24
        SETBIT(PORTA, EN_Pin);
    23dc:	ab e3       	ldi	r26, 0x3B	; 59
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	eb e3       	ldi	r30, 0x3B	; 59
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	48 2f       	mov	r20, r24
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	02 2e       	mov	r0, r18
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <DIO_voidInpullUp+0x9e>
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	0a 94       	dec	r0
    23fc:	e2 f7       	brpl	.-8      	; 0x23f6 <DIO_voidInpullUp+0x9a>
    23fe:	84 2b       	or	r24, r20
    2400:	8c 93       	st	X, r24
    2402:	76 c0       	rjmp	.+236    	; 0x24f0 <DIO_voidInpullUp+0x194>
        break;
    case PORT_B:
        CLRBIT(DDRB, EN_Pin);
    2404:	a7 e3       	ldi	r26, 0x37	; 55
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e7 e3       	ldi	r30, 0x37	; 55
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	48 2f       	mov	r20, r24
    2410:	8b 81       	ldd	r24, Y+3	; 0x03
    2412:	28 2f       	mov	r18, r24
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <DIO_voidInpullUp+0xc4>
    241c:	88 0f       	add	r24, r24
    241e:	99 1f       	adc	r25, r25
    2420:	2a 95       	dec	r18
    2422:	e2 f7       	brpl	.-8      	; 0x241c <DIO_voidInpullUp+0xc0>
    2424:	80 95       	com	r24
    2426:	84 23       	and	r24, r20
    2428:	8c 93       	st	X, r24
        SETBIT(PORTB, EN_Pin);
    242a:	a8 e3       	ldi	r26, 0x38	; 56
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	e8 e3       	ldi	r30, 0x38	; 56
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	48 2f       	mov	r20, r24
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	02 2e       	mov	r0, r18
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <DIO_voidInpullUp+0xec>
    2444:	88 0f       	add	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	0a 94       	dec	r0
    244a:	e2 f7       	brpl	.-8      	; 0x2444 <DIO_voidInpullUp+0xe8>
    244c:	84 2b       	or	r24, r20
    244e:	8c 93       	st	X, r24
    2450:	4f c0       	rjmp	.+158    	; 0x24f0 <DIO_voidInpullUp+0x194>
        break;
    case PORT_C:
        CLRBIT(DDRC, EN_Pin);
    2452:	a4 e3       	ldi	r26, 0x34	; 52
    2454:	b0 e0       	ldi	r27, 0x00	; 0
    2456:	e4 e3       	ldi	r30, 0x34	; 52
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	48 2f       	mov	r20, r24
    245e:	8b 81       	ldd	r24, Y+3	; 0x03
    2460:	28 2f       	mov	r18, r24
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	02 c0       	rjmp	.+4      	; 0x246e <DIO_voidInpullUp+0x112>
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	2a 95       	dec	r18
    2470:	e2 f7       	brpl	.-8      	; 0x246a <DIO_voidInpullUp+0x10e>
    2472:	80 95       	com	r24
    2474:	84 23       	and	r24, r20
    2476:	8c 93       	st	X, r24
        SETBIT(PORTC, EN_Pin);
    2478:	a5 e3       	ldi	r26, 0x35	; 53
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e5 e3       	ldi	r30, 0x35	; 53
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	48 2f       	mov	r20, r24
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	28 2f       	mov	r18, r24
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	02 2e       	mov	r0, r18
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <DIO_voidInpullUp+0x13a>
    2492:	88 0f       	add	r24, r24
    2494:	99 1f       	adc	r25, r25
    2496:	0a 94       	dec	r0
    2498:	e2 f7       	brpl	.-8      	; 0x2492 <DIO_voidInpullUp+0x136>
    249a:	84 2b       	or	r24, r20
    249c:	8c 93       	st	X, r24
    249e:	28 c0       	rjmp	.+80     	; 0x24f0 <DIO_voidInpullUp+0x194>
        break;
    case PORT_D:
        CLRBIT(DDRD, EN_Pin);
    24a0:	a1 e3       	ldi	r26, 0x31	; 49
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	e1 e3       	ldi	r30, 0x31	; 49
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	48 2f       	mov	r20, r24
    24ac:	8b 81       	ldd	r24, Y+3	; 0x03
    24ae:	28 2f       	mov	r18, r24
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <DIO_voidInpullUp+0x160>
    24b8:	88 0f       	add	r24, r24
    24ba:	99 1f       	adc	r25, r25
    24bc:	2a 95       	dec	r18
    24be:	e2 f7       	brpl	.-8      	; 0x24b8 <DIO_voidInpullUp+0x15c>
    24c0:	80 95       	com	r24
    24c2:	84 23       	and	r24, r20
    24c4:	8c 93       	st	X, r24
        SETBIT(PORTD, EN_Pin);
    24c6:	a2 e3       	ldi	r26, 0x32	; 50
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e2 e3       	ldi	r30, 0x32	; 50
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	48 2f       	mov	r20, r24
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	28 2f       	mov	r18, r24
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	02 2e       	mov	r0, r18
    24de:	02 c0       	rjmp	.+4      	; 0x24e4 <DIO_voidInpullUp+0x188>
    24e0:	88 0f       	add	r24, r24
    24e2:	99 1f       	adc	r25, r25
    24e4:	0a 94       	dec	r0
    24e6:	e2 f7       	brpl	.-8      	; 0x24e0 <DIO_voidInpullUp+0x184>
    24e8:	84 2b       	or	r24, r20
    24ea:	8c 93       	st	X, r24
    24ec:	01 c0       	rjmp	.+2      	; 0x24f0 <DIO_voidInpullUp+0x194>
        break;
    default:
        state = E_ERROR;
    24ee:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidInpullUp */
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	08 95       	ret

00002502 <ADC_VoidInit>:
#include"Memmap.h"
#include"ADC_Interface.h"
#include"ADC_Config.h"

void ADC_VoidInit(void)
{
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
#if ADC_VREF == INTERNAL_OFF
	CLRBIT( ADMUX , 6 ) ;  /*REFS0*/
	CLRBIT( ADMUX , 7 ) ;  /*REFS1*/

#elif ADC_VREF == EXTERNAL_AVCC
	SETBIT( ADMUX , 6 ) ;   /*REFS0*/
    250a:	a7 e2       	ldi	r26, 0x27	; 39
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	e7 e2       	ldi	r30, 0x27	; 39
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	80 64       	ori	r24, 0x40	; 64
    2516:	8c 93       	st	X, r24
	CLRBIT( ADMUX , 7 ) ; /*REFS1*/
    2518:	a7 e2       	ldi	r26, 0x27	; 39
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e7 e2       	ldi	r30, 0x27	; 39
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	8f 77       	andi	r24, 0x7F	; 127
    2524:	8c 93       	st	X, r24

#endif


#if ADC_ADJ	== RIGHT_ADJ
	CLRBIT( ADMUX , 5 ) ; /*ADLAR*/
    2526:	a7 e2       	ldi	r26, 0x27	; 39
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	e7 e2       	ldi	r30, 0x27	; 39
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	8f 7d       	andi	r24, 0xDF	; 223
    2532:	8c 93       	st	X, r24

#endif


#if ADC_PRESCALER == PRESCALER_2
	SETBIT(ADCSRA, 0);
    2534:	a6 e2       	ldi	r26, 0x26	; 38
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e6 e2       	ldi	r30, 0x26	; 38
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	80 81       	ld	r24, Z
    253e:	81 60       	ori	r24, 0x01	; 1
    2540:	8c 93       	st	X, r24
	CLRBIT(ADCSRA,1);
    2542:	a6 e2       	ldi	r26, 0x26	; 38
    2544:	b0 e0       	ldi	r27, 0x00	; 0
    2546:	e6 e2       	ldi	r30, 0x26	; 38
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	80 81       	ld	r24, Z
    254c:	8d 7f       	andi	r24, 0xFD	; 253
    254e:	8c 93       	st	X, r24
	CLRBIT(ADCSRA,2);
    2550:	a6 e2       	ldi	r26, 0x26	; 38
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	e6 e2       	ldi	r30, 0x26	; 38
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	8b 7f       	andi	r24, 0xFB	; 251
    255c:	8c 93       	st	X, r24
	SETBIT( ADCSRA , 0 ) ;
	SETBIT( ADCSRA , 1 ) ;
	SETBIT( ADCSRA , 2 ) ;

#endif
	SETBIT( ADCSRA , 7 ) ;       /*Enable ADC*/
    255e:	a6 e2       	ldi	r26, 0x26	; 38
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e6 e2       	ldi	r30, 0x26	; 38
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	80 68       	ori	r24, 0x80	; 128
    256a:	8c 93       	st	X, r24
}
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <ADC_U16GetChannelReading>:


uint32_t ADC_U16GetChannelReading(uint8_t Channel)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	00 d0       	rcall	.+0      	; 0x2578 <ADC_U16GetChannelReading+0x6>
    2578:	00 d0       	rcall	.+0      	; 0x257a <ADC_U16GetChannelReading+0x8>
    257a:	0f 92       	push	r0
    257c:	cd b7       	in	r28, 0x3d	; 61
    257e:	de b7       	in	r29, 0x3e	; 62
    2580:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t Relult = 0 ;
    2582:	19 82       	std	Y+1, r1	; 0x01
    2584:	1a 82       	std	Y+2, r1	; 0x02
    2586:	1b 82       	std	Y+3, r1	; 0x03
    2588:	1c 82       	std	Y+4, r1	; 0x04
	ADMUX&= 0XE0 ;                      /*0b11100000*/
    258a:	a7 e2       	ldi	r26, 0x27	; 39
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e7 e2       	ldi	r30, 0x27	; 39
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	80 7e       	andi	r24, 0xE0	; 224
    2596:	8c 93       	st	X, r24
	ADMUX |= Channel ;
    2598:	a7 e2       	ldi	r26, 0x27	; 39
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	e7 e2       	ldi	r30, 0x27	; 39
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	90 81       	ld	r25, Z
    25a2:	8d 81       	ldd	r24, Y+5	; 0x05
    25a4:	89 2b       	or	r24, r25
    25a6:	8c 93       	st	X, r24
	SETBIT(ADCSRA,6);                  /* Start Conversion*/
    25a8:	a6 e2       	ldi	r26, 0x26	; 38
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	e6 e2       	ldi	r30, 0x26	; 38
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	80 64       	ori	r24, 0x40	; 64
    25b4:	8c 93       	st	X, r24
	while(GETBIT(ADCSRA,4)==0);     	/*polling on the conversion complete flag*/
    25b6:	e6 e2       	ldi	r30, 0x26	; 38
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	82 95       	swap	r24
    25be:	8f 70       	andi	r24, 0x0F	; 15
    25c0:	88 2f       	mov	r24, r24
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	81 70       	andi	r24, 0x01	; 1
    25c6:	90 70       	andi	r25, 0x00	; 0
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	a9 f3       	breq	.-22     	; 0x25b6 <ADC_U16GetChannelReading+0x44>
	SETBIT(ADCSRA,4);                  /*CLEAR THE FLAG*/
    25cc:	a6 e2       	ldi	r26, 0x26	; 38
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	e6 e2       	ldi	r30, 0x26	; 38
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	80 61       	ori	r24, 0x10	; 16
    25d8:	8c 93       	st	X, r24
	Relult = ADC;                       /*get the result*/
    25da:	e4 e2       	ldi	r30, 0x24	; 36
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	91 81       	ldd	r25, Z+1	; 0x01
    25e2:	cc 01       	movw	r24, r24
    25e4:	a0 e0       	ldi	r26, 0x00	; 0
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	9a 83       	std	Y+2, r25	; 0x02
    25ec:	ab 83       	std	Y+3, r26	; 0x03
    25ee:	bc 83       	std	Y+4, r27	; 0x04
	return Relult;
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	9a 81       	ldd	r25, Y+2	; 0x02
    25f4:	ab 81       	ldd	r26, Y+3	; 0x03
    25f6:	bc 81       	ldd	r27, Y+4	; 0x04
}
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <MOTOR_voidInit>:


#include "DIO_Interface.h"
#include "MOTOR_Config.h"

void MOTOR_voidInit(void){
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
DIO_voidSetPinDirection(MOTOR2_PORT,  MOTOR2_PIN2,OUTPUT);
DIO_voidSetPinDirection(MOTOR2_PORT,MOTOR2_ENABLE,OUTPUT);

#elif  NUM_OF_MOTORS ==  CONNECT_ONE_MOTOR
/*INIATE MOTOR ONE ON H-BRIDGE*/
DIO_voidSetPinDirection (MOTOR1_PORT, MOTOR1_PIN1,OUTPUT);
    2614:	83 e0       	ldi	r24, 0x03	; 3
    2616:	63 e0       	ldi	r22, 0x03	; 3
    2618:	41 e0       	ldi	r20, 0x01	; 1
    261a:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR_PORT,MOTOR1_ENABLE,OUTPUT);
DIO_voidSetPinValue(MOTOR_PORT, MOTOR_PIN1,HIGH);
DIO_voidSetPinValue(MOTOR_PORT, MOTOR_PIN2,LOW);
#else
#endif*/
}
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <MOTOR_voidRotateClkWise>:

void MOTOR_voidRotateClkWise(uint8_t copy_uint8_ttop,uint8_t copy_uint8_tdown){
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	00 d0       	rcall	.+0      	; 0x262a <MOTOR_voidRotateClkWise+0x6>
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_uint8_ttop == 1){
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	81 30       	cpi	r24, 0x01	; 1
    2636:	31 f4       	brne	.+12     	; 0x2644 <MOTOR_voidRotateClkWise+0x20>
		/*INIATE MOTOR ONE ON H-BRIDGE*/
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,HIGH);
    2638:	83 e0       	ldi	r24, 0x03	; 3
    263a:	63 e0       	ldi	r22, 0x03	; 3
    263c:	41 e0       	ldi	r20, 0x01	; 1
    263e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    2642:	0d c0       	rjmp	.+26     	; 0x265e <MOTOR_voidRotateClkWise+0x3a>
		//DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
		//DIO_voidSetPinValue(MOTOR1_PORT,MOTOR1_ENABLE, HIGH);
	}
	else if(copy_uint8_ttop == 0){
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	88 23       	and	r24, r24
    2648:	51 f4       	brne	.+20     	; 0x265e <MOTOR_voidRotateClkWise+0x3a>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    264a:	83 e0       	ldi	r24, 0x03	; 3
    264c:	62 e0       	ldi	r22, 0x02	; 2
    264e:	40 e0       	ldi	r20, 0x00	; 0
    2650:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    2654:	83 e0       	ldi	r24, 0x03	; 3
    2656:	62 e0       	ldi	r22, 0x02	; 2
    2658:	40 e0       	ldi	r20, 0x00	; 0
    265a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
	}
	/*INIATE MOTOR ONE ON H-BRIDGE*/
	if(copy_uint8_tdown== 1){
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	81 30       	cpi	r24, 0x01	; 1
    2662:	81 f4       	brne	.+32     	; 0x2684 <MOTOR_voidRotateClkWise+0x60>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,HIGH);
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	64 e0       	ldi	r22, 0x04	; 4
    2668:	41 e0       	ldi	r20, 0x01	; 1
    266a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,LOW);
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	65 e0       	ldi	r22, 0x05	; 5
    2672:	40 e0       	ldi	r20, 0x00	; 0
    2674:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_ENABLE, HIGH);
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	63 e0       	ldi	r22, 0x03	; 3
    267c:	41 e0       	ldi	r20, 0x01	; 1
    267e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    2682:	0d c0       	rjmp	.+26     	; 0x269e <MOTOR_voidRotateClkWise+0x7a>
	}
	else if(copy_uint8_tdown == 0){
    2684:	8a 81       	ldd	r24, Y+2	; 0x02
    2686:	88 23       	and	r24, r24
    2688:	51 f4       	brne	.+20     	; 0x269e <MOTOR_voidRotateClkWise+0x7a>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_PIN2,LOW);
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	65 e0       	ldi	r22, 0x05	; 5
    268e:	40 e0       	ldi	r20, 0x00	; 0
    2690:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_PIN2,LOW);
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	65 e0       	ldi	r22, 0x05	; 5
    2698:	40 e0       	ldi	r20, 0x00	; 0
    269a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
	}

}
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	cf 91       	pop	r28
    26a4:	df 91       	pop	r29
    26a6:	08 95       	ret

000026a8 <MOTOR_voidRotateAntiClkWise>:
void MOTOR_voidRotateAntiClkWise(uint8_t copy_uint8_ttop,uint8_t copy_uint8_tdown){
    26a8:	df 93       	push	r29
    26aa:	cf 93       	push	r28
    26ac:	00 d0       	rcall	.+0      	; 0x26ae <MOTOR_voidRotateAntiClkWise+0x6>
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	89 83       	std	Y+1, r24	; 0x01
    26b4:	6a 83       	std	Y+2, r22	; 0x02
	if (copy_uint8_ttop == 1)
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	81 30       	cpi	r24, 0x01	; 1
    26ba:	81 f4       	brne	.+32     	; 0x26dc <MOTOR_voidRotateAntiClkWise+0x34>
	{
		/*INIATE MOTOR ONE ON H-BRIDGE*/
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,LOW);
    26bc:	83 e0       	ldi	r24, 0x03	; 3
    26be:	63 e0       	ldi	r22, 0x03	; 3
    26c0:	40 e0       	ldi	r20, 0x00	; 0
    26c2:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,  MOTOR1_PIN2,HIGH);
    26c6:	83 e0       	ldi	r24, 0x03	; 3
    26c8:	62 e0       	ldi	r22, 0x02	; 2
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,MOTOR1_ENABLE,HIGH);
    26d0:	83 e0       	ldi	r24, 0x03	; 3
    26d2:	63 e0       	ldi	r22, 0x03	; 3
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    26da:	0d c0       	rjmp	.+26     	; 0x26f6 <MOTOR_voidRotateAntiClkWise+0x4e>
	}
	else if(copy_uint8_ttop== 0)
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	88 23       	and	r24, r24
    26e0:	51 f4       	brne	.+20     	; 0x26f6 <MOTOR_voidRotateAntiClkWise+0x4e>
	{
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,LOW);
    26e2:	83 e0       	ldi	r24, 0x03	; 3
    26e4:	63 e0       	ldi	r22, 0x03	; 3
    26e6:	40 e0       	ldi	r20, 0x00	; 0
    26e8:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    26ec:	83 e0       	ldi	r24, 0x03	; 3
    26ee:	62 e0       	ldi	r22, 0x02	; 2
    26f0:	40 e0       	ldi	r20, 0x00	; 0
    26f2:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
	}
		/*INIATE MOTOR ONE ON H-BRIDGE*/
	if(copy_uint8_tdown == 1)
    26f6:	8a 81       	ldd	r24, Y+2	; 0x02
    26f8:	81 30       	cpi	r24, 0x01	; 1
    26fa:	81 f4       	brne	.+32     	; 0x271c <MOTOR_voidRotateAntiClkWise+0x74>
	{
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,LOW);
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	64 e0       	ldi	r22, 0x04	; 4
    2700:	40 e0       	ldi	r20, 0x00	; 0
    2702:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,HIGH);
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	65 e0       	ldi	r22, 0x05	; 5
    270a:	41 e0       	ldi	r20, 0x01	; 1
    270c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_ENABLE,HIGH);
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	63 e0       	ldi	r22, 0x03	; 3
    2714:	41 e0       	ldi	r20, 0x01	; 1
    2716:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    271a:	0d c0       	rjmp	.+26     	; 0x2736 <MOTOR_voidRotateAntiClkWise+0x8e>
	}


	else if(copy_uint8_tdown == 0 ){
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	88 23       	and	r24, r24
    2720:	51 f4       	brne	.+20     	; 0x2736 <MOTOR_voidRotateAntiClkWise+0x8e>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,LOW);
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	64 e0       	ldi	r22, 0x04	; 4
    2726:	40 e0       	ldi	r20, 0x00	; 0
    2728:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,LOW);
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	65 e0       	ldi	r22, 0x05	; 5
    2730:	40 e0       	ldi	r20, 0x00	; 0
    2732:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
	}


}
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	cf 91       	pop	r28
    273c:	df 91       	pop	r29
    273e:	08 95       	ret

00002740 <MOTOR_voidStop>:

void MOTOR_voidStop(void){
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	cd b7       	in	r28, 0x3d	; 61
    2746:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue( MOTOR1_PORT,MOTOR1_PIN1,LOW);
    2748:	83 e0       	ldi	r24, 0x03	; 3
    274a:	63 e0       	ldi	r22, 0x03	; 3
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
	/*DIO_voidSetPinValue( MOTOR1_PORT,MOTOR1_PIN2,LOW);
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_PIN1,LOW);
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_PIN2,LOW);
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_ENABLE,LOW);*/
}
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	08 95       	ret

00002758 <LM35_VoidInit>:
 **************************************************/
#include "DataTypes.h"
#include "DIO_Interface.h"
#include "ADC_Interface.h"
void LM35_VoidInit(void)
{
    2758:	df 93       	push	r29
    275a:	cf 93       	push	r28
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
	ADC_VoidInit();
    2760:	0e 94 81 12 	call	0x2502	; 0x2502 <ADC_VoidInit>
	DIO_voidSetPinDirection(PORT_A, PIN0, INPUT);
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	60 e0       	ldi	r22, 0x00	; 0
    2768:	40 e0       	ldi	r20, 0x00	; 0
    276a:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <DIO_voidSetPinDirection>

}
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <LM35_U16Read>:


u16 LM35_U16Read(uint8_t Copy_u8readchannel)
{
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	00 d0       	rcall	.+0      	; 0x277a <LM35_U16Read+0x6>
    277a:	00 d0       	rcall	.+0      	; 0x277c <LM35_U16Read+0x8>
    277c:	0f 92       	push	r0
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t temp = 0;
    2784:	19 82       	std	Y+1, r1	; 0x01
    2786:	1a 82       	std	Y+2, r1	; 0x02
    2788:	1b 82       	std	Y+3, r1	; 0x03
    278a:	1c 82       	std	Y+4, r1	; 0x04
	temp = ADC_U16GetChannelReading(Copy_u8readchannel); /* read channel two where the temp sensor is connect */
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	0e 94 b9 12 	call	0x2572	; 0x2572 <ADC_U16GetChannelReading>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	89 83       	std	Y+1, r24	; 0x01
    2798:	9a 83       	std	Y+2, r25	; 0x02
    279a:	ab 83       	std	Y+3, r26	; 0x03
    279c:	bc 83       	std	Y+4, r27	; 0x04
	temp = (temp*150*5)/(1023*1.5);                      /* calculate the temp from the ADC value*/
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	9a 81       	ldd	r25, Y+2	; 0x02
    27a2:	ab 81       	ldd	r26, Y+3	; 0x03
    27a4:	bc 81       	ldd	r27, Y+4	; 0x04
    27a6:	2e ee       	ldi	r18, 0xEE	; 238
    27a8:	32 e0       	ldi	r19, 0x02	; 2
    27aa:	40 e0       	ldi	r20, 0x00	; 0
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	bc 01       	movw	r22, r24
    27b0:	cd 01       	movw	r24, r26
    27b2:	0e 94 7d 29 	call	0x52fa	; 0x52fa <__mulsi3>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	bc 01       	movw	r22, r24
    27bc:	cd 01       	movw	r24, r26
    27be:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	bc 01       	movw	r22, r24
    27c8:	cd 01       	movw	r24, r26
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 ed       	ldi	r19, 0xD0	; 208
    27ce:	4f eb       	ldi	r20, 0xBF	; 191
    27d0:	54 e4       	ldi	r21, 0x44	; 68
    27d2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	bc 01       	movw	r22, r24
    27dc:	cd 01       	movw	r24, r26
    27de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	9a 83       	std	Y+2, r25	; 0x02
    27ea:	ab 83       	std	Y+3, r26	; 0x03
    27ec:	bc 83       	std	Y+4, r27	; 0x04

	 return temp;
    27ee:	89 81       	ldd	r24, Y+1	; 0x01
    27f0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	0f 90       	pop	r0
    27fc:	cf 91       	pop	r28
    27fe:	df 91       	pop	r29
    2800:	08 95       	ret

00002802 <lcd_init>:
#define INCREMENT_CURSOR            0x06
#define LCD_FIRSTLINE				0x80
#define LCD_SECONDLINE				0xC0

void lcd_init(void)
{
    2802:	0f 93       	push	r16
    2804:	1f 93       	push	r17
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
    280e:	c0 57       	subi	r28, 0x70	; 112
    2810:	d0 40       	sbci	r29, 0x00	; 0
    2812:	0f b6       	in	r0, 0x3f	; 63
    2814:	f8 94       	cli
    2816:	de bf       	out	0x3e, r29	; 62
    2818:	0f be       	out	0x3f, r0	; 63
    281a:	cd bf       	out	0x3d, r28	; 61
    281c:	fe 01       	movw	r30, r28
    281e:	e3 59       	subi	r30, 0x93	; 147
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	a0 e2       	ldi	r26, 0x20	; 32
    2828:	b2 e4       	ldi	r27, 0x42	; 66
    282a:	80 83       	st	Z, r24
    282c:	91 83       	std	Z+1, r25	; 0x01
    282e:	a2 83       	std	Z+2, r26	; 0x02
    2830:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2832:	8e 01       	movw	r16, r28
    2834:	07 59       	subi	r16, 0x97	; 151
    2836:	1f 4f       	sbci	r17, 0xFF	; 255
    2838:	fe 01       	movw	r30, r28
    283a:	e3 59       	subi	r30, 0x93	; 147
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	60 81       	ld	r22, Z
    2840:	71 81       	ldd	r23, Z+1	; 0x01
    2842:	82 81       	ldd	r24, Z+2	; 0x02
    2844:	93 81       	ldd	r25, Z+3	; 0x03
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	4a ef       	ldi	r20, 0xFA	; 250
    284c:	54 e4       	ldi	r21, 0x44	; 68
    284e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	f8 01       	movw	r30, r16
    2858:	80 83       	st	Z, r24
    285a:	91 83       	std	Z+1, r25	; 0x01
    285c:	a2 83       	std	Z+2, r26	; 0x02
    285e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2860:	fe 01       	movw	r30, r28
    2862:	e7 59       	subi	r30, 0x97	; 151
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	60 81       	ld	r22, Z
    2868:	71 81       	ldd	r23, Z+1	; 0x01
    286a:	82 81       	ldd	r24, Z+2	; 0x02
    286c:	93 81       	ldd	r25, Z+3	; 0x03
    286e:	20 e0       	ldi	r18, 0x00	; 0
    2870:	30 e0       	ldi	r19, 0x00	; 0
    2872:	40 e8       	ldi	r20, 0x80	; 128
    2874:	5f e3       	ldi	r21, 0x3F	; 63
    2876:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    287a:	88 23       	and	r24, r24
    287c:	44 f4       	brge	.+16     	; 0x288e <lcd_init+0x8c>
		__ticks = 1;
    287e:	fe 01       	movw	r30, r28
    2880:	e9 59       	subi	r30, 0x99	; 153
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	91 83       	std	Z+1, r25	; 0x01
    288a:	80 83       	st	Z, r24
    288c:	64 c0       	rjmp	.+200    	; 0x2956 <lcd_init+0x154>
	else if (__tmp > 65535)
    288e:	fe 01       	movw	r30, r28
    2890:	e7 59       	subi	r30, 0x97	; 151
    2892:	ff 4f       	sbci	r31, 0xFF	; 255
    2894:	60 81       	ld	r22, Z
    2896:	71 81       	ldd	r23, Z+1	; 0x01
    2898:	82 81       	ldd	r24, Z+2	; 0x02
    289a:	93 81       	ldd	r25, Z+3	; 0x03
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	3f ef       	ldi	r19, 0xFF	; 255
    28a0:	4f e7       	ldi	r20, 0x7F	; 127
    28a2:	57 e4       	ldi	r21, 0x47	; 71
    28a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28a8:	18 16       	cp	r1, r24
    28aa:	0c f0       	brlt	.+2      	; 0x28ae <lcd_init+0xac>
    28ac:	43 c0       	rjmp	.+134    	; 0x2934 <lcd_init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ae:	fe 01       	movw	r30, r28
    28b0:	e3 59       	subi	r30, 0x93	; 147
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	60 81       	ld	r22, Z
    28b6:	71 81       	ldd	r23, Z+1	; 0x01
    28b8:	82 81       	ldd	r24, Z+2	; 0x02
    28ba:	93 81       	ldd	r25, Z+3	; 0x03
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e2       	ldi	r20, 0x20	; 32
    28c2:	51 e4       	ldi	r21, 0x41	; 65
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	8e 01       	movw	r16, r28
    28ce:	09 59       	subi	r16, 0x99	; 153
    28d0:	1f 4f       	sbci	r17, 0xFF	; 255
    28d2:	bc 01       	movw	r22, r24
    28d4:	cd 01       	movw	r24, r26
    28d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	f8 01       	movw	r30, r16
    28e0:	91 83       	std	Z+1, r25	; 0x01
    28e2:	80 83       	st	Z, r24
    28e4:	1f c0       	rjmp	.+62     	; 0x2924 <lcd_init+0x122>
    28e6:	fe 01       	movw	r30, r28
    28e8:	eb 59       	subi	r30, 0x9B	; 155
    28ea:	ff 4f       	sbci	r31, 0xFF	; 255
    28ec:	88 ec       	ldi	r24, 0xC8	; 200
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	91 83       	std	Z+1, r25	; 0x01
    28f2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28f4:	fe 01       	movw	r30, r28
    28f6:	eb 59       	subi	r30, 0x9B	; 155
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	80 81       	ld	r24, Z
    28fc:	91 81       	ldd	r25, Z+1	; 0x01
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	f1 f7       	brne	.-4      	; 0x28fe <lcd_init+0xfc>
    2902:	fe 01       	movw	r30, r28
    2904:	eb 59       	subi	r30, 0x9B	; 155
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	91 83       	std	Z+1, r25	; 0x01
    290a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    290c:	de 01       	movw	r26, r28
    290e:	a9 59       	subi	r26, 0x99	; 153
    2910:	bf 4f       	sbci	r27, 0xFF	; 255
    2912:	fe 01       	movw	r30, r28
    2914:	e9 59       	subi	r30, 0x99	; 153
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	80 81       	ld	r24, Z
    291a:	91 81       	ldd	r25, Z+1	; 0x01
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	11 96       	adiw	r26, 0x01	; 1
    2920:	9c 93       	st	X, r25
    2922:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2924:	fe 01       	movw	r30, r28
    2926:	e9 59       	subi	r30, 0x99	; 153
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	80 81       	ld	r24, Z
    292c:	91 81       	ldd	r25, Z+1	; 0x01
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	d1 f6       	brne	.-76     	; 0x28e6 <lcd_init+0xe4>
    2932:	27 c0       	rjmp	.+78     	; 0x2982 <lcd_init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2934:	8e 01       	movw	r16, r28
    2936:	09 59       	subi	r16, 0x99	; 153
    2938:	1f 4f       	sbci	r17, 0xFF	; 255
    293a:	fe 01       	movw	r30, r28
    293c:	e7 59       	subi	r30, 0x97	; 151
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	60 81       	ld	r22, Z
    2942:	71 81       	ldd	r23, Z+1	; 0x01
    2944:	82 81       	ldd	r24, Z+2	; 0x02
    2946:	93 81       	ldd	r25, Z+3	; 0x03
    2948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	f8 01       	movw	r30, r16
    2952:	91 83       	std	Z+1, r25	; 0x01
    2954:	80 83       	st	Z, r24
    2956:	de 01       	movw	r26, r28
    2958:	ad 59       	subi	r26, 0x9D	; 157
    295a:	bf 4f       	sbci	r27, 0xFF	; 255
    295c:	fe 01       	movw	r30, r28
    295e:	e9 59       	subi	r30, 0x99	; 153
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	80 81       	ld	r24, Z
    2964:	91 81       	ldd	r25, Z+1	; 0x01
    2966:	8d 93       	st	X+, r24
    2968:	9c 93       	st	X, r25
    296a:	fe 01       	movw	r30, r28
    296c:	ed 59       	subi	r30, 0x9D	; 157
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	80 81       	ld	r24, Z
    2972:	91 81       	ldd	r25, Z+1	; 0x01
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <lcd_init+0x172>
    2978:	fe 01       	movw	r30, r28
    297a:	ed 59       	subi	r30, 0x9D	; 157
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	80 83       	st	Z, r24
    _delay_ms(40);    
 
    DIO_voidSetPinDirection(LS_PIN,OUTPUT);
    2982:	82 e0       	ldi	r24, 0x02	; 2
    2984:	62 e0       	ldi	r22, 0x02	; 2
    2986:	41 e0       	ldi	r20, 0x01	; 1
    2988:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(EN_PIN,OUTPUT);
    298c:	82 e0       	ldi	r24, 0x02	; 2
    298e:	63 e0       	ldi	r22, 0x03	; 3
    2990:	41 e0       	ldi	r20, 0x01	; 1
    2992:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <DIO_voidSetPinDirection>
    2996:	fe 01       	movw	r30, r28
    2998:	e1 5a       	subi	r30, 0xA1	; 161
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	a0 ea       	ldi	r26, 0xA0	; 160
    29a2:	b0 e4       	ldi	r27, 0x40	; 64
    29a4:	80 83       	st	Z, r24
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	a2 83       	std	Z+2, r26	; 0x02
    29aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29ac:	8e 01       	movw	r16, r28
    29ae:	05 5a       	subi	r16, 0xA5	; 165
    29b0:	1f 4f       	sbci	r17, 0xFF	; 255
    29b2:	fe 01       	movw	r30, r28
    29b4:	e1 5a       	subi	r30, 0xA1	; 161
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	60 81       	ld	r22, Z
    29ba:	71 81       	ldd	r23, Z+1	; 0x01
    29bc:	82 81       	ldd	r24, Z+2	; 0x02
    29be:	93 81       	ldd	r25, Z+3	; 0x03
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	4a ef       	ldi	r20, 0xFA	; 250
    29c6:	54 e4       	ldi	r21, 0x44	; 68
    29c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29cc:	dc 01       	movw	r26, r24
    29ce:	cb 01       	movw	r24, r22
    29d0:	f8 01       	movw	r30, r16
    29d2:	80 83       	st	Z, r24
    29d4:	91 83       	std	Z+1, r25	; 0x01
    29d6:	a2 83       	std	Z+2, r26	; 0x02
    29d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29da:	fe 01       	movw	r30, r28
    29dc:	e5 5a       	subi	r30, 0xA5	; 165
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	60 81       	ld	r22, Z
    29e2:	71 81       	ldd	r23, Z+1	; 0x01
    29e4:	82 81       	ldd	r24, Z+2	; 0x02
    29e6:	93 81       	ldd	r25, Z+3	; 0x03
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e8       	ldi	r20, 0x80	; 128
    29ee:	5f e3       	ldi	r21, 0x3F	; 63
    29f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29f4:	88 23       	and	r24, r24
    29f6:	44 f4       	brge	.+16     	; 0x2a08 <lcd_init+0x206>
		__ticks = 1;
    29f8:	fe 01       	movw	r30, r28
    29fa:	e7 5a       	subi	r30, 0xA7	; 167
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	80 83       	st	Z, r24
    2a06:	64 c0       	rjmp	.+200    	; 0x2ad0 <lcd_init+0x2ce>
	else if (__tmp > 65535)
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e5 5a       	subi	r30, 0xA5	; 165
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	60 81       	ld	r22, Z
    2a10:	71 81       	ldd	r23, Z+1	; 0x01
    2a12:	82 81       	ldd	r24, Z+2	; 0x02
    2a14:	93 81       	ldd	r25, Z+3	; 0x03
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	3f ef       	ldi	r19, 0xFF	; 255
    2a1a:	4f e7       	ldi	r20, 0x7F	; 127
    2a1c:	57 e4       	ldi	r21, 0x47	; 71
    2a1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a22:	18 16       	cp	r1, r24
    2a24:	0c f0       	brlt	.+2      	; 0x2a28 <lcd_init+0x226>
    2a26:	43 c0       	rjmp	.+134    	; 0x2aae <lcd_init+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a28:	fe 01       	movw	r30, r28
    2a2a:	e1 5a       	subi	r30, 0xA1	; 161
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	60 81       	ld	r22, Z
    2a30:	71 81       	ldd	r23, Z+1	; 0x01
    2a32:	82 81       	ldd	r24, Z+2	; 0x02
    2a34:	93 81       	ldd	r25, Z+3	; 0x03
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e2       	ldi	r20, 0x20	; 32
    2a3c:	51 e4       	ldi	r21, 0x41	; 65
    2a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a42:	dc 01       	movw	r26, r24
    2a44:	cb 01       	movw	r24, r22
    2a46:	8e 01       	movw	r16, r28
    2a48:	07 5a       	subi	r16, 0xA7	; 167
    2a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4c:	bc 01       	movw	r22, r24
    2a4e:	cd 01       	movw	r24, r26
    2a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	f8 01       	movw	r30, r16
    2a5a:	91 83       	std	Z+1, r25	; 0x01
    2a5c:	80 83       	st	Z, r24
    2a5e:	1f c0       	rjmp	.+62     	; 0x2a9e <lcd_init+0x29c>
    2a60:	fe 01       	movw	r30, r28
    2a62:	e9 5a       	subi	r30, 0xA9	; 169
    2a64:	ff 4f       	sbci	r31, 0xFF	; 255
    2a66:	88 ec       	ldi	r24, 0xC8	; 200
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	91 83       	std	Z+1, r25	; 0x01
    2a6c:	80 83       	st	Z, r24
    2a6e:	fe 01       	movw	r30, r28
    2a70:	e9 5a       	subi	r30, 0xA9	; 169
    2a72:	ff 4f       	sbci	r31, 0xFF	; 255
    2a74:	80 81       	ld	r24, Z
    2a76:	91 81       	ldd	r25, Z+1	; 0x01
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	f1 f7       	brne	.-4      	; 0x2a78 <lcd_init+0x276>
    2a7c:	fe 01       	movw	r30, r28
    2a7e:	e9 5a       	subi	r30, 0xA9	; 169
    2a80:	ff 4f       	sbci	r31, 0xFF	; 255
    2a82:	91 83       	std	Z+1, r25	; 0x01
    2a84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a86:	de 01       	movw	r26, r28
    2a88:	a7 5a       	subi	r26, 0xA7	; 167
    2a8a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	e7 5a       	subi	r30, 0xA7	; 167
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	80 81       	ld	r24, Z
    2a94:	91 81       	ldd	r25, Z+1	; 0x01
    2a96:	01 97       	sbiw	r24, 0x01	; 1
    2a98:	11 96       	adiw	r26, 0x01	; 1
    2a9a:	9c 93       	st	X, r25
    2a9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	e7 5a       	subi	r30, 0xA7	; 167
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	80 81       	ld	r24, Z
    2aa6:	91 81       	ldd	r25, Z+1	; 0x01
    2aa8:	00 97       	sbiw	r24, 0x00	; 0
    2aaa:	d1 f6       	brne	.-76     	; 0x2a60 <lcd_init+0x25e>
    2aac:	27 c0       	rjmp	.+78     	; 0x2afc <lcd_init+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aae:	8e 01       	movw	r16, r28
    2ab0:	07 5a       	subi	r16, 0xA7	; 167
    2ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	e5 5a       	subi	r30, 0xA5	; 165
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	60 81       	ld	r22, Z
    2abc:	71 81       	ldd	r23, Z+1	; 0x01
    2abe:	82 81       	ldd	r24, Z+2	; 0x02
    2ac0:	93 81       	ldd	r25, Z+3	; 0x03
    2ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	f8 01       	movw	r30, r16
    2acc:	91 83       	std	Z+1, r25	; 0x01
    2ace:	80 83       	st	Z, r24
    2ad0:	de 01       	movw	r26, r28
    2ad2:	ab 5a       	subi	r26, 0xAB	; 171
    2ad4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ad6:	fe 01       	movw	r30, r28
    2ad8:	e7 5a       	subi	r30, 0xA7	; 167
    2ada:	ff 4f       	sbci	r31, 0xFF	; 255
    2adc:	80 81       	ld	r24, Z
    2ade:	91 81       	ldd	r25, Z+1	; 0x01
    2ae0:	8d 93       	st	X+, r24
    2ae2:	9c 93       	st	X, r25
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	eb 5a       	subi	r30, 0xAB	; 171
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	80 81       	ld	r24, Z
    2aec:	91 81       	ldd	r25, Z+1	; 0x01
    2aee:	01 97       	sbiw	r24, 0x01	; 1
    2af0:	f1 f7       	brne	.-4      	; 0x2aee <lcd_init+0x2ec>
    2af2:	fe 01       	movw	r30, r28
    2af4:	eb 5a       	subi	r30, 0xAB	; 171
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	91 83       	std	Z+1, r25	; 0x01
    2afa:	80 83       	st	Z, r24
   //DIO_voidSetPinDirection(R_W_PIN,OUTPUT);
	_delay_ms(5);	
    DIO_voidSetPinDirection(PORT_C,PIN4,OUTPUT );
    2afc:	82 e0       	ldi	r24, 0x02	; 2
    2afe:	64 e0       	ldi	r22, 0x04	; 4
    2b00:	41 e0       	ldi	r20, 0x01	; 1
    2b02:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORT_C,PIN5,OUTPUT );
    2b06:	82 e0       	ldi	r24, 0x02	; 2
    2b08:	65 e0       	ldi	r22, 0x05	; 5
    2b0a:	41 e0       	ldi	r20, 0x01	; 1
    2b0c:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORT_C,PIN6,OUTPUT );
    2b10:	82 e0       	ldi	r24, 0x02	; 2
    2b12:	66 e0       	ldi	r22, 0x06	; 6
    2b14:	41 e0       	ldi	r20, 0x01	; 1
    2b16:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(PORT_C,PIN7,OUTPUT );
    2b1a:	82 e0       	ldi	r24, 0x02	; 2
    2b1c:	67 e0       	ldi	r22, 0x07	; 7
    2b1e:	41 e0       	ldi	r20, 0x01	; 1
    2b20:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <DIO_voidSetPinDirection>

    lcd_command(0x33);
    2b24:	83 e3       	ldi	r24, 0x33	; 51
    2b26:	0e 94 b0 18 	call	0x3160	; 0x3160 <lcd_command>
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	ef 5a       	subi	r30, 0xAF	; 175
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	a0 e0       	ldi	r26, 0x00	; 0
    2b36:	b0 e4       	ldi	r27, 0x40	; 64
    2b38:	80 83       	st	Z, r24
    2b3a:	91 83       	std	Z+1, r25	; 0x01
    2b3c:	a2 83       	std	Z+2, r26	; 0x02
    2b3e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b40:	8e 01       	movw	r16, r28
    2b42:	03 5b       	subi	r16, 0xB3	; 179
    2b44:	1f 4f       	sbci	r17, 0xFF	; 255
    2b46:	fe 01       	movw	r30, r28
    2b48:	ef 5a       	subi	r30, 0xAF	; 175
    2b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4c:	60 81       	ld	r22, Z
    2b4e:	71 81       	ldd	r23, Z+1	; 0x01
    2b50:	82 81       	ldd	r24, Z+2	; 0x02
    2b52:	93 81       	ldd	r25, Z+3	; 0x03
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	4a ef       	ldi	r20, 0xFA	; 250
    2b5a:	54 e4       	ldi	r21, 0x44	; 68
    2b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	f8 01       	movw	r30, r16
    2b66:	80 83       	st	Z, r24
    2b68:	91 83       	std	Z+1, r25	; 0x01
    2b6a:	a2 83       	std	Z+2, r26	; 0x02
    2b6c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e3 5b       	subi	r30, 0xB3	; 179
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	60 81       	ld	r22, Z
    2b76:	71 81       	ldd	r23, Z+1	; 0x01
    2b78:	82 81       	ldd	r24, Z+2	; 0x02
    2b7a:	93 81       	ldd	r25, Z+3	; 0x03
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e8       	ldi	r20, 0x80	; 128
    2b82:	5f e3       	ldi	r21, 0x3F	; 63
    2b84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b88:	88 23       	and	r24, r24
    2b8a:	44 f4       	brge	.+16     	; 0x2b9c <lcd_init+0x39a>
		__ticks = 1;
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	e5 5b       	subi	r30, 0xB5	; 181
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	91 83       	std	Z+1, r25	; 0x01
    2b98:	80 83       	st	Z, r24
    2b9a:	64 c0       	rjmp	.+200    	; 0x2c64 <lcd_init+0x462>
	else if (__tmp > 65535)
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	e3 5b       	subi	r30, 0xB3	; 179
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	60 81       	ld	r22, Z
    2ba4:	71 81       	ldd	r23, Z+1	; 0x01
    2ba6:	82 81       	ldd	r24, Z+2	; 0x02
    2ba8:	93 81       	ldd	r25, Z+3	; 0x03
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	3f ef       	ldi	r19, 0xFF	; 255
    2bae:	4f e7       	ldi	r20, 0x7F	; 127
    2bb0:	57 e4       	ldi	r21, 0x47	; 71
    2bb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb6:	18 16       	cp	r1, r24
    2bb8:	0c f0       	brlt	.+2      	; 0x2bbc <lcd_init+0x3ba>
    2bba:	43 c0       	rjmp	.+134    	; 0x2c42 <lcd_init+0x440>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	ef 5a       	subi	r30, 0xAF	; 175
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	60 81       	ld	r22, Z
    2bc4:	71 81       	ldd	r23, Z+1	; 0x01
    2bc6:	82 81       	ldd	r24, Z+2	; 0x02
    2bc8:	93 81       	ldd	r25, Z+3	; 0x03
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e2       	ldi	r20, 0x20	; 32
    2bd0:	51 e4       	ldi	r21, 0x41	; 65
    2bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	8e 01       	movw	r16, r28
    2bdc:	05 5b       	subi	r16, 0xB5	; 181
    2bde:	1f 4f       	sbci	r17, 0xFF	; 255
    2be0:	bc 01       	movw	r22, r24
    2be2:	cd 01       	movw	r24, r26
    2be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	f8 01       	movw	r30, r16
    2bee:	91 83       	std	Z+1, r25	; 0x01
    2bf0:	80 83       	st	Z, r24
    2bf2:	1f c0       	rjmp	.+62     	; 0x2c32 <lcd_init+0x430>
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e7 5b       	subi	r30, 0xB7	; 183
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	88 ec       	ldi	r24, 0xC8	; 200
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	91 83       	std	Z+1, r25	; 0x01
    2c00:	80 83       	st	Z, r24
    2c02:	fe 01       	movw	r30, r28
    2c04:	e7 5b       	subi	r30, 0xB7	; 183
    2c06:	ff 4f       	sbci	r31, 0xFF	; 255
    2c08:	80 81       	ld	r24, Z
    2c0a:	91 81       	ldd	r25, Z+1	; 0x01
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	f1 f7       	brne	.-4      	; 0x2c0c <lcd_init+0x40a>
    2c10:	fe 01       	movw	r30, r28
    2c12:	e7 5b       	subi	r30, 0xB7	; 183
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	91 83       	std	Z+1, r25	; 0x01
    2c18:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1a:	de 01       	movw	r26, r28
    2c1c:	a5 5b       	subi	r26, 0xB5	; 181
    2c1e:	bf 4f       	sbci	r27, 0xFF	; 255
    2c20:	fe 01       	movw	r30, r28
    2c22:	e5 5b       	subi	r30, 0xB5	; 181
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	80 81       	ld	r24, Z
    2c28:	91 81       	ldd	r25, Z+1	; 0x01
    2c2a:	01 97       	sbiw	r24, 0x01	; 1
    2c2c:	11 96       	adiw	r26, 0x01	; 1
    2c2e:	9c 93       	st	X, r25
    2c30:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c32:	fe 01       	movw	r30, r28
    2c34:	e5 5b       	subi	r30, 0xB5	; 181
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	80 81       	ld	r24, Z
    2c3a:	91 81       	ldd	r25, Z+1	; 0x01
    2c3c:	00 97       	sbiw	r24, 0x00	; 0
    2c3e:	d1 f6       	brne	.-76     	; 0x2bf4 <lcd_init+0x3f2>
    2c40:	27 c0       	rjmp	.+78     	; 0x2c90 <lcd_init+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c42:	8e 01       	movw	r16, r28
    2c44:	05 5b       	subi	r16, 0xB5	; 181
    2c46:	1f 4f       	sbci	r17, 0xFF	; 255
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e3 5b       	subi	r30, 0xB3	; 179
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	60 81       	ld	r22, Z
    2c50:	71 81       	ldd	r23, Z+1	; 0x01
    2c52:	82 81       	ldd	r24, Z+2	; 0x02
    2c54:	93 81       	ldd	r25, Z+3	; 0x03
    2c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	f8 01       	movw	r30, r16
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	80 83       	st	Z, r24
    2c64:	de 01       	movw	r26, r28
    2c66:	a9 5b       	subi	r26, 0xB9	; 185
    2c68:	bf 4f       	sbci	r27, 0xFF	; 255
    2c6a:	fe 01       	movw	r30, r28
    2c6c:	e5 5b       	subi	r30, 0xB5	; 181
    2c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c70:	80 81       	ld	r24, Z
    2c72:	91 81       	ldd	r25, Z+1	; 0x01
    2c74:	8d 93       	st	X+, r24
    2c76:	9c 93       	st	X, r25
    2c78:	fe 01       	movw	r30, r28
    2c7a:	e9 5b       	subi	r30, 0xB9	; 185
    2c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c7e:	80 81       	ld	r24, Z
    2c80:	91 81       	ldd	r25, Z+1	; 0x01
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	f1 f7       	brne	.-4      	; 0x2c82 <lcd_init+0x480>
    2c86:	fe 01       	movw	r30, r28
    2c88:	e9 5b       	subi	r30, 0xB9	; 185
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	91 83       	std	Z+1, r25	; 0x01
    2c8e:	80 83       	st	Z, r24
    _delay_ms(2);	
    lcd_command(0x32);    
    2c90:	82 e3       	ldi	r24, 0x32	; 50
    2c92:	0e 94 b0 18 	call	0x3160	; 0x3160 <lcd_command>
    2c96:	fe 01       	movw	r30, r28
    2c98:	ed 5b       	subi	r30, 0xBD	; 189
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	80 e0       	ldi	r24, 0x00	; 0
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	a0 e0       	ldi	r26, 0x00	; 0
    2ca2:	b0 e4       	ldi	r27, 0x40	; 64
    2ca4:	80 83       	st	Z, r24
    2ca6:	91 83       	std	Z+1, r25	; 0x01
    2ca8:	a2 83       	std	Z+2, r26	; 0x02
    2caa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cac:	8e 01       	movw	r16, r28
    2cae:	01 5c       	subi	r16, 0xC1	; 193
    2cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb2:	fe 01       	movw	r30, r28
    2cb4:	ed 5b       	subi	r30, 0xBD	; 189
    2cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb8:	60 81       	ld	r22, Z
    2cba:	71 81       	ldd	r23, Z+1	; 0x01
    2cbc:	82 81       	ldd	r24, Z+2	; 0x02
    2cbe:	93 81       	ldd	r25, Z+3	; 0x03
    2cc0:	20 e0       	ldi	r18, 0x00	; 0
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	4a ef       	ldi	r20, 0xFA	; 250
    2cc6:	54 e4       	ldi	r21, 0x44	; 68
    2cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	f8 01       	movw	r30, r16
    2cd2:	80 83       	st	Z, r24
    2cd4:	91 83       	std	Z+1, r25	; 0x01
    2cd6:	a2 83       	std	Z+2, r26	; 0x02
    2cd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cda:	fe 01       	movw	r30, r28
    2cdc:	ff 96       	adiw	r30, 0x3f	; 63
    2cde:	60 81       	ld	r22, Z
    2ce0:	71 81       	ldd	r23, Z+1	; 0x01
    2ce2:	82 81       	ldd	r24, Z+2	; 0x02
    2ce4:	93 81       	ldd	r25, Z+3	; 0x03
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	40 e8       	ldi	r20, 0x80	; 128
    2cec:	5f e3       	ldi	r21, 0x3F	; 63
    2cee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cf2:	88 23       	and	r24, r24
    2cf4:	2c f4       	brge	.+10     	; 0x2d00 <lcd_init+0x4fe>
		__ticks = 1;
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	9e af       	std	Y+62, r25	; 0x3e
    2cfc:	8d af       	std	Y+61, r24	; 0x3d
    2cfe:	46 c0       	rjmp	.+140    	; 0x2d8c <lcd_init+0x58a>
	else if (__tmp > 65535)
    2d00:	fe 01       	movw	r30, r28
    2d02:	ff 96       	adiw	r30, 0x3f	; 63
    2d04:	60 81       	ld	r22, Z
    2d06:	71 81       	ldd	r23, Z+1	; 0x01
    2d08:	82 81       	ldd	r24, Z+2	; 0x02
    2d0a:	93 81       	ldd	r25, Z+3	; 0x03
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	3f ef       	ldi	r19, 0xFF	; 255
    2d10:	4f e7       	ldi	r20, 0x7F	; 127
    2d12:	57 e4       	ldi	r21, 0x47	; 71
    2d14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d18:	18 16       	cp	r1, r24
    2d1a:	64 f5       	brge	.+88     	; 0x2d74 <lcd_init+0x572>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	ed 5b       	subi	r30, 0xBD	; 189
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	60 81       	ld	r22, Z
    2d24:	71 81       	ldd	r23, Z+1	; 0x01
    2d26:	82 81       	ldd	r24, Z+2	; 0x02
    2d28:	93 81       	ldd	r25, Z+3	; 0x03
    2d2a:	20 e0       	ldi	r18, 0x00	; 0
    2d2c:	30 e0       	ldi	r19, 0x00	; 0
    2d2e:	40 e2       	ldi	r20, 0x20	; 32
    2d30:	51 e4       	ldi	r21, 0x41	; 65
    2d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	bc 01       	movw	r22, r24
    2d3c:	cd 01       	movw	r24, r26
    2d3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	9e af       	std	Y+62, r25	; 0x3e
    2d48:	8d af       	std	Y+61, r24	; 0x3d
    2d4a:	0f c0       	rjmp	.+30     	; 0x2d6a <lcd_init+0x568>
    2d4c:	88 ec       	ldi	r24, 0xC8	; 200
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	9c af       	std	Y+60, r25	; 0x3c
    2d52:	8b af       	std	Y+59, r24	; 0x3b
    2d54:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d56:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <lcd_init+0x556>
    2d5c:	9c af       	std	Y+60, r25	; 0x3c
    2d5e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d60:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d62:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	9e af       	std	Y+62, r25	; 0x3e
    2d68:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d6e:	00 97       	sbiw	r24, 0x00	; 0
    2d70:	69 f7       	brne	.-38     	; 0x2d4c <lcd_init+0x54a>
    2d72:	16 c0       	rjmp	.+44     	; 0x2da0 <lcd_init+0x59e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d74:	fe 01       	movw	r30, r28
    2d76:	ff 96       	adiw	r30, 0x3f	; 63
    2d78:	60 81       	ld	r22, Z
    2d7a:	71 81       	ldd	r23, Z+1	; 0x01
    2d7c:	82 81       	ldd	r24, Z+2	; 0x02
    2d7e:	93 81       	ldd	r25, Z+3	; 0x03
    2d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d84:	dc 01       	movw	r26, r24
    2d86:	cb 01       	movw	r24, r22
    2d88:	9e af       	std	Y+62, r25	; 0x3e
    2d8a:	8d af       	std	Y+61, r24	; 0x3d
    2d8c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d8e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d90:	9a af       	std	Y+58, r25	; 0x3a
    2d92:	89 af       	std	Y+57, r24	; 0x39
    2d94:	89 ad       	ldd	r24, Y+57	; 0x39
    2d96:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	f1 f7       	brne	.-4      	; 0x2d98 <lcd_init+0x596>
    2d9c:	9a af       	std	Y+58, r25	; 0x3a
    2d9e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
    lcd_command(TWO_LINES_5X7_DOT_MATRIX);
    2da0:	88 e2       	ldi	r24, 0x28	; 40
    2da2:	0e 94 b0 18 	call	0x3160	; 0x3160 <lcd_command>
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	90 e0       	ldi	r25, 0x00	; 0
    2daa:	a0 e0       	ldi	r26, 0x00	; 0
    2dac:	b0 e4       	ldi	r27, 0x40	; 64
    2dae:	8d ab       	std	Y+53, r24	; 0x35
    2db0:	9e ab       	std	Y+54, r25	; 0x36
    2db2:	af ab       	std	Y+55, r26	; 0x37
    2db4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db6:	6d a9       	ldd	r22, Y+53	; 0x35
    2db8:	7e a9       	ldd	r23, Y+54	; 0x36
    2dba:	8f a9       	ldd	r24, Y+55	; 0x37
    2dbc:	98 ad       	ldd	r25, Y+56	; 0x38
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	4a ef       	ldi	r20, 0xFA	; 250
    2dc4:	54 e4       	ldi	r21, 0x44	; 68
    2dc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dca:	dc 01       	movw	r26, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	89 ab       	std	Y+49, r24	; 0x31
    2dd0:	9a ab       	std	Y+50, r25	; 0x32
    2dd2:	ab ab       	std	Y+51, r26	; 0x33
    2dd4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dd6:	69 a9       	ldd	r22, Y+49	; 0x31
    2dd8:	7a a9       	ldd	r23, Y+50	; 0x32
    2dda:	8b a9       	ldd	r24, Y+51	; 0x33
    2ddc:	9c a9       	ldd	r25, Y+52	; 0x34
    2dde:	20 e0       	ldi	r18, 0x00	; 0
    2de0:	30 e0       	ldi	r19, 0x00	; 0
    2de2:	40 e8       	ldi	r20, 0x80	; 128
    2de4:	5f e3       	ldi	r21, 0x3F	; 63
    2de6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dea:	88 23       	and	r24, r24
    2dec:	2c f4       	brge	.+10     	; 0x2df8 <lcd_init+0x5f6>
		__ticks = 1;
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	98 ab       	std	Y+48, r25	; 0x30
    2df4:	8f a7       	std	Y+47, r24	; 0x2f
    2df6:	3f c0       	rjmp	.+126    	; 0x2e76 <lcd_init+0x674>
	else if (__tmp > 65535)
    2df8:	69 a9       	ldd	r22, Y+49	; 0x31
    2dfa:	7a a9       	ldd	r23, Y+50	; 0x32
    2dfc:	8b a9       	ldd	r24, Y+51	; 0x33
    2dfe:	9c a9       	ldd	r25, Y+52	; 0x34
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	3f ef       	ldi	r19, 0xFF	; 255
    2e04:	4f e7       	ldi	r20, 0x7F	; 127
    2e06:	57 e4       	ldi	r21, 0x47	; 71
    2e08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e0c:	18 16       	cp	r1, r24
    2e0e:	4c f5       	brge	.+82     	; 0x2e62 <lcd_init+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e10:	6d a9       	ldd	r22, Y+53	; 0x35
    2e12:	7e a9       	ldd	r23, Y+54	; 0x36
    2e14:	8f a9       	ldd	r24, Y+55	; 0x37
    2e16:	98 ad       	ldd	r25, Y+56	; 0x38
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e2       	ldi	r20, 0x20	; 32
    2e1e:	51 e4       	ldi	r21, 0x41	; 65
    2e20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	bc 01       	movw	r22, r24
    2e2a:	cd 01       	movw	r24, r26
    2e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	98 ab       	std	Y+48, r25	; 0x30
    2e36:	8f a7       	std	Y+47, r24	; 0x2f
    2e38:	0f c0       	rjmp	.+30     	; 0x2e58 <lcd_init+0x656>
    2e3a:	88 ec       	ldi	r24, 0xC8	; 200
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	9e a7       	std	Y+46, r25	; 0x2e
    2e40:	8d a7       	std	Y+45, r24	; 0x2d
    2e42:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e44:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e46:	01 97       	sbiw	r24, 0x01	; 1
    2e48:	f1 f7       	brne	.-4      	; 0x2e46 <lcd_init+0x644>
    2e4a:	9e a7       	std	Y+46, r25	; 0x2e
    2e4c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e4e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e50:	98 a9       	ldd	r25, Y+48	; 0x30
    2e52:	01 97       	sbiw	r24, 0x01	; 1
    2e54:	98 ab       	std	Y+48, r25	; 0x30
    2e56:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e58:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e5a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	69 f7       	brne	.-38     	; 0x2e3a <lcd_init+0x638>
    2e60:	14 c0       	rjmp	.+40     	; 0x2e8a <lcd_init+0x688>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e62:	69 a9       	ldd	r22, Y+49	; 0x31
    2e64:	7a a9       	ldd	r23, Y+50	; 0x32
    2e66:	8b a9       	ldd	r24, Y+51	; 0x33
    2e68:	9c a9       	ldd	r25, Y+52	; 0x34
    2e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	98 ab       	std	Y+48, r25	; 0x30
    2e74:	8f a7       	std	Y+47, r24	; 0x2f
    2e76:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e78:	98 a9       	ldd	r25, Y+48	; 0x30
    2e7a:	9c a7       	std	Y+44, r25	; 0x2c
    2e7c:	8b a7       	std	Y+43, r24	; 0x2b
    2e7e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e80:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	f1 f7       	brne	.-4      	; 0x2e82 <lcd_init+0x680>
    2e86:	9c a7       	std	Y+44, r25	; 0x2c
    2e88:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);
    lcd_command(DISPLAY_ON_CURSOR_OFF);
    2e8a:	8c e0       	ldi	r24, 0x0C	; 12
    2e8c:	0e 94 b0 18 	call	0x3160	; 0x3160 <lcd_command>
    2e90:	80 e0       	ldi	r24, 0x00	; 0
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	a0 e0       	ldi	r26, 0x00	; 0
    2e96:	b0 e4       	ldi	r27, 0x40	; 64
    2e98:	8f a3       	std	Y+39, r24	; 0x27
    2e9a:	98 a7       	std	Y+40, r25	; 0x28
    2e9c:	a9 a7       	std	Y+41, r26	; 0x29
    2e9e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea0:	6f a1       	ldd	r22, Y+39	; 0x27
    2ea2:	78 a5       	ldd	r23, Y+40	; 0x28
    2ea4:	89 a5       	ldd	r24, Y+41	; 0x29
    2ea6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	4a ef       	ldi	r20, 0xFA	; 250
    2eae:	54 e4       	ldi	r21, 0x44	; 68
    2eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	cb 01       	movw	r24, r22
    2eb8:	8b a3       	std	Y+35, r24	; 0x23
    2eba:	9c a3       	std	Y+36, r25	; 0x24
    2ebc:	ad a3       	std	Y+37, r26	; 0x25
    2ebe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ec0:	6b a1       	ldd	r22, Y+35	; 0x23
    2ec2:	7c a1       	ldd	r23, Y+36	; 0x24
    2ec4:	8d a1       	ldd	r24, Y+37	; 0x25
    2ec6:	9e a1       	ldd	r25, Y+38	; 0x26
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	40 e8       	ldi	r20, 0x80	; 128
    2ece:	5f e3       	ldi	r21, 0x3F	; 63
    2ed0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ed4:	88 23       	and	r24, r24
    2ed6:	2c f4       	brge	.+10     	; 0x2ee2 <lcd_init+0x6e0>
		__ticks = 1;
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	9a a3       	std	Y+34, r25	; 0x22
    2ede:	89 a3       	std	Y+33, r24	; 0x21
    2ee0:	3f c0       	rjmp	.+126    	; 0x2f60 <lcd_init+0x75e>
	else if (__tmp > 65535)
    2ee2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ee4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ee6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ee8:	9e a1       	ldd	r25, Y+38	; 0x26
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	3f ef       	ldi	r19, 0xFF	; 255
    2eee:	4f e7       	ldi	r20, 0x7F	; 127
    2ef0:	57 e4       	ldi	r21, 0x47	; 71
    2ef2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ef6:	18 16       	cp	r1, r24
    2ef8:	4c f5       	brge	.+82     	; 0x2f4c <lcd_init+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efa:	6f a1       	ldd	r22, Y+39	; 0x27
    2efc:	78 a5       	ldd	r23, Y+40	; 0x28
    2efe:	89 a5       	ldd	r24, Y+41	; 0x29
    2f00:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	40 e2       	ldi	r20, 0x20	; 32
    2f08:	51 e4       	ldi	r21, 0x41	; 65
    2f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	bc 01       	movw	r22, r24
    2f14:	cd 01       	movw	r24, r26
    2f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	9a a3       	std	Y+34, r25	; 0x22
    2f20:	89 a3       	std	Y+33, r24	; 0x21
    2f22:	0f c0       	rjmp	.+30     	; 0x2f42 <lcd_init+0x740>
    2f24:	88 ec       	ldi	r24, 0xC8	; 200
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	98 a3       	std	Y+32, r25	; 0x20
    2f2a:	8f 8f       	std	Y+31, r24	; 0x1f
    2f2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f2e:	98 a1       	ldd	r25, Y+32	; 0x20
    2f30:	01 97       	sbiw	r24, 0x01	; 1
    2f32:	f1 f7       	brne	.-4      	; 0x2f30 <lcd_init+0x72e>
    2f34:	98 a3       	std	Y+32, r25	; 0x20
    2f36:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f38:	89 a1       	ldd	r24, Y+33	; 0x21
    2f3a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	9a a3       	std	Y+34, r25	; 0x22
    2f40:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f42:	89 a1       	ldd	r24, Y+33	; 0x21
    2f44:	9a a1       	ldd	r25, Y+34	; 0x22
    2f46:	00 97       	sbiw	r24, 0x00	; 0
    2f48:	69 f7       	brne	.-38     	; 0x2f24 <lcd_init+0x722>
    2f4a:	14 c0       	rjmp	.+40     	; 0x2f74 <lcd_init+0x772>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f4c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f4e:	7c a1       	ldd	r23, Y+36	; 0x24
    2f50:	8d a1       	ldd	r24, Y+37	; 0x25
    2f52:	9e a1       	ldd	r25, Y+38	; 0x26
    2f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	9a a3       	std	Y+34, r25	; 0x22
    2f5e:	89 a3       	std	Y+33, r24	; 0x21
    2f60:	89 a1       	ldd	r24, Y+33	; 0x21
    2f62:	9a a1       	ldd	r25, Y+34	; 0x22
    2f64:	9e 8f       	std	Y+30, r25	; 0x1e
    2f66:	8d 8f       	std	Y+29, r24	; 0x1d
    2f68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f6c:	01 97       	sbiw	r24, 0x01	; 1
    2f6e:	f1 f7       	brne	.-4      	; 0x2f6c <lcd_init+0x76a>
    2f70:	9e 8f       	std	Y+30, r25	; 0x1e
    2f72:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);	
    lcd_command(INCREMENT_CURSOR);
    2f74:	86 e0       	ldi	r24, 0x06	; 6
    2f76:	0e 94 b0 18 	call	0x3160	; 0x3160 <lcd_command>
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	a0 e0       	ldi	r26, 0x00	; 0
    2f80:	b0 e4       	ldi	r27, 0x40	; 64
    2f82:	89 8f       	std	Y+25, r24	; 0x19
    2f84:	9a 8f       	std	Y+26, r25	; 0x1a
    2f86:	ab 8f       	std	Y+27, r26	; 0x1b
    2f88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2f8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	30 e0       	ldi	r19, 0x00	; 0
    2f96:	4a ef       	ldi	r20, 0xFA	; 250
    2f98:	54 e4       	ldi	r21, 0x44	; 68
    2f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f9e:	dc 01       	movw	r26, r24
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	8d 8b       	std	Y+21, r24	; 0x15
    2fa4:	9e 8b       	std	Y+22, r25	; 0x16
    2fa6:	af 8b       	std	Y+23, r26	; 0x17
    2fa8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2faa:	6d 89       	ldd	r22, Y+21	; 0x15
    2fac:	7e 89       	ldd	r23, Y+22	; 0x16
    2fae:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	40 e8       	ldi	r20, 0x80	; 128
    2fb8:	5f e3       	ldi	r21, 0x3F	; 63
    2fba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fbe:	88 23       	and	r24, r24
    2fc0:	2c f4       	brge	.+10     	; 0x2fcc <lcd_init+0x7ca>
		__ticks = 1;
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	9c 8b       	std	Y+20, r25	; 0x14
    2fc8:	8b 8b       	std	Y+19, r24	; 0x13
    2fca:	3f c0       	rjmp	.+126    	; 0x304a <lcd_init+0x848>
	else if (__tmp > 65535)
    2fcc:	6d 89       	ldd	r22, Y+21	; 0x15
    2fce:	7e 89       	ldd	r23, Y+22	; 0x16
    2fd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	3f ef       	ldi	r19, 0xFF	; 255
    2fd8:	4f e7       	ldi	r20, 0x7F	; 127
    2fda:	57 e4       	ldi	r21, 0x47	; 71
    2fdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fe0:	18 16       	cp	r1, r24
    2fe2:	4c f5       	brge	.+82     	; 0x3036 <lcd_init+0x834>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fe4:	69 8d       	ldd	r22, Y+25	; 0x19
    2fe6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fe8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	40 e2       	ldi	r20, 0x20	; 32
    2ff2:	51 e4       	ldi	r21, 0x41	; 65
    2ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	bc 01       	movw	r22, r24
    2ffe:	cd 01       	movw	r24, r26
    3000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	9c 8b       	std	Y+20, r25	; 0x14
    300a:	8b 8b       	std	Y+19, r24	; 0x13
    300c:	0f c0       	rjmp	.+30     	; 0x302c <lcd_init+0x82a>
    300e:	88 ec       	ldi	r24, 0xC8	; 200
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	9a 8b       	std	Y+18, r25	; 0x12
    3014:	89 8b       	std	Y+17, r24	; 0x11
    3016:	89 89       	ldd	r24, Y+17	; 0x11
    3018:	9a 89       	ldd	r25, Y+18	; 0x12
    301a:	01 97       	sbiw	r24, 0x01	; 1
    301c:	f1 f7       	brne	.-4      	; 0x301a <lcd_init+0x818>
    301e:	9a 8b       	std	Y+18, r25	; 0x12
    3020:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3022:	8b 89       	ldd	r24, Y+19	; 0x13
    3024:	9c 89       	ldd	r25, Y+20	; 0x14
    3026:	01 97       	sbiw	r24, 0x01	; 1
    3028:	9c 8b       	std	Y+20, r25	; 0x14
    302a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    302c:	8b 89       	ldd	r24, Y+19	; 0x13
    302e:	9c 89       	ldd	r25, Y+20	; 0x14
    3030:	00 97       	sbiw	r24, 0x00	; 0
    3032:	69 f7       	brne	.-38     	; 0x300e <lcd_init+0x80c>
    3034:	14 c0       	rjmp	.+40     	; 0x305e <lcd_init+0x85c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3036:	6d 89       	ldd	r22, Y+21	; 0x15
    3038:	7e 89       	ldd	r23, Y+22	; 0x16
    303a:	8f 89       	ldd	r24, Y+23	; 0x17
    303c:	98 8d       	ldd	r25, Y+24	; 0x18
    303e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	9c 8b       	std	Y+20, r25	; 0x14
    3048:	8b 8b       	std	Y+19, r24	; 0x13
    304a:	8b 89       	ldd	r24, Y+19	; 0x13
    304c:	9c 89       	ldd	r25, Y+20	; 0x14
    304e:	98 8b       	std	Y+16, r25	; 0x10
    3050:	8f 87       	std	Y+15, r24	; 0x0f
    3052:	8f 85       	ldd	r24, Y+15	; 0x0f
    3054:	98 89       	ldd	r25, Y+16	; 0x10
    3056:	01 97       	sbiw	r24, 0x01	; 1
    3058:	f1 f7       	brne	.-4      	; 0x3056 <lcd_init+0x854>
    305a:	98 8b       	std	Y+16, r25	; 0x10
    305c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);   	
    lcd_command(DISPLAY_CLEAR);
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	0e 94 b0 18 	call	0x3160	; 0x3160 <lcd_command>
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	a0 e0       	ldi	r26, 0x00	; 0
    306a:	b0 e4       	ldi	r27, 0x40	; 64
    306c:	8b 87       	std	Y+11, r24	; 0x0b
    306e:	9c 87       	std	Y+12, r25	; 0x0c
    3070:	ad 87       	std	Y+13, r26	; 0x0d
    3072:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3074:	6b 85       	ldd	r22, Y+11	; 0x0b
    3076:	7c 85       	ldd	r23, Y+12	; 0x0c
    3078:	8d 85       	ldd	r24, Y+13	; 0x0d
    307a:	9e 85       	ldd	r25, Y+14	; 0x0e
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	4a ef       	ldi	r20, 0xFA	; 250
    3082:	54 e4       	ldi	r21, 0x44	; 68
    3084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	8f 83       	std	Y+7, r24	; 0x07
    308e:	98 87       	std	Y+8, r25	; 0x08
    3090:	a9 87       	std	Y+9, r26	; 0x09
    3092:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3094:	6f 81       	ldd	r22, Y+7	; 0x07
    3096:	78 85       	ldd	r23, Y+8	; 0x08
    3098:	89 85       	ldd	r24, Y+9	; 0x09
    309a:	9a 85       	ldd	r25, Y+10	; 0x0a
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	40 e8       	ldi	r20, 0x80	; 128
    30a2:	5f e3       	ldi	r21, 0x3F	; 63
    30a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30a8:	88 23       	and	r24, r24
    30aa:	2c f4       	brge	.+10     	; 0x30b6 <lcd_init+0x8b4>
		__ticks = 1;
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	9e 83       	std	Y+6, r25	; 0x06
    30b2:	8d 83       	std	Y+5, r24	; 0x05
    30b4:	3f c0       	rjmp	.+126    	; 0x3134 <lcd_init+0x932>
	else if (__tmp > 65535)
    30b6:	6f 81       	ldd	r22, Y+7	; 0x07
    30b8:	78 85       	ldd	r23, Y+8	; 0x08
    30ba:	89 85       	ldd	r24, Y+9	; 0x09
    30bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	3f ef       	ldi	r19, 0xFF	; 255
    30c2:	4f e7       	ldi	r20, 0x7F	; 127
    30c4:	57 e4       	ldi	r21, 0x47	; 71
    30c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30ca:	18 16       	cp	r1, r24
    30cc:	4c f5       	brge	.+82     	; 0x3120 <lcd_init+0x91e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    30d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    30d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    30d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	40 e2       	ldi	r20, 0x20	; 32
    30dc:	51 e4       	ldi	r21, 0x41	; 65
    30de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	bc 01       	movw	r22, r24
    30e8:	cd 01       	movw	r24, r26
    30ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	9e 83       	std	Y+6, r25	; 0x06
    30f4:	8d 83       	std	Y+5, r24	; 0x05
    30f6:	0f c0       	rjmp	.+30     	; 0x3116 <lcd_init+0x914>
    30f8:	88 ec       	ldi	r24, 0xC8	; 200
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	9c 83       	std	Y+4, r25	; 0x04
    30fe:	8b 83       	std	Y+3, r24	; 0x03
    3100:	8b 81       	ldd	r24, Y+3	; 0x03
    3102:	9c 81       	ldd	r25, Y+4	; 0x04
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <lcd_init+0x902>
    3108:	9c 83       	std	Y+4, r25	; 0x04
    310a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    310c:	8d 81       	ldd	r24, Y+5	; 0x05
    310e:	9e 81       	ldd	r25, Y+6	; 0x06
    3110:	01 97       	sbiw	r24, 0x01	; 1
    3112:	9e 83       	std	Y+6, r25	; 0x06
    3114:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3116:	8d 81       	ldd	r24, Y+5	; 0x05
    3118:	9e 81       	ldd	r25, Y+6	; 0x06
    311a:	00 97       	sbiw	r24, 0x00	; 0
    311c:	69 f7       	brne	.-38     	; 0x30f8 <lcd_init+0x8f6>
    311e:	14 c0       	rjmp	.+40     	; 0x3148 <lcd_init+0x946>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3120:	6f 81       	ldd	r22, Y+7	; 0x07
    3122:	78 85       	ldd	r23, Y+8	; 0x08
    3124:	89 85       	ldd	r24, Y+9	; 0x09
    3126:	9a 85       	ldd	r25, Y+10	; 0x0a
    3128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	9e 83       	std	Y+6, r25	; 0x06
    3132:	8d 83       	std	Y+5, r24	; 0x05
    3134:	8d 81       	ldd	r24, Y+5	; 0x05
    3136:	9e 81       	ldd	r25, Y+6	; 0x06
    3138:	9a 83       	std	Y+2, r25	; 0x02
    313a:	89 83       	std	Y+1, r24	; 0x01
    313c:	89 81       	ldd	r24, Y+1	; 0x01
    313e:	9a 81       	ldd	r25, Y+2	; 0x02
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	f1 f7       	brne	.-4      	; 0x3140 <lcd_init+0x93e>
    3144:	9a 83       	std	Y+2, r25	; 0x02
    3146:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    3148:	c0 59       	subi	r28, 0x90	; 144
    314a:	df 4f       	sbci	r29, 0xFF	; 255
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	de bf       	out	0x3e, r29	; 62
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	cd bf       	out	0x3d, r28	; 61
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	1f 91       	pop	r17
    315c:	0f 91       	pop	r16
    315e:	08 95       	ret

00003160 <lcd_command>:
void lcd_command(uint8_t cmd)
{
    3160:	0f 93       	push	r16
    3162:	1f 93       	push	r17
    3164:	df 93       	push	r29
    3166:	cf 93       	push	r28
    3168:	cd b7       	in	r28, 0x3d	; 61
    316a:	de b7       	in	r29, 0x3e	; 62
    316c:	c7 54       	subi	r28, 0x47	; 71
    316e:	d0 40       	sbci	r29, 0x00	; 0
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	f8 94       	cli
    3174:	de bf       	out	0x3e, r29	; 62
    3176:	0f be       	out	0x3f, r0	; 63
    3178:	cd bf       	out	0x3d, r28	; 61
    317a:	fe 01       	movw	r30, r28
    317c:	e9 5b       	subi	r30, 0xB9	; 185
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	80 83       	st	Z, r24
    DIO_voidSetPortValue(LCD_DATA_PORT, ((PORTC&0x0f)|(cmd&0xf0)));
    3182:	e5 e3       	ldi	r30, 0x35	; 53
    3184:	f0 e0       	ldi	r31, 0x00	; 0
    3186:	80 81       	ld	r24, Z
    3188:	98 2f       	mov	r25, r24
    318a:	9f 70       	andi	r25, 0x0F	; 15
    318c:	fe 01       	movw	r30, r28
    318e:	e9 5b       	subi	r30, 0xB9	; 185
    3190:	ff 4f       	sbci	r31, 0xFF	; 255
    3192:	80 81       	ld	r24, Z
    3194:	80 7f       	andi	r24, 0xF0	; 240
    3196:	89 2b       	or	r24, r25
    3198:	98 2f       	mov	r25, r24
    319a:	82 e0       	ldi	r24, 0x02	; 2
    319c:	69 2f       	mov	r22, r25
    319e:	0e 94 1e 11 	call	0x223c	; 0x223c <DIO_voidSetPortValue>
    DIO_voidSetPinValue(LS_PIN,LOW);
    31a2:	82 e0       	ldi	r24, 0x02	; 2
    31a4:	62 e0       	ldi	r22, 0x02	; 2
    31a6:	40 e0       	ldi	r20, 0x00	; 0
    31a8:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    //DIO_voidSetPinValue(R_W_PIN,LOW);
    DIO_voidSetPinValue(EN_PIN,HIGH);    
    31ac:	82 e0       	ldi	r24, 0x02	; 2
    31ae:	63 e0       	ldi	r22, 0x03	; 3
    31b0:	41 e0       	ldi	r20, 0x01	; 1
    31b2:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    31b6:	fe 01       	movw	r30, r28
    31b8:	ed 5b       	subi	r30, 0xBD	; 189
    31ba:	ff 4f       	sbci	r31, 0xFF	; 255
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	a0 e0       	ldi	r26, 0x00	; 0
    31c2:	b0 e4       	ldi	r27, 0x40	; 64
    31c4:	80 83       	st	Z, r24
    31c6:	91 83       	std	Z+1, r25	; 0x01
    31c8:	a2 83       	std	Z+2, r26	; 0x02
    31ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31cc:	8e 01       	movw	r16, r28
    31ce:	01 5c       	subi	r16, 0xC1	; 193
    31d0:	1f 4f       	sbci	r17, 0xFF	; 255
    31d2:	fe 01       	movw	r30, r28
    31d4:	ed 5b       	subi	r30, 0xBD	; 189
    31d6:	ff 4f       	sbci	r31, 0xFF	; 255
    31d8:	60 81       	ld	r22, Z
    31da:	71 81       	ldd	r23, Z+1	; 0x01
    31dc:	82 81       	ldd	r24, Z+2	; 0x02
    31de:	93 81       	ldd	r25, Z+3	; 0x03
    31e0:	20 e0       	ldi	r18, 0x00	; 0
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	4a ef       	ldi	r20, 0xFA	; 250
    31e6:	54 e4       	ldi	r21, 0x44	; 68
    31e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	f8 01       	movw	r30, r16
    31f2:	80 83       	st	Z, r24
    31f4:	91 83       	std	Z+1, r25	; 0x01
    31f6:	a2 83       	std	Z+2, r26	; 0x02
    31f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31fa:	fe 01       	movw	r30, r28
    31fc:	ff 96       	adiw	r30, 0x3f	; 63
    31fe:	60 81       	ld	r22, Z
    3200:	71 81       	ldd	r23, Z+1	; 0x01
    3202:	82 81       	ldd	r24, Z+2	; 0x02
    3204:	93 81       	ldd	r25, Z+3	; 0x03
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	40 e8       	ldi	r20, 0x80	; 128
    320c:	5f e3       	ldi	r21, 0x3F	; 63
    320e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3212:	88 23       	and	r24, r24
    3214:	2c f4       	brge	.+10     	; 0x3220 <lcd_command+0xc0>
		__ticks = 1;
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	9e af       	std	Y+62, r25	; 0x3e
    321c:	8d af       	std	Y+61, r24	; 0x3d
    321e:	46 c0       	rjmp	.+140    	; 0x32ac <lcd_command+0x14c>
	else if (__tmp > 65535)
    3220:	fe 01       	movw	r30, r28
    3222:	ff 96       	adiw	r30, 0x3f	; 63
    3224:	60 81       	ld	r22, Z
    3226:	71 81       	ldd	r23, Z+1	; 0x01
    3228:	82 81       	ldd	r24, Z+2	; 0x02
    322a:	93 81       	ldd	r25, Z+3	; 0x03
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	3f ef       	ldi	r19, 0xFF	; 255
    3230:	4f e7       	ldi	r20, 0x7F	; 127
    3232:	57 e4       	ldi	r21, 0x47	; 71
    3234:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3238:	18 16       	cp	r1, r24
    323a:	64 f5       	brge	.+88     	; 0x3294 <lcd_command+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    323c:	fe 01       	movw	r30, r28
    323e:	ed 5b       	subi	r30, 0xBD	; 189
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	60 81       	ld	r22, Z
    3244:	71 81       	ldd	r23, Z+1	; 0x01
    3246:	82 81       	ldd	r24, Z+2	; 0x02
    3248:	93 81       	ldd	r25, Z+3	; 0x03
    324a:	20 e0       	ldi	r18, 0x00	; 0
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	40 e2       	ldi	r20, 0x20	; 32
    3250:	51 e4       	ldi	r21, 0x41	; 65
    3252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	bc 01       	movw	r22, r24
    325c:	cd 01       	movw	r24, r26
    325e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	9e af       	std	Y+62, r25	; 0x3e
    3268:	8d af       	std	Y+61, r24	; 0x3d
    326a:	0f c0       	rjmp	.+30     	; 0x328a <lcd_command+0x12a>
    326c:	88 ec       	ldi	r24, 0xC8	; 200
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	9c af       	std	Y+60, r25	; 0x3c
    3272:	8b af       	std	Y+59, r24	; 0x3b
    3274:	8b ad       	ldd	r24, Y+59	; 0x3b
    3276:	9c ad       	ldd	r25, Y+60	; 0x3c
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	f1 f7       	brne	.-4      	; 0x3278 <lcd_command+0x118>
    327c:	9c af       	std	Y+60, r25	; 0x3c
    327e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3280:	8d ad       	ldd	r24, Y+61	; 0x3d
    3282:	9e ad       	ldd	r25, Y+62	; 0x3e
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	9e af       	std	Y+62, r25	; 0x3e
    3288:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    328a:	8d ad       	ldd	r24, Y+61	; 0x3d
    328c:	9e ad       	ldd	r25, Y+62	; 0x3e
    328e:	00 97       	sbiw	r24, 0x00	; 0
    3290:	69 f7       	brne	.-38     	; 0x326c <lcd_command+0x10c>
    3292:	16 c0       	rjmp	.+44     	; 0x32c0 <lcd_command+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3294:	fe 01       	movw	r30, r28
    3296:	ff 96       	adiw	r30, 0x3f	; 63
    3298:	60 81       	ld	r22, Z
    329a:	71 81       	ldd	r23, Z+1	; 0x01
    329c:	82 81       	ldd	r24, Z+2	; 0x02
    329e:	93 81       	ldd	r25, Z+3	; 0x03
    32a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	9e af       	std	Y+62, r25	; 0x3e
    32aa:	8d af       	std	Y+61, r24	; 0x3d
    32ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    32ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    32b0:	9a af       	std	Y+58, r25	; 0x3a
    32b2:	89 af       	std	Y+57, r24	; 0x39
    32b4:	89 ad       	ldd	r24, Y+57	; 0x39
    32b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    32b8:	01 97       	sbiw	r24, 0x01	; 1
    32ba:	f1 f7       	brne	.-4      	; 0x32b8 <lcd_command+0x158>
    32bc:	9a af       	std	Y+58, r25	; 0x3a
    32be:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(2);    
    DIO_voidSetPinValue(EN_PIN,LOW);
    32c0:	82 e0       	ldi	r24, 0x02	; 2
    32c2:	63 e0       	ldi	r22, 0x03	; 3
    32c4:	40 e0       	ldi	r20, 0x00	; 0
    32c6:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	a0 e0       	ldi	r26, 0x00	; 0
    32d0:	b0 e4       	ldi	r27, 0x40	; 64
    32d2:	8d ab       	std	Y+53, r24	; 0x35
    32d4:	9e ab       	std	Y+54, r25	; 0x36
    32d6:	af ab       	std	Y+55, r26	; 0x37
    32d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32da:	6d a9       	ldd	r22, Y+53	; 0x35
    32dc:	7e a9       	ldd	r23, Y+54	; 0x36
    32de:	8f a9       	ldd	r24, Y+55	; 0x37
    32e0:	98 ad       	ldd	r25, Y+56	; 0x38
    32e2:	20 e0       	ldi	r18, 0x00	; 0
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	4a ef       	ldi	r20, 0xFA	; 250
    32e8:	54 e4       	ldi	r21, 0x44	; 68
    32ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ee:	dc 01       	movw	r26, r24
    32f0:	cb 01       	movw	r24, r22
    32f2:	89 ab       	std	Y+49, r24	; 0x31
    32f4:	9a ab       	std	Y+50, r25	; 0x32
    32f6:	ab ab       	std	Y+51, r26	; 0x33
    32f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32fa:	69 a9       	ldd	r22, Y+49	; 0x31
    32fc:	7a a9       	ldd	r23, Y+50	; 0x32
    32fe:	8b a9       	ldd	r24, Y+51	; 0x33
    3300:	9c a9       	ldd	r25, Y+52	; 0x34
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	40 e8       	ldi	r20, 0x80	; 128
    3308:	5f e3       	ldi	r21, 0x3F	; 63
    330a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    330e:	88 23       	and	r24, r24
    3310:	2c f4       	brge	.+10     	; 0x331c <lcd_command+0x1bc>
		__ticks = 1;
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	98 ab       	std	Y+48, r25	; 0x30
    3318:	8f a7       	std	Y+47, r24	; 0x2f
    331a:	3f c0       	rjmp	.+126    	; 0x339a <lcd_command+0x23a>
	else if (__tmp > 65535)
    331c:	69 a9       	ldd	r22, Y+49	; 0x31
    331e:	7a a9       	ldd	r23, Y+50	; 0x32
    3320:	8b a9       	ldd	r24, Y+51	; 0x33
    3322:	9c a9       	ldd	r25, Y+52	; 0x34
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	3f ef       	ldi	r19, 0xFF	; 255
    3328:	4f e7       	ldi	r20, 0x7F	; 127
    332a:	57 e4       	ldi	r21, 0x47	; 71
    332c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3330:	18 16       	cp	r1, r24
    3332:	4c f5       	brge	.+82     	; 0x3386 <lcd_command+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3334:	6d a9       	ldd	r22, Y+53	; 0x35
    3336:	7e a9       	ldd	r23, Y+54	; 0x36
    3338:	8f a9       	ldd	r24, Y+55	; 0x37
    333a:	98 ad       	ldd	r25, Y+56	; 0x38
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	40 e2       	ldi	r20, 0x20	; 32
    3342:	51 e4       	ldi	r21, 0x41	; 65
    3344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3348:	dc 01       	movw	r26, r24
    334a:	cb 01       	movw	r24, r22
    334c:	bc 01       	movw	r22, r24
    334e:	cd 01       	movw	r24, r26
    3350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	98 ab       	std	Y+48, r25	; 0x30
    335a:	8f a7       	std	Y+47, r24	; 0x2f
    335c:	0f c0       	rjmp	.+30     	; 0x337c <lcd_command+0x21c>
    335e:	88 ec       	ldi	r24, 0xC8	; 200
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	9e a7       	std	Y+46, r25	; 0x2e
    3364:	8d a7       	std	Y+45, r24	; 0x2d
    3366:	8d a5       	ldd	r24, Y+45	; 0x2d
    3368:	9e a5       	ldd	r25, Y+46	; 0x2e
    336a:	01 97       	sbiw	r24, 0x01	; 1
    336c:	f1 f7       	brne	.-4      	; 0x336a <lcd_command+0x20a>
    336e:	9e a7       	std	Y+46, r25	; 0x2e
    3370:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3372:	8f a5       	ldd	r24, Y+47	; 0x2f
    3374:	98 a9       	ldd	r25, Y+48	; 0x30
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	98 ab       	std	Y+48, r25	; 0x30
    337a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    337c:	8f a5       	ldd	r24, Y+47	; 0x2f
    337e:	98 a9       	ldd	r25, Y+48	; 0x30
    3380:	00 97       	sbiw	r24, 0x00	; 0
    3382:	69 f7       	brne	.-38     	; 0x335e <lcd_command+0x1fe>
    3384:	14 c0       	rjmp	.+40     	; 0x33ae <lcd_command+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3386:	69 a9       	ldd	r22, Y+49	; 0x31
    3388:	7a a9       	ldd	r23, Y+50	; 0x32
    338a:	8b a9       	ldd	r24, Y+51	; 0x33
    338c:	9c a9       	ldd	r25, Y+52	; 0x34
    338e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	98 ab       	std	Y+48, r25	; 0x30
    3398:	8f a7       	std	Y+47, r24	; 0x2f
    339a:	8f a5       	ldd	r24, Y+47	; 0x2f
    339c:	98 a9       	ldd	r25, Y+48	; 0x30
    339e:	9c a7       	std	Y+44, r25	; 0x2c
    33a0:	8b a7       	std	Y+43, r24	; 0x2b
    33a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    33a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    33a6:	01 97       	sbiw	r24, 0x01	; 1
    33a8:	f1 f7       	brne	.-4      	; 0x33a6 <lcd_command+0x246>
    33aa:	9c a7       	std	Y+44, r25	; 0x2c
    33ac:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);     
    DIO_voidSetPortValue(LCD_DATA_PORT, ((PORTC&0x0f)|(cmd<<4)));
    33ae:	e5 e3       	ldi	r30, 0x35	; 53
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	80 81       	ld	r24, Z
    33b4:	28 2f       	mov	r18, r24
    33b6:	2f 70       	andi	r18, 0x0F	; 15
    33b8:	fe 01       	movw	r30, r28
    33ba:	e9 5b       	subi	r30, 0xB9	; 185
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	80 81       	ld	r24, Z
    33c0:	88 2f       	mov	r24, r24
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	82 95       	swap	r24
    33c6:	92 95       	swap	r25
    33c8:	90 7f       	andi	r25, 0xF0	; 240
    33ca:	98 27       	eor	r25, r24
    33cc:	80 7f       	andi	r24, 0xF0	; 240
    33ce:	98 27       	eor	r25, r24
    33d0:	82 2b       	or	r24, r18
    33d2:	98 2f       	mov	r25, r24
    33d4:	82 e0       	ldi	r24, 0x02	; 2
    33d6:	69 2f       	mov	r22, r25
    33d8:	0e 94 1e 11 	call	0x223c	; 0x223c <DIO_voidSetPortValue>
    DIO_voidSetPinValue(EN_PIN,HIGH);  
    33dc:	82 e0       	ldi	r24, 0x02	; 2
    33de:	63 e0       	ldi	r22, 0x03	; 3
    33e0:	41 e0       	ldi	r20, 0x01	; 1
    33e2:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	a0 e0       	ldi	r26, 0x00	; 0
    33ec:	b0 e4       	ldi	r27, 0x40	; 64
    33ee:	8f a3       	std	Y+39, r24	; 0x27
    33f0:	98 a7       	std	Y+40, r25	; 0x28
    33f2:	a9 a7       	std	Y+41, r26	; 0x29
    33f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f6:	6f a1       	ldd	r22, Y+39	; 0x27
    33f8:	78 a5       	ldd	r23, Y+40	; 0x28
    33fa:	89 a5       	ldd	r24, Y+41	; 0x29
    33fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    33fe:	20 e0       	ldi	r18, 0x00	; 0
    3400:	30 e0       	ldi	r19, 0x00	; 0
    3402:	4a ef       	ldi	r20, 0xFA	; 250
    3404:	54 e4       	ldi	r21, 0x44	; 68
    3406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    340a:	dc 01       	movw	r26, r24
    340c:	cb 01       	movw	r24, r22
    340e:	8b a3       	std	Y+35, r24	; 0x23
    3410:	9c a3       	std	Y+36, r25	; 0x24
    3412:	ad a3       	std	Y+37, r26	; 0x25
    3414:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3416:	6b a1       	ldd	r22, Y+35	; 0x23
    3418:	7c a1       	ldd	r23, Y+36	; 0x24
    341a:	8d a1       	ldd	r24, Y+37	; 0x25
    341c:	9e a1       	ldd	r25, Y+38	; 0x26
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	40 e8       	ldi	r20, 0x80	; 128
    3424:	5f e3       	ldi	r21, 0x3F	; 63
    3426:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    342a:	88 23       	and	r24, r24
    342c:	2c f4       	brge	.+10     	; 0x3438 <lcd_command+0x2d8>
		__ticks = 1;
    342e:	81 e0       	ldi	r24, 0x01	; 1
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	9a a3       	std	Y+34, r25	; 0x22
    3434:	89 a3       	std	Y+33, r24	; 0x21
    3436:	3f c0       	rjmp	.+126    	; 0x34b6 <lcd_command+0x356>
	else if (__tmp > 65535)
    3438:	6b a1       	ldd	r22, Y+35	; 0x23
    343a:	7c a1       	ldd	r23, Y+36	; 0x24
    343c:	8d a1       	ldd	r24, Y+37	; 0x25
    343e:	9e a1       	ldd	r25, Y+38	; 0x26
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	3f ef       	ldi	r19, 0xFF	; 255
    3444:	4f e7       	ldi	r20, 0x7F	; 127
    3446:	57 e4       	ldi	r21, 0x47	; 71
    3448:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    344c:	18 16       	cp	r1, r24
    344e:	4c f5       	brge	.+82     	; 0x34a2 <lcd_command+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3450:	6f a1       	ldd	r22, Y+39	; 0x27
    3452:	78 a5       	ldd	r23, Y+40	; 0x28
    3454:	89 a5       	ldd	r24, Y+41	; 0x29
    3456:	9a a5       	ldd	r25, Y+42	; 0x2a
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	40 e2       	ldi	r20, 0x20	; 32
    345e:	51 e4       	ldi	r21, 0x41	; 65
    3460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3464:	dc 01       	movw	r26, r24
    3466:	cb 01       	movw	r24, r22
    3468:	bc 01       	movw	r22, r24
    346a:	cd 01       	movw	r24, r26
    346c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	9a a3       	std	Y+34, r25	; 0x22
    3476:	89 a3       	std	Y+33, r24	; 0x21
    3478:	0f c0       	rjmp	.+30     	; 0x3498 <lcd_command+0x338>
    347a:	88 ec       	ldi	r24, 0xC8	; 200
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	98 a3       	std	Y+32, r25	; 0x20
    3480:	8f 8f       	std	Y+31, r24	; 0x1f
    3482:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3484:	98 a1       	ldd	r25, Y+32	; 0x20
    3486:	01 97       	sbiw	r24, 0x01	; 1
    3488:	f1 f7       	brne	.-4      	; 0x3486 <lcd_command+0x326>
    348a:	98 a3       	std	Y+32, r25	; 0x20
    348c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    348e:	89 a1       	ldd	r24, Y+33	; 0x21
    3490:	9a a1       	ldd	r25, Y+34	; 0x22
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	9a a3       	std	Y+34, r25	; 0x22
    3496:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3498:	89 a1       	ldd	r24, Y+33	; 0x21
    349a:	9a a1       	ldd	r25, Y+34	; 0x22
    349c:	00 97       	sbiw	r24, 0x00	; 0
    349e:	69 f7       	brne	.-38     	; 0x347a <lcd_command+0x31a>
    34a0:	14 c0       	rjmp	.+40     	; 0x34ca <lcd_command+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34a2:	6b a1       	ldd	r22, Y+35	; 0x23
    34a4:	7c a1       	ldd	r23, Y+36	; 0x24
    34a6:	8d a1       	ldd	r24, Y+37	; 0x25
    34a8:	9e a1       	ldd	r25, Y+38	; 0x26
    34aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ae:	dc 01       	movw	r26, r24
    34b0:	cb 01       	movw	r24, r22
    34b2:	9a a3       	std	Y+34, r25	; 0x22
    34b4:	89 a3       	std	Y+33, r24	; 0x21
    34b6:	89 a1       	ldd	r24, Y+33	; 0x21
    34b8:	9a a1       	ldd	r25, Y+34	; 0x22
    34ba:	9e 8f       	std	Y+30, r25	; 0x1e
    34bc:	8d 8f       	std	Y+29, r24	; 0x1d
    34be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34c2:	01 97       	sbiw	r24, 0x01	; 1
    34c4:	f1 f7       	brne	.-4      	; 0x34c2 <lcd_command+0x362>
    34c6:	9e 8f       	std	Y+30, r25	; 0x1e
    34c8:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);   
    DIO_voidSetPinValue(EN_PIN,LOW);
    34ca:	82 e0       	ldi	r24, 0x02	; 2
    34cc:	63 e0       	ldi	r22, 0x03	; 3
    34ce:	40 e0       	ldi	r20, 0x00	; 0
    34d0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    34d4:	80 e0       	ldi	r24, 0x00	; 0
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	a0 e0       	ldi	r26, 0x00	; 0
    34da:	b0 e4       	ldi	r27, 0x40	; 64
    34dc:	89 8f       	std	Y+25, r24	; 0x19
    34de:	9a 8f       	std	Y+26, r25	; 0x1a
    34e0:	ab 8f       	std	Y+27, r26	; 0x1b
    34e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e4:	69 8d       	ldd	r22, Y+25	; 0x19
    34e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34ec:	20 e0       	ldi	r18, 0x00	; 0
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	4a ef       	ldi	r20, 0xFA	; 250
    34f2:	54 e4       	ldi	r21, 0x44	; 68
    34f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34f8:	dc 01       	movw	r26, r24
    34fa:	cb 01       	movw	r24, r22
    34fc:	8d 8b       	std	Y+21, r24	; 0x15
    34fe:	9e 8b       	std	Y+22, r25	; 0x16
    3500:	af 8b       	std	Y+23, r26	; 0x17
    3502:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3504:	6d 89       	ldd	r22, Y+21	; 0x15
    3506:	7e 89       	ldd	r23, Y+22	; 0x16
    3508:	8f 89       	ldd	r24, Y+23	; 0x17
    350a:	98 8d       	ldd	r25, Y+24	; 0x18
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	40 e8       	ldi	r20, 0x80	; 128
    3512:	5f e3       	ldi	r21, 0x3F	; 63
    3514:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3518:	88 23       	and	r24, r24
    351a:	2c f4       	brge	.+10     	; 0x3526 <lcd_command+0x3c6>
		__ticks = 1;
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	90 e0       	ldi	r25, 0x00	; 0
    3520:	9c 8b       	std	Y+20, r25	; 0x14
    3522:	8b 8b       	std	Y+19, r24	; 0x13
    3524:	3f c0       	rjmp	.+126    	; 0x35a4 <lcd_command+0x444>
	else if (__tmp > 65535)
    3526:	6d 89       	ldd	r22, Y+21	; 0x15
    3528:	7e 89       	ldd	r23, Y+22	; 0x16
    352a:	8f 89       	ldd	r24, Y+23	; 0x17
    352c:	98 8d       	ldd	r25, Y+24	; 0x18
    352e:	20 e0       	ldi	r18, 0x00	; 0
    3530:	3f ef       	ldi	r19, 0xFF	; 255
    3532:	4f e7       	ldi	r20, 0x7F	; 127
    3534:	57 e4       	ldi	r21, 0x47	; 71
    3536:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    353a:	18 16       	cp	r1, r24
    353c:	4c f5       	brge	.+82     	; 0x3590 <lcd_command+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    353e:	69 8d       	ldd	r22, Y+25	; 0x19
    3540:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3542:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3544:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	40 e2       	ldi	r20, 0x20	; 32
    354c:	51 e4       	ldi	r21, 0x41	; 65
    354e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	bc 01       	movw	r22, r24
    3558:	cd 01       	movw	r24, r26
    355a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	9c 8b       	std	Y+20, r25	; 0x14
    3564:	8b 8b       	std	Y+19, r24	; 0x13
    3566:	0f c0       	rjmp	.+30     	; 0x3586 <lcd_command+0x426>
    3568:	88 ec       	ldi	r24, 0xC8	; 200
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	9a 8b       	std	Y+18, r25	; 0x12
    356e:	89 8b       	std	Y+17, r24	; 0x11
    3570:	89 89       	ldd	r24, Y+17	; 0x11
    3572:	9a 89       	ldd	r25, Y+18	; 0x12
    3574:	01 97       	sbiw	r24, 0x01	; 1
    3576:	f1 f7       	brne	.-4      	; 0x3574 <lcd_command+0x414>
    3578:	9a 8b       	std	Y+18, r25	; 0x12
    357a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    357c:	8b 89       	ldd	r24, Y+19	; 0x13
    357e:	9c 89       	ldd	r25, Y+20	; 0x14
    3580:	01 97       	sbiw	r24, 0x01	; 1
    3582:	9c 8b       	std	Y+20, r25	; 0x14
    3584:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3586:	8b 89       	ldd	r24, Y+19	; 0x13
    3588:	9c 89       	ldd	r25, Y+20	; 0x14
    358a:	00 97       	sbiw	r24, 0x00	; 0
    358c:	69 f7       	brne	.-38     	; 0x3568 <lcd_command+0x408>
    358e:	14 c0       	rjmp	.+40     	; 0x35b8 <lcd_command+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3590:	6d 89       	ldd	r22, Y+21	; 0x15
    3592:	7e 89       	ldd	r23, Y+22	; 0x16
    3594:	8f 89       	ldd	r24, Y+23	; 0x17
    3596:	98 8d       	ldd	r25, Y+24	; 0x18
    3598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359c:	dc 01       	movw	r26, r24
    359e:	cb 01       	movw	r24, r22
    35a0:	9c 8b       	std	Y+20, r25	; 0x14
    35a2:	8b 8b       	std	Y+19, r24	; 0x13
    35a4:	8b 89       	ldd	r24, Y+19	; 0x13
    35a6:	9c 89       	ldd	r25, Y+20	; 0x14
    35a8:	98 8b       	std	Y+16, r25	; 0x10
    35aa:	8f 87       	std	Y+15, r24	; 0x0f
    35ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ae:	98 89       	ldd	r25, Y+16	; 0x10
    35b0:	01 97       	sbiw	r24, 0x01	; 1
    35b2:	f1 f7       	brne	.-4      	; 0x35b0 <lcd_command+0x450>
    35b4:	98 8b       	std	Y+16, r25	; 0x10
    35b6:	8f 87       	std	Y+15, r24	; 0x0f
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	a0 ea       	ldi	r26, 0xA0	; 160
    35be:	b0 e4       	ldi	r27, 0x40	; 64
    35c0:	8b 87       	std	Y+11, r24	; 0x0b
    35c2:	9c 87       	std	Y+12, r25	; 0x0c
    35c4:	ad 87       	std	Y+13, r26	; 0x0d
    35c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    35cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    35ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    35d0:	20 e0       	ldi	r18, 0x00	; 0
    35d2:	30 e0       	ldi	r19, 0x00	; 0
    35d4:	4a ef       	ldi	r20, 0xFA	; 250
    35d6:	54 e4       	ldi	r21, 0x44	; 68
    35d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35dc:	dc 01       	movw	r26, r24
    35de:	cb 01       	movw	r24, r22
    35e0:	8f 83       	std	Y+7, r24	; 0x07
    35e2:	98 87       	std	Y+8, r25	; 0x08
    35e4:	a9 87       	std	Y+9, r26	; 0x09
    35e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35e8:	6f 81       	ldd	r22, Y+7	; 0x07
    35ea:	78 85       	ldd	r23, Y+8	; 0x08
    35ec:	89 85       	ldd	r24, Y+9	; 0x09
    35ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f0:	20 e0       	ldi	r18, 0x00	; 0
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	40 e8       	ldi	r20, 0x80	; 128
    35f6:	5f e3       	ldi	r21, 0x3F	; 63
    35f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35fc:	88 23       	and	r24, r24
    35fe:	2c f4       	brge	.+10     	; 0x360a <lcd_command+0x4aa>
		__ticks = 1;
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	9e 83       	std	Y+6, r25	; 0x06
    3606:	8d 83       	std	Y+5, r24	; 0x05
    3608:	3f c0       	rjmp	.+126    	; 0x3688 <lcd_command+0x528>
	else if (__tmp > 65535)
    360a:	6f 81       	ldd	r22, Y+7	; 0x07
    360c:	78 85       	ldd	r23, Y+8	; 0x08
    360e:	89 85       	ldd	r24, Y+9	; 0x09
    3610:	9a 85       	ldd	r25, Y+10	; 0x0a
    3612:	20 e0       	ldi	r18, 0x00	; 0
    3614:	3f ef       	ldi	r19, 0xFF	; 255
    3616:	4f e7       	ldi	r20, 0x7F	; 127
    3618:	57 e4       	ldi	r21, 0x47	; 71
    361a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    361e:	18 16       	cp	r1, r24
    3620:	4c f5       	brge	.+82     	; 0x3674 <lcd_command+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3622:	6b 85       	ldd	r22, Y+11	; 0x0b
    3624:	7c 85       	ldd	r23, Y+12	; 0x0c
    3626:	8d 85       	ldd	r24, Y+13	; 0x0d
    3628:	9e 85       	ldd	r25, Y+14	; 0x0e
    362a:	20 e0       	ldi	r18, 0x00	; 0
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	40 e2       	ldi	r20, 0x20	; 32
    3630:	51 e4       	ldi	r21, 0x41	; 65
    3632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	bc 01       	movw	r22, r24
    363c:	cd 01       	movw	r24, r26
    363e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3642:	dc 01       	movw	r26, r24
    3644:	cb 01       	movw	r24, r22
    3646:	9e 83       	std	Y+6, r25	; 0x06
    3648:	8d 83       	std	Y+5, r24	; 0x05
    364a:	0f c0       	rjmp	.+30     	; 0x366a <lcd_command+0x50a>
    364c:	88 ec       	ldi	r24, 0xC8	; 200
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	9c 83       	std	Y+4, r25	; 0x04
    3652:	8b 83       	std	Y+3, r24	; 0x03
    3654:	8b 81       	ldd	r24, Y+3	; 0x03
    3656:	9c 81       	ldd	r25, Y+4	; 0x04
    3658:	01 97       	sbiw	r24, 0x01	; 1
    365a:	f1 f7       	brne	.-4      	; 0x3658 <lcd_command+0x4f8>
    365c:	9c 83       	std	Y+4, r25	; 0x04
    365e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3660:	8d 81       	ldd	r24, Y+5	; 0x05
    3662:	9e 81       	ldd	r25, Y+6	; 0x06
    3664:	01 97       	sbiw	r24, 0x01	; 1
    3666:	9e 83       	std	Y+6, r25	; 0x06
    3668:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    366a:	8d 81       	ldd	r24, Y+5	; 0x05
    366c:	9e 81       	ldd	r25, Y+6	; 0x06
    366e:	00 97       	sbiw	r24, 0x00	; 0
    3670:	69 f7       	brne	.-38     	; 0x364c <lcd_command+0x4ec>
    3672:	14 c0       	rjmp	.+40     	; 0x369c <lcd_command+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3674:	6f 81       	ldd	r22, Y+7	; 0x07
    3676:	78 85       	ldd	r23, Y+8	; 0x08
    3678:	89 85       	ldd	r24, Y+9	; 0x09
    367a:	9a 85       	ldd	r25, Y+10	; 0x0a
    367c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	9e 83       	std	Y+6, r25	; 0x06
    3686:	8d 83       	std	Y+5, r24	; 0x05
    3688:	8d 81       	ldd	r24, Y+5	; 0x05
    368a:	9e 81       	ldd	r25, Y+6	; 0x06
    368c:	9a 83       	std	Y+2, r25	; 0x02
    368e:	89 83       	std	Y+1, r24	; 0x01
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	9a 81       	ldd	r25, Y+2	; 0x02
    3694:	01 97       	sbiw	r24, 0x01	; 1
    3696:	f1 f7       	brne	.-4      	; 0x3694 <lcd_command+0x534>
    3698:	9a 83       	std	Y+2, r25	; 0x02
    369a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);  
	
    _delay_ms(5); 	 	        
}
    369c:	c9 5b       	subi	r28, 0xB9	; 185
    369e:	df 4f       	sbci	r29, 0xFF	; 255
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	f8 94       	cli
    36a4:	de bf       	out	0x3e, r29	; 62
    36a6:	0f be       	out	0x3f, r0	; 63
    36a8:	cd bf       	out	0x3d, r28	; 61
    36aa:	cf 91       	pop	r28
    36ac:	df 91       	pop	r29
    36ae:	1f 91       	pop	r17
    36b0:	0f 91       	pop	r16
    36b2:	08 95       	ret

000036b4 <lcd_sendChar>:
void lcd_sendChar(uint8_t data)
{
    36b4:	df 93       	push	r29
    36b6:	cf 93       	push	r28
    36b8:	cd b7       	in	r28, 0x3d	; 61
    36ba:	de b7       	in	r29, 0x3e	; 62
    36bc:	e9 97       	sbiw	r28, 0x39	; 57
    36be:	0f b6       	in	r0, 0x3f	; 63
    36c0:	f8 94       	cli
    36c2:	de bf       	out	0x3e, r29	; 62
    36c4:	0f be       	out	0x3f, r0	; 63
    36c6:	cd bf       	out	0x3d, r28	; 61
    36c8:	89 af       	std	Y+57, r24	; 0x39
    DIO_voidSetPortValue(LCD_DATA_PORT,((PORTC&0x0f)|(data&0xf0)));
    36ca:	e5 e3       	ldi	r30, 0x35	; 53
    36cc:	f0 e0       	ldi	r31, 0x00	; 0
    36ce:	80 81       	ld	r24, Z
    36d0:	98 2f       	mov	r25, r24
    36d2:	9f 70       	andi	r25, 0x0F	; 15
    36d4:	89 ad       	ldd	r24, Y+57	; 0x39
    36d6:	80 7f       	andi	r24, 0xF0	; 240
    36d8:	89 2b       	or	r24, r25
    36da:	98 2f       	mov	r25, r24
    36dc:	82 e0       	ldi	r24, 0x02	; 2
    36de:	69 2f       	mov	r22, r25
    36e0:	0e 94 1e 11 	call	0x223c	; 0x223c <DIO_voidSetPortValue>
    DIO_voidSetPinValue(LS_PIN,HIGH);
    36e4:	82 e0       	ldi	r24, 0x02	; 2
    36e6:	62 e0       	ldi	r22, 0x02	; 2
    36e8:	41 e0       	ldi	r20, 0x01	; 1
    36ea:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    //DIO_voidSetPinValue(R_W_PIN,LOW);
    DIO_voidSetPinValue(EN_PIN,HIGH);    
    36ee:	82 e0       	ldi	r24, 0x02	; 2
    36f0:	63 e0       	ldi	r22, 0x03	; 3
    36f2:	41 e0       	ldi	r20, 0x01	; 1
    36f4:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    36f8:	80 e0       	ldi	r24, 0x00	; 0
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	a0 e0       	ldi	r26, 0x00	; 0
    36fe:	b0 e4       	ldi	r27, 0x40	; 64
    3700:	8d ab       	std	Y+53, r24	; 0x35
    3702:	9e ab       	std	Y+54, r25	; 0x36
    3704:	af ab       	std	Y+55, r26	; 0x37
    3706:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3708:	6d a9       	ldd	r22, Y+53	; 0x35
    370a:	7e a9       	ldd	r23, Y+54	; 0x36
    370c:	8f a9       	ldd	r24, Y+55	; 0x37
    370e:	98 ad       	ldd	r25, Y+56	; 0x38
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	4a ef       	ldi	r20, 0xFA	; 250
    3716:	54 e4       	ldi	r21, 0x44	; 68
    3718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371c:	dc 01       	movw	r26, r24
    371e:	cb 01       	movw	r24, r22
    3720:	89 ab       	std	Y+49, r24	; 0x31
    3722:	9a ab       	std	Y+50, r25	; 0x32
    3724:	ab ab       	std	Y+51, r26	; 0x33
    3726:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3728:	69 a9       	ldd	r22, Y+49	; 0x31
    372a:	7a a9       	ldd	r23, Y+50	; 0x32
    372c:	8b a9       	ldd	r24, Y+51	; 0x33
    372e:	9c a9       	ldd	r25, Y+52	; 0x34
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	40 e8       	ldi	r20, 0x80	; 128
    3736:	5f e3       	ldi	r21, 0x3F	; 63
    3738:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    373c:	88 23       	and	r24, r24
    373e:	2c f4       	brge	.+10     	; 0x374a <lcd_sendChar+0x96>
		__ticks = 1;
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	98 ab       	std	Y+48, r25	; 0x30
    3746:	8f a7       	std	Y+47, r24	; 0x2f
    3748:	3f c0       	rjmp	.+126    	; 0x37c8 <lcd_sendChar+0x114>
	else if (__tmp > 65535)
    374a:	69 a9       	ldd	r22, Y+49	; 0x31
    374c:	7a a9       	ldd	r23, Y+50	; 0x32
    374e:	8b a9       	ldd	r24, Y+51	; 0x33
    3750:	9c a9       	ldd	r25, Y+52	; 0x34
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	3f ef       	ldi	r19, 0xFF	; 255
    3756:	4f e7       	ldi	r20, 0x7F	; 127
    3758:	57 e4       	ldi	r21, 0x47	; 71
    375a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    375e:	18 16       	cp	r1, r24
    3760:	4c f5       	brge	.+82     	; 0x37b4 <lcd_sendChar+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3762:	6d a9       	ldd	r22, Y+53	; 0x35
    3764:	7e a9       	ldd	r23, Y+54	; 0x36
    3766:	8f a9       	ldd	r24, Y+55	; 0x37
    3768:	98 ad       	ldd	r25, Y+56	; 0x38
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	40 e2       	ldi	r20, 0x20	; 32
    3770:	51 e4       	ldi	r21, 0x41	; 65
    3772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	bc 01       	movw	r22, r24
    377c:	cd 01       	movw	r24, r26
    377e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	98 ab       	std	Y+48, r25	; 0x30
    3788:	8f a7       	std	Y+47, r24	; 0x2f
    378a:	0f c0       	rjmp	.+30     	; 0x37aa <lcd_sendChar+0xf6>
    378c:	88 ec       	ldi	r24, 0xC8	; 200
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	9e a7       	std	Y+46, r25	; 0x2e
    3792:	8d a7       	std	Y+45, r24	; 0x2d
    3794:	8d a5       	ldd	r24, Y+45	; 0x2d
    3796:	9e a5       	ldd	r25, Y+46	; 0x2e
    3798:	01 97       	sbiw	r24, 0x01	; 1
    379a:	f1 f7       	brne	.-4      	; 0x3798 <lcd_sendChar+0xe4>
    379c:	9e a7       	std	Y+46, r25	; 0x2e
    379e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    37a2:	98 a9       	ldd	r25, Y+48	; 0x30
    37a4:	01 97       	sbiw	r24, 0x01	; 1
    37a6:	98 ab       	std	Y+48, r25	; 0x30
    37a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    37ac:	98 a9       	ldd	r25, Y+48	; 0x30
    37ae:	00 97       	sbiw	r24, 0x00	; 0
    37b0:	69 f7       	brne	.-38     	; 0x378c <lcd_sendChar+0xd8>
    37b2:	14 c0       	rjmp	.+40     	; 0x37dc <lcd_sendChar+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37b4:	69 a9       	ldd	r22, Y+49	; 0x31
    37b6:	7a a9       	ldd	r23, Y+50	; 0x32
    37b8:	8b a9       	ldd	r24, Y+51	; 0x33
    37ba:	9c a9       	ldd	r25, Y+52	; 0x34
    37bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	98 ab       	std	Y+48, r25	; 0x30
    37c6:	8f a7       	std	Y+47, r24	; 0x2f
    37c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    37ca:	98 a9       	ldd	r25, Y+48	; 0x30
    37cc:	9c a7       	std	Y+44, r25	; 0x2c
    37ce:	8b a7       	std	Y+43, r24	; 0x2b
    37d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    37d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    37d4:	01 97       	sbiw	r24, 0x01	; 1
    37d6:	f1 f7       	brne	.-4      	; 0x37d4 <lcd_sendChar+0x120>
    37d8:	9c a7       	std	Y+44, r25	; 0x2c
    37da:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);    
    DIO_voidSetPinValue(EN_PIN,LOW);
    37dc:	82 e0       	ldi	r24, 0x02	; 2
    37de:	63 e0       	ldi	r22, 0x03	; 3
    37e0:	40 e0       	ldi	r20, 0x00	; 0
    37e2:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	a0 e0       	ldi	r26, 0x00	; 0
    37ec:	b0 e4       	ldi	r27, 0x40	; 64
    37ee:	8f a3       	std	Y+39, r24	; 0x27
    37f0:	98 a7       	std	Y+40, r25	; 0x28
    37f2:	a9 a7       	std	Y+41, r26	; 0x29
    37f4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f6:	6f a1       	ldd	r22, Y+39	; 0x27
    37f8:	78 a5       	ldd	r23, Y+40	; 0x28
    37fa:	89 a5       	ldd	r24, Y+41	; 0x29
    37fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	4a ef       	ldi	r20, 0xFA	; 250
    3804:	54 e4       	ldi	r21, 0x44	; 68
    3806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	8b a3       	std	Y+35, r24	; 0x23
    3810:	9c a3       	std	Y+36, r25	; 0x24
    3812:	ad a3       	std	Y+37, r26	; 0x25
    3814:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3816:	6b a1       	ldd	r22, Y+35	; 0x23
    3818:	7c a1       	ldd	r23, Y+36	; 0x24
    381a:	8d a1       	ldd	r24, Y+37	; 0x25
    381c:	9e a1       	ldd	r25, Y+38	; 0x26
    381e:	20 e0       	ldi	r18, 0x00	; 0
    3820:	30 e0       	ldi	r19, 0x00	; 0
    3822:	40 e8       	ldi	r20, 0x80	; 128
    3824:	5f e3       	ldi	r21, 0x3F	; 63
    3826:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    382a:	88 23       	and	r24, r24
    382c:	2c f4       	brge	.+10     	; 0x3838 <lcd_sendChar+0x184>
		__ticks = 1;
    382e:	81 e0       	ldi	r24, 0x01	; 1
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	9a a3       	std	Y+34, r25	; 0x22
    3834:	89 a3       	std	Y+33, r24	; 0x21
    3836:	3f c0       	rjmp	.+126    	; 0x38b6 <lcd_sendChar+0x202>
	else if (__tmp > 65535)
    3838:	6b a1       	ldd	r22, Y+35	; 0x23
    383a:	7c a1       	ldd	r23, Y+36	; 0x24
    383c:	8d a1       	ldd	r24, Y+37	; 0x25
    383e:	9e a1       	ldd	r25, Y+38	; 0x26
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	3f ef       	ldi	r19, 0xFF	; 255
    3844:	4f e7       	ldi	r20, 0x7F	; 127
    3846:	57 e4       	ldi	r21, 0x47	; 71
    3848:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    384c:	18 16       	cp	r1, r24
    384e:	4c f5       	brge	.+82     	; 0x38a2 <lcd_sendChar+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3850:	6f a1       	ldd	r22, Y+39	; 0x27
    3852:	78 a5       	ldd	r23, Y+40	; 0x28
    3854:	89 a5       	ldd	r24, Y+41	; 0x29
    3856:	9a a5       	ldd	r25, Y+42	; 0x2a
    3858:	20 e0       	ldi	r18, 0x00	; 0
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	40 e2       	ldi	r20, 0x20	; 32
    385e:	51 e4       	ldi	r21, 0x41	; 65
    3860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3864:	dc 01       	movw	r26, r24
    3866:	cb 01       	movw	r24, r22
    3868:	bc 01       	movw	r22, r24
    386a:	cd 01       	movw	r24, r26
    386c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3870:	dc 01       	movw	r26, r24
    3872:	cb 01       	movw	r24, r22
    3874:	9a a3       	std	Y+34, r25	; 0x22
    3876:	89 a3       	std	Y+33, r24	; 0x21
    3878:	0f c0       	rjmp	.+30     	; 0x3898 <lcd_sendChar+0x1e4>
    387a:	88 ec       	ldi	r24, 0xC8	; 200
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	98 a3       	std	Y+32, r25	; 0x20
    3880:	8f 8f       	std	Y+31, r24	; 0x1f
    3882:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3884:	98 a1       	ldd	r25, Y+32	; 0x20
    3886:	01 97       	sbiw	r24, 0x01	; 1
    3888:	f1 f7       	brne	.-4      	; 0x3886 <lcd_sendChar+0x1d2>
    388a:	98 a3       	std	Y+32, r25	; 0x20
    388c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    388e:	89 a1       	ldd	r24, Y+33	; 0x21
    3890:	9a a1       	ldd	r25, Y+34	; 0x22
    3892:	01 97       	sbiw	r24, 0x01	; 1
    3894:	9a a3       	std	Y+34, r25	; 0x22
    3896:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3898:	89 a1       	ldd	r24, Y+33	; 0x21
    389a:	9a a1       	ldd	r25, Y+34	; 0x22
    389c:	00 97       	sbiw	r24, 0x00	; 0
    389e:	69 f7       	brne	.-38     	; 0x387a <lcd_sendChar+0x1c6>
    38a0:	14 c0       	rjmp	.+40     	; 0x38ca <lcd_sendChar+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a2:	6b a1       	ldd	r22, Y+35	; 0x23
    38a4:	7c a1       	ldd	r23, Y+36	; 0x24
    38a6:	8d a1       	ldd	r24, Y+37	; 0x25
    38a8:	9e a1       	ldd	r25, Y+38	; 0x26
    38aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	9a a3       	std	Y+34, r25	; 0x22
    38b4:	89 a3       	std	Y+33, r24	; 0x21
    38b6:	89 a1       	ldd	r24, Y+33	; 0x21
    38b8:	9a a1       	ldd	r25, Y+34	; 0x22
    38ba:	9e 8f       	std	Y+30, r25	; 0x1e
    38bc:	8d 8f       	std	Y+29, r24	; 0x1d
    38be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38c2:	01 97       	sbiw	r24, 0x01	; 1
    38c4:	f1 f7       	brne	.-4      	; 0x38c2 <lcd_sendChar+0x20e>
    38c6:	9e 8f       	std	Y+30, r25	; 0x1e
    38c8:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);     
    DIO_voidSetPortValue(LCD_DATA_PORT, ((PORTC&0x0f)|(data<<4)));
    38ca:	e5 e3       	ldi	r30, 0x35	; 53
    38cc:	f0 e0       	ldi	r31, 0x00	; 0
    38ce:	80 81       	ld	r24, Z
    38d0:	28 2f       	mov	r18, r24
    38d2:	2f 70       	andi	r18, 0x0F	; 15
    38d4:	89 ad       	ldd	r24, Y+57	; 0x39
    38d6:	88 2f       	mov	r24, r24
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	82 95       	swap	r24
    38dc:	92 95       	swap	r25
    38de:	90 7f       	andi	r25, 0xF0	; 240
    38e0:	98 27       	eor	r25, r24
    38e2:	80 7f       	andi	r24, 0xF0	; 240
    38e4:	98 27       	eor	r25, r24
    38e6:	82 2b       	or	r24, r18
    38e8:	98 2f       	mov	r25, r24
    38ea:	82 e0       	ldi	r24, 0x02	; 2
    38ec:	69 2f       	mov	r22, r25
    38ee:	0e 94 1e 11 	call	0x223c	; 0x223c <DIO_voidSetPortValue>
    DIO_voidSetPinValue(LS_PIN,HIGH);    
    38f2:	82 e0       	ldi	r24, 0x02	; 2
    38f4:	62 e0       	ldi	r22, 0x02	; 2
    38f6:	41 e0       	ldi	r20, 0x01	; 1
    38f8:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(EN_PIN,HIGH);  
    38fc:	82 e0       	ldi	r24, 0x02	; 2
    38fe:	63 e0       	ldi	r22, 0x03	; 3
    3900:	41 e0       	ldi	r20, 0x01	; 1
    3902:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    3906:	80 e0       	ldi	r24, 0x00	; 0
    3908:	90 e0       	ldi	r25, 0x00	; 0
    390a:	a0 e0       	ldi	r26, 0x00	; 0
    390c:	b0 e4       	ldi	r27, 0x40	; 64
    390e:	89 8f       	std	Y+25, r24	; 0x19
    3910:	9a 8f       	std	Y+26, r25	; 0x1a
    3912:	ab 8f       	std	Y+27, r26	; 0x1b
    3914:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3916:	69 8d       	ldd	r22, Y+25	; 0x19
    3918:	7a 8d       	ldd	r23, Y+26	; 0x1a
    391a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    391c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	4a ef       	ldi	r20, 0xFA	; 250
    3924:	54 e4       	ldi	r21, 0x44	; 68
    3926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	8d 8b       	std	Y+21, r24	; 0x15
    3930:	9e 8b       	std	Y+22, r25	; 0x16
    3932:	af 8b       	std	Y+23, r26	; 0x17
    3934:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3936:	6d 89       	ldd	r22, Y+21	; 0x15
    3938:	7e 89       	ldd	r23, Y+22	; 0x16
    393a:	8f 89       	ldd	r24, Y+23	; 0x17
    393c:	98 8d       	ldd	r25, Y+24	; 0x18
    393e:	20 e0       	ldi	r18, 0x00	; 0
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	40 e8       	ldi	r20, 0x80	; 128
    3944:	5f e3       	ldi	r21, 0x3F	; 63
    3946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    394a:	88 23       	and	r24, r24
    394c:	2c f4       	brge	.+10     	; 0x3958 <lcd_sendChar+0x2a4>
		__ticks = 1;
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	9c 8b       	std	Y+20, r25	; 0x14
    3954:	8b 8b       	std	Y+19, r24	; 0x13
    3956:	3f c0       	rjmp	.+126    	; 0x39d6 <lcd_sendChar+0x322>
	else if (__tmp > 65535)
    3958:	6d 89       	ldd	r22, Y+21	; 0x15
    395a:	7e 89       	ldd	r23, Y+22	; 0x16
    395c:	8f 89       	ldd	r24, Y+23	; 0x17
    395e:	98 8d       	ldd	r25, Y+24	; 0x18
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	3f ef       	ldi	r19, 0xFF	; 255
    3964:	4f e7       	ldi	r20, 0x7F	; 127
    3966:	57 e4       	ldi	r21, 0x47	; 71
    3968:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    396c:	18 16       	cp	r1, r24
    396e:	4c f5       	brge	.+82     	; 0x39c2 <lcd_sendChar+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3970:	69 8d       	ldd	r22, Y+25	; 0x19
    3972:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3974:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3976:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	40 e2       	ldi	r20, 0x20	; 32
    397e:	51 e4       	ldi	r21, 0x41	; 65
    3980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3984:	dc 01       	movw	r26, r24
    3986:	cb 01       	movw	r24, r22
    3988:	bc 01       	movw	r22, r24
    398a:	cd 01       	movw	r24, r26
    398c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3990:	dc 01       	movw	r26, r24
    3992:	cb 01       	movw	r24, r22
    3994:	9c 8b       	std	Y+20, r25	; 0x14
    3996:	8b 8b       	std	Y+19, r24	; 0x13
    3998:	0f c0       	rjmp	.+30     	; 0x39b8 <lcd_sendChar+0x304>
    399a:	88 ec       	ldi	r24, 0xC8	; 200
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	9a 8b       	std	Y+18, r25	; 0x12
    39a0:	89 8b       	std	Y+17, r24	; 0x11
    39a2:	89 89       	ldd	r24, Y+17	; 0x11
    39a4:	9a 89       	ldd	r25, Y+18	; 0x12
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	f1 f7       	brne	.-4      	; 0x39a6 <lcd_sendChar+0x2f2>
    39aa:	9a 8b       	std	Y+18, r25	; 0x12
    39ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ae:	8b 89       	ldd	r24, Y+19	; 0x13
    39b0:	9c 89       	ldd	r25, Y+20	; 0x14
    39b2:	01 97       	sbiw	r24, 0x01	; 1
    39b4:	9c 8b       	std	Y+20, r25	; 0x14
    39b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b8:	8b 89       	ldd	r24, Y+19	; 0x13
    39ba:	9c 89       	ldd	r25, Y+20	; 0x14
    39bc:	00 97       	sbiw	r24, 0x00	; 0
    39be:	69 f7       	brne	.-38     	; 0x399a <lcd_sendChar+0x2e6>
    39c0:	14 c0       	rjmp	.+40     	; 0x39ea <lcd_sendChar+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39c2:	6d 89       	ldd	r22, Y+21	; 0x15
    39c4:	7e 89       	ldd	r23, Y+22	; 0x16
    39c6:	8f 89       	ldd	r24, Y+23	; 0x17
    39c8:	98 8d       	ldd	r25, Y+24	; 0x18
    39ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ce:	dc 01       	movw	r26, r24
    39d0:	cb 01       	movw	r24, r22
    39d2:	9c 8b       	std	Y+20, r25	; 0x14
    39d4:	8b 8b       	std	Y+19, r24	; 0x13
    39d6:	8b 89       	ldd	r24, Y+19	; 0x13
    39d8:	9c 89       	ldd	r25, Y+20	; 0x14
    39da:	98 8b       	std	Y+16, r25	; 0x10
    39dc:	8f 87       	std	Y+15, r24	; 0x0f
    39de:	8f 85       	ldd	r24, Y+15	; 0x0f
    39e0:	98 89       	ldd	r25, Y+16	; 0x10
    39e2:	01 97       	sbiw	r24, 0x01	; 1
    39e4:	f1 f7       	brne	.-4      	; 0x39e2 <lcd_sendChar+0x32e>
    39e6:	98 8b       	std	Y+16, r25	; 0x10
    39e8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);   
    DIO_voidSetPinValue(EN_PIN,LOW);  
    39ea:	82 e0       	ldi	r24, 0x02	; 2
    39ec:	63 e0       	ldi	r22, 0x03	; 3
    39ee:	40 e0       	ldi	r20, 0x00	; 0
    39f0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	a0 e0       	ldi	r26, 0x00	; 0
    39fa:	b0 e4       	ldi	r27, 0x40	; 64
    39fc:	8b 87       	std	Y+11, r24	; 0x0b
    39fe:	9c 87       	std	Y+12, r25	; 0x0c
    3a00:	ad 87       	std	Y+13, r26	; 0x0d
    3a02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	4a ef       	ldi	r20, 0xFA	; 250
    3a12:	54 e4       	ldi	r21, 0x44	; 68
    3a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	8f 83       	std	Y+7, r24	; 0x07
    3a1e:	98 87       	std	Y+8, r25	; 0x08
    3a20:	a9 87       	std	Y+9, r26	; 0x09
    3a22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a24:	6f 81       	ldd	r22, Y+7	; 0x07
    3a26:	78 85       	ldd	r23, Y+8	; 0x08
    3a28:	89 85       	ldd	r24, Y+9	; 0x09
    3a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	40 e8       	ldi	r20, 0x80	; 128
    3a32:	5f e3       	ldi	r21, 0x3F	; 63
    3a34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a38:	88 23       	and	r24, r24
    3a3a:	2c f4       	brge	.+10     	; 0x3a46 <lcd_sendChar+0x392>
		__ticks = 1;
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	9e 83       	std	Y+6, r25	; 0x06
    3a42:	8d 83       	std	Y+5, r24	; 0x05
    3a44:	3f c0       	rjmp	.+126    	; 0x3ac4 <lcd_sendChar+0x410>
	else if (__tmp > 65535)
    3a46:	6f 81       	ldd	r22, Y+7	; 0x07
    3a48:	78 85       	ldd	r23, Y+8	; 0x08
    3a4a:	89 85       	ldd	r24, Y+9	; 0x09
    3a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	3f ef       	ldi	r19, 0xFF	; 255
    3a52:	4f e7       	ldi	r20, 0x7F	; 127
    3a54:	57 e4       	ldi	r21, 0x47	; 71
    3a56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a5a:	18 16       	cp	r1, r24
    3a5c:	4c f5       	brge	.+82     	; 0x3ab0 <lcd_sendChar+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a60:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a62:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a64:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	40 e2       	ldi	r20, 0x20	; 32
    3a6c:	51 e4       	ldi	r21, 0x41	; 65
    3a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	bc 01       	movw	r22, r24
    3a78:	cd 01       	movw	r24, r26
    3a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	9e 83       	std	Y+6, r25	; 0x06
    3a84:	8d 83       	std	Y+5, r24	; 0x05
    3a86:	0f c0       	rjmp	.+30     	; 0x3aa6 <lcd_sendChar+0x3f2>
    3a88:	88 ec       	ldi	r24, 0xC8	; 200
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	9c 83       	std	Y+4, r25	; 0x04
    3a8e:	8b 83       	std	Y+3, r24	; 0x03
    3a90:	8b 81       	ldd	r24, Y+3	; 0x03
    3a92:	9c 81       	ldd	r25, Y+4	; 0x04
    3a94:	01 97       	sbiw	r24, 0x01	; 1
    3a96:	f1 f7       	brne	.-4      	; 0x3a94 <lcd_sendChar+0x3e0>
    3a98:	9c 83       	std	Y+4, r25	; 0x04
    3a9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	9e 83       	std	Y+6, r25	; 0x06
    3aa4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aaa:	00 97       	sbiw	r24, 0x00	; 0
    3aac:	69 f7       	brne	.-38     	; 0x3a88 <lcd_sendChar+0x3d4>
    3aae:	14 c0       	rjmp	.+40     	; 0x3ad8 <lcd_sendChar+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab2:	78 85       	ldd	r23, Y+8	; 0x08
    3ab4:	89 85       	ldd	r24, Y+9	; 0x09
    3ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3abc:	dc 01       	movw	r26, r24
    3abe:	cb 01       	movw	r24, r22
    3ac0:	9e 83       	std	Y+6, r25	; 0x06
    3ac2:	8d 83       	std	Y+5, r24	; 0x05
    3ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac8:	9a 83       	std	Y+2, r25	; 0x02
    3aca:	89 83       	std	Y+1, r24	; 0x01
    3acc:	89 81       	ldd	r24, Y+1	; 0x01
    3ace:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad0:	01 97       	sbiw	r24, 0x01	; 1
    3ad2:	f1 f7       	brne	.-4      	; 0x3ad0 <lcd_sendChar+0x41c>
    3ad4:	9a 83       	std	Y+2, r25	; 0x02
    3ad6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);   	

}
    3ad8:	e9 96       	adiw	r28, 0x39	; 57
    3ada:	0f b6       	in	r0, 0x3f	; 63
    3adc:	f8 94       	cli
    3ade:	de bf       	out	0x3e, r29	; 62
    3ae0:	0f be       	out	0x3f, r0	; 63
    3ae2:	cd bf       	out	0x3d, r28	; 61
    3ae4:	cf 91       	pop	r28
    3ae6:	df 91       	pop	r29
    3ae8:	08 95       	ret

00003aea <lcd_sendString>:
void lcd_sendString(uint8_t * data)
{
    3aea:	df 93       	push	r29
    3aec:	cf 93       	push	r28
    3aee:	00 d0       	rcall	.+0      	; 0x3af0 <lcd_sendString+0x6>
    3af0:	0f 92       	push	r0
    3af2:	cd b7       	in	r28, 0x3d	; 61
    3af4:	de b7       	in	r29, 0x3e	; 62
    3af6:	9b 83       	std	Y+3, r25	; 0x03
    3af8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i=0;
    3afa:	19 82       	std	Y+1, r1	; 0x01
    3afc:	0e c0       	rjmp	.+28     	; 0x3b1a <lcd_sendString+0x30>

	while(data[i] != '\0')
	{

		lcd_sendChar(data[i]);
    3afe:	89 81       	ldd	r24, Y+1	; 0x01
    3b00:	28 2f       	mov	r18, r24
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	8a 81       	ldd	r24, Y+2	; 0x02
    3b06:	9b 81       	ldd	r25, Y+3	; 0x03
    3b08:	fc 01       	movw	r30, r24
    3b0a:	e2 0f       	add	r30, r18
    3b0c:	f3 1f       	adc	r31, r19
    3b0e:	80 81       	ld	r24, Z
    3b10:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <lcd_sendChar>
		i++;
    3b14:	89 81       	ldd	r24, Y+1	; 0x01
    3b16:	8f 5f       	subi	r24, 0xFF	; 255
    3b18:	89 83       	std	Y+1, r24	; 0x01
}
void lcd_sendString(uint8_t * data)
{
	uint8_t i=0;

	while(data[i] != '\0')
    3b1a:	89 81       	ldd	r24, Y+1	; 0x01
    3b1c:	28 2f       	mov	r18, r24
    3b1e:	30 e0       	ldi	r19, 0x00	; 0
    3b20:	8a 81       	ldd	r24, Y+2	; 0x02
    3b22:	9b 81       	ldd	r25, Y+3	; 0x03
    3b24:	fc 01       	movw	r30, r24
    3b26:	e2 0f       	add	r30, r18
    3b28:	f3 1f       	adc	r31, r19
    3b2a:	80 81       	ld	r24, Z
    3b2c:	88 23       	and	r24, r24
    3b2e:	39 f7       	brne	.-50     	; 0x3afe <lcd_sendString+0x14>
	{

		lcd_sendChar(data[i]);
		i++;
	}
}
    3b30:	0f 90       	pop	r0
    3b32:	0f 90       	pop	r0
    3b34:	0f 90       	pop	r0
    3b36:	cf 91       	pop	r28
    3b38:	df 91       	pop	r29
    3b3a:	08 95       	ret

00003b3c <lcd_sendNum>:
void lcd_sendNum( u16 copy_u16number)
{
    3b3c:	df 93       	push	r29
    3b3e:	cf 93       	push	r28
    3b40:	cd b7       	in	r28, 0x3d	; 61
    3b42:	de b7       	in	r29, 0x3e	; 62
    3b44:	2a 97       	sbiw	r28, 0x0a	; 10
    3b46:	0f b6       	in	r0, 0x3f	; 63
    3b48:	f8 94       	cli
    3b4a:	de bf       	out	0x3e, r29	; 62
    3b4c:	0f be       	out	0x3f, r0	; 63
    3b4e:	cd bf       	out	0x3d, r28	; 61
    3b50:	98 87       	std	Y+8, r25	; 0x08
    3b52:	8f 83       	std	Y+7, r24	; 0x07

	if (copy_u16number==0)
    3b54:	8f 81       	ldd	r24, Y+7	; 0x07
    3b56:	98 85       	ldd	r25, Y+8	; 0x08
    3b58:	00 97       	sbiw	r24, 0x00	; 0
    3b5a:	19 f4       	brne	.+6      	; 0x3b62 <lcd_sendNum+0x26>
	{
		lcd_sendChar('0');
    3b5c:	80 e3       	ldi	r24, 0x30	; 48
    3b5e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <lcd_sendChar>
	}
	sint8_t i=0;
    3b62:	19 82       	std	Y+1, r1	; 0x01
    3b64:	1f c0       	rjmp	.+62     	; 0x3ba4 <lcd_sendNum+0x68>
	uint8_t str_num[5];
	while(copy_u16number>0)
	{
		str_num[i]=copy_u16number%10;
    3b66:	89 81       	ldd	r24, Y+1	; 0x01
    3b68:	e8 2f       	mov	r30, r24
    3b6a:	ff 27       	eor	r31, r31
    3b6c:	e7 fd       	sbrc	r30, 7
    3b6e:	f0 95       	com	r31
    3b70:	8f 81       	ldd	r24, Y+7	; 0x07
    3b72:	98 85       	ldd	r25, Y+8	; 0x08
    3b74:	2a e0       	ldi	r18, 0x0A	; 10
    3b76:	30 e0       	ldi	r19, 0x00	; 0
    3b78:	b9 01       	movw	r22, r18
    3b7a:	0e 94 9c 29 	call	0x5338	; 0x5338 <__udivmodhi4>
    3b7e:	28 2f       	mov	r18, r24
    3b80:	ce 01       	movw	r24, r28
    3b82:	02 96       	adiw	r24, 0x02	; 2
    3b84:	e8 0f       	add	r30, r24
    3b86:	f9 1f       	adc	r31, r25
    3b88:	20 83       	st	Z, r18
		copy_u16number/=10;
    3b8a:	8f 81       	ldd	r24, Y+7	; 0x07
    3b8c:	98 85       	ldd	r25, Y+8	; 0x08
    3b8e:	2a e0       	ldi	r18, 0x0A	; 10
    3b90:	30 e0       	ldi	r19, 0x00	; 0
    3b92:	b9 01       	movw	r22, r18
    3b94:	0e 94 9c 29 	call	0x5338	; 0x5338 <__udivmodhi4>
    3b98:	cb 01       	movw	r24, r22
    3b9a:	98 87       	std	Y+8, r25	; 0x08
    3b9c:	8f 83       	std	Y+7, r24	; 0x07
		i++;
    3b9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ba0:	8f 5f       	subi	r24, 0xFF	; 255
    3ba2:	89 83       	std	Y+1, r24	; 0x01
	{
		lcd_sendChar('0');
	}
	sint8_t i=0;
	uint8_t str_num[5];
	while(copy_u16number>0)
    3ba4:	8f 81       	ldd	r24, Y+7	; 0x07
    3ba6:	98 85       	ldd	r25, Y+8	; 0x08
    3ba8:	00 97       	sbiw	r24, 0x00	; 0
    3baa:	e9 f6       	brne	.-70     	; 0x3b66 <lcd_sendNum+0x2a>
	{
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
    3bac:	89 81       	ldd	r24, Y+1	; 0x01
    3bae:	81 50       	subi	r24, 0x01	; 1
    3bb0:	89 83       	std	Y+1, r24	; 0x01
    3bb2:	7e c0       	rjmp	.+252    	; 0x3cb0 <lcd_sendNum+0x174>
	while(i>=0)
	{
		switch(str_num[i])
    3bb4:	89 81       	ldd	r24, Y+1	; 0x01
    3bb6:	28 2f       	mov	r18, r24
    3bb8:	33 27       	eor	r19, r19
    3bba:	27 fd       	sbrc	r18, 7
    3bbc:	30 95       	com	r19
    3bbe:	ce 01       	movw	r24, r28
    3bc0:	02 96       	adiw	r24, 0x02	; 2
    3bc2:	fc 01       	movw	r30, r24
    3bc4:	e2 0f       	add	r30, r18
    3bc6:	f3 1f       	adc	r31, r19
    3bc8:	80 81       	ld	r24, Z
    3bca:	28 2f       	mov	r18, r24
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	3a 87       	std	Y+10, r19	; 0x0a
    3bd0:	29 87       	std	Y+9, r18	; 0x09
    3bd2:	89 85       	ldd	r24, Y+9	; 0x09
    3bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd6:	84 30       	cpi	r24, 0x04	; 4
    3bd8:	91 05       	cpc	r25, r1
    3bda:	09 f4       	brne	.+2      	; 0x3bde <lcd_sendNum+0xa2>
    3bdc:	4f c0       	rjmp	.+158    	; 0x3c7c <lcd_sendNum+0x140>
    3bde:	29 85       	ldd	r18, Y+9	; 0x09
    3be0:	3a 85       	ldd	r19, Y+10	; 0x0a
    3be2:	25 30       	cpi	r18, 0x05	; 5
    3be4:	31 05       	cpc	r19, r1
    3be6:	d4 f4       	brge	.+52     	; 0x3c1c <lcd_sendNum+0xe0>
    3be8:	89 85       	ldd	r24, Y+9	; 0x09
    3bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bec:	81 30       	cpi	r24, 0x01	; 1
    3bee:	91 05       	cpc	r25, r1
    3bf0:	c9 f1       	breq	.+114    	; 0x3c64 <lcd_sendNum+0x128>
    3bf2:	29 85       	ldd	r18, Y+9	; 0x09
    3bf4:	3a 85       	ldd	r19, Y+10	; 0x0a
    3bf6:	22 30       	cpi	r18, 0x02	; 2
    3bf8:	31 05       	cpc	r19, r1
    3bfa:	2c f4       	brge	.+10     	; 0x3c06 <lcd_sendNum+0xca>
    3bfc:	89 85       	ldd	r24, Y+9	; 0x09
    3bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c00:	00 97       	sbiw	r24, 0x00	; 0
    3c02:	61 f1       	breq	.+88     	; 0x3c5c <lcd_sendNum+0x120>
    3c04:	52 c0       	rjmp	.+164    	; 0x3caa <lcd_sendNum+0x16e>
    3c06:	29 85       	ldd	r18, Y+9	; 0x09
    3c08:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c0a:	22 30       	cpi	r18, 0x02	; 2
    3c0c:	31 05       	cpc	r19, r1
    3c0e:	71 f1       	breq	.+92     	; 0x3c6c <lcd_sendNum+0x130>
    3c10:	89 85       	ldd	r24, Y+9	; 0x09
    3c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c14:	83 30       	cpi	r24, 0x03	; 3
    3c16:	91 05       	cpc	r25, r1
    3c18:	69 f1       	breq	.+90     	; 0x3c74 <lcd_sendNum+0x138>
    3c1a:	47 c0       	rjmp	.+142    	; 0x3caa <lcd_sendNum+0x16e>
    3c1c:	29 85       	ldd	r18, Y+9	; 0x09
    3c1e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c20:	27 30       	cpi	r18, 0x07	; 7
    3c22:	31 05       	cpc	r19, r1
    3c24:	b9 f1       	breq	.+110    	; 0x3c94 <lcd_sendNum+0x158>
    3c26:	89 85       	ldd	r24, Y+9	; 0x09
    3c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c2a:	88 30       	cpi	r24, 0x08	; 8
    3c2c:	91 05       	cpc	r25, r1
    3c2e:	5c f4       	brge	.+22     	; 0x3c46 <lcd_sendNum+0x10a>
    3c30:	29 85       	ldd	r18, Y+9	; 0x09
    3c32:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c34:	25 30       	cpi	r18, 0x05	; 5
    3c36:	31 05       	cpc	r19, r1
    3c38:	29 f1       	breq	.+74     	; 0x3c84 <lcd_sendNum+0x148>
    3c3a:	89 85       	ldd	r24, Y+9	; 0x09
    3c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3e:	86 30       	cpi	r24, 0x06	; 6
    3c40:	91 05       	cpc	r25, r1
    3c42:	21 f1       	breq	.+72     	; 0x3c8c <lcd_sendNum+0x150>
    3c44:	32 c0       	rjmp	.+100    	; 0x3caa <lcd_sendNum+0x16e>
    3c46:	29 85       	ldd	r18, Y+9	; 0x09
    3c48:	3a 85       	ldd	r19, Y+10	; 0x0a
    3c4a:	28 30       	cpi	r18, 0x08	; 8
    3c4c:	31 05       	cpc	r19, r1
    3c4e:	31 f1       	breq	.+76     	; 0x3c9c <lcd_sendNum+0x160>
    3c50:	89 85       	ldd	r24, Y+9	; 0x09
    3c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c54:	89 30       	cpi	r24, 0x09	; 9
    3c56:	91 05       	cpc	r25, r1
    3c58:	29 f1       	breq	.+74     	; 0x3ca4 <lcd_sendNum+0x168>
    3c5a:	27 c0       	rjmp	.+78     	; 0x3caa <lcd_sendNum+0x16e>
		{
		case 0 : lcd_sendChar('0');break;
    3c5c:	80 e3       	ldi	r24, 0x30	; 48
    3c5e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <lcd_sendChar>
    3c62:	23 c0       	rjmp	.+70     	; 0x3caa <lcd_sendNum+0x16e>
		case 1 : lcd_sendChar('1');break;
    3c64:	81 e3       	ldi	r24, 0x31	; 49
    3c66:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <lcd_sendChar>
    3c6a:	1f c0       	rjmp	.+62     	; 0x3caa <lcd_sendNum+0x16e>
		case 2 : lcd_sendChar('2');break;
    3c6c:	82 e3       	ldi	r24, 0x32	; 50
    3c6e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <lcd_sendChar>
    3c72:	1b c0       	rjmp	.+54     	; 0x3caa <lcd_sendNum+0x16e>
		case 3 : lcd_sendChar('3');break;
    3c74:	83 e3       	ldi	r24, 0x33	; 51
    3c76:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <lcd_sendChar>
    3c7a:	17 c0       	rjmp	.+46     	; 0x3caa <lcd_sendNum+0x16e>
		case 4 : lcd_sendChar('4');break;
    3c7c:	84 e3       	ldi	r24, 0x34	; 52
    3c7e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <lcd_sendChar>
    3c82:	13 c0       	rjmp	.+38     	; 0x3caa <lcd_sendNum+0x16e>
		case 5 : lcd_sendChar('5');break;
    3c84:	85 e3       	ldi	r24, 0x35	; 53
    3c86:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <lcd_sendChar>
    3c8a:	0f c0       	rjmp	.+30     	; 0x3caa <lcd_sendNum+0x16e>
		case 6 : lcd_sendChar('6');break;
    3c8c:	86 e3       	ldi	r24, 0x36	; 54
    3c8e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <lcd_sendChar>
    3c92:	0b c0       	rjmp	.+22     	; 0x3caa <lcd_sendNum+0x16e>
		case 7 : lcd_sendChar('7');break;
    3c94:	87 e3       	ldi	r24, 0x37	; 55
    3c96:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <lcd_sendChar>
    3c9a:	07 c0       	rjmp	.+14     	; 0x3caa <lcd_sendNum+0x16e>
		case 8 : lcd_sendChar('8');break;
    3c9c:	88 e3       	ldi	r24, 0x38	; 56
    3c9e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <lcd_sendChar>
    3ca2:	03 c0       	rjmp	.+6      	; 0x3caa <lcd_sendNum+0x16e>
		case 9 : lcd_sendChar('9');break;
    3ca4:	89 e3       	ldi	r24, 0x39	; 57
    3ca6:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <lcd_sendChar>
		}

		i--;
    3caa:	89 81       	ldd	r24, Y+1	; 0x01
    3cac:	81 50       	subi	r24, 0x01	; 1
    3cae:	89 83       	std	Y+1, r24	; 0x01
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
	while(i>=0)
    3cb0:	89 81       	ldd	r24, Y+1	; 0x01
    3cb2:	88 23       	and	r24, r24
    3cb4:	0c f0       	brlt	.+2      	; 0x3cb8 <lcd_sendNum+0x17c>
    3cb6:	7e cf       	rjmp	.-260    	; 0x3bb4 <lcd_sendNum+0x78>

		i--;
	}


}
    3cb8:	2a 96       	adiw	r28, 0x0a	; 10
    3cba:	0f b6       	in	r0, 0x3f	; 63
    3cbc:	f8 94       	cli
    3cbe:	de bf       	out	0x3e, r29	; 62
    3cc0:	0f be       	out	0x3f, r0	; 63
    3cc2:	cd bf       	out	0x3d, r28	; 61
    3cc4:	cf 91       	pop	r28
    3cc6:	df 91       	pop	r29
    3cc8:	08 95       	ret

00003cca <lcd_SetPosition>:

void lcd_SetPosition(uint8_t raw, uint8_t column)
{
    3cca:	df 93       	push	r29
    3ccc:	cf 93       	push	r28
    3cce:	00 d0       	rcall	.+0      	; 0x3cd0 <lcd_SetPosition+0x6>
    3cd0:	cd b7       	in	r28, 0x3d	; 61
    3cd2:	de b7       	in	r29, 0x3e	; 62
    3cd4:	89 83       	std	Y+1, r24	; 0x01
    3cd6:	6a 83       	std	Y+2, r22	; 0x02
	if(0==raw)   
    3cd8:	89 81       	ldd	r24, Y+1	; 0x01
    3cda:	88 23       	and	r24, r24
    3cdc:	21 f4       	brne	.+8      	; 0x3ce6 <lcd_SetPosition+0x1c>
	{
	lcd_command(LCD_FIRSTLINE+column);
    3cde:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce0:	80 58       	subi	r24, 0x80	; 128
    3ce2:	0e 94 b0 18 	call	0x3160	; 0x3160 <lcd_command>
	}
	if(1==raw)
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	81 30       	cpi	r24, 0x01	; 1
    3cea:	21 f4       	brne	.+8      	; 0x3cf4 <lcd_SetPosition+0x2a>
	{
	lcd_command(LCD_SECONDLINE+column);                                   
    3cec:	8a 81       	ldd	r24, Y+2	; 0x02
    3cee:	80 54       	subi	r24, 0x40	; 64
    3cf0:	0e 94 b0 18 	call	0x3160	; 0x3160 <lcd_command>
	}

}
    3cf4:	0f 90       	pop	r0
    3cf6:	0f 90       	pop	r0
    3cf8:	cf 91       	pop	r28
    3cfa:	df 91       	pop	r29
    3cfc:	08 95       	ret

00003cfe <lcd_clear>:

void lcd_clear(void)
{
    3cfe:	df 93       	push	r29
    3d00:	cf 93       	push	r28
    3d02:	cd b7       	in	r28, 0x3d	; 61
    3d04:	de b7       	in	r29, 0x3e	; 62
    3d06:	2e 97       	sbiw	r28, 0x0e	; 14
    3d08:	0f b6       	in	r0, 0x3f	; 63
    3d0a:	f8 94       	cli
    3d0c:	de bf       	out	0x3e, r29	; 62
    3d0e:	0f be       	out	0x3f, r0	; 63
    3d10:	cd bf       	out	0x3d, r28	; 61
    lcd_command(DISPLAY_CLEAR);
    3d12:	81 e0       	ldi	r24, 0x01	; 1
    3d14:	0e 94 b0 18 	call	0x3160	; 0x3160 <lcd_command>
    3d18:	80 e0       	ldi	r24, 0x00	; 0
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	a0 e0       	ldi	r26, 0x00	; 0
    3d1e:	b0 e4       	ldi	r27, 0x40	; 64
    3d20:	8b 87       	std	Y+11, r24	; 0x0b
    3d22:	9c 87       	std	Y+12, r25	; 0x0c
    3d24:	ad 87       	std	Y+13, r26	; 0x0d
    3d26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d28:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	4a ef       	ldi	r20, 0xFA	; 250
    3d36:	54 e4       	ldi	r21, 0x44	; 68
    3d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d3c:	dc 01       	movw	r26, r24
    3d3e:	cb 01       	movw	r24, r22
    3d40:	8f 83       	std	Y+7, r24	; 0x07
    3d42:	98 87       	std	Y+8, r25	; 0x08
    3d44:	a9 87       	std	Y+9, r26	; 0x09
    3d46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d48:	6f 81       	ldd	r22, Y+7	; 0x07
    3d4a:	78 85       	ldd	r23, Y+8	; 0x08
    3d4c:	89 85       	ldd	r24, Y+9	; 0x09
    3d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d50:	20 e0       	ldi	r18, 0x00	; 0
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	40 e8       	ldi	r20, 0x80	; 128
    3d56:	5f e3       	ldi	r21, 0x3F	; 63
    3d58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d5c:	88 23       	and	r24, r24
    3d5e:	2c f4       	brge	.+10     	; 0x3d6a <lcd_clear+0x6c>
		__ticks = 1;
    3d60:	81 e0       	ldi	r24, 0x01	; 1
    3d62:	90 e0       	ldi	r25, 0x00	; 0
    3d64:	9e 83       	std	Y+6, r25	; 0x06
    3d66:	8d 83       	std	Y+5, r24	; 0x05
    3d68:	3f c0       	rjmp	.+126    	; 0x3de8 <lcd_clear+0xea>
	else if (__tmp > 65535)
    3d6a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d6c:	78 85       	ldd	r23, Y+8	; 0x08
    3d6e:	89 85       	ldd	r24, Y+9	; 0x09
    3d70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d72:	20 e0       	ldi	r18, 0x00	; 0
    3d74:	3f ef       	ldi	r19, 0xFF	; 255
    3d76:	4f e7       	ldi	r20, 0x7F	; 127
    3d78:	57 e4       	ldi	r21, 0x47	; 71
    3d7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d7e:	18 16       	cp	r1, r24
    3d80:	4c f5       	brge	.+82     	; 0x3dd4 <lcd_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d82:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d84:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d86:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d88:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d8a:	20 e0       	ldi	r18, 0x00	; 0
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	40 e2       	ldi	r20, 0x20	; 32
    3d90:	51 e4       	ldi	r21, 0x41	; 65
    3d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d96:	dc 01       	movw	r26, r24
    3d98:	cb 01       	movw	r24, r22
    3d9a:	bc 01       	movw	r22, r24
    3d9c:	cd 01       	movw	r24, r26
    3d9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3da2:	dc 01       	movw	r26, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	9e 83       	std	Y+6, r25	; 0x06
    3da8:	8d 83       	std	Y+5, r24	; 0x05
    3daa:	0f c0       	rjmp	.+30     	; 0x3dca <lcd_clear+0xcc>
    3dac:	88 ec       	ldi	r24, 0xC8	; 200
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	9c 83       	std	Y+4, r25	; 0x04
    3db2:	8b 83       	std	Y+3, r24	; 0x03
    3db4:	8b 81       	ldd	r24, Y+3	; 0x03
    3db6:	9c 81       	ldd	r25, Y+4	; 0x04
    3db8:	01 97       	sbiw	r24, 0x01	; 1
    3dba:	f1 f7       	brne	.-4      	; 0x3db8 <lcd_clear+0xba>
    3dbc:	9c 83       	std	Y+4, r25	; 0x04
    3dbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    3dc4:	01 97       	sbiw	r24, 0x01	; 1
    3dc6:	9e 83       	std	Y+6, r25	; 0x06
    3dc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dca:	8d 81       	ldd	r24, Y+5	; 0x05
    3dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    3dce:	00 97       	sbiw	r24, 0x00	; 0
    3dd0:	69 f7       	brne	.-38     	; 0x3dac <lcd_clear+0xae>
    3dd2:	14 c0       	rjmp	.+40     	; 0x3dfc <lcd_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dd4:	6f 81       	ldd	r22, Y+7	; 0x07
    3dd6:	78 85       	ldd	r23, Y+8	; 0x08
    3dd8:	89 85       	ldd	r24, Y+9	; 0x09
    3dda:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de0:	dc 01       	movw	r26, r24
    3de2:	cb 01       	movw	r24, r22
    3de4:	9e 83       	std	Y+6, r25	; 0x06
    3de6:	8d 83       	std	Y+5, r24	; 0x05
    3de8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dea:	9e 81       	ldd	r25, Y+6	; 0x06
    3dec:	9a 83       	std	Y+2, r25	; 0x02
    3dee:	89 83       	std	Y+1, r24	; 0x01
    3df0:	89 81       	ldd	r24, Y+1	; 0x01
    3df2:	9a 81       	ldd	r25, Y+2	; 0x02
    3df4:	01 97       	sbiw	r24, 0x01	; 1
    3df6:	f1 f7       	brne	.-4      	; 0x3df4 <lcd_clear+0xf6>
    3df8:	9a 83       	std	Y+2, r25	; 0x02
    3dfa:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    3dfc:	2e 96       	adiw	r28, 0x0e	; 14
    3dfe:	0f b6       	in	r0, 0x3f	; 63
    3e00:	f8 94       	cli
    3e02:	de bf       	out	0x3e, r29	; 62
    3e04:	0f be       	out	0x3f, r0	; 63
    3e06:	cd bf       	out	0x3d, r28	; 61
    3e08:	cf 91       	pop	r28
    3e0a:	df 91       	pop	r29
    3e0c:	08 95       	ret

00003e0e <KEYPAD_voidInit>:
/**
 * @brief Initialize KeyPad Pins
 * 
 */
void KEYPAD_voidInit(void)
{
    3e0e:	df 93       	push	r29
    3e10:	cf 93       	push	r28
    3e12:	cd b7       	in	r28, 0x3d	; 61
    3e14:	de b7       	in	r29, 0x3e	; 62
    DIO_voidInpullUp(KEYPAD_PORT, KEYPAD_INPUT0);
    3e16:	80 e0       	ldi	r24, 0x00	; 0
    3e18:	65 e0       	ldi	r22, 0x05	; 5
    3e1a:	0e 94 ae 11 	call	0x235c	; 0x235c <DIO_voidInpullUp>
    DIO_voidInpullUp(KEYPAD_PORT, KEYPAD_INPUT1);
    3e1e:	80 e0       	ldi	r24, 0x00	; 0
    3e20:	66 e0       	ldi	r22, 0x06	; 6
    3e22:	0e 94 ae 11 	call	0x235c	; 0x235c <DIO_voidInpullUp>
    DIO_voidInpullUp(KEYPAD_PORT, KEYPAD_INPUT2);
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	67 e0       	ldi	r22, 0x07	; 7
    3e2a:	0e 94 ae 11 	call	0x235c	; 0x235c <DIO_voidInpullUp>


    DIO_voidSetPinDirection(KEYPAD_PORT, KEYPAD_OUTPUT0, OUTPUT);
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	61 e0       	ldi	r22, 0x01	; 1
    3e32:	41 e0       	ldi	r20, 0x01	; 1
    3e34:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KEYPAD_PORT, KEYPAD_OUTPUT1, OUTPUT);
    3e38:	80 e0       	ldi	r24, 0x00	; 0
    3e3a:	62 e0       	ldi	r22, 0x02	; 2
    3e3c:	41 e0       	ldi	r20, 0x01	; 1
    3e3e:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KEYPAD_PORT, KEYPAD_OUTPUT2, OUTPUT);
    3e42:	80 e0       	ldi	r24, 0x00	; 0
    3e44:	63 e0       	ldi	r22, 0x03	; 3
    3e46:	41 e0       	ldi	r20, 0x01	; 1
    3e48:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KEYPAD_PORT, KEYPAD_OUTPUT3, OUTPUT);
    3e4c:	80 e0       	ldi	r24, 0x00	; 0
    3e4e:	64 e0       	ldi	r22, 0x04	; 4
    3e50:	41 e0       	ldi	r20, 0x01	; 1
    3e52:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <DIO_voidSetPinDirection>

    DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0, HIGH);
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	61 e0       	ldi	r22, 0x01	; 1
    3e5a:	41 e0       	ldi	r20, 0x01	; 1
    3e5c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT1, HIGH);
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	62 e0       	ldi	r22, 0x02	; 2
    3e64:	41 e0       	ldi	r20, 0x01	; 1
    3e66:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT2, HIGH);
    3e6a:	80 e0       	ldi	r24, 0x00	; 0
    3e6c:	63 e0       	ldi	r22, 0x03	; 3
    3e6e:	41 e0       	ldi	r20, 0x01	; 1
    3e70:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT3, HIGH);
    3e74:	80 e0       	ldi	r24, 0x00	; 0
    3e76:	64 e0       	ldi	r22, 0x04	; 4
    3e78:	41 e0       	ldi	r20, 0x01	; 1
    3e7a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
}
    3e7e:	cf 91       	pop	r28
    3e80:	df 91       	pop	r29
    3e82:	08 95       	ret

00003e84 <KEYPAD_u8Read>:
 * @brief Read Pressed Button on KeyPad and Return Key
 * 
 * @return uint8_t Pressed
 */
uint8_t KEYPAD_u8Read(void)
{
    3e84:	df 93       	push	r29
    3e86:	cf 93       	push	r28
    3e88:	00 d0       	rcall	.+0      	; 0x3e8a <KEYPAD_u8Read+0x6>
    3e8a:	0f 92       	push	r0
    3e8c:	cd b7       	in	r28, 0x3d	; 61
    3e8e:	de b7       	in	r29, 0x3e	; 62
    uint8_t i, j, key = DEFAULT_KEY;
    3e90:	8e e2       	ldi	r24, 0x2E	; 46
    3e92:	89 83       	std	Y+1, r24	; 0x01
    while (1)
    {
        for (i = 0; i < ROW; i++)
    3e94:	1b 82       	std	Y+3, r1	; 0x03
    3e96:	3f c0       	rjmp	.+126    	; 0x3f16 <KEYPAD_u8Read+0x92>
        {
            DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0 + i, LOW);
    3e98:	8b 81       	ldd	r24, Y+3	; 0x03
    3e9a:	98 2f       	mov	r25, r24
    3e9c:	9f 5f       	subi	r25, 0xFF	; 255
    3e9e:	80 e0       	ldi	r24, 0x00	; 0
    3ea0:	69 2f       	mov	r22, r25
    3ea2:	40 e0       	ldi	r20, 0x00	; 0
    3ea4:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
            for (j = 0; j < COL; j++)
    3ea8:	1a 82       	std	Y+2, r1	; 0x02
    3eaa:	27 c0       	rjmp	.+78     	; 0x3efa <KEYPAD_u8Read+0x76>
            {
                if (!DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_INPUT0 + j))
    3eac:	8a 81       	ldd	r24, Y+2	; 0x02
    3eae:	98 2f       	mov	r25, r24
    3eb0:	9b 5f       	subi	r25, 0xFB	; 251
    3eb2:	80 e0       	ldi	r24, 0x00	; 0
    3eb4:	69 2f       	mov	r22, r25
    3eb6:	0e 94 21 10 	call	0x2042	; 0x2042 <DIO_u8GetPinValue>
    3eba:	88 23       	and	r24, r24
    3ebc:	d9 f4       	brne	.+54     	; 0x3ef4 <KEYPAD_u8Read+0x70>
                {
                    key = gKEYPADArr[i][j];
    3ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    3ec0:	28 2f       	mov	r18, r24
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec6:	48 2f       	mov	r20, r24
    3ec8:	50 e0       	ldi	r21, 0x00	; 0
    3eca:	c9 01       	movw	r24, r18
    3ecc:	88 0f       	add	r24, r24
    3ece:	99 1f       	adc	r25, r25
    3ed0:	82 0f       	add	r24, r18
    3ed2:	93 1f       	adc	r25, r19
    3ed4:	84 0f       	add	r24, r20
    3ed6:	95 1f       	adc	r25, r21
    3ed8:	fc 01       	movw	r30, r24
    3eda:	e8 5f       	subi	r30, 0xF8	; 248
    3edc:	fc 4f       	sbci	r31, 0xFC	; 252
    3ede:	80 81       	ld	r24, Z
    3ee0:	89 83       	std	Y+1, r24	; 0x01
                    while (!DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_INPUT0 + j))
    3ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee4:	98 2f       	mov	r25, r24
    3ee6:	9b 5f       	subi	r25, 0xFB	; 251
    3ee8:	80 e0       	ldi	r24, 0x00	; 0
    3eea:	69 2f       	mov	r22, r25
    3eec:	0e 94 21 10 	call	0x2042	; 0x2042 <DIO_u8GetPinValue>
    3ef0:	88 23       	and	r24, r24
    3ef2:	b9 f3       	breq	.-18     	; 0x3ee2 <KEYPAD_u8Read+0x5e>
    while (1)
    {
        for (i = 0; i < ROW; i++)
        {
            DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0 + i, LOW);
            for (j = 0; j < COL; j++)
    3ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef6:	8f 5f       	subi	r24, 0xFF	; 255
    3ef8:	8a 83       	std	Y+2, r24	; 0x02
    3efa:	8a 81       	ldd	r24, Y+2	; 0x02
    3efc:	83 30       	cpi	r24, 0x03	; 3
    3efe:	b0 f2       	brcs	.-84     	; 0x3eac <KEYPAD_u8Read+0x28>
                    key = gKEYPADArr[i][j];
                    while (!DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_INPUT0 + j))
                        ;
                }
            }
            DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0 + i, HIGH);
    3f00:	8b 81       	ldd	r24, Y+3	; 0x03
    3f02:	98 2f       	mov	r25, r24
    3f04:	9f 5f       	subi	r25, 0xFF	; 255
    3f06:	80 e0       	ldi	r24, 0x00	; 0
    3f08:	69 2f       	mov	r22, r25
    3f0a:	41 e0       	ldi	r20, 0x01	; 1
    3f0c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <DIO_voidSetPinValue>
uint8_t KEYPAD_u8Read(void)
{
    uint8_t i, j, key = DEFAULT_KEY;
    while (1)
    {
        for (i = 0; i < ROW; i++)
    3f10:	8b 81       	ldd	r24, Y+3	; 0x03
    3f12:	8f 5f       	subi	r24, 0xFF	; 255
    3f14:	8b 83       	std	Y+3, r24	; 0x03
    3f16:	8b 81       	ldd	r24, Y+3	; 0x03
    3f18:	84 30       	cpi	r24, 0x04	; 4
    3f1a:	08 f4       	brcc	.+2      	; 0x3f1e <KEYPAD_u8Read+0x9a>
    3f1c:	bd cf       	rjmp	.-134    	; 0x3e98 <KEYPAD_u8Read+0x14>
                        ;
                }
            }
            DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0 + i, HIGH);
        }
        return key;
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
    }
}
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
    3f24:	0f 90       	pop	r0
    3f26:	cf 91       	pop	r28
    3f28:	df 91       	pop	r29
    3f2a:	08 95       	ret

00003f2c <eeprom_send_string>:

#include "I2C_interface.h"

#include "EEPROM_interface.h"
void eeprom_send_string(uint8_t *str,uint8_t address)
{
    3f2c:	df 93       	push	r29
    3f2e:	cf 93       	push	r28
    3f30:	00 d0       	rcall	.+0      	; 0x3f32 <eeprom_send_string+0x6>
    3f32:	00 d0       	rcall	.+0      	; 0x3f34 <eeprom_send_string+0x8>
    3f34:	0f 92       	push	r0
    3f36:	cd b7       	in	r28, 0x3d	; 61
    3f38:	de b7       	in	r29, 0x3e	; 62
    3f3a:	9c 83       	std	Y+4, r25	; 0x04
    3f3c:	8b 83       	std	Y+3, r24	; 0x03
    3f3e:	6d 83       	std	Y+5, r22	; 0x05

	uint8_t i = 0, value;
    3f40:	1a 82       	std	Y+2, r1	; 0x02
	I2C_MasterStart();
    3f42:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <I2C_MasterStart>
	I2C_SendSlaveAddressWithWrite(0b01010000);
    3f46:	80 e5       	ldi	r24, 0x50	; 80
    3f48:	0e 94 36 0b 	call	0x166c	; 0x166c <I2C_SendSlaveAddressWithWrite>
	I2C_WriteDataByte(address);
    3f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3f4e:	0e 94 88 0b 	call	0x1710	; 0x1710 <I2C_WriteDataByte>
    3f52:	0e c0       	rjmp	.+28     	; 0x3f70 <eeprom_send_string+0x44>
	while (str[i] != '\0')
	{
		I2C_WriteDataByte(str[i]);
    3f54:	8a 81       	ldd	r24, Y+2	; 0x02
    3f56:	28 2f       	mov	r18, r24
    3f58:	30 e0       	ldi	r19, 0x00	; 0
    3f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f5e:	fc 01       	movw	r30, r24
    3f60:	e2 0f       	add	r30, r18
    3f62:	f3 1f       	adc	r31, r19
    3f64:	80 81       	ld	r24, Z
    3f66:	0e 94 88 0b 	call	0x1710	; 0x1710 <I2C_WriteDataByte>
		i++;
    3f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6c:	8f 5f       	subi	r24, 0xFF	; 255
    3f6e:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t i = 0, value;
	I2C_MasterStart();
	I2C_SendSlaveAddressWithWrite(0b01010000);
	I2C_WriteDataByte(address);
	while (str[i] != '\0')
    3f70:	8a 81       	ldd	r24, Y+2	; 0x02
    3f72:	28 2f       	mov	r18, r24
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	8b 81       	ldd	r24, Y+3	; 0x03
    3f78:	9c 81       	ldd	r25, Y+4	; 0x04
    3f7a:	fc 01       	movw	r30, r24
    3f7c:	e2 0f       	add	r30, r18
    3f7e:	f3 1f       	adc	r31, r19
    3f80:	80 81       	ld	r24, Z
    3f82:	88 23       	and	r24, r24
    3f84:	39 f7       	brne	.-50     	; 0x3f54 <eeprom_send_string+0x28>
	{
		I2C_WriteDataByte(str[i]);
		i++;
	}
	I2C_MasterStop();
    3f86:	0e 94 bc 0b 	call	0x1778	; 0x1778 <I2C_MasterStop>
}
    3f8a:	0f 90       	pop	r0
    3f8c:	0f 90       	pop	r0
    3f8e:	0f 90       	pop	r0
    3f90:	0f 90       	pop	r0
    3f92:	0f 90       	pop	r0
    3f94:	cf 91       	pop	r28
    3f96:	df 91       	pop	r29
    3f98:	08 95       	ret

00003f9a <eeprom_recieve_string>:
void eeprom_recieve_string(uint8_t *str,uint8_t address)
{
    3f9a:	0f 93       	push	r16
    3f9c:	1f 93       	push	r17
    3f9e:	df 93       	push	r29
    3fa0:	cf 93       	push	r28
    3fa2:	00 d0       	rcall	.+0      	; 0x3fa4 <eeprom_recieve_string+0xa>
    3fa4:	00 d0       	rcall	.+0      	; 0x3fa6 <eeprom_recieve_string+0xc>
    3fa6:	0f 92       	push	r0
    3fa8:	cd b7       	in	r28, 0x3d	; 61
    3faa:	de b7       	in	r29, 0x3e	; 62
    3fac:	9c 83       	std	Y+4, r25	; 0x04
    3fae:	8b 83       	std	Y+3, r24	; 0x03
    3fb0:	6d 83       	std	Y+5, r22	; 0x05

	uint8_t i = 0, value;
    3fb2:	1a 82       	std	Y+2, r1	; 0x02
	I2C_MasterStart();
    3fb4:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <I2C_MasterStart>
	I2C_SendSlaveAddressWithWrite(0b01010000);
    3fb8:	80 e5       	ldi	r24, 0x50	; 80
    3fba:	0e 94 36 0b 	call	0x166c	; 0x166c <I2C_SendSlaveAddressWithWrite>
	I2C_WriteDataByte(address);
    3fbe:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc0:	0e 94 88 0b 	call	0x1710	; 0x1710 <I2C_WriteDataByte>
    3fc4:	16 c0       	rjmp	.+44     	; 0x3ff2 <eeprom_recieve_string+0x58>

	while (str[i] != '\0')
	{
		I2C_MasterStart();
    3fc6:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <I2C_MasterStart>
		I2C_SendSlaveAddressWithRead(0b01010000);
    3fca:	80 e5       	ldi	r24, 0x50	; 80
    3fcc:	0e 94 5f 0b 	call	0x16be	; 0x16be <I2C_SendSlaveAddressWithRead>
		str[i] = I2C_ReadDataByte();
    3fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd2:	28 2f       	mov	r18, r24
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    3fda:	8c 01       	movw	r16, r24
    3fdc:	02 0f       	add	r16, r18
    3fde:	13 1f       	adc	r17, r19
    3fe0:	0e 94 a2 0b 	call	0x1744	; 0x1744 <I2C_ReadDataByte>
    3fe4:	f8 01       	movw	r30, r16
    3fe6:	80 83       	st	Z, r24

		I2C_MasterStop();
    3fe8:	0e 94 bc 0b 	call	0x1778	; 0x1778 <I2C_MasterStop>
		i++;
    3fec:	8a 81       	ldd	r24, Y+2	; 0x02
    3fee:	8f 5f       	subi	r24, 0xFF	; 255
    3ff0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0, value;
	I2C_MasterStart();
	I2C_SendSlaveAddressWithWrite(0b01010000);
	I2C_WriteDataByte(address);

	while (str[i] != '\0')
    3ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff4:	28 2f       	mov	r18, r24
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    3ffc:	fc 01       	movw	r30, r24
    3ffe:	e2 0f       	add	r30, r18
    4000:	f3 1f       	adc	r31, r19
    4002:	80 81       	ld	r24, Z
    4004:	88 23       	and	r24, r24
    4006:	f9 f6       	brne	.-66     	; 0x3fc6 <eeprom_recieve_string+0x2c>
		str[i] = I2C_ReadDataByte();

		I2C_MasterStop();
		i++;
	}
	str[i]='\0';
    4008:	8a 81       	ldd	r24, Y+2	; 0x02
    400a:	28 2f       	mov	r18, r24
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	8b 81       	ldd	r24, Y+3	; 0x03
    4010:	9c 81       	ldd	r25, Y+4	; 0x04
    4012:	fc 01       	movw	r30, r24
    4014:	e2 0f       	add	r30, r18
    4016:	f3 1f       	adc	r31, r19
    4018:	10 82       	st	Z, r1

}
    401a:	0f 90       	pop	r0
    401c:	0f 90       	pop	r0
    401e:	0f 90       	pop	r0
    4020:	0f 90       	pop	r0
    4022:	0f 90       	pop	r0
    4024:	cf 91       	pop	r28
    4026:	df 91       	pop	r29
    4028:	1f 91       	pop	r17
    402a:	0f 91       	pop	r16
    402c:	08 95       	ret

0000402e <change_stringToBin>:

uint8_t change_stringToBin(uint8_t *str)
{
    402e:	df 93       	push	r29
    4030:	cf 93       	push	r28
    4032:	cd b7       	in	r28, 0x3d	; 61
    4034:	de b7       	in	r29, 0x3e	; 62
    4036:	2d 97       	sbiw	r28, 0x0d	; 13
    4038:	0f b6       	in	r0, 0x3f	; 63
    403a:	f8 94       	cli
    403c:	de bf       	out	0x3e, r29	; 62
    403e:	0f be       	out	0x3f, r0	; 63
    4040:	cd bf       	out	0x3d, r28	; 61
    4042:	9d 87       	std	Y+13, r25	; 0x0d
    4044:	8c 87       	std	Y+12, r24	; 0x0c
	uint32_t num = 0;
    4046:	18 86       	std	Y+8, r1	; 0x08
    4048:	19 86       	std	Y+9, r1	; 0x09
    404a:	1a 86       	std	Y+10, r1	; 0x0a
    404c:	1b 86       	std	Y+11, r1	; 0x0b
	uint32_t bin = 0;
    404e:	1c 82       	std	Y+4, r1	; 0x04
    4050:	1d 82       	std	Y+5, r1	; 0x05
    4052:	1e 82       	std	Y+6, r1	; 0x06
    4054:	1f 82       	std	Y+7, r1	; 0x07
	uint8_t temp = 0;
    4056:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t weight = 1;
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	8a 83       	std	Y+2, r24	; 0x02

	for (uint8_t i = 0; i < 8; i++)
    405c:	19 82       	std	Y+1, r1	; 0x01
    405e:	29 c0       	rjmp	.+82     	; 0x40b2 <change_stringToBin+0x84>
	{
		num = num * 10 + str[i] - '0';
    4060:	88 85       	ldd	r24, Y+8	; 0x08
    4062:	99 85       	ldd	r25, Y+9	; 0x09
    4064:	aa 85       	ldd	r26, Y+10	; 0x0a
    4066:	bb 85       	ldd	r27, Y+11	; 0x0b
    4068:	2a e0       	ldi	r18, 0x0A	; 10
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	40 e0       	ldi	r20, 0x00	; 0
    406e:	50 e0       	ldi	r21, 0x00	; 0
    4070:	bc 01       	movw	r22, r24
    4072:	cd 01       	movw	r24, r26
    4074:	0e 94 7d 29 	call	0x52fa	; 0x52fa <__mulsi3>
    4078:	ab 01       	movw	r20, r22
    407a:	bc 01       	movw	r22, r24
    407c:	89 81       	ldd	r24, Y+1	; 0x01
    407e:	28 2f       	mov	r18, r24
    4080:	30 e0       	ldi	r19, 0x00	; 0
    4082:	8c 85       	ldd	r24, Y+12	; 0x0c
    4084:	9d 85       	ldd	r25, Y+13	; 0x0d
    4086:	fc 01       	movw	r30, r24
    4088:	e2 0f       	add	r30, r18
    408a:	f3 1f       	adc	r31, r19
    408c:	80 81       	ld	r24, Z
    408e:	88 2f       	mov	r24, r24
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	a0 e0       	ldi	r26, 0x00	; 0
    4094:	b0 e0       	ldi	r27, 0x00	; 0
    4096:	84 0f       	add	r24, r20
    4098:	95 1f       	adc	r25, r21
    409a:	a6 1f       	adc	r26, r22
    409c:	b7 1f       	adc	r27, r23
    409e:	c0 97       	sbiw	r24, 0x30	; 48
    40a0:	a1 09       	sbc	r26, r1
    40a2:	b1 09       	sbc	r27, r1
    40a4:	88 87       	std	Y+8, r24	; 0x08
    40a6:	99 87       	std	Y+9, r25	; 0x09
    40a8:	aa 87       	std	Y+10, r26	; 0x0a
    40aa:	bb 87       	std	Y+11, r27	; 0x0b
	uint32_t num = 0;
	uint32_t bin = 0;
	uint8_t temp = 0;
	uint8_t weight = 1;

	for (uint8_t i = 0; i < 8; i++)
    40ac:	89 81       	ldd	r24, Y+1	; 0x01
    40ae:	8f 5f       	subi	r24, 0xFF	; 255
    40b0:	89 83       	std	Y+1, r24	; 0x01
    40b2:	89 81       	ldd	r24, Y+1	; 0x01
    40b4:	88 30       	cpi	r24, 0x08	; 8
    40b6:	a0 f2       	brcs	.-88     	; 0x4060 <change_stringToBin+0x32>
    40b8:	46 c0       	rjmp	.+140    	; 0x4146 <change_stringToBin+0x118>
		num = num * 10 + str[i] - '0';
	}

	while (num > 0)
	{
		temp = num % 10;
    40ba:	88 85       	ldd	r24, Y+8	; 0x08
    40bc:	99 85       	ldd	r25, Y+9	; 0x09
    40be:	aa 85       	ldd	r26, Y+10	; 0x0a
    40c0:	bb 85       	ldd	r27, Y+11	; 0x0b
    40c2:	2a e0       	ldi	r18, 0x0A	; 10
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	40 e0       	ldi	r20, 0x00	; 0
    40c8:	50 e0       	ldi	r21, 0x00	; 0
    40ca:	bc 01       	movw	r22, r24
    40cc:	cd 01       	movw	r24, r26
    40ce:	0e 94 b0 29 	call	0x5360	; 0x5360 <__udivmodsi4>
    40d2:	dc 01       	movw	r26, r24
    40d4:	cb 01       	movw	r24, r22
    40d6:	8b 83       	std	Y+3, r24	; 0x03
		num = num / 10;
    40d8:	88 85       	ldd	r24, Y+8	; 0x08
    40da:	99 85       	ldd	r25, Y+9	; 0x09
    40dc:	aa 85       	ldd	r26, Y+10	; 0x0a
    40de:	bb 85       	ldd	r27, Y+11	; 0x0b
    40e0:	2a e0       	ldi	r18, 0x0A	; 10
    40e2:	30 e0       	ldi	r19, 0x00	; 0
    40e4:	40 e0       	ldi	r20, 0x00	; 0
    40e6:	50 e0       	ldi	r21, 0x00	; 0
    40e8:	bc 01       	movw	r22, r24
    40ea:	cd 01       	movw	r24, r26
    40ec:	0e 94 b0 29 	call	0x5360	; 0x5360 <__udivmodsi4>
    40f0:	da 01       	movw	r26, r20
    40f2:	c9 01       	movw	r24, r18
    40f4:	88 87       	std	Y+8, r24	; 0x08
    40f6:	99 87       	std	Y+9, r25	; 0x09
    40f8:	aa 87       	std	Y+10, r26	; 0x0a
    40fa:	bb 87       	std	Y+11, r27	; 0x0b
		bin = bin + temp * weight;
    40fc:	8b 81       	ldd	r24, Y+3	; 0x03
    40fe:	28 2f       	mov	r18, r24
    4100:	30 e0       	ldi	r19, 0x00	; 0
    4102:	8a 81       	ldd	r24, Y+2	; 0x02
    4104:	88 2f       	mov	r24, r24
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	ac 01       	movw	r20, r24
    410a:	24 9f       	mul	r18, r20
    410c:	c0 01       	movw	r24, r0
    410e:	25 9f       	mul	r18, r21
    4110:	90 0d       	add	r25, r0
    4112:	34 9f       	mul	r19, r20
    4114:	90 0d       	add	r25, r0
    4116:	11 24       	eor	r1, r1
    4118:	9c 01       	movw	r18, r24
    411a:	44 27       	eor	r20, r20
    411c:	37 fd       	sbrc	r19, 7
    411e:	40 95       	com	r20
    4120:	54 2f       	mov	r21, r20
    4122:	8c 81       	ldd	r24, Y+4	; 0x04
    4124:	9d 81       	ldd	r25, Y+5	; 0x05
    4126:	ae 81       	ldd	r26, Y+6	; 0x06
    4128:	bf 81       	ldd	r27, Y+7	; 0x07
    412a:	82 0f       	add	r24, r18
    412c:	93 1f       	adc	r25, r19
    412e:	a4 1f       	adc	r26, r20
    4130:	b5 1f       	adc	r27, r21
    4132:	8c 83       	std	Y+4, r24	; 0x04
    4134:	9d 83       	std	Y+5, r25	; 0x05
    4136:	ae 83       	std	Y+6, r26	; 0x06
    4138:	bf 83       	std	Y+7, r27	; 0x07
		weight *= 2;
    413a:	8a 81       	ldd	r24, Y+2	; 0x02
    413c:	88 2f       	mov	r24, r24
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	88 0f       	add	r24, r24
    4142:	99 1f       	adc	r25, r25
    4144:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t i = 0; i < 8; i++)
	{
		num = num * 10 + str[i] - '0';
	}

	while (num > 0)
    4146:	88 85       	ldd	r24, Y+8	; 0x08
    4148:	99 85       	ldd	r25, Y+9	; 0x09
    414a:	aa 85       	ldd	r26, Y+10	; 0x0a
    414c:	bb 85       	ldd	r27, Y+11	; 0x0b
    414e:	00 97       	sbiw	r24, 0x00	; 0
    4150:	a1 05       	cpc	r26, r1
    4152:	b1 05       	cpc	r27, r1
    4154:	09 f0       	breq	.+2      	; 0x4158 <change_stringToBin+0x12a>
    4156:	b1 cf       	rjmp	.-158    	; 0x40ba <change_stringToBin+0x8c>
		temp = num % 10;
		num = num / 10;
		bin = bin + temp * weight;
		weight *= 2;
	}
	return bin;
    4158:	8c 81       	ldd	r24, Y+4	; 0x04
}
    415a:	2d 96       	adiw	r28, 0x0d	; 13
    415c:	0f b6       	in	r0, 0x3f	; 63
    415e:	f8 94       	cli
    4160:	de bf       	out	0x3e, r29	; 62
    4162:	0f be       	out	0x3f, r0	; 63
    4164:	cd bf       	out	0x3d, r28	; 61
    4166:	cf 91       	pop	r28
    4168:	df 91       	pop	r29
    416a:	08 95       	ret

0000416c <EX_Callback>:
/**
 * @brief Call Back Function 
 * 
 */
void EX_Callback(void)
{	BUTTONFLag=VALID;
    416c:	df 93       	push	r29
    416e:	cf 93       	push	r28
    4170:	cd b7       	in	r28, 0x3d	; 61
    4172:	de b7       	in	r29, 0x3e	; 62
    4174:	81 e0       	ldi	r24, 0x01	; 1
    4176:	80 93 5a 03 	sts	0x035A, r24


//SPI_VidSendByte('f');
//uint8_t B1 = SPI_U8RecieveByte();
//UART_ENSendData(B1);
SPI_VidSendByte('f');
    417a:	86 e6       	ldi	r24, 0x66	; 102
    417c:	0e 94 4b 0a 	call	0x1496	; 0x1496 <SPI_VidSendByte>
card_gflag = SPI_U8RecieveByte();
    4180:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SPI_U8RecieveByte>
    4184:	80 93 5b 03 	sts	0x035B, r24
UART_ENSendData(card_gflag);
    4188:	80 91 5b 03 	lds	r24, 0x035B
    418c:	0e 94 b5 08 	call	0x116a	; 0x116a <UART_ENSendData>

if (gflag == 0 || card_gflag == '0')
    4190:	80 91 5c 03 	lds	r24, 0x035C
    4194:	88 23       	and	r24, r24
    4196:	21 f0       	breq	.+8      	; 0x41a0 <EX_Callback+0x34>
    4198:	80 91 5b 03 	lds	r24, 0x035B
    419c:	80 33       	cpi	r24, 0x30	; 48
    419e:	39 f4       	brne	.+14     	; 0x41ae <EX_Callback+0x42>
{
	SER_UARTvoidSendString((uint8_t *)"Invalid");
    41a0:	80 e6       	ldi	r24, 0x60	; 96
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
	CallBackFLag = INVALID;
    41a8:	10 92 59 03 	sts	0x0359, r1
    41ac:	07 c0       	rjmp	.+14     	; 0x41bc <EX_Callback+0x50>

}
else
{
	SER_UARTvoidSendString((uint8_t *)"card and atm is valid");
    41ae:	88 e6       	ldi	r24, 0x68	; 104
    41b0:	90 e0       	ldi	r25, 0x00	; 0
    41b2:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
	CallBackFLag = VALID;
    41b6:	81 e0       	ldi	r24, 0x01	; 1
    41b8:	80 93 59 03 	sts	0x0359, r24
}
}
    41bc:	cf 91       	pop	r28
    41be:	df 91       	pop	r29
    41c0:	08 95       	ret

000041c2 <APP_Init>:
/**
 * @brief Initialize all Peripheral
 * 
 */
void APP_Init(void)
{
    41c2:	df 93       	push	r29
    41c4:	cf 93       	push	r28
    41c6:	cd b7       	in	r28, 0x3d	; 61
    41c8:	de b7       	in	r29, 0x3e	; 62
	UART_ENInit();
    41ca:	0e 94 47 08 	call	0x108e	; 0x108e <UART_ENInit>
	I2C_MasterInit();
    41ce:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <I2C_MasterInit>
	KEYPAD_voidInit();
    41d2:	0e 94 07 1f 	call	0x3e0e	; 0x3e0e <KEYPAD_voidInit>
	lcd_init();
    41d6:	0e 94 01 14 	call	0x2802	; 0x2802 <lcd_init>
	SPI_VidInitMaster();
    41da:	0e 94 fd 09 	call	0x13fa	; 0x13fa <SPI_VidInitMaster>
	MOTOR_voidInit();
    41de:	0e 94 06 13 	call	0x260c	; 0x260c <MOTOR_voidInit>
	ADC_VoidInit();
    41e2:	0e 94 81 12 	call	0x2502	; 0x2502 <ADC_VoidInit>
	LM35_VoidInit();
    41e6:	0e 94 ac 13 	call	0x2758	; 0x2758 <LM35_VoidInit>

	/* Set Direction for EXTI */
	DIO_voidSetPinDirection(PORT_D, PIN2, INPUT);
    41ea:	83 e0       	ldi	r24, 0x03	; 3
    41ec:	62 e0       	ldi	r22, 0x02	; 2
    41ee:	40 e0       	ldi	r20, 0x00	; 0
    41f0:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <DIO_voidSetPinDirection>
	DIO_voidInpullUp(PORT_D, PIN2);
    41f4:	83 e0       	ldi	r24, 0x03	; 3
    41f6:	62 e0       	ldi	r22, 0x02	; 2
    41f8:	0e 94 ae 11 	call	0x235c	; 0x235c <DIO_voidInpullUp>
	EXTI_ENEnable(EXTI_INT0);
    41fc:	80 e0       	ldi	r24, 0x00	; 0
    41fe:	0e 94 d8 0b 	call	0x17b0	; 0x17b0 <EXTI_ENEnable>
	EXTI_ENTriggerEdge(EXTI_INT0, FALLING_EDGE);
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	62 e0       	ldi	r22, 0x02	; 2
    4206:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <EXTI_ENTriggerEdge>
	EXTI_SetCallBack(EXTI_INT0, EX_Callback);
    420a:	26 eb       	ldi	r18, 0xB6	; 182
    420c:	30 e2       	ldi	r19, 0x20	; 32
    420e:	80 e0       	ldi	r24, 0x00	; 0
    4210:	b9 01       	movw	r22, r18
    4212:	0e 94 3b 0d 	call	0x1a76	; 0x1a76 <EXTI_SetCallBack>
}
    4216:	cf 91       	pop	r28
    4218:	df 91       	pop	r29
    421a:	08 95       	ret

0000421c <ADC_ATM>:
 * @brief Home Screen for ATM ask for ATM OR Temperature
 * 
 * @return uint8_t keypad Pressed Value
 */
uint8_t ADC_ATM(void)
{
    421c:	df 93       	push	r29
    421e:	cf 93       	push	r28
    4220:	0f 92       	push	r0
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
	uint8_t value = 0;
    4226:	19 82       	std	Y+1, r1	; 0x01
	/* CLR LCD */
	lcd_clear();
    4228:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <lcd_clear>

	lcd_sendString((uint8_t *)"1-Temp");
    422c:	8e e7       	ldi	r24, 0x7E	; 126
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	0e 94 75 1d 	call	0x3aea	; 0x3aea <lcd_sendString>
	lcd_SetPosition(1, 0);
    4234:	81 e0       	ldi	r24, 0x01	; 1
    4236:	60 e0       	ldi	r22, 0x00	; 0
    4238:	0e 94 65 1e 	call	0x3cca	; 0x3cca <lcd_SetPosition>
	lcd_sendString((uint8_t *)"2-ATM");
    423c:	85 e8       	ldi	r24, 0x85	; 133
    423e:	90 e0       	ldi	r25, 0x00	; 0
    4240:	0e 94 75 1d 	call	0x3aea	; 0x3aea <lcd_sendString>

	value = KEYPAD_u8Read();
    4244:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <KEYPAD_u8Read>
    4248:	89 83       	std	Y+1, r24	; 0x01
    424a:	03 c0       	rjmp	.+6      	; 0x4252 <ADC_ATM+0x36>
	while (value == DEFAULT_KEY)
	{

		value = KEYPAD_u8Read();
    424c:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <KEYPAD_u8Read>
    4250:	89 83       	std	Y+1, r24	; 0x01
	lcd_sendString((uint8_t *)"1-Temp");
	lcd_SetPosition(1, 0);
	lcd_sendString((uint8_t *)"2-ATM");

	value = KEYPAD_u8Read();
	while (value == DEFAULT_KEY)
    4252:	89 81       	ldd	r24, Y+1	; 0x01
    4254:	8e 32       	cpi	r24, 0x2E	; 46
    4256:	d1 f3       	breq	.-12     	; 0x424c <ADC_ATM+0x30>
	{

		value = KEYPAD_u8Read();
	}
	return value;
    4258:	89 81       	ldd	r24, Y+1	; 0x01
}
    425a:	0f 90       	pop	r0
    425c:	cf 91       	pop	r28
    425e:	df 91       	pop	r29
    4260:	08 95       	ret

00004262 <ADMIN_Mode>:
/**
 * @brief This function for Admin Mode to store data on eeprom and enter new number, balance and MaxAmount 
 * 
 */
void ADMIN_Mode(void)
{
    4262:	df 93       	push	r29
    4264:	cf 93       	push	r28
    4266:	cd b7       	in	r28, 0x3d	; 61
    4268:	de b7       	in	r29, 0x3e	; 62
    426a:	e9 97       	sbiw	r28, 0x39	; 57
    426c:	0f b6       	in	r0, 0x3f	; 63
    426e:	f8 94       	cli
    4270:	de bf       	out	0x3e, r29	; 62
    4272:	0f be       	out	0x3f, r0	; 63
    4274:	cd bf       	out	0x3d, r28	; 61
	uint8_t *Admin = (uint8_t *)"ADMIN";
    4276:	8b e8       	ldi	r24, 0x8B	; 139
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	9a 83       	std	Y+2, r25	; 0x02
    427c:	89 83       	std	Y+1, r24	; 0x01
	/* used for take password, card number and balance */
	uint8_t Data[55] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
    427e:	87 e3       	ldi	r24, 0x37	; 55
    4280:	fe 01       	movw	r30, r28
    4282:	33 96       	adiw	r30, 0x03	; 3
    4284:	df 01       	movw	r26, r30
    4286:	98 2f       	mov	r25, r24
    4288:	1d 92       	st	X+, r1
    428a:	9a 95       	dec	r25
    428c:	e9 f7       	brne	.-6      	; 0x4288 <ADMIN_Mode+0x26>
    428e:	81 e0       	ldi	r24, 0x01	; 1
    4290:	8b 83       	std	Y+3, r24	; 0x03
    4292:	81 e0       	ldi	r24, 0x01	; 1
    4294:	8c 83       	std	Y+4, r24	; 0x04
    4296:	81 e0       	ldi	r24, 0x01	; 1
    4298:	8d 83       	std	Y+5, r24	; 0x05
    429a:	81 e0       	ldi	r24, 0x01	; 1
    429c:	8e 83       	std	Y+6, r24	; 0x06
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	8f 83       	std	Y+7, r24	; 0x07
    42a2:	81 e0       	ldi	r24, 0x01	; 1
    42a4:	88 87       	std	Y+8, r24	; 0x08
    42a6:	81 e0       	ldi	r24, 0x01	; 1
    42a8:	89 87       	std	Y+9, r24	; 0x09
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	8a 87       	std	Y+10, r24	; 0x0a
    42ae:	81 e0       	ldi	r24, 0x01	; 1
    42b0:	8b 87       	std	Y+11, r24	; 0x0b

	gflag = 0;
    42b2:	10 92 5c 03 	sts	0x035C, r1
	SER_UARTvoidSendString((uint8_t *)"Enter Password of Admin Mode: ");
    42b6:	81 e9       	ldi	r24, 0x91	; 145
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
	SER_UARTvoidReceiveString(Data);
    42be:	ce 01       	movw	r24, r28
    42c0:	03 96       	adiw	r24, 0x03	; 3
    42c2:	0e 94 44 07 	call	0xe88	; 0xe88 <SER_UARTvoidReceiveString>
	if (String_u8Comp(Data, Admin) == STRING_EQUL)
    42c6:	ce 01       	movw	r24, r28
    42c8:	03 96       	adiw	r24, 0x03	; 3
    42ca:	29 81       	ldd	r18, Y+1	; 0x01
    42cc:	3a 81       	ldd	r19, Y+2	; 0x02
    42ce:	b9 01       	movw	r22, r18
    42d0:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <String_u8Comp>
    42d4:	88 23       	and	r24, r24
    42d6:	61 f5       	brne	.+88     	; 0x4330 <ADMIN_Mode+0xce>
	{
		SER_UARTvoidSendString((uint8_t *)"Correct Password");
    42d8:	80 eb       	ldi	r24, 0xB0	; 176
    42da:	90 e0       	ldi	r25, 0x00	; 0
    42dc:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
		SER_UARTvoidSendString((uint8_t *)"Card Number : ");
    42e0:	81 ec       	ldi	r24, 0xC1	; 193
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
		SER_UARTvoidReceiveString(Data);
    42e8:	ce 01       	movw	r24, r28
    42ea:	03 96       	adiw	r24, 0x03	; 3
    42ec:	0e 94 44 07 	call	0xe88	; 0xe88 <SER_UARTvoidReceiveString>
		/* Send Card Number To EEPROM */
		eeprom_send_string(Data, 0x01);
    42f0:	ce 01       	movw	r24, r28
    42f2:	03 96       	adiw	r24, 0x03	; 3
    42f4:	61 e0       	ldi	r22, 0x01	; 1
    42f6:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <eeprom_send_string>

		/* Send Balance to EEPROM */
		SER_UARTvoidSendString((uint8_t *)"Enter Balance: ");
    42fa:	80 ed       	ldi	r24, 0xD0	; 208
    42fc:	90 e0       	ldi	r25, 0x00	; 0
    42fe:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
		SER_UARTvoidReceiveString(Data);
    4302:	ce 01       	movw	r24, r28
    4304:	03 96       	adiw	r24, 0x03	; 3
    4306:	0e 94 44 07 	call	0xe88	; 0xe88 <SER_UARTvoidReceiveString>
		eeprom_send_string(Data, 0xB1);
    430a:	ce 01       	movw	r24, r28
    430c:	03 96       	adiw	r24, 0x03	; 3
    430e:	61 eb       	ldi	r22, 0xB1	; 177
    4310:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <eeprom_send_string>

		/* Send Max Amount to EEPROM */
		SER_UARTvoidSendString((uint8_t *)"Enter Max Amount: ");
    4314:	80 ee       	ldi	r24, 0xE0	; 224
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
		SER_UARTvoidReceiveString(Max_Amount);
    431c:	84 e1       	ldi	r24, 0x14	; 20
    431e:	93 e0       	ldi	r25, 0x03	; 3
    4320:	0e 94 44 07 	call	0xe88	; 0xe88 <SER_UARTvoidReceiveString>
		eeprom_send_string(Max_Amount, 0xF3);
    4324:	84 e1       	ldi	r24, 0x14	; 20
    4326:	93 e0       	ldi	r25, 0x03	; 3
    4328:	63 ef       	ldi	r22, 0xF3	; 243
    432a:	0e 94 96 1f 	call	0x3f2c	; 0x3f2c <eeprom_send_string>
    432e:	06 c0       	rjmp	.+12     	; 0x433c <ADMIN_Mode+0xda>
	}
	else
	{
		SER_UARTvoidSendString((uint8_t *)"Wrong Password ");
    4330:	83 ef       	ldi	r24, 0xF3	; 243
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
		ADC_ATM();
    4338:	0e 94 0e 21 	call	0x421c	; 0x421c <ADC_ATM>
	}
}
    433c:	e9 96       	adiw	r28, 0x39	; 57
    433e:	0f b6       	in	r0, 0x3f	; 63
    4340:	f8 94       	cli
    4342:	de bf       	out	0x3e, r29	; 62
    4344:	0f be       	out	0x3f, r0	; 63
    4346:	cd bf       	out	0x3d, r28	; 61
    4348:	cf 91       	pop	r28
    434a:	df 91       	pop	r29
    434c:	08 95       	ret

0000434e <USER_Mode>:
/**
 * @brief This Function For user Mode to check user password and deposit and turn on motor if Approved
 * 
 */
void USER_Mode(void)
{
    434e:	df 93       	push	r29
    4350:	cf 93       	push	r28
    4352:	cd b7       	in	r28, 0x3d	; 61
    4354:	de b7       	in	r29, 0x3e	; 62
    4356:	ca 54       	subi	r28, 0x4A	; 74
    4358:	d1 40       	sbci	r29, 0x01	; 1
    435a:	0f b6       	in	r0, 0x3f	; 63
    435c:	f8 94       	cli
    435e:	de bf       	out	0x3e, r29	; 62
    4360:	0f be       	out	0x3f, r0	; 63
    4362:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0;
    4364:	fe 01       	movw	r30, r28
    4366:	ea 5b       	subi	r30, 0xBA	; 186
    4368:	ff 4f       	sbci	r31, 0xFF	; 255
    436a:	10 82       	st	Z, r1
	uint8_t value = 0;
    436c:	fe 01       	movw	r30, r28
    436e:	eb 5b       	subi	r30, 0xBB	; 187
    4370:	ff 4f       	sbci	r31, 0xFF	; 255
    4372:	10 82       	st	Z, r1
	uint8_t Dep_money[5] = {1, 1, 1, 1};
    4374:	ce 01       	movw	r24, r28
    4376:	89 5b       	subi	r24, 0xB9	; 185
    4378:	9f 4f       	sbci	r25, 0xFF	; 255
    437a:	25 e0       	ldi	r18, 0x05	; 5
    437c:	fc 01       	movw	r30, r24
    437e:	df 01       	movw	r26, r30
    4380:	82 2f       	mov	r24, r18
    4382:	1d 92       	st	X+, r1
    4384:	8a 95       	dec	r24
    4386:	e9 f7       	brne	.-6      	; 0x4382 <USER_Mode+0x34>
    4388:	fe 01       	movw	r30, r28
    438a:	e9 5b       	subi	r30, 0xB9	; 185
    438c:	ff 4f       	sbci	r31, 0xFF	; 255
    438e:	81 e0       	ldi	r24, 0x01	; 1
    4390:	80 83       	st	Z, r24
    4392:	fe 01       	movw	r30, r28
    4394:	e9 5b       	subi	r30, 0xB9	; 185
    4396:	ff 4f       	sbci	r31, 0xFF	; 255
    4398:	81 e0       	ldi	r24, 0x01	; 1
    439a:	81 83       	std	Z+1, r24	; 0x01
    439c:	fe 01       	movw	r30, r28
    439e:	e9 5b       	subi	r30, 0xB9	; 185
    43a0:	ff 4f       	sbci	r31, 0xFF	; 255
    43a2:	81 e0       	ldi	r24, 0x01	; 1
    43a4:	82 83       	std	Z+2, r24	; 0x02
    43a6:	fe 01       	movw	r30, r28
    43a8:	e9 5b       	subi	r30, 0xB9	; 185
    43aa:	ff 4f       	sbci	r31, 0xFF	; 255
    43ac:	81 e0       	ldi	r24, 0x01	; 1
    43ae:	83 83       	std	Z+3, r24	; 0x03
	uint8_t Temp[255] = {1, 1, 1, 1, 1};
    43b0:	ce 01       	movw	r24, r28
    43b2:	84 5b       	subi	r24, 0xB4	; 180
    43b4:	9f 4f       	sbci	r25, 0xFF	; 255
    43b6:	2f ef       	ldi	r18, 0xFF	; 255
    43b8:	fc 01       	movw	r30, r24
    43ba:	df 01       	movw	r26, r30
    43bc:	82 2f       	mov	r24, r18
    43be:	1d 92       	st	X+, r1
    43c0:	8a 95       	dec	r24
    43c2:	e9 f7       	brne	.-6      	; 0x43be <USER_Mode+0x70>
    43c4:	fe 01       	movw	r30, r28
    43c6:	e4 5b       	subi	r30, 0xB4	; 180
    43c8:	ff 4f       	sbci	r31, 0xFF	; 255
    43ca:	81 e0       	ldi	r24, 0x01	; 1
    43cc:	80 83       	st	Z, r24
    43ce:	fe 01       	movw	r30, r28
    43d0:	e4 5b       	subi	r30, 0xB4	; 180
    43d2:	ff 4f       	sbci	r31, 0xFF	; 255
    43d4:	81 e0       	ldi	r24, 0x01	; 1
    43d6:	81 83       	std	Z+1, r24	; 0x01
    43d8:	fe 01       	movw	r30, r28
    43da:	e4 5b       	subi	r30, 0xB4	; 180
    43dc:	ff 4f       	sbci	r31, 0xFF	; 255
    43de:	81 e0       	ldi	r24, 0x01	; 1
    43e0:	82 83       	std	Z+2, r24	; 0x02
    43e2:	fe 01       	movw	r30, r28
    43e4:	e4 5b       	subi	r30, 0xB4	; 180
    43e6:	ff 4f       	sbci	r31, 0xFF	; 255
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	83 83       	std	Z+3, r24	; 0x03
    43ec:	fe 01       	movw	r30, r28
    43ee:	e4 5b       	subi	r30, 0xB4	; 180
    43f0:	ff 4f       	sbci	r31, 0xFF	; 255
    43f2:	81 e0       	ldi	r24, 0x01	; 1
    43f4:	84 83       	std	Z+4, r24	; 0x04
	//		break;
	//	default:
	//		break;
	//	}

	Get_Pass(Card_Pass);
    43f6:	87 e4       	ldi	r24, 0x47	; 71
    43f8:	93 e0       	ldi	r25, 0x03	; 3
    43fa:	0e 94 e3 27 	call	0x4fc6	; 0x4fc6 <Get_Pass>
	if (Pass_check(Card_Pass))
    43fe:	87 e4       	ldi	r24, 0x47	; 71
    4400:	93 e0       	ldi	r25, 0x03	; 3
    4402:	0e 94 da 24 	call	0x49b4	; 0x49b4 <Pass_check>
    4406:	88 23       	and	r24, r24
    4408:	09 f4       	brne	.+2      	; 0x440c <USER_Mode+0xbe>
    440a:	25 c2       	rjmp	.+1098   	; 0x4856 <USER_Mode+0x508>
	{

		lcd_clear();
    440c:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <lcd_clear>
		lcd_sendString((uint8_t *)"enter withdraw amount");
    4410:	83 e0       	ldi	r24, 0x03	; 3
    4412:	91 e0       	ldi	r25, 0x01	; 1
    4414:	0e 94 75 1d 	call	0x3aea	; 0x3aea <lcd_sendString>
		/*receive the balance of user from eeprom*/
		eeprom_recieve_string(Temp, 0xB1);
    4418:	ce 01       	movw	r24, r28
    441a:	84 5b       	subi	r24, 0xB4	; 180
    441c:	9f 4f       	sbci	r25, 0xFF	; 255
    441e:	61 eb       	ldi	r22, 0xB1	; 177
    4420:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <eeprom_recieve_string>
    4424:	36 c0       	rjmp	.+108    	; 0x4492 <USER_Mode+0x144>

		while (i != 4)
		{
			value = KEYPAD_u8Read();
    4426:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <KEYPAD_u8Read>
    442a:	fe 01       	movw	r30, r28
    442c:	eb 5b       	subi	r30, 0xBB	; 187
    442e:	ff 4f       	sbci	r31, 0xFF	; 255
    4430:	80 83       	st	Z, r24
			if (value != DEFAULT_KEY)
    4432:	fe 01       	movw	r30, r28
    4434:	eb 5b       	subi	r30, 0xBB	; 187
    4436:	ff 4f       	sbci	r31, 0xFF	; 255
    4438:	80 81       	ld	r24, Z
    443a:	8e 32       	cpi	r24, 0x2E	; 46
    443c:	51 f1       	breq	.+84     	; 0x4492 <USER_Mode+0x144>
			{

				Dep_money[i] = value;
    443e:	fe 01       	movw	r30, r28
    4440:	ea 5b       	subi	r30, 0xBA	; 186
    4442:	ff 4f       	sbci	r31, 0xFF	; 255
    4444:	80 81       	ld	r24, Z
    4446:	28 2f       	mov	r18, r24
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	ce 01       	movw	r24, r28
    444c:	89 5b       	subi	r24, 0xB9	; 185
    444e:	9f 4f       	sbci	r25, 0xFF	; 255
    4450:	dc 01       	movw	r26, r24
    4452:	a2 0f       	add	r26, r18
    4454:	b3 1f       	adc	r27, r19
    4456:	fe 01       	movw	r30, r28
    4458:	eb 5b       	subi	r30, 0xBB	; 187
    445a:	ff 4f       	sbci	r31, 0xFF	; 255
    445c:	80 81       	ld	r24, Z
    445e:	8c 93       	st	X, r24
				lcd_SetPosition(1, 1 + i);
    4460:	fe 01       	movw	r30, r28
    4462:	ea 5b       	subi	r30, 0xBA	; 186
    4464:	ff 4f       	sbci	r31, 0xFF	; 255
    4466:	80 81       	ld	r24, Z
    4468:	98 2f       	mov	r25, r24
    446a:	9f 5f       	subi	r25, 0xFF	; 255
    446c:	81 e0       	ldi	r24, 0x01	; 1
    446e:	69 2f       	mov	r22, r25
    4470:	0e 94 65 1e 	call	0x3cca	; 0x3cca <lcd_SetPosition>
				lcd_sendChar(value);
    4474:	fe 01       	movw	r30, r28
    4476:	eb 5b       	subi	r30, 0xBB	; 187
    4478:	ff 4f       	sbci	r31, 0xFF	; 255
    447a:	80 81       	ld	r24, Z
    447c:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <lcd_sendChar>
				i++;
    4480:	de 01       	movw	r26, r28
    4482:	aa 5b       	subi	r26, 0xBA	; 186
    4484:	bf 4f       	sbci	r27, 0xFF	; 255
    4486:	fe 01       	movw	r30, r28
    4488:	ea 5b       	subi	r30, 0xBA	; 186
    448a:	ff 4f       	sbci	r31, 0xFF	; 255
    448c:	80 81       	ld	r24, Z
    448e:	8f 5f       	subi	r24, 0xFF	; 255
    4490:	8c 93       	st	X, r24
		lcd_clear();
		lcd_sendString((uint8_t *)"enter withdraw amount");
		/*receive the balance of user from eeprom*/
		eeprom_recieve_string(Temp, 0xB1);

		while (i != 4)
    4492:	fe 01       	movw	r30, r28
    4494:	ea 5b       	subi	r30, 0xBA	; 186
    4496:	ff 4f       	sbci	r31, 0xFF	; 255
    4498:	80 81       	ld	r24, Z
    449a:	84 30       	cpi	r24, 0x04	; 4
    449c:	21 f6       	brne	.-120    	; 0x4426 <USER_Mode+0xd8>
				lcd_SetPosition(1, 1 + i);
				lcd_sendChar(value);
				i++;
			}
		}
		Dep_money[i] = '\0';
    449e:	fe 01       	movw	r30, r28
    44a0:	ea 5b       	subi	r30, 0xBA	; 186
    44a2:	ff 4f       	sbci	r31, 0xFF	; 255
    44a4:	80 81       	ld	r24, Z
    44a6:	28 2f       	mov	r18, r24
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	ce 01       	movw	r24, r28
    44ac:	89 5b       	subi	r24, 0xB9	; 185
    44ae:	9f 4f       	sbci	r25, 0xFF	; 255
    44b0:	fc 01       	movw	r30, r24
    44b2:	e2 0f       	add	r30, r18
    44b4:	f3 1f       	adc	r31, r19
    44b6:	10 82       	st	Z, r1

		eeprom_recieve_string(Max_Amount, 0xF3);
    44b8:	84 e1       	ldi	r24, 0x14	; 20
    44ba:	93 e0       	ldi	r25, 0x03	; 3
    44bc:	63 ef       	ldi	r22, 0xF3	; 243
    44be:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <eeprom_recieve_string>

		uint32_t max_dec = String_u8ToNumb(Max_Amount);
    44c2:	84 e1       	ldi	r24, 0x14	; 20
    44c4:	93 e0       	ldi	r25, 0x03	; 3
    44c6:	0e 94 38 28 	call	0x5070	; 0x5070 <String_u8ToNumb>
    44ca:	dc 01       	movw	r26, r24
    44cc:	cb 01       	movw	r24, r22
    44ce:	fe 01       	movw	r30, r28
    44d0:	ef 5b       	subi	r30, 0xBF	; 191
    44d2:	ff 4f       	sbci	r31, 0xFF	; 255
    44d4:	80 83       	st	Z, r24
    44d6:	91 83       	std	Z+1, r25	; 0x01
    44d8:	a2 83       	std	Z+2, r26	; 0x02
    44da:	b3 83       	std	Z+3, r27	; 0x03
		uint32_t dep_dec = String_u8ToNumb(Dep_money);
    44dc:	ce 01       	movw	r24, r28
    44de:	89 5b       	subi	r24, 0xB9	; 185
    44e0:	9f 4f       	sbci	r25, 0xFF	; 255
    44e2:	0e 94 38 28 	call	0x5070	; 0x5070 <String_u8ToNumb>
    44e6:	dc 01       	movw	r26, r24
    44e8:	cb 01       	movw	r24, r22
    44ea:	fe 01       	movw	r30, r28
    44ec:	fd 96       	adiw	r30, 0x3d	; 61
    44ee:	80 83       	st	Z, r24
    44f0:	91 83       	std	Z+1, r25	; 0x01
    44f2:	a2 83       	std	Z+2, r26	; 0x02
    44f4:	b3 83       	std	Z+3, r27	; 0x03
		uint32_t bal_dec = String_u8ToNumb(Temp);
    44f6:	ce 01       	movw	r24, r28
    44f8:	84 5b       	subi	r24, 0xB4	; 180
    44fa:	9f 4f       	sbci	r25, 0xFF	; 255
    44fc:	0e 94 38 28 	call	0x5070	; 0x5070 <String_u8ToNumb>
    4500:	dc 01       	movw	r26, r24
    4502:	cb 01       	movw	r24, r22
    4504:	89 af       	std	Y+57, r24	; 0x39
    4506:	9a af       	std	Y+58, r25	; 0x3a
    4508:	ab af       	std	Y+59, r26	; 0x3b
    450a:	bc af       	std	Y+60, r27	; 0x3c

		if (Compare_Money(max_dec, dep_dec) == INVALID)
    450c:	fe 01       	movw	r30, r28
    450e:	ef 5b       	subi	r30, 0xBF	; 191
    4510:	ff 4f       	sbci	r31, 0xFF	; 255
    4512:	80 81       	ld	r24, Z
    4514:	91 81       	ldd	r25, Z+1	; 0x01
    4516:	a2 81       	ldd	r26, Z+2	; 0x02
    4518:	b3 81       	ldd	r27, Z+3	; 0x03
    451a:	fe 01       	movw	r30, r28
    451c:	fd 96       	adiw	r30, 0x3d	; 61
    451e:	20 81       	ld	r18, Z
    4520:	31 81       	ldd	r19, Z+1	; 0x01
    4522:	42 81       	ldd	r20, Z+2	; 0x02
    4524:	53 81       	ldd	r21, Z+3	; 0x03
    4526:	bc 01       	movw	r22, r24
    4528:	cd 01       	movw	r24, r26
    452a:	0e 94 ad 24 	call	0x495a	; 0x495a <Compare_Money>
    452e:	88 23       	and	r24, r24
    4530:	09 f0       	breq	.+2      	; 0x4534 <USER_Mode+0x1e6>
    4532:	81 c0       	rjmp	.+258    	; 0x4636 <USER_Mode+0x2e8>
		{
			lcd_clear();
    4534:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <lcd_clear>
			lcd_sendString((uint8_t *)"invalid: ");
    4538:	89 e1       	ldi	r24, 0x19	; 25
    453a:	91 e0       	ldi	r25, 0x01	; 1
    453c:	0e 94 75 1d 	call	0x3aea	; 0x3aea <lcd_sendString>
			lcd_SetPosition(1, 0);
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	60 e0       	ldi	r22, 0x00	; 0
    4544:	0e 94 65 1e 	call	0x3cca	; 0x3cca <lcd_SetPosition>
			lcd_sendString((uint8_t *)"exceed maxamount");
    4548:	83 e2       	ldi	r24, 0x23	; 35
    454a:	91 e0       	ldi	r25, 0x01	; 1
    454c:	0e 94 75 1d 	call	0x3aea	; 0x3aea <lcd_sendString>
    4550:	80 e0       	ldi	r24, 0x00	; 0
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	aa e7       	ldi	r26, 0x7A	; 122
    4556:	b4 e4       	ldi	r27, 0x44	; 68
    4558:	8d ab       	std	Y+53, r24	; 0x35
    455a:	9e ab       	std	Y+54, r25	; 0x36
    455c:	af ab       	std	Y+55, r26	; 0x37
    455e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4560:	6d a9       	ldd	r22, Y+53	; 0x35
    4562:	7e a9       	ldd	r23, Y+54	; 0x36
    4564:	8f a9       	ldd	r24, Y+55	; 0x37
    4566:	98 ad       	ldd	r25, Y+56	; 0x38
    4568:	20 e0       	ldi	r18, 0x00	; 0
    456a:	30 e0       	ldi	r19, 0x00	; 0
    456c:	4a ef       	ldi	r20, 0xFA	; 250
    456e:	54 e4       	ldi	r21, 0x44	; 68
    4570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4574:	dc 01       	movw	r26, r24
    4576:	cb 01       	movw	r24, r22
    4578:	89 ab       	std	Y+49, r24	; 0x31
    457a:	9a ab       	std	Y+50, r25	; 0x32
    457c:	ab ab       	std	Y+51, r26	; 0x33
    457e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4580:	69 a9       	ldd	r22, Y+49	; 0x31
    4582:	7a a9       	ldd	r23, Y+50	; 0x32
    4584:	8b a9       	ldd	r24, Y+51	; 0x33
    4586:	9c a9       	ldd	r25, Y+52	; 0x34
    4588:	20 e0       	ldi	r18, 0x00	; 0
    458a:	30 e0       	ldi	r19, 0x00	; 0
    458c:	40 e8       	ldi	r20, 0x80	; 128
    458e:	5f e3       	ldi	r21, 0x3F	; 63
    4590:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4594:	88 23       	and	r24, r24
    4596:	2c f4       	brge	.+10     	; 0x45a2 <USER_Mode+0x254>
		__ticks = 1;
    4598:	81 e0       	ldi	r24, 0x01	; 1
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	98 ab       	std	Y+48, r25	; 0x30
    459e:	8f a7       	std	Y+47, r24	; 0x2f
    45a0:	3f c0       	rjmp	.+126    	; 0x4620 <USER_Mode+0x2d2>
	else if (__tmp > 65535)
    45a2:	69 a9       	ldd	r22, Y+49	; 0x31
    45a4:	7a a9       	ldd	r23, Y+50	; 0x32
    45a6:	8b a9       	ldd	r24, Y+51	; 0x33
    45a8:	9c a9       	ldd	r25, Y+52	; 0x34
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	3f ef       	ldi	r19, 0xFF	; 255
    45ae:	4f e7       	ldi	r20, 0x7F	; 127
    45b0:	57 e4       	ldi	r21, 0x47	; 71
    45b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45b6:	18 16       	cp	r1, r24
    45b8:	4c f5       	brge	.+82     	; 0x460c <USER_Mode+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45ba:	6d a9       	ldd	r22, Y+53	; 0x35
    45bc:	7e a9       	ldd	r23, Y+54	; 0x36
    45be:	8f a9       	ldd	r24, Y+55	; 0x37
    45c0:	98 ad       	ldd	r25, Y+56	; 0x38
    45c2:	20 e0       	ldi	r18, 0x00	; 0
    45c4:	30 e0       	ldi	r19, 0x00	; 0
    45c6:	40 e2       	ldi	r20, 0x20	; 32
    45c8:	51 e4       	ldi	r21, 0x41	; 65
    45ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ce:	dc 01       	movw	r26, r24
    45d0:	cb 01       	movw	r24, r22
    45d2:	bc 01       	movw	r22, r24
    45d4:	cd 01       	movw	r24, r26
    45d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45da:	dc 01       	movw	r26, r24
    45dc:	cb 01       	movw	r24, r22
    45de:	98 ab       	std	Y+48, r25	; 0x30
    45e0:	8f a7       	std	Y+47, r24	; 0x2f
    45e2:	0f c0       	rjmp	.+30     	; 0x4602 <USER_Mode+0x2b4>
    45e4:	88 ec       	ldi	r24, 0xC8	; 200
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	9e a7       	std	Y+46, r25	; 0x2e
    45ea:	8d a7       	std	Y+45, r24	; 0x2d
    45ec:	8d a5       	ldd	r24, Y+45	; 0x2d
    45ee:	9e a5       	ldd	r25, Y+46	; 0x2e
    45f0:	01 97       	sbiw	r24, 0x01	; 1
    45f2:	f1 f7       	brne	.-4      	; 0x45f0 <USER_Mode+0x2a2>
    45f4:	9e a7       	std	Y+46, r25	; 0x2e
    45f6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    45fa:	98 a9       	ldd	r25, Y+48	; 0x30
    45fc:	01 97       	sbiw	r24, 0x01	; 1
    45fe:	98 ab       	std	Y+48, r25	; 0x30
    4600:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4602:	8f a5       	ldd	r24, Y+47	; 0x2f
    4604:	98 a9       	ldd	r25, Y+48	; 0x30
    4606:	00 97       	sbiw	r24, 0x00	; 0
    4608:	69 f7       	brne	.-38     	; 0x45e4 <USER_Mode+0x296>
    460a:	25 c1       	rjmp	.+586    	; 0x4856 <USER_Mode+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    460c:	69 a9       	ldd	r22, Y+49	; 0x31
    460e:	7a a9       	ldd	r23, Y+50	; 0x32
    4610:	8b a9       	ldd	r24, Y+51	; 0x33
    4612:	9c a9       	ldd	r25, Y+52	; 0x34
    4614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4618:	dc 01       	movw	r26, r24
    461a:	cb 01       	movw	r24, r22
    461c:	98 ab       	std	Y+48, r25	; 0x30
    461e:	8f a7       	std	Y+47, r24	; 0x2f
    4620:	8f a5       	ldd	r24, Y+47	; 0x2f
    4622:	98 a9       	ldd	r25, Y+48	; 0x30
    4624:	9c a7       	std	Y+44, r25	; 0x2c
    4626:	8b a7       	std	Y+43, r24	; 0x2b
    4628:	8b a5       	ldd	r24, Y+43	; 0x2b
    462a:	9c a5       	ldd	r25, Y+44	; 0x2c
    462c:	01 97       	sbiw	r24, 0x01	; 1
    462e:	f1 f7       	brne	.-4      	; 0x462c <USER_Mode+0x2de>
    4630:	9c a7       	std	Y+44, r25	; 0x2c
    4632:	8b a7       	std	Y+43, r24	; 0x2b
    4634:	10 c1       	rjmp	.+544    	; 0x4856 <USER_Mode+0x508>
			_delay_ms(1000);
		}
		else if (Compare_Money(bal_dec, dep_dec) == INVALID)
    4636:	89 ad       	ldd	r24, Y+57	; 0x39
    4638:	9a ad       	ldd	r25, Y+58	; 0x3a
    463a:	ab ad       	ldd	r26, Y+59	; 0x3b
    463c:	bc ad       	ldd	r27, Y+60	; 0x3c
    463e:	fe 01       	movw	r30, r28
    4640:	fd 96       	adiw	r30, 0x3d	; 61
    4642:	20 81       	ld	r18, Z
    4644:	31 81       	ldd	r19, Z+1	; 0x01
    4646:	42 81       	ldd	r20, Z+2	; 0x02
    4648:	53 81       	ldd	r21, Z+3	; 0x03
    464a:	bc 01       	movw	r22, r24
    464c:	cd 01       	movw	r24, r26
    464e:	0e 94 ad 24 	call	0x495a	; 0x495a <Compare_Money>
    4652:	88 23       	and	r24, r24
    4654:	09 f0       	breq	.+2      	; 0x4658 <USER_Mode+0x30a>
    4656:	81 c0       	rjmp	.+258    	; 0x475a <USER_Mode+0x40c>
		{
			lcd_clear();
    4658:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <lcd_clear>
			lcd_sendString((uint8_t *)"invalid: ");
    465c:	89 e1       	ldi	r24, 0x19	; 25
    465e:	91 e0       	ldi	r25, 0x01	; 1
    4660:	0e 94 75 1d 	call	0x3aea	; 0x3aea <lcd_sendString>
			lcd_SetPosition(1, 0);
    4664:	81 e0       	ldi	r24, 0x01	; 1
    4666:	60 e0       	ldi	r22, 0x00	; 0
    4668:	0e 94 65 1e 	call	0x3cca	; 0x3cca <lcd_SetPosition>
			lcd_sendString((uint8_t *)"exceed balance");
    466c:	84 e3       	ldi	r24, 0x34	; 52
    466e:	91 e0       	ldi	r25, 0x01	; 1
    4670:	0e 94 75 1d 	call	0x3aea	; 0x3aea <lcd_sendString>
    4674:	80 e0       	ldi	r24, 0x00	; 0
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	aa e7       	ldi	r26, 0x7A	; 122
    467a:	b4 e4       	ldi	r27, 0x44	; 68
    467c:	8f a3       	std	Y+39, r24	; 0x27
    467e:	98 a7       	std	Y+40, r25	; 0x28
    4680:	a9 a7       	std	Y+41, r26	; 0x29
    4682:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4684:	6f a1       	ldd	r22, Y+39	; 0x27
    4686:	78 a5       	ldd	r23, Y+40	; 0x28
    4688:	89 a5       	ldd	r24, Y+41	; 0x29
    468a:	9a a5       	ldd	r25, Y+42	; 0x2a
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	4a ef       	ldi	r20, 0xFA	; 250
    4692:	54 e4       	ldi	r21, 0x44	; 68
    4694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4698:	dc 01       	movw	r26, r24
    469a:	cb 01       	movw	r24, r22
    469c:	8b a3       	std	Y+35, r24	; 0x23
    469e:	9c a3       	std	Y+36, r25	; 0x24
    46a0:	ad a3       	std	Y+37, r26	; 0x25
    46a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    46a4:	6b a1       	ldd	r22, Y+35	; 0x23
    46a6:	7c a1       	ldd	r23, Y+36	; 0x24
    46a8:	8d a1       	ldd	r24, Y+37	; 0x25
    46aa:	9e a1       	ldd	r25, Y+38	; 0x26
    46ac:	20 e0       	ldi	r18, 0x00	; 0
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	40 e8       	ldi	r20, 0x80	; 128
    46b2:	5f e3       	ldi	r21, 0x3F	; 63
    46b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46b8:	88 23       	and	r24, r24
    46ba:	2c f4       	brge	.+10     	; 0x46c6 <USER_Mode+0x378>
		__ticks = 1;
    46bc:	81 e0       	ldi	r24, 0x01	; 1
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	9a a3       	std	Y+34, r25	; 0x22
    46c2:	89 a3       	std	Y+33, r24	; 0x21
    46c4:	3f c0       	rjmp	.+126    	; 0x4744 <USER_Mode+0x3f6>
	else if (__tmp > 65535)
    46c6:	6b a1       	ldd	r22, Y+35	; 0x23
    46c8:	7c a1       	ldd	r23, Y+36	; 0x24
    46ca:	8d a1       	ldd	r24, Y+37	; 0x25
    46cc:	9e a1       	ldd	r25, Y+38	; 0x26
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	3f ef       	ldi	r19, 0xFF	; 255
    46d2:	4f e7       	ldi	r20, 0x7F	; 127
    46d4:	57 e4       	ldi	r21, 0x47	; 71
    46d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46da:	18 16       	cp	r1, r24
    46dc:	4c f5       	brge	.+82     	; 0x4730 <USER_Mode+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46de:	6f a1       	ldd	r22, Y+39	; 0x27
    46e0:	78 a5       	ldd	r23, Y+40	; 0x28
    46e2:	89 a5       	ldd	r24, Y+41	; 0x29
    46e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    46e6:	20 e0       	ldi	r18, 0x00	; 0
    46e8:	30 e0       	ldi	r19, 0x00	; 0
    46ea:	40 e2       	ldi	r20, 0x20	; 32
    46ec:	51 e4       	ldi	r21, 0x41	; 65
    46ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46f2:	dc 01       	movw	r26, r24
    46f4:	cb 01       	movw	r24, r22
    46f6:	bc 01       	movw	r22, r24
    46f8:	cd 01       	movw	r24, r26
    46fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46fe:	dc 01       	movw	r26, r24
    4700:	cb 01       	movw	r24, r22
    4702:	9a a3       	std	Y+34, r25	; 0x22
    4704:	89 a3       	std	Y+33, r24	; 0x21
    4706:	0f c0       	rjmp	.+30     	; 0x4726 <USER_Mode+0x3d8>
    4708:	88 ec       	ldi	r24, 0xC8	; 200
    470a:	90 e0       	ldi	r25, 0x00	; 0
    470c:	98 a3       	std	Y+32, r25	; 0x20
    470e:	8f 8f       	std	Y+31, r24	; 0x1f
    4710:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4712:	98 a1       	ldd	r25, Y+32	; 0x20
    4714:	01 97       	sbiw	r24, 0x01	; 1
    4716:	f1 f7       	brne	.-4      	; 0x4714 <USER_Mode+0x3c6>
    4718:	98 a3       	std	Y+32, r25	; 0x20
    471a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    471c:	89 a1       	ldd	r24, Y+33	; 0x21
    471e:	9a a1       	ldd	r25, Y+34	; 0x22
    4720:	01 97       	sbiw	r24, 0x01	; 1
    4722:	9a a3       	std	Y+34, r25	; 0x22
    4724:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4726:	89 a1       	ldd	r24, Y+33	; 0x21
    4728:	9a a1       	ldd	r25, Y+34	; 0x22
    472a:	00 97       	sbiw	r24, 0x00	; 0
    472c:	69 f7       	brne	.-38     	; 0x4708 <USER_Mode+0x3ba>
    472e:	93 c0       	rjmp	.+294    	; 0x4856 <USER_Mode+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4730:	6b a1       	ldd	r22, Y+35	; 0x23
    4732:	7c a1       	ldd	r23, Y+36	; 0x24
    4734:	8d a1       	ldd	r24, Y+37	; 0x25
    4736:	9e a1       	ldd	r25, Y+38	; 0x26
    4738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    473c:	dc 01       	movw	r26, r24
    473e:	cb 01       	movw	r24, r22
    4740:	9a a3       	std	Y+34, r25	; 0x22
    4742:	89 a3       	std	Y+33, r24	; 0x21
    4744:	89 a1       	ldd	r24, Y+33	; 0x21
    4746:	9a a1       	ldd	r25, Y+34	; 0x22
    4748:	9e 8f       	std	Y+30, r25	; 0x1e
    474a:	8d 8f       	std	Y+29, r24	; 0x1d
    474c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    474e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4750:	01 97       	sbiw	r24, 0x01	; 1
    4752:	f1 f7       	brne	.-4      	; 0x4750 <USER_Mode+0x402>
    4754:	9e 8f       	std	Y+30, r25	; 0x1e
    4756:	8d 8f       	std	Y+29, r24	; 0x1d
    4758:	7e c0       	rjmp	.+252    	; 0x4856 <USER_Mode+0x508>
			_delay_ms(1000);
		}
		else
		{
			lcd_clear();
    475a:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <lcd_clear>
			lcd_sendString((uint8_t *)"Approved");
    475e:	83 e4       	ldi	r24, 0x43	; 67
    4760:	91 e0       	ldi	r25, 0x01	; 1
    4762:	0e 94 75 1d 	call	0x3aea	; 0x3aea <lcd_sendString>
			MOTOR_voidRotateClkWise(1, 0);
    4766:	81 e0       	ldi	r24, 0x01	; 1
    4768:	60 e0       	ldi	r22, 0x00	; 0
    476a:	0e 94 12 13 	call	0x2624	; 0x2624 <MOTOR_voidRotateClkWise>
    476e:	80 e0       	ldi	r24, 0x00	; 0
    4770:	90 e0       	ldi	r25, 0x00	; 0
    4772:	aa e7       	ldi	r26, 0x7A	; 122
    4774:	b4 e4       	ldi	r27, 0x44	; 68
    4776:	89 8f       	std	Y+25, r24	; 0x19
    4778:	9a 8f       	std	Y+26, r25	; 0x1a
    477a:	ab 8f       	std	Y+27, r26	; 0x1b
    477c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    477e:	69 8d       	ldd	r22, Y+25	; 0x19
    4780:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4782:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4784:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4786:	20 e0       	ldi	r18, 0x00	; 0
    4788:	30 e0       	ldi	r19, 0x00	; 0
    478a:	4a ef       	ldi	r20, 0xFA	; 250
    478c:	54 e4       	ldi	r21, 0x44	; 68
    478e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4792:	dc 01       	movw	r26, r24
    4794:	cb 01       	movw	r24, r22
    4796:	8d 8b       	std	Y+21, r24	; 0x15
    4798:	9e 8b       	std	Y+22, r25	; 0x16
    479a:	af 8b       	std	Y+23, r26	; 0x17
    479c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    479e:	6d 89       	ldd	r22, Y+21	; 0x15
    47a0:	7e 89       	ldd	r23, Y+22	; 0x16
    47a2:	8f 89       	ldd	r24, Y+23	; 0x17
    47a4:	98 8d       	ldd	r25, Y+24	; 0x18
    47a6:	20 e0       	ldi	r18, 0x00	; 0
    47a8:	30 e0       	ldi	r19, 0x00	; 0
    47aa:	40 e8       	ldi	r20, 0x80	; 128
    47ac:	5f e3       	ldi	r21, 0x3F	; 63
    47ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47b2:	88 23       	and	r24, r24
    47b4:	2c f4       	brge	.+10     	; 0x47c0 <USER_Mode+0x472>
		__ticks = 1;
    47b6:	81 e0       	ldi	r24, 0x01	; 1
    47b8:	90 e0       	ldi	r25, 0x00	; 0
    47ba:	9c 8b       	std	Y+20, r25	; 0x14
    47bc:	8b 8b       	std	Y+19, r24	; 0x13
    47be:	3f c0       	rjmp	.+126    	; 0x483e <USER_Mode+0x4f0>
	else if (__tmp > 65535)
    47c0:	6d 89       	ldd	r22, Y+21	; 0x15
    47c2:	7e 89       	ldd	r23, Y+22	; 0x16
    47c4:	8f 89       	ldd	r24, Y+23	; 0x17
    47c6:	98 8d       	ldd	r25, Y+24	; 0x18
    47c8:	20 e0       	ldi	r18, 0x00	; 0
    47ca:	3f ef       	ldi	r19, 0xFF	; 255
    47cc:	4f e7       	ldi	r20, 0x7F	; 127
    47ce:	57 e4       	ldi	r21, 0x47	; 71
    47d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47d4:	18 16       	cp	r1, r24
    47d6:	4c f5       	brge	.+82     	; 0x482a <USER_Mode+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47d8:	69 8d       	ldd	r22, Y+25	; 0x19
    47da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47e0:	20 e0       	ldi	r18, 0x00	; 0
    47e2:	30 e0       	ldi	r19, 0x00	; 0
    47e4:	40 e2       	ldi	r20, 0x20	; 32
    47e6:	51 e4       	ldi	r21, 0x41	; 65
    47e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ec:	dc 01       	movw	r26, r24
    47ee:	cb 01       	movw	r24, r22
    47f0:	bc 01       	movw	r22, r24
    47f2:	cd 01       	movw	r24, r26
    47f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47f8:	dc 01       	movw	r26, r24
    47fa:	cb 01       	movw	r24, r22
    47fc:	9c 8b       	std	Y+20, r25	; 0x14
    47fe:	8b 8b       	std	Y+19, r24	; 0x13
    4800:	0f c0       	rjmp	.+30     	; 0x4820 <USER_Mode+0x4d2>
    4802:	88 ec       	ldi	r24, 0xC8	; 200
    4804:	90 e0       	ldi	r25, 0x00	; 0
    4806:	9a 8b       	std	Y+18, r25	; 0x12
    4808:	89 8b       	std	Y+17, r24	; 0x11
    480a:	89 89       	ldd	r24, Y+17	; 0x11
    480c:	9a 89       	ldd	r25, Y+18	; 0x12
    480e:	01 97       	sbiw	r24, 0x01	; 1
    4810:	f1 f7       	brne	.-4      	; 0x480e <USER_Mode+0x4c0>
    4812:	9a 8b       	std	Y+18, r25	; 0x12
    4814:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4816:	8b 89       	ldd	r24, Y+19	; 0x13
    4818:	9c 89       	ldd	r25, Y+20	; 0x14
    481a:	01 97       	sbiw	r24, 0x01	; 1
    481c:	9c 8b       	std	Y+20, r25	; 0x14
    481e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4820:	8b 89       	ldd	r24, Y+19	; 0x13
    4822:	9c 89       	ldd	r25, Y+20	; 0x14
    4824:	00 97       	sbiw	r24, 0x00	; 0
    4826:	69 f7       	brne	.-38     	; 0x4802 <USER_Mode+0x4b4>
    4828:	14 c0       	rjmp	.+40     	; 0x4852 <USER_Mode+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    482a:	6d 89       	ldd	r22, Y+21	; 0x15
    482c:	7e 89       	ldd	r23, Y+22	; 0x16
    482e:	8f 89       	ldd	r24, Y+23	; 0x17
    4830:	98 8d       	ldd	r25, Y+24	; 0x18
    4832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4836:	dc 01       	movw	r26, r24
    4838:	cb 01       	movw	r24, r22
    483a:	9c 8b       	std	Y+20, r25	; 0x14
    483c:	8b 8b       	std	Y+19, r24	; 0x13
    483e:	8b 89       	ldd	r24, Y+19	; 0x13
    4840:	9c 89       	ldd	r25, Y+20	; 0x14
    4842:	98 8b       	std	Y+16, r25	; 0x10
    4844:	8f 87       	std	Y+15, r24	; 0x0f
    4846:	8f 85       	ldd	r24, Y+15	; 0x0f
    4848:	98 89       	ldd	r25, Y+16	; 0x10
    484a:	01 97       	sbiw	r24, 0x01	; 1
    484c:	f1 f7       	brne	.-4      	; 0x484a <USER_Mode+0x4fc>
    484e:	98 8b       	std	Y+16, r25	; 0x10
    4850:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			MOTOR_voidStop();
    4852:	0e 94 a0 13 	call	0x2740	; 0x2740 <MOTOR_voidStop>
		}
	}

	lcd_clear();
    4856:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <lcd_clear>
	lcd_sendString((uint8_t *)"please take the card");
    485a:	8c e4       	ldi	r24, 0x4C	; 76
    485c:	91 e0       	ldi	r25, 0x01	; 1
    485e:	0e 94 75 1d 	call	0x3aea	; 0x3aea <lcd_sendString>
    4862:	80 e0       	ldi	r24, 0x00	; 0
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	aa e7       	ldi	r26, 0x7A	; 122
    4868:	b4 e4       	ldi	r27, 0x44	; 68
    486a:	8b 87       	std	Y+11, r24	; 0x0b
    486c:	9c 87       	std	Y+12, r25	; 0x0c
    486e:	ad 87       	std	Y+13, r26	; 0x0d
    4870:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4872:	6b 85       	ldd	r22, Y+11	; 0x0b
    4874:	7c 85       	ldd	r23, Y+12	; 0x0c
    4876:	8d 85       	ldd	r24, Y+13	; 0x0d
    4878:	9e 85       	ldd	r25, Y+14	; 0x0e
    487a:	20 e0       	ldi	r18, 0x00	; 0
    487c:	30 e0       	ldi	r19, 0x00	; 0
    487e:	4a ef       	ldi	r20, 0xFA	; 250
    4880:	54 e4       	ldi	r21, 0x44	; 68
    4882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4886:	dc 01       	movw	r26, r24
    4888:	cb 01       	movw	r24, r22
    488a:	8f 83       	std	Y+7, r24	; 0x07
    488c:	98 87       	std	Y+8, r25	; 0x08
    488e:	a9 87       	std	Y+9, r26	; 0x09
    4890:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4892:	6f 81       	ldd	r22, Y+7	; 0x07
    4894:	78 85       	ldd	r23, Y+8	; 0x08
    4896:	89 85       	ldd	r24, Y+9	; 0x09
    4898:	9a 85       	ldd	r25, Y+10	; 0x0a
    489a:	20 e0       	ldi	r18, 0x00	; 0
    489c:	30 e0       	ldi	r19, 0x00	; 0
    489e:	40 e8       	ldi	r20, 0x80	; 128
    48a0:	5f e3       	ldi	r21, 0x3F	; 63
    48a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48a6:	88 23       	and	r24, r24
    48a8:	2c f4       	brge	.+10     	; 0x48b4 <USER_Mode+0x566>
		__ticks = 1;
    48aa:	81 e0       	ldi	r24, 0x01	; 1
    48ac:	90 e0       	ldi	r25, 0x00	; 0
    48ae:	9e 83       	std	Y+6, r25	; 0x06
    48b0:	8d 83       	std	Y+5, r24	; 0x05
    48b2:	3f c0       	rjmp	.+126    	; 0x4932 <USER_Mode+0x5e4>
	else if (__tmp > 65535)
    48b4:	6f 81       	ldd	r22, Y+7	; 0x07
    48b6:	78 85       	ldd	r23, Y+8	; 0x08
    48b8:	89 85       	ldd	r24, Y+9	; 0x09
    48ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    48bc:	20 e0       	ldi	r18, 0x00	; 0
    48be:	3f ef       	ldi	r19, 0xFF	; 255
    48c0:	4f e7       	ldi	r20, 0x7F	; 127
    48c2:	57 e4       	ldi	r21, 0x47	; 71
    48c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48c8:	18 16       	cp	r1, r24
    48ca:	4c f5       	brge	.+82     	; 0x491e <USER_Mode+0x5d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    48ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    48d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    48d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    48d4:	20 e0       	ldi	r18, 0x00	; 0
    48d6:	30 e0       	ldi	r19, 0x00	; 0
    48d8:	40 e2       	ldi	r20, 0x20	; 32
    48da:	51 e4       	ldi	r21, 0x41	; 65
    48dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48e0:	dc 01       	movw	r26, r24
    48e2:	cb 01       	movw	r24, r22
    48e4:	bc 01       	movw	r22, r24
    48e6:	cd 01       	movw	r24, r26
    48e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48ec:	dc 01       	movw	r26, r24
    48ee:	cb 01       	movw	r24, r22
    48f0:	9e 83       	std	Y+6, r25	; 0x06
    48f2:	8d 83       	std	Y+5, r24	; 0x05
    48f4:	0f c0       	rjmp	.+30     	; 0x4914 <USER_Mode+0x5c6>
    48f6:	88 ec       	ldi	r24, 0xC8	; 200
    48f8:	90 e0       	ldi	r25, 0x00	; 0
    48fa:	9c 83       	std	Y+4, r25	; 0x04
    48fc:	8b 83       	std	Y+3, r24	; 0x03
    48fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4900:	9c 81       	ldd	r25, Y+4	; 0x04
    4902:	01 97       	sbiw	r24, 0x01	; 1
    4904:	f1 f7       	brne	.-4      	; 0x4902 <USER_Mode+0x5b4>
    4906:	9c 83       	std	Y+4, r25	; 0x04
    4908:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    490a:	8d 81       	ldd	r24, Y+5	; 0x05
    490c:	9e 81       	ldd	r25, Y+6	; 0x06
    490e:	01 97       	sbiw	r24, 0x01	; 1
    4910:	9e 83       	std	Y+6, r25	; 0x06
    4912:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4914:	8d 81       	ldd	r24, Y+5	; 0x05
    4916:	9e 81       	ldd	r25, Y+6	; 0x06
    4918:	00 97       	sbiw	r24, 0x00	; 0
    491a:	69 f7       	brne	.-38     	; 0x48f6 <USER_Mode+0x5a8>
    491c:	14 c0       	rjmp	.+40     	; 0x4946 <USER_Mode+0x5f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    491e:	6f 81       	ldd	r22, Y+7	; 0x07
    4920:	78 85       	ldd	r23, Y+8	; 0x08
    4922:	89 85       	ldd	r24, Y+9	; 0x09
    4924:	9a 85       	ldd	r25, Y+10	; 0x0a
    4926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    492a:	dc 01       	movw	r26, r24
    492c:	cb 01       	movw	r24, r22
    492e:	9e 83       	std	Y+6, r25	; 0x06
    4930:	8d 83       	std	Y+5, r24	; 0x05
    4932:	8d 81       	ldd	r24, Y+5	; 0x05
    4934:	9e 81       	ldd	r25, Y+6	; 0x06
    4936:	9a 83       	std	Y+2, r25	; 0x02
    4938:	89 83       	std	Y+1, r24	; 0x01
    493a:	89 81       	ldd	r24, Y+1	; 0x01
    493c:	9a 81       	ldd	r25, Y+2	; 0x02
    493e:	01 97       	sbiw	r24, 0x01	; 1
    4940:	f1 f7       	brne	.-4      	; 0x493e <USER_Mode+0x5f0>
    4942:	9a 83       	std	Y+2, r25	; 0x02
    4944:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    4946:	c6 5b       	subi	r28, 0xB6	; 182
    4948:	de 4f       	sbci	r29, 0xFE	; 254
    494a:	0f b6       	in	r0, 0x3f	; 63
    494c:	f8 94       	cli
    494e:	de bf       	out	0x3e, r29	; 62
    4950:	0f be       	out	0x3f, r0	; 63
    4952:	cd bf       	out	0x3d, r28	; 61
    4954:	cf 91       	pop	r28
    4956:	df 91       	pop	r29
    4958:	08 95       	ret

0000495a <Compare_Money>:
 * @param Max_money MAX AMOUNT Cal withdraw
 * @param User_money Deposit 
 * @return uint8_t* VALID | INVALID
 */
uint8_t Compare_Money(uint32_t Max_money, uint32_t User_money)
{
    495a:	df 93       	push	r29
    495c:	cf 93       	push	r28
    495e:	cd b7       	in	r28, 0x3d	; 61
    4960:	de b7       	in	r29, 0x3e	; 62
    4962:	29 97       	sbiw	r28, 0x09	; 9
    4964:	0f b6       	in	r0, 0x3f	; 63
    4966:	f8 94       	cli
    4968:	de bf       	out	0x3e, r29	; 62
    496a:	0f be       	out	0x3f, r0	; 63
    496c:	cd bf       	out	0x3d, r28	; 61
    496e:	69 83       	std	Y+1, r22	; 0x01
    4970:	7a 83       	std	Y+2, r23	; 0x02
    4972:	8b 83       	std	Y+3, r24	; 0x03
    4974:	9c 83       	std	Y+4, r25	; 0x04
    4976:	2d 83       	std	Y+5, r18	; 0x05
    4978:	3e 83       	std	Y+6, r19	; 0x06
    497a:	4f 83       	std	Y+7, r20	; 0x07
    497c:	58 87       	std	Y+8, r21	; 0x08

	if (Max_money < User_money)
    497e:	29 81       	ldd	r18, Y+1	; 0x01
    4980:	3a 81       	ldd	r19, Y+2	; 0x02
    4982:	4b 81       	ldd	r20, Y+3	; 0x03
    4984:	5c 81       	ldd	r21, Y+4	; 0x04
    4986:	8d 81       	ldd	r24, Y+5	; 0x05
    4988:	9e 81       	ldd	r25, Y+6	; 0x06
    498a:	af 81       	ldd	r26, Y+7	; 0x07
    498c:	b8 85       	ldd	r27, Y+8	; 0x08
    498e:	28 17       	cp	r18, r24
    4990:	39 07       	cpc	r19, r25
    4992:	4a 07       	cpc	r20, r26
    4994:	5b 07       	cpc	r21, r27
    4996:	10 f4       	brcc	.+4      	; 0x499c <Compare_Money+0x42>
	{
		return INVALID;
    4998:	19 86       	std	Y+9, r1	; 0x09
    499a:	02 c0       	rjmp	.+4      	; 0x49a0 <Compare_Money+0x46>
	}
	else
	{
		return VALID;
    499c:	81 e0       	ldi	r24, 0x01	; 1
    499e:	89 87       	std	Y+9, r24	; 0x09
    49a0:	89 85       	ldd	r24, Y+9	; 0x09
	}
}
    49a2:	29 96       	adiw	r28, 0x09	; 9
    49a4:	0f b6       	in	r0, 0x3f	; 63
    49a6:	f8 94       	cli
    49a8:	de bf       	out	0x3e, r29	; 62
    49aa:	0f be       	out	0x3f, r0	; 63
    49ac:	cd bf       	out	0x3d, r28	; 61
    49ae:	cf 91       	pop	r28
    49b0:	df 91       	pop	r29
    49b2:	08 95       	ret

000049b4 <Pass_check>:
 * 
 * @param Card_Pass store passwrod on Card_Pass
 * @return uint8_t CORRECT | INCORRECT
 */
uint8_t Pass_check(uint8_t *Card_Pass)
{
    49b4:	df 93       	push	r29
    49b6:	cf 93       	push	r28
    49b8:	cd b7       	in	r28, 0x3d	; 61
    49ba:	de b7       	in	r29, 0x3e	; 62
    49bc:	e4 97       	sbiw	r28, 0x34	; 52
    49be:	0f b6       	in	r0, 0x3f	; 63
    49c0:	f8 94       	cli
    49c2:	de bf       	out	0x3e, r29	; 62
    49c4:	0f be       	out	0x3f, r0	; 63
    49c6:	cd bf       	out	0x3d, r28	; 61
    49c8:	9c ab       	std	Y+52, r25	; 0x34
    49ca:	8b ab       	std	Y+51, r24	; 0x33
	uint8_t Pin[5];
	uint8_t i = 0;
    49cc:	1d a6       	std	Y+45, r1	; 0x2d
	uint8_t value;

	uint8_t Flag = 0;
    49ce:	1b a6       	std	Y+43, r1	; 0x2b

	lcd_clear();
    49d0:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <lcd_clear>
	lcd_sendString((uint8_t *)"Please Enter PIN");
    49d4:	81 e6       	ldi	r24, 0x61	; 97
    49d6:	91 e0       	ldi	r25, 0x01	; 1
    49d8:	0e 94 75 1d 	call	0x3aea	; 0x3aea <lcd_sendString>
    49dc:	1d c0       	rjmp	.+58     	; 0x4a18 <Pass_check+0x64>

	while (i != 4)
	{
		value = KEYPAD_u8Read();
    49de:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <KEYPAD_u8Read>
    49e2:	8c a7       	std	Y+44, r24	; 0x2c
		if (value != DEFAULT_KEY)
    49e4:	8c a5       	ldd	r24, Y+44	; 0x2c
    49e6:	8e 32       	cpi	r24, 0x2E	; 46
    49e8:	b9 f0       	breq	.+46     	; 0x4a18 <Pass_check+0x64>
		{
			Pin[i] = value;
    49ea:	8d a5       	ldd	r24, Y+45	; 0x2d
    49ec:	28 2f       	mov	r18, r24
    49ee:	30 e0       	ldi	r19, 0x00	; 0
    49f0:	ce 01       	movw	r24, r28
    49f2:	8e 96       	adiw	r24, 0x2e	; 46
    49f4:	fc 01       	movw	r30, r24
    49f6:	e2 0f       	add	r30, r18
    49f8:	f3 1f       	adc	r31, r19
    49fa:	8c a5       	ldd	r24, Y+44	; 0x2c
    49fc:	80 83       	st	Z, r24
			lcd_SetPosition(1, 1 + i);
    49fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    4a00:	98 2f       	mov	r25, r24
    4a02:	9f 5f       	subi	r25, 0xFF	; 255
    4a04:	81 e0       	ldi	r24, 0x01	; 1
    4a06:	69 2f       	mov	r22, r25
    4a08:	0e 94 65 1e 	call	0x3cca	; 0x3cca <lcd_SetPosition>
			lcd_sendChar('*');
    4a0c:	8a e2       	ldi	r24, 0x2A	; 42
    4a0e:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <lcd_sendChar>
			i++;
    4a12:	8d a5       	ldd	r24, Y+45	; 0x2d
    4a14:	8f 5f       	subi	r24, 0xFF	; 255
    4a16:	8d a7       	std	Y+45, r24	; 0x2d
	uint8_t Flag = 0;

	lcd_clear();
	lcd_sendString((uint8_t *)"Please Enter PIN");

	while (i != 4)
    4a18:	8d a5       	ldd	r24, Y+45	; 0x2d
    4a1a:	84 30       	cpi	r24, 0x04	; 4
    4a1c:	01 f7       	brne	.-64     	; 0x49de <Pass_check+0x2a>
			lcd_SetPosition(1, 1 + i);
			lcd_sendChar('*');
			i++;
		}
	}
	Pin[4] = '\0';
    4a1e:	1a aa       	std	Y+50, r1	; 0x32

	lcd_clear();
    4a20:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <lcd_clear>
	lcd_sendString((uint8_t *)"PASS finished");
    4a24:	82 e7       	ldi	r24, 0x72	; 114
    4a26:	91 e0       	ldi	r25, 0x01	; 1
    4a28:	0e 94 75 1d 	call	0x3aea	; 0x3aea <lcd_sendString>
    4a2c:	80 e0       	ldi	r24, 0x00	; 0
    4a2e:	90 e0       	ldi	r25, 0x00	; 0
    4a30:	aa e7       	ldi	r26, 0x7A	; 122
    4a32:	b4 e4       	ldi	r27, 0x44	; 68
    4a34:	8f a3       	std	Y+39, r24	; 0x27
    4a36:	98 a7       	std	Y+40, r25	; 0x28
    4a38:	a9 a7       	std	Y+41, r26	; 0x29
    4a3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a3c:	6f a1       	ldd	r22, Y+39	; 0x27
    4a3e:	78 a5       	ldd	r23, Y+40	; 0x28
    4a40:	89 a5       	ldd	r24, Y+41	; 0x29
    4a42:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a44:	20 e0       	ldi	r18, 0x00	; 0
    4a46:	30 e0       	ldi	r19, 0x00	; 0
    4a48:	4a ef       	ldi	r20, 0xFA	; 250
    4a4a:	54 e4       	ldi	r21, 0x44	; 68
    4a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a50:	dc 01       	movw	r26, r24
    4a52:	cb 01       	movw	r24, r22
    4a54:	8b a3       	std	Y+35, r24	; 0x23
    4a56:	9c a3       	std	Y+36, r25	; 0x24
    4a58:	ad a3       	std	Y+37, r26	; 0x25
    4a5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4a5c:	6b a1       	ldd	r22, Y+35	; 0x23
    4a5e:	7c a1       	ldd	r23, Y+36	; 0x24
    4a60:	8d a1       	ldd	r24, Y+37	; 0x25
    4a62:	9e a1       	ldd	r25, Y+38	; 0x26
    4a64:	20 e0       	ldi	r18, 0x00	; 0
    4a66:	30 e0       	ldi	r19, 0x00	; 0
    4a68:	40 e8       	ldi	r20, 0x80	; 128
    4a6a:	5f e3       	ldi	r21, 0x3F	; 63
    4a6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a70:	88 23       	and	r24, r24
    4a72:	2c f4       	brge	.+10     	; 0x4a7e <Pass_check+0xca>
		__ticks = 1;
    4a74:	81 e0       	ldi	r24, 0x01	; 1
    4a76:	90 e0       	ldi	r25, 0x00	; 0
    4a78:	9a a3       	std	Y+34, r25	; 0x22
    4a7a:	89 a3       	std	Y+33, r24	; 0x21
    4a7c:	3f c0       	rjmp	.+126    	; 0x4afc <Pass_check+0x148>
	else if (__tmp > 65535)
    4a7e:	6b a1       	ldd	r22, Y+35	; 0x23
    4a80:	7c a1       	ldd	r23, Y+36	; 0x24
    4a82:	8d a1       	ldd	r24, Y+37	; 0x25
    4a84:	9e a1       	ldd	r25, Y+38	; 0x26
    4a86:	20 e0       	ldi	r18, 0x00	; 0
    4a88:	3f ef       	ldi	r19, 0xFF	; 255
    4a8a:	4f e7       	ldi	r20, 0x7F	; 127
    4a8c:	57 e4       	ldi	r21, 0x47	; 71
    4a8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a92:	18 16       	cp	r1, r24
    4a94:	4c f5       	brge	.+82     	; 0x4ae8 <Pass_check+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a96:	6f a1       	ldd	r22, Y+39	; 0x27
    4a98:	78 a5       	ldd	r23, Y+40	; 0x28
    4a9a:	89 a5       	ldd	r24, Y+41	; 0x29
    4a9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    4a9e:	20 e0       	ldi	r18, 0x00	; 0
    4aa0:	30 e0       	ldi	r19, 0x00	; 0
    4aa2:	40 e2       	ldi	r20, 0x20	; 32
    4aa4:	51 e4       	ldi	r21, 0x41	; 65
    4aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aaa:	dc 01       	movw	r26, r24
    4aac:	cb 01       	movw	r24, r22
    4aae:	bc 01       	movw	r22, r24
    4ab0:	cd 01       	movw	r24, r26
    4ab2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ab6:	dc 01       	movw	r26, r24
    4ab8:	cb 01       	movw	r24, r22
    4aba:	9a a3       	std	Y+34, r25	; 0x22
    4abc:	89 a3       	std	Y+33, r24	; 0x21
    4abe:	0f c0       	rjmp	.+30     	; 0x4ade <Pass_check+0x12a>
    4ac0:	88 ec       	ldi	r24, 0xC8	; 200
    4ac2:	90 e0       	ldi	r25, 0x00	; 0
    4ac4:	98 a3       	std	Y+32, r25	; 0x20
    4ac6:	8f 8f       	std	Y+31, r24	; 0x1f
    4ac8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4aca:	98 a1       	ldd	r25, Y+32	; 0x20
    4acc:	01 97       	sbiw	r24, 0x01	; 1
    4ace:	f1 f7       	brne	.-4      	; 0x4acc <Pass_check+0x118>
    4ad0:	98 a3       	std	Y+32, r25	; 0x20
    4ad2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ad4:	89 a1       	ldd	r24, Y+33	; 0x21
    4ad6:	9a a1       	ldd	r25, Y+34	; 0x22
    4ad8:	01 97       	sbiw	r24, 0x01	; 1
    4ada:	9a a3       	std	Y+34, r25	; 0x22
    4adc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ade:	89 a1       	ldd	r24, Y+33	; 0x21
    4ae0:	9a a1       	ldd	r25, Y+34	; 0x22
    4ae2:	00 97       	sbiw	r24, 0x00	; 0
    4ae4:	69 f7       	brne	.-38     	; 0x4ac0 <Pass_check+0x10c>
    4ae6:	14 c0       	rjmp	.+40     	; 0x4b10 <Pass_check+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ae8:	6b a1       	ldd	r22, Y+35	; 0x23
    4aea:	7c a1       	ldd	r23, Y+36	; 0x24
    4aec:	8d a1       	ldd	r24, Y+37	; 0x25
    4aee:	9e a1       	ldd	r25, Y+38	; 0x26
    4af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4af4:	dc 01       	movw	r26, r24
    4af6:	cb 01       	movw	r24, r22
    4af8:	9a a3       	std	Y+34, r25	; 0x22
    4afa:	89 a3       	std	Y+33, r24	; 0x21
    4afc:	89 a1       	ldd	r24, Y+33	; 0x21
    4afe:	9a a1       	ldd	r25, Y+34	; 0x22
    4b00:	9e 8f       	std	Y+30, r25	; 0x1e
    4b02:	8d 8f       	std	Y+29, r24	; 0x1d
    4b04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b08:	01 97       	sbiw	r24, 0x01	; 1
    4b0a:	f1 f7       	brne	.-4      	; 0x4b08 <Pass_check+0x154>
    4b0c:	9e 8f       	std	Y+30, r25	; 0x1e
    4b0e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);

	if (String_u8Comp(Pin, Card_Pass) == STRING_EQUL)
    4b10:	ce 01       	movw	r24, r28
    4b12:	8e 96       	adiw	r24, 0x2e	; 46
    4b14:	2b a9       	ldd	r18, Y+51	; 0x33
    4b16:	3c a9       	ldd	r19, Y+52	; 0x34
    4b18:	b9 01       	movw	r22, r18
    4b1a:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <String_u8Comp>
    4b1e:	88 23       	and	r24, r24
    4b20:	09 f0       	breq	.+2      	; 0x4b24 <Pass_check+0x170>
    4b22:	7b c0       	rjmp	.+246    	; 0x4c1a <Pass_check+0x266>
	{
		lcd_clear();
    4b24:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <lcd_clear>
		lcd_sendString((uint8_t *)"PASS Correct");
    4b28:	80 e8       	ldi	r24, 0x80	; 128
    4b2a:	91 e0       	ldi	r25, 0x01	; 1
    4b2c:	0e 94 75 1d 	call	0x3aea	; 0x3aea <lcd_sendString>
		Flag = CORRECT;
    4b30:	81 e0       	ldi	r24, 0x01	; 1
    4b32:	8b a7       	std	Y+43, r24	; 0x2b
    4b34:	80 e0       	ldi	r24, 0x00	; 0
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	aa e7       	ldi	r26, 0x7A	; 122
    4b3a:	b4 e4       	ldi	r27, 0x44	; 68
    4b3c:	89 8f       	std	Y+25, r24	; 0x19
    4b3e:	9a 8f       	std	Y+26, r25	; 0x1a
    4b40:	ab 8f       	std	Y+27, r26	; 0x1b
    4b42:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b44:	69 8d       	ldd	r22, Y+25	; 0x19
    4b46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4b48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4b4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4b4c:	20 e0       	ldi	r18, 0x00	; 0
    4b4e:	30 e0       	ldi	r19, 0x00	; 0
    4b50:	4a ef       	ldi	r20, 0xFA	; 250
    4b52:	54 e4       	ldi	r21, 0x44	; 68
    4b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b58:	dc 01       	movw	r26, r24
    4b5a:	cb 01       	movw	r24, r22
    4b5c:	8d 8b       	std	Y+21, r24	; 0x15
    4b5e:	9e 8b       	std	Y+22, r25	; 0x16
    4b60:	af 8b       	std	Y+23, r26	; 0x17
    4b62:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4b64:	6d 89       	ldd	r22, Y+21	; 0x15
    4b66:	7e 89       	ldd	r23, Y+22	; 0x16
    4b68:	8f 89       	ldd	r24, Y+23	; 0x17
    4b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    4b6c:	20 e0       	ldi	r18, 0x00	; 0
    4b6e:	30 e0       	ldi	r19, 0x00	; 0
    4b70:	40 e8       	ldi	r20, 0x80	; 128
    4b72:	5f e3       	ldi	r21, 0x3F	; 63
    4b74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b78:	88 23       	and	r24, r24
    4b7a:	2c f4       	brge	.+10     	; 0x4b86 <Pass_check+0x1d2>
		__ticks = 1;
    4b7c:	81 e0       	ldi	r24, 0x01	; 1
    4b7e:	90 e0       	ldi	r25, 0x00	; 0
    4b80:	9c 8b       	std	Y+20, r25	; 0x14
    4b82:	8b 8b       	std	Y+19, r24	; 0x13
    4b84:	3f c0       	rjmp	.+126    	; 0x4c04 <Pass_check+0x250>
	else if (__tmp > 65535)
    4b86:	6d 89       	ldd	r22, Y+21	; 0x15
    4b88:	7e 89       	ldd	r23, Y+22	; 0x16
    4b8a:	8f 89       	ldd	r24, Y+23	; 0x17
    4b8c:	98 8d       	ldd	r25, Y+24	; 0x18
    4b8e:	20 e0       	ldi	r18, 0x00	; 0
    4b90:	3f ef       	ldi	r19, 0xFF	; 255
    4b92:	4f e7       	ldi	r20, 0x7F	; 127
    4b94:	57 e4       	ldi	r21, 0x47	; 71
    4b96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b9a:	18 16       	cp	r1, r24
    4b9c:	4c f5       	brge	.+82     	; 0x4bf0 <Pass_check+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b9e:	69 8d       	ldd	r22, Y+25	; 0x19
    4ba0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ba6:	20 e0       	ldi	r18, 0x00	; 0
    4ba8:	30 e0       	ldi	r19, 0x00	; 0
    4baa:	40 e2       	ldi	r20, 0x20	; 32
    4bac:	51 e4       	ldi	r21, 0x41	; 65
    4bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bb2:	dc 01       	movw	r26, r24
    4bb4:	cb 01       	movw	r24, r22
    4bb6:	bc 01       	movw	r22, r24
    4bb8:	cd 01       	movw	r24, r26
    4bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bbe:	dc 01       	movw	r26, r24
    4bc0:	cb 01       	movw	r24, r22
    4bc2:	9c 8b       	std	Y+20, r25	; 0x14
    4bc4:	8b 8b       	std	Y+19, r24	; 0x13
    4bc6:	0f c0       	rjmp	.+30     	; 0x4be6 <Pass_check+0x232>
    4bc8:	88 ec       	ldi	r24, 0xC8	; 200
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	9a 8b       	std	Y+18, r25	; 0x12
    4bce:	89 8b       	std	Y+17, r24	; 0x11
    4bd0:	89 89       	ldd	r24, Y+17	; 0x11
    4bd2:	9a 89       	ldd	r25, Y+18	; 0x12
    4bd4:	01 97       	sbiw	r24, 0x01	; 1
    4bd6:	f1 f7       	brne	.-4      	; 0x4bd4 <Pass_check+0x220>
    4bd8:	9a 8b       	std	Y+18, r25	; 0x12
    4bda:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    4bde:	9c 89       	ldd	r25, Y+20	; 0x14
    4be0:	01 97       	sbiw	r24, 0x01	; 1
    4be2:	9c 8b       	std	Y+20, r25	; 0x14
    4be4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4be6:	8b 89       	ldd	r24, Y+19	; 0x13
    4be8:	9c 89       	ldd	r25, Y+20	; 0x14
    4bea:	00 97       	sbiw	r24, 0x00	; 0
    4bec:	69 f7       	brne	.-38     	; 0x4bc8 <Pass_check+0x214>
    4bee:	8e c0       	rjmp	.+284    	; 0x4d0c <Pass_check+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bf0:	6d 89       	ldd	r22, Y+21	; 0x15
    4bf2:	7e 89       	ldd	r23, Y+22	; 0x16
    4bf4:	8f 89       	ldd	r24, Y+23	; 0x17
    4bf6:	98 8d       	ldd	r25, Y+24	; 0x18
    4bf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bfc:	dc 01       	movw	r26, r24
    4bfe:	cb 01       	movw	r24, r22
    4c00:	9c 8b       	std	Y+20, r25	; 0x14
    4c02:	8b 8b       	std	Y+19, r24	; 0x13
    4c04:	8b 89       	ldd	r24, Y+19	; 0x13
    4c06:	9c 89       	ldd	r25, Y+20	; 0x14
    4c08:	98 8b       	std	Y+16, r25	; 0x10
    4c0a:	8f 87       	std	Y+15, r24	; 0x0f
    4c0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c0e:	98 89       	ldd	r25, Y+16	; 0x10
    4c10:	01 97       	sbiw	r24, 0x01	; 1
    4c12:	f1 f7       	brne	.-4      	; 0x4c10 <Pass_check+0x25c>
    4c14:	98 8b       	std	Y+16, r25	; 0x10
    4c16:	8f 87       	std	Y+15, r24	; 0x0f
    4c18:	79 c0       	rjmp	.+242    	; 0x4d0c <Pass_check+0x358>
		_delay_ms(1000);
	}
	else
	{
		lcd_clear();
    4c1a:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <lcd_clear>
		lcd_sendString((uint8_t *)"PASS incorrect");
    4c1e:	8d e8       	ldi	r24, 0x8D	; 141
    4c20:	91 e0       	ldi	r25, 0x01	; 1
    4c22:	0e 94 75 1d 	call	0x3aea	; 0x3aea <lcd_sendString>
		Flag = INCORRECT;
    4c26:	1b a6       	std	Y+43, r1	; 0x2b
    4c28:	80 e0       	ldi	r24, 0x00	; 0
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	aa e7       	ldi	r26, 0x7A	; 122
    4c2e:	b4 e4       	ldi	r27, 0x44	; 68
    4c30:	8b 87       	std	Y+11, r24	; 0x0b
    4c32:	9c 87       	std	Y+12, r25	; 0x0c
    4c34:	ad 87       	std	Y+13, r26	; 0x0d
    4c36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c38:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c40:	20 e0       	ldi	r18, 0x00	; 0
    4c42:	30 e0       	ldi	r19, 0x00	; 0
    4c44:	4a ef       	ldi	r20, 0xFA	; 250
    4c46:	54 e4       	ldi	r21, 0x44	; 68
    4c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c4c:	dc 01       	movw	r26, r24
    4c4e:	cb 01       	movw	r24, r22
    4c50:	8f 83       	std	Y+7, r24	; 0x07
    4c52:	98 87       	std	Y+8, r25	; 0x08
    4c54:	a9 87       	std	Y+9, r26	; 0x09
    4c56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c58:	6f 81       	ldd	r22, Y+7	; 0x07
    4c5a:	78 85       	ldd	r23, Y+8	; 0x08
    4c5c:	89 85       	ldd	r24, Y+9	; 0x09
    4c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c60:	20 e0       	ldi	r18, 0x00	; 0
    4c62:	30 e0       	ldi	r19, 0x00	; 0
    4c64:	40 e8       	ldi	r20, 0x80	; 128
    4c66:	5f e3       	ldi	r21, 0x3F	; 63
    4c68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c6c:	88 23       	and	r24, r24
    4c6e:	2c f4       	brge	.+10     	; 0x4c7a <Pass_check+0x2c6>
		__ticks = 1;
    4c70:	81 e0       	ldi	r24, 0x01	; 1
    4c72:	90 e0       	ldi	r25, 0x00	; 0
    4c74:	9e 83       	std	Y+6, r25	; 0x06
    4c76:	8d 83       	std	Y+5, r24	; 0x05
    4c78:	3f c0       	rjmp	.+126    	; 0x4cf8 <Pass_check+0x344>
	else if (__tmp > 65535)
    4c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    4c7c:	78 85       	ldd	r23, Y+8	; 0x08
    4c7e:	89 85       	ldd	r24, Y+9	; 0x09
    4c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    4c82:	20 e0       	ldi	r18, 0x00	; 0
    4c84:	3f ef       	ldi	r19, 0xFF	; 255
    4c86:	4f e7       	ldi	r20, 0x7F	; 127
    4c88:	57 e4       	ldi	r21, 0x47	; 71
    4c8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c8e:	18 16       	cp	r1, r24
    4c90:	4c f5       	brge	.+82     	; 0x4ce4 <Pass_check+0x330>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c9a:	20 e0       	ldi	r18, 0x00	; 0
    4c9c:	30 e0       	ldi	r19, 0x00	; 0
    4c9e:	40 e2       	ldi	r20, 0x20	; 32
    4ca0:	51 e4       	ldi	r21, 0x41	; 65
    4ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ca6:	dc 01       	movw	r26, r24
    4ca8:	cb 01       	movw	r24, r22
    4caa:	bc 01       	movw	r22, r24
    4cac:	cd 01       	movw	r24, r26
    4cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cb2:	dc 01       	movw	r26, r24
    4cb4:	cb 01       	movw	r24, r22
    4cb6:	9e 83       	std	Y+6, r25	; 0x06
    4cb8:	8d 83       	std	Y+5, r24	; 0x05
    4cba:	0f c0       	rjmp	.+30     	; 0x4cda <Pass_check+0x326>
    4cbc:	88 ec       	ldi	r24, 0xC8	; 200
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	9c 83       	std	Y+4, r25	; 0x04
    4cc2:	8b 83       	std	Y+3, r24	; 0x03
    4cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    4cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    4cc8:	01 97       	sbiw	r24, 0x01	; 1
    4cca:	f1 f7       	brne	.-4      	; 0x4cc8 <Pass_check+0x314>
    4ccc:	9c 83       	std	Y+4, r25	; 0x04
    4cce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    4cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    4cd4:	01 97       	sbiw	r24, 0x01	; 1
    4cd6:	9e 83       	std	Y+6, r25	; 0x06
    4cd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cda:	8d 81       	ldd	r24, Y+5	; 0x05
    4cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    4cde:	00 97       	sbiw	r24, 0x00	; 0
    4ce0:	69 f7       	brne	.-38     	; 0x4cbc <Pass_check+0x308>
    4ce2:	14 c0       	rjmp	.+40     	; 0x4d0c <Pass_check+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    4ce6:	78 85       	ldd	r23, Y+8	; 0x08
    4ce8:	89 85       	ldd	r24, Y+9	; 0x09
    4cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf0:	dc 01       	movw	r26, r24
    4cf2:	cb 01       	movw	r24, r22
    4cf4:	9e 83       	std	Y+6, r25	; 0x06
    4cf6:	8d 83       	std	Y+5, r24	; 0x05
    4cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    4cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    4cfc:	9a 83       	std	Y+2, r25	; 0x02
    4cfe:	89 83       	std	Y+1, r24	; 0x01
    4d00:	89 81       	ldd	r24, Y+1	; 0x01
    4d02:	9a 81       	ldd	r25, Y+2	; 0x02
    4d04:	01 97       	sbiw	r24, 0x01	; 1
    4d06:	f1 f7       	brne	.-4      	; 0x4d04 <Pass_check+0x350>
    4d08:	9a 83       	std	Y+2, r25	; 0x02
    4d0a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
	}

	return Flag;
    4d0c:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    4d0e:	e4 96       	adiw	r28, 0x34	; 52
    4d10:	0f b6       	in	r0, 0x3f	; 63
    4d12:	f8 94       	cli
    4d14:	de bf       	out	0x3e, r29	; 62
    4d16:	0f be       	out	0x3f, r0	; 63
    4d18:	cd bf       	out	0x3d, r28	; 61
    4d1a:	cf 91       	pop	r28
    4d1c:	df 91       	pop	r29
    4d1e:	08 95       	ret

00004d20 <TEMP>:
/**
 * @brief Display Temp on Lcd if user select Temp Mode
 * 
 */
void TEMP(void)
{
    4d20:	df 93       	push	r29
    4d22:	cf 93       	push	r28
    4d24:	cd b7       	in	r28, 0x3d	; 61
    4d26:	de b7       	in	r29, 0x3e	; 62
    4d28:	6d 97       	sbiw	r28, 0x1d	; 29
    4d2a:	0f b6       	in	r0, 0x3f	; 63
    4d2c:	f8 94       	cli
    4d2e:	de bf       	out	0x3e, r29	; 62
    4d30:	0f be       	out	0x3f, r0	; 63
    4d32:	cd bf       	out	0x3d, r28	; 61
	uint8_t value = 0;
    4d34:	1d 8e       	std	Y+29, r1	; 0x1d
	value = LM35_U16Read(0);
    4d36:	80 e0       	ldi	r24, 0x00	; 0
    4d38:	0e 94 ba 13 	call	0x2774	; 0x2774 <LM35_U16Read>
    4d3c:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_clear();
    4d3e:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <lcd_clear>
	lcd_sendString((uint8_t *)"temp is ");
    4d42:	8c e9       	ldi	r24, 0x9C	; 156
    4d44:	91 e0       	ldi	r25, 0x01	; 1
    4d46:	0e 94 75 1d 	call	0x3aea	; 0x3aea <lcd_sendString>
    4d4a:	80 e0       	ldi	r24, 0x00	; 0
    4d4c:	90 e0       	ldi	r25, 0x00	; 0
    4d4e:	aa e7       	ldi	r26, 0x7A	; 122
    4d50:	b4 e4       	ldi	r27, 0x44	; 68
    4d52:	89 8f       	std	Y+25, r24	; 0x19
    4d54:	9a 8f       	std	Y+26, r25	; 0x1a
    4d56:	ab 8f       	std	Y+27, r26	; 0x1b
    4d58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d5a:	69 8d       	ldd	r22, Y+25	; 0x19
    4d5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d62:	20 e0       	ldi	r18, 0x00	; 0
    4d64:	30 e0       	ldi	r19, 0x00	; 0
    4d66:	4a ef       	ldi	r20, 0xFA	; 250
    4d68:	54 e4       	ldi	r21, 0x44	; 68
    4d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d6e:	dc 01       	movw	r26, r24
    4d70:	cb 01       	movw	r24, r22
    4d72:	8d 8b       	std	Y+21, r24	; 0x15
    4d74:	9e 8b       	std	Y+22, r25	; 0x16
    4d76:	af 8b       	std	Y+23, r26	; 0x17
    4d78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4d7a:	6d 89       	ldd	r22, Y+21	; 0x15
    4d7c:	7e 89       	ldd	r23, Y+22	; 0x16
    4d7e:	8f 89       	ldd	r24, Y+23	; 0x17
    4d80:	98 8d       	ldd	r25, Y+24	; 0x18
    4d82:	20 e0       	ldi	r18, 0x00	; 0
    4d84:	30 e0       	ldi	r19, 0x00	; 0
    4d86:	40 e8       	ldi	r20, 0x80	; 128
    4d88:	5f e3       	ldi	r21, 0x3F	; 63
    4d8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d8e:	88 23       	and	r24, r24
    4d90:	2c f4       	brge	.+10     	; 0x4d9c <TEMP+0x7c>
		__ticks = 1;
    4d92:	81 e0       	ldi	r24, 0x01	; 1
    4d94:	90 e0       	ldi	r25, 0x00	; 0
    4d96:	9c 8b       	std	Y+20, r25	; 0x14
    4d98:	8b 8b       	std	Y+19, r24	; 0x13
    4d9a:	3f c0       	rjmp	.+126    	; 0x4e1a <TEMP+0xfa>
	else if (__tmp > 65535)
    4d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    4d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    4da0:	8f 89       	ldd	r24, Y+23	; 0x17
    4da2:	98 8d       	ldd	r25, Y+24	; 0x18
    4da4:	20 e0       	ldi	r18, 0x00	; 0
    4da6:	3f ef       	ldi	r19, 0xFF	; 255
    4da8:	4f e7       	ldi	r20, 0x7F	; 127
    4daa:	57 e4       	ldi	r21, 0x47	; 71
    4dac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4db0:	18 16       	cp	r1, r24
    4db2:	4c f5       	brge	.+82     	; 0x4e06 <TEMP+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4db4:	69 8d       	ldd	r22, Y+25	; 0x19
    4db6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4db8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4dba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4dbc:	20 e0       	ldi	r18, 0x00	; 0
    4dbe:	30 e0       	ldi	r19, 0x00	; 0
    4dc0:	40 e2       	ldi	r20, 0x20	; 32
    4dc2:	51 e4       	ldi	r21, 0x41	; 65
    4dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dc8:	dc 01       	movw	r26, r24
    4dca:	cb 01       	movw	r24, r22
    4dcc:	bc 01       	movw	r22, r24
    4dce:	cd 01       	movw	r24, r26
    4dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dd4:	dc 01       	movw	r26, r24
    4dd6:	cb 01       	movw	r24, r22
    4dd8:	9c 8b       	std	Y+20, r25	; 0x14
    4dda:	8b 8b       	std	Y+19, r24	; 0x13
    4ddc:	0f c0       	rjmp	.+30     	; 0x4dfc <TEMP+0xdc>
    4dde:	88 ec       	ldi	r24, 0xC8	; 200
    4de0:	90 e0       	ldi	r25, 0x00	; 0
    4de2:	9a 8b       	std	Y+18, r25	; 0x12
    4de4:	89 8b       	std	Y+17, r24	; 0x11
    4de6:	89 89       	ldd	r24, Y+17	; 0x11
    4de8:	9a 89       	ldd	r25, Y+18	; 0x12
    4dea:	01 97       	sbiw	r24, 0x01	; 1
    4dec:	f1 f7       	brne	.-4      	; 0x4dea <TEMP+0xca>
    4dee:	9a 8b       	std	Y+18, r25	; 0x12
    4df0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4df2:	8b 89       	ldd	r24, Y+19	; 0x13
    4df4:	9c 89       	ldd	r25, Y+20	; 0x14
    4df6:	01 97       	sbiw	r24, 0x01	; 1
    4df8:	9c 8b       	std	Y+20, r25	; 0x14
    4dfa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dfc:	8b 89       	ldd	r24, Y+19	; 0x13
    4dfe:	9c 89       	ldd	r25, Y+20	; 0x14
    4e00:	00 97       	sbiw	r24, 0x00	; 0
    4e02:	69 f7       	brne	.-38     	; 0x4dde <TEMP+0xbe>
    4e04:	14 c0       	rjmp	.+40     	; 0x4e2e <TEMP+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e06:	6d 89       	ldd	r22, Y+21	; 0x15
    4e08:	7e 89       	ldd	r23, Y+22	; 0x16
    4e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    4e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    4e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e12:	dc 01       	movw	r26, r24
    4e14:	cb 01       	movw	r24, r22
    4e16:	9c 8b       	std	Y+20, r25	; 0x14
    4e18:	8b 8b       	std	Y+19, r24	; 0x13
    4e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    4e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    4e1e:	98 8b       	std	Y+16, r25	; 0x10
    4e20:	8f 87       	std	Y+15, r24	; 0x0f
    4e22:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e24:	98 89       	ldd	r25, Y+16	; 0x10
    4e26:	01 97       	sbiw	r24, 0x01	; 1
    4e28:	f1 f7       	brne	.-4      	; 0x4e26 <TEMP+0x106>
    4e2a:	98 8b       	std	Y+16, r25	; 0x10
    4e2c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	lcd_SetPosition(1, 0);
    4e2e:	81 e0       	ldi	r24, 0x01	; 1
    4e30:	60 e0       	ldi	r22, 0x00	; 0
    4e32:	0e 94 65 1e 	call	0x3cca	; 0x3cca <lcd_SetPosition>
	lcd_sendNum(value);
    4e36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e38:	88 2f       	mov	r24, r24
    4e3a:	90 e0       	ldi	r25, 0x00	; 0
    4e3c:	0e 94 9e 1d 	call	0x3b3c	; 0x3b3c <lcd_sendNum>
    4e40:	80 e0       	ldi	r24, 0x00	; 0
    4e42:	90 e8       	ldi	r25, 0x80	; 128
    4e44:	ab e3       	ldi	r26, 0x3B	; 59
    4e46:	b5 e4       	ldi	r27, 0x45	; 69
    4e48:	8b 87       	std	Y+11, r24	; 0x0b
    4e4a:	9c 87       	std	Y+12, r25	; 0x0c
    4e4c:	ad 87       	std	Y+13, r26	; 0x0d
    4e4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e50:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e52:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e54:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e56:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e58:	20 e0       	ldi	r18, 0x00	; 0
    4e5a:	30 e0       	ldi	r19, 0x00	; 0
    4e5c:	4a ef       	ldi	r20, 0xFA	; 250
    4e5e:	54 e4       	ldi	r21, 0x44	; 68
    4e60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e64:	dc 01       	movw	r26, r24
    4e66:	cb 01       	movw	r24, r22
    4e68:	8f 83       	std	Y+7, r24	; 0x07
    4e6a:	98 87       	std	Y+8, r25	; 0x08
    4e6c:	a9 87       	std	Y+9, r26	; 0x09
    4e6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4e70:	6f 81       	ldd	r22, Y+7	; 0x07
    4e72:	78 85       	ldd	r23, Y+8	; 0x08
    4e74:	89 85       	ldd	r24, Y+9	; 0x09
    4e76:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e78:	20 e0       	ldi	r18, 0x00	; 0
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    4e7c:	40 e8       	ldi	r20, 0x80	; 128
    4e7e:	5f e3       	ldi	r21, 0x3F	; 63
    4e80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e84:	88 23       	and	r24, r24
    4e86:	2c f4       	brge	.+10     	; 0x4e92 <TEMP+0x172>
		__ticks = 1;
    4e88:	81 e0       	ldi	r24, 0x01	; 1
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	9e 83       	std	Y+6, r25	; 0x06
    4e8e:	8d 83       	std	Y+5, r24	; 0x05
    4e90:	3f c0       	rjmp	.+126    	; 0x4f10 <TEMP+0x1f0>
	else if (__tmp > 65535)
    4e92:	6f 81       	ldd	r22, Y+7	; 0x07
    4e94:	78 85       	ldd	r23, Y+8	; 0x08
    4e96:	89 85       	ldd	r24, Y+9	; 0x09
    4e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e9a:	20 e0       	ldi	r18, 0x00	; 0
    4e9c:	3f ef       	ldi	r19, 0xFF	; 255
    4e9e:	4f e7       	ldi	r20, 0x7F	; 127
    4ea0:	57 e4       	ldi	r21, 0x47	; 71
    4ea2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ea6:	18 16       	cp	r1, r24
    4ea8:	4c f5       	brge	.+82     	; 0x4efc <TEMP+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    4eac:	7c 85       	ldd	r23, Y+12	; 0x0c
    4eae:	8d 85       	ldd	r24, Y+13	; 0x0d
    4eb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4eb2:	20 e0       	ldi	r18, 0x00	; 0
    4eb4:	30 e0       	ldi	r19, 0x00	; 0
    4eb6:	40 e2       	ldi	r20, 0x20	; 32
    4eb8:	51 e4       	ldi	r21, 0x41	; 65
    4eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ebe:	dc 01       	movw	r26, r24
    4ec0:	cb 01       	movw	r24, r22
    4ec2:	bc 01       	movw	r22, r24
    4ec4:	cd 01       	movw	r24, r26
    4ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eca:	dc 01       	movw	r26, r24
    4ecc:	cb 01       	movw	r24, r22
    4ece:	9e 83       	std	Y+6, r25	; 0x06
    4ed0:	8d 83       	std	Y+5, r24	; 0x05
    4ed2:	0f c0       	rjmp	.+30     	; 0x4ef2 <TEMP+0x1d2>
    4ed4:	88 ec       	ldi	r24, 0xC8	; 200
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	9c 83       	std	Y+4, r25	; 0x04
    4eda:	8b 83       	std	Y+3, r24	; 0x03
    4edc:	8b 81       	ldd	r24, Y+3	; 0x03
    4ede:	9c 81       	ldd	r25, Y+4	; 0x04
    4ee0:	01 97       	sbiw	r24, 0x01	; 1
    4ee2:	f1 f7       	brne	.-4      	; 0x4ee0 <TEMP+0x1c0>
    4ee4:	9c 83       	std	Y+4, r25	; 0x04
    4ee6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    4eea:	9e 81       	ldd	r25, Y+6	; 0x06
    4eec:	01 97       	sbiw	r24, 0x01	; 1
    4eee:	9e 83       	std	Y+6, r25	; 0x06
    4ef0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ef2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ef4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ef6:	00 97       	sbiw	r24, 0x00	; 0
    4ef8:	69 f7       	brne	.-38     	; 0x4ed4 <TEMP+0x1b4>
    4efa:	14 c0       	rjmp	.+40     	; 0x4f24 <TEMP+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4efc:	6f 81       	ldd	r22, Y+7	; 0x07
    4efe:	78 85       	ldd	r23, Y+8	; 0x08
    4f00:	89 85       	ldd	r24, Y+9	; 0x09
    4f02:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f08:	dc 01       	movw	r26, r24
    4f0a:	cb 01       	movw	r24, r22
    4f0c:	9e 83       	std	Y+6, r25	; 0x06
    4f0e:	8d 83       	std	Y+5, r24	; 0x05
    4f10:	8d 81       	ldd	r24, Y+5	; 0x05
    4f12:	9e 81       	ldd	r25, Y+6	; 0x06
    4f14:	9a 83       	std	Y+2, r25	; 0x02
    4f16:	89 83       	std	Y+1, r24	; 0x01
    4f18:	89 81       	ldd	r24, Y+1	; 0x01
    4f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    4f1c:	01 97       	sbiw	r24, 0x01	; 1
    4f1e:	f1 f7       	brne	.-4      	; 0x4f1c <TEMP+0x1fc>
    4f20:	9a 83       	std	Y+2, r25	; 0x02
    4f22:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000);
}
    4f24:	6d 96       	adiw	r28, 0x1d	; 29
    4f26:	0f b6       	in	r0, 0x3f	; 63
    4f28:	f8 94       	cli
    4f2a:	de bf       	out	0x3e, r29	; 62
    4f2c:	0f be       	out	0x3f, r0	; 63
    4f2e:	cd bf       	out	0x3d, r28	; 61
    4f30:	cf 91       	pop	r28
    4f32:	df 91       	pop	r29
    4f34:	08 95       	ret

00004f36 <String_u8Comp>:
 * @param Str1 first string
 * @param Str2 second string
 * @return uint8_t string is equal = 0 or not equal =1 
 */
uint8_t String_u8Comp(uint8_t *Str1, uint8_t *Str2)
{
    4f36:	df 93       	push	r29
    4f38:	cf 93       	push	r28
    4f3a:	00 d0       	rcall	.+0      	; 0x4f3c <String_u8Comp+0x6>
    4f3c:	00 d0       	rcall	.+0      	; 0x4f3e <String_u8Comp+0x8>
    4f3e:	00 d0       	rcall	.+0      	; 0x4f40 <String_u8Comp+0xa>
    4f40:	cd b7       	in	r28, 0x3d	; 61
    4f42:	de b7       	in	r29, 0x3e	; 62
    4f44:	9c 83       	std	Y+4, r25	; 0x04
    4f46:	8b 83       	std	Y+3, r24	; 0x03
    4f48:	7e 83       	std	Y+6, r23	; 0x06
    4f4a:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t i = 0, Flag = 0;
    4f4c:	1a 82       	std	Y+2, r1	; 0x02
    4f4e:	19 82       	std	Y+1, r1	; 0x01
    4f50:	1a c0       	rjmp	.+52     	; 0x4f86 <String_u8Comp+0x50>

	while (Str1[i] || Str2[i])
	{
		if (Str1[i] != Str2[i])
    4f52:	8a 81       	ldd	r24, Y+2	; 0x02
    4f54:	28 2f       	mov	r18, r24
    4f56:	30 e0       	ldi	r19, 0x00	; 0
    4f58:	8b 81       	ldd	r24, Y+3	; 0x03
    4f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f5c:	fc 01       	movw	r30, r24
    4f5e:	e2 0f       	add	r30, r18
    4f60:	f3 1f       	adc	r31, r19
    4f62:	40 81       	ld	r20, Z
    4f64:	8a 81       	ldd	r24, Y+2	; 0x02
    4f66:	28 2f       	mov	r18, r24
    4f68:	30 e0       	ldi	r19, 0x00	; 0
    4f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f6e:	fc 01       	movw	r30, r24
    4f70:	e2 0f       	add	r30, r18
    4f72:	f3 1f       	adc	r31, r19
    4f74:	80 81       	ld	r24, Z
    4f76:	48 17       	cp	r20, r24
    4f78:	19 f0       	breq	.+6      	; 0x4f80 <String_u8Comp+0x4a>
		{
			Flag = 1;
    4f7a:	81 e0       	ldi	r24, 0x01	; 1
    4f7c:	89 83       	std	Y+1, r24	; 0x01
    4f7e:	19 c0       	rjmp	.+50     	; 0x4fb2 <String_u8Comp+0x7c>
			break;
		}
		i++;
    4f80:	8a 81       	ldd	r24, Y+2	; 0x02
    4f82:	8f 5f       	subi	r24, 0xFF	; 255
    4f84:	8a 83       	std	Y+2, r24	; 0x02
 */
uint8_t String_u8Comp(uint8_t *Str1, uint8_t *Str2)
{
	uint8_t i = 0, Flag = 0;

	while (Str1[i] || Str2[i])
    4f86:	8a 81       	ldd	r24, Y+2	; 0x02
    4f88:	28 2f       	mov	r18, r24
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    4f90:	fc 01       	movw	r30, r24
    4f92:	e2 0f       	add	r30, r18
    4f94:	f3 1f       	adc	r31, r19
    4f96:	80 81       	ld	r24, Z
    4f98:	88 23       	and	r24, r24
    4f9a:	d9 f6       	brne	.-74     	; 0x4f52 <String_u8Comp+0x1c>
    4f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f9e:	28 2f       	mov	r18, r24
    4fa0:	30 e0       	ldi	r19, 0x00	; 0
    4fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    4fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    4fa6:	fc 01       	movw	r30, r24
    4fa8:	e2 0f       	add	r30, r18
    4faa:	f3 1f       	adc	r31, r19
    4fac:	80 81       	ld	r24, Z
    4fae:	88 23       	and	r24, r24
    4fb0:	81 f6       	brne	.-96     	; 0x4f52 <String_u8Comp+0x1c>
			Flag = 1;
			break;
		}
		i++;
	}
	return Flag;
    4fb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    4fb4:	26 96       	adiw	r28, 0x06	; 6
    4fb6:	0f b6       	in	r0, 0x3f	; 63
    4fb8:	f8 94       	cli
    4fba:	de bf       	out	0x3e, r29	; 62
    4fbc:	0f be       	out	0x3f, r0	; 63
    4fbe:	cd bf       	out	0x3d, r28	; 61
    4fc0:	cf 91       	pop	r28
    4fc2:	df 91       	pop	r29
    4fc4:	08 95       	ret

00004fc6 <Get_Pass>:
 * @brief send garbag value to slave to receive his own data
 * 
 * @param str receive data form slave
 */
void Get_Pass(uint8_t *str)
{
    4fc6:	0f 93       	push	r16
    4fc8:	1f 93       	push	r17
    4fca:	df 93       	push	r29
    4fcc:	cf 93       	push	r28
    4fce:	00 d0       	rcall	.+0      	; 0x4fd0 <Get_Pass+0xa>
    4fd0:	cd b7       	in	r28, 0x3d	; 61
    4fd2:	de b7       	in	r29, 0x3e	; 62
    4fd4:	9a 83       	std	Y+2, r25	; 0x02
    4fd6:	89 83       	std	Y+1, r24	; 0x01
	SPI_VidSendByte('p');
    4fd8:	80 e7       	ldi	r24, 0x70	; 112
    4fda:	0e 94 4b 0a 	call	0x1496	; 0x1496 <SPI_VidSendByte>
	str[0] = SPI_U8RecieveByte();
    4fde:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SPI_U8RecieveByte>
    4fe2:	e9 81       	ldd	r30, Y+1	; 0x01
    4fe4:	fa 81       	ldd	r31, Y+2	; 0x02
    4fe6:	80 83       	st	Z, r24
	SPI_VidSendByte('p');
    4fe8:	80 e7       	ldi	r24, 0x70	; 112
    4fea:	0e 94 4b 0a 	call	0x1496	; 0x1496 <SPI_VidSendByte>
	str[0] = SPI_U8RecieveByte();
    4fee:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SPI_U8RecieveByte>
    4ff2:	e9 81       	ldd	r30, Y+1	; 0x01
    4ff4:	fa 81       	ldd	r31, Y+2	; 0x02
    4ff6:	80 83       	st	Z, r24
	SPI_VidSendByte('p');
    4ff8:	80 e7       	ldi	r24, 0x70	; 112
    4ffa:	0e 94 4b 0a 	call	0x1496	; 0x1496 <SPI_VidSendByte>
	str[0] = SPI_U8RecieveByte();
    4ffe:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SPI_U8RecieveByte>
    5002:	e9 81       	ldd	r30, Y+1	; 0x01
    5004:	fa 81       	ldd	r31, Y+2	; 0x02
    5006:	80 83       	st	Z, r24
	SPI_VidSendByte('p');
    5008:	80 e7       	ldi	r24, 0x70	; 112
    500a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <SPI_VidSendByte>
	str[1] = SPI_U8RecieveByte();
    500e:	89 81       	ldd	r24, Y+1	; 0x01
    5010:	9a 81       	ldd	r25, Y+2	; 0x02
    5012:	8c 01       	movw	r16, r24
    5014:	0f 5f       	subi	r16, 0xFF	; 255
    5016:	1f 4f       	sbci	r17, 0xFF	; 255
    5018:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SPI_U8RecieveByte>
    501c:	f8 01       	movw	r30, r16
    501e:	80 83       	st	Z, r24
	SPI_VidSendByte('p');
    5020:	80 e7       	ldi	r24, 0x70	; 112
    5022:	0e 94 4b 0a 	call	0x1496	; 0x1496 <SPI_VidSendByte>
	str[2] = SPI_U8RecieveByte();
    5026:	89 81       	ldd	r24, Y+1	; 0x01
    5028:	9a 81       	ldd	r25, Y+2	; 0x02
    502a:	8c 01       	movw	r16, r24
    502c:	0e 5f       	subi	r16, 0xFE	; 254
    502e:	1f 4f       	sbci	r17, 0xFF	; 255
    5030:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SPI_U8RecieveByte>
    5034:	f8 01       	movw	r30, r16
    5036:	80 83       	st	Z, r24
	SPI_VidSendByte('X');
    5038:	88 e5       	ldi	r24, 0x58	; 88
    503a:	0e 94 4b 0a 	call	0x1496	; 0x1496 <SPI_VidSendByte>
	str[3] = SPI_U8RecieveByte();
    503e:	89 81       	ldd	r24, Y+1	; 0x01
    5040:	9a 81       	ldd	r25, Y+2	; 0x02
    5042:	8c 01       	movw	r16, r24
    5044:	0d 5f       	subi	r16, 0xFD	; 253
    5046:	1f 4f       	sbci	r17, 0xFF	; 255
    5048:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SPI_U8RecieveByte>
    504c:	f8 01       	movw	r30, r16
    504e:	80 83       	st	Z, r24
	str[4] = '\0';
    5050:	89 81       	ldd	r24, Y+1	; 0x01
    5052:	9a 81       	ldd	r25, Y+2	; 0x02
    5054:	fc 01       	movw	r30, r24
    5056:	34 96       	adiw	r30, 0x04	; 4
    5058:	10 82       	st	Z, r1
	SER_UARTvoidSendString(str);
    505a:	89 81       	ldd	r24, Y+1	; 0x01
    505c:	9a 81       	ldd	r25, Y+2	; 0x02
    505e:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
}
    5062:	0f 90       	pop	r0
    5064:	0f 90       	pop	r0
    5066:	cf 91       	pop	r28
    5068:	df 91       	pop	r29
    506a:	1f 91       	pop	r17
    506c:	0f 91       	pop	r16
    506e:	08 95       	ret

00005070 <String_u8ToNumb>:
 * 
 * @param Str Pointer to the first element in the array
 * @return uint32_t Number after Converted to Real Numb
 */
uint32_t String_u8ToNumb(uint8_t *Str)
{
    5070:	df 93       	push	r29
    5072:	cf 93       	push	r28
    5074:	cd b7       	in	r28, 0x3d	; 61
    5076:	de b7       	in	r29, 0x3e	; 62
    5078:	27 97       	sbiw	r28, 0x07	; 7
    507a:	0f b6       	in	r0, 0x3f	; 63
    507c:	f8 94       	cli
    507e:	de bf       	out	0x3e, r29	; 62
    5080:	0f be       	out	0x3f, r0	; 63
    5082:	cd bf       	out	0x3d, r28	; 61
    5084:	9f 83       	std	Y+7, r25	; 0x07
    5086:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t i;
	uint32_t Result = 0;
    5088:	19 82       	std	Y+1, r1	; 0x01
    508a:	1a 82       	std	Y+2, r1	; 0x02
    508c:	1b 82       	std	Y+3, r1	; 0x03
    508e:	1c 82       	std	Y+4, r1	; 0x04
	for (i = 0; Str[i]; i++)
    5090:	1d 82       	std	Y+5, r1	; 0x05
    5092:	29 c0       	rjmp	.+82     	; 0x50e6 <String_u8ToNumb+0x76>
	{
		Result = Result * 10 + Str[i] - '0';
    5094:	89 81       	ldd	r24, Y+1	; 0x01
    5096:	9a 81       	ldd	r25, Y+2	; 0x02
    5098:	ab 81       	ldd	r26, Y+3	; 0x03
    509a:	bc 81       	ldd	r27, Y+4	; 0x04
    509c:	2a e0       	ldi	r18, 0x0A	; 10
    509e:	30 e0       	ldi	r19, 0x00	; 0
    50a0:	40 e0       	ldi	r20, 0x00	; 0
    50a2:	50 e0       	ldi	r21, 0x00	; 0
    50a4:	bc 01       	movw	r22, r24
    50a6:	cd 01       	movw	r24, r26
    50a8:	0e 94 7d 29 	call	0x52fa	; 0x52fa <__mulsi3>
    50ac:	ab 01       	movw	r20, r22
    50ae:	bc 01       	movw	r22, r24
    50b0:	8d 81       	ldd	r24, Y+5	; 0x05
    50b2:	28 2f       	mov	r18, r24
    50b4:	30 e0       	ldi	r19, 0x00	; 0
    50b6:	8e 81       	ldd	r24, Y+6	; 0x06
    50b8:	9f 81       	ldd	r25, Y+7	; 0x07
    50ba:	fc 01       	movw	r30, r24
    50bc:	e2 0f       	add	r30, r18
    50be:	f3 1f       	adc	r31, r19
    50c0:	80 81       	ld	r24, Z
    50c2:	88 2f       	mov	r24, r24
    50c4:	90 e0       	ldi	r25, 0x00	; 0
    50c6:	a0 e0       	ldi	r26, 0x00	; 0
    50c8:	b0 e0       	ldi	r27, 0x00	; 0
    50ca:	84 0f       	add	r24, r20
    50cc:	95 1f       	adc	r25, r21
    50ce:	a6 1f       	adc	r26, r22
    50d0:	b7 1f       	adc	r27, r23
    50d2:	c0 97       	sbiw	r24, 0x30	; 48
    50d4:	a1 09       	sbc	r26, r1
    50d6:	b1 09       	sbc	r27, r1
    50d8:	89 83       	std	Y+1, r24	; 0x01
    50da:	9a 83       	std	Y+2, r25	; 0x02
    50dc:	ab 83       	std	Y+3, r26	; 0x03
    50de:	bc 83       	std	Y+4, r27	; 0x04
 */
uint32_t String_u8ToNumb(uint8_t *Str)
{
	uint8_t i;
	uint32_t Result = 0;
	for (i = 0; Str[i]; i++)
    50e0:	8d 81       	ldd	r24, Y+5	; 0x05
    50e2:	8f 5f       	subi	r24, 0xFF	; 255
    50e4:	8d 83       	std	Y+5, r24	; 0x05
    50e6:	8d 81       	ldd	r24, Y+5	; 0x05
    50e8:	28 2f       	mov	r18, r24
    50ea:	30 e0       	ldi	r19, 0x00	; 0
    50ec:	8e 81       	ldd	r24, Y+6	; 0x06
    50ee:	9f 81       	ldd	r25, Y+7	; 0x07
    50f0:	fc 01       	movw	r30, r24
    50f2:	e2 0f       	add	r30, r18
    50f4:	f3 1f       	adc	r31, r19
    50f6:	80 81       	ld	r24, Z
    50f8:	88 23       	and	r24, r24
    50fa:	61 f6       	brne	.-104    	; 0x5094 <String_u8ToNumb+0x24>
	{
		Result = Result * 10 + Str[i] - '0';
	}
	return Result;
    50fc:	89 81       	ldd	r24, Y+1	; 0x01
    50fe:	9a 81       	ldd	r25, Y+2	; 0x02
    5100:	ab 81       	ldd	r26, Y+3	; 0x03
    5102:	bc 81       	ldd	r27, Y+4	; 0x04
}
    5104:	bc 01       	movw	r22, r24
    5106:	cd 01       	movw	r24, r26
    5108:	27 96       	adiw	r28, 0x07	; 7
    510a:	0f b6       	in	r0, 0x3f	; 63
    510c:	f8 94       	cli
    510e:	de bf       	out	0x3e, r29	; 62
    5110:	0f be       	out	0x3f, r0	; 63
    5112:	cd bf       	out	0x3d, r28	; 61
    5114:	cf 91       	pop	r28
    5116:	df 91       	pop	r29
    5118:	08 95       	ret

0000511a <main>:
uint8_t volatile gflag = 0;
extern volatile uint8_t CallBackFLag;
extern volatile uint8_t BUTTONFLag;

int main()
{
    511a:	df 93       	push	r29
    511c:	cf 93       	push	r28
    511e:	cd b7       	in	r28, 0x3d	; 61
    5120:	de b7       	in	r29, 0x3e	; 62
    5122:	cc 54       	subi	r28, 0x4C	; 76
    5124:	d0 40       	sbci	r29, 0x00	; 0
    5126:	0f b6       	in	r0, 0x3f	; 63
    5128:	f8 94       	cli
    512a:	de bf       	out	0x3e, r29	; 62
    512c:	0f be       	out	0x3f, r0	; 63
    512e:	cd bf       	out	0x3d, r28	; 61
	uint8_t Data[55];
	uint8_t value = 0;
    5130:	1d 8a       	std	Y+21, r1	; 0x15
	uint8_t *Admin = (uint8_t *)"ADMIN";
    5132:	85 ea       	ldi	r24, 0xA5	; 165
    5134:	91 e0       	ldi	r25, 0x01	; 1
    5136:	9c 8b       	std	Y+20, r25	; 0x14
    5138:	8b 8b       	std	Y+19, r24	; 0x13
	uint8_t *User = (uint8_t *)"USER";
    513a:	8b ea       	ldi	r24, 0xAB	; 171
    513c:	91 e0       	ldi	r25, 0x01	; 1
    513e:	9a 8b       	std	Y+18, r25	; 0x12
    5140:	89 8b       	std	Y+17, r24	; 0x11

	APP_Init();
    5142:	0e 94 e1 20 	call	0x41c2	; 0x41c2 <APP_Init>
	//	UART_ENSendData(B1);

	while (1)
	{

		value = ADC_ATM();
    5146:	0e 94 0e 21 	call	0x421c	; 0x421c <ADC_ATM>
    514a:	8d 8b       	std	Y+21, r24	; 0x15
		if (value == TEMP_MODE)
    514c:	8d 89       	ldd	r24, Y+21	; 0x15
    514e:	81 33       	cpi	r24, 0x31	; 49
    5150:	19 f4       	brne	.+6      	; 0x5158 <main+0x3e>
		{

			TEMP();
    5152:	0e 94 90 26 	call	0x4d20	; 0x4d20 <TEMP>
    5156:	f7 cf       	rjmp	.-18     	; 0x5146 <main+0x2c>
		}
		else if (value == ATM_MODE)
    5158:	8d 89       	ldd	r24, Y+21	; 0x15
    515a:	82 33       	cpi	r24, 0x32	; 50
    515c:	09 f0       	breq	.+2      	; 0x5160 <main+0x46>
    515e:	54 c0       	rjmp	.+168    	; 0x5208 <main+0xee>
		{


			SER_UARTvoidSendString((uint8_t *)"you want ADMIN or USER MODE: ");
    5160:	80 eb       	ldi	r24, 0xB0	; 176
    5162:	91 e0       	ldi	r25, 0x01	; 1
    5164:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
			SER_UARTvoidReceiveString(Data);
    5168:	ce 01       	movw	r24, r28
    516a:	46 96       	adiw	r24, 0x16	; 22
    516c:	0e 94 44 07 	call	0xe88	; 0xe88 <SER_UARTvoidReceiveString>

			/* Admin */
			if (String_u8Comp(Data, Admin) == STRING_EQUL)
    5170:	ce 01       	movw	r24, r28
    5172:	46 96       	adiw	r24, 0x16	; 22
    5174:	2b 89       	ldd	r18, Y+19	; 0x13
    5176:	3c 89       	ldd	r19, Y+20	; 0x14
    5178:	b9 01       	movw	r22, r18
    517a:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <String_u8Comp>
    517e:	88 23       	and	r24, r24
    5180:	71 f4       	brne	.+28     	; 0x519e <main+0x84>
			{
				SPI_VidSendByte('f');
    5182:	86 e6       	ldi	r24, 0x66	; 102
    5184:	0e 94 4b 0a 	call	0x1496	; 0x1496 <SPI_VidSendByte>
				uint8_t B1 = SPI_U8RecieveByte();
    5188:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SPI_U8RecieveByte>
    518c:	88 8b       	std	Y+16, r24	; 0x10
				UART_ENSendData(B1);
    518e:	88 89       	ldd	r24, Y+16	; 0x10
    5190:	0e 94 b5 08 	call	0x116a	; 0x116a <UART_ENSendData>
				gflag = INVALID;
    5194:	10 92 5c 03 	sts	0x035C, r1

				ADMIN_Mode();
    5198:	0e 94 31 21 	call	0x4262	; 0x4262 <ADMIN_Mode>
    519c:	d4 cf       	rjmp	.-88     	; 0x5146 <main+0x2c>
			}
			else if (String_u8Comp(Data, User) == STRING_EQUL)
    519e:	ce 01       	movw	r24, r28
    51a0:	46 96       	adiw	r24, 0x16	; 22
    51a2:	29 89       	ldd	r18, Y+17	; 0x11
    51a4:	3a 89       	ldd	r19, Y+18	; 0x12
    51a6:	b9 01       	movw	r22, r18
    51a8:	0e 94 9b 27 	call	0x4f36	; 0x4f36 <String_u8Comp>
    51ac:	88 23       	and	r24, r24
    51ae:	39 f5       	brne	.+78     	; 0x51fe <main+0xe4>
			{
				SPI_VidSendByte('f');
    51b0:	86 e6       	ldi	r24, 0x66	; 102
    51b2:	0e 94 4b 0a 	call	0x1496	; 0x1496 <SPI_VidSendByte>
				uint8_t B1 = SPI_U8RecieveByte();
    51b6:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <SPI_U8RecieveByte>
    51ba:	8f 87       	std	Y+15, r24	; 0x0f
				UART_ENSendData(B1);
    51bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    51be:	0e 94 b5 08 	call	0x116a	; 0x116a <UART_ENSendData>
				static uint8_t FlFag = 5;
				gflag = VALID;
    51c2:	81 e0       	ldi	r24, 0x01	; 1
    51c4:	80 93 5c 03 	sts	0x035C, r24
				//					SPI_VidSendByte('g');
				//					card_gflag = SPI_U8RecieveByte();
				//					FlFag = VALID;
				//				}

				lcd_clear();
    51c8:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <lcd_clear>
				lcd_sendString((uint8_t *)"waiting for card to insert");
    51cc:	8e ec       	ldi	r24, 0xCE	; 206
    51ce:	91 e0       	ldi	r25, 0x01	; 1
    51d0:	0e 94 75 1d 	call	0x3aea	; 0x3aea <lcd_sendString>

				SER_UARTvoidSendString((uint8_t *)"waiting for card to insert");
    51d4:	8e ec       	ldi	r24, 0xCE	; 206
    51d6:	91 e0       	ldi	r25, 0x01	; 1
    51d8:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
				//				while (CallBackFLag != VALID)
				//					;
				//				USER_Mode();
				while (BUTTONFLag != VALID)
    51dc:	80 91 5a 03 	lds	r24, 0x035A
    51e0:	81 30       	cpi	r24, 0x01	; 1
    51e2:	e1 f7       	brne	.-8      	; 0x51dc <main+0xc2>
					;

				if(	CallBackFLag == VALID){
    51e4:	80 91 59 03 	lds	r24, 0x0359
    51e8:	81 30       	cpi	r24, 0x01	; 1
    51ea:	31 f4       	brne	.+12     	; 0x51f8 <main+0xde>
					SER_UARTvoidSendString("USERMODE");
    51ec:	89 ee       	ldi	r24, 0xE9	; 233
    51ee:	91 e0       	ldi	r25, 0x01	; 1
    51f0:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
					USER_Mode();
    51f4:	0e 94 a7 21 	call	0x434e	; 0x434e <USER_Mode>
				}
				BUTTONFLag=INVALID;
    51f8:	10 92 5a 03 	sts	0x035A, r1
    51fc:	a4 cf       	rjmp	.-184    	; 0x5146 <main+0x2c>
			}
			else {
				SER_UARTvoidSendString((uint8_t *)"Wrong Enter");
    51fe:	82 ef       	ldi	r24, 0xF2	; 242
    5200:	91 e0       	ldi	r25, 0x01	; 1
    5202:	0e 94 17 07 	call	0xe2e	; 0xe2e <SER_UARTvoidSendString>
    5206:	9f cf       	rjmp	.-194    	; 0x5146 <main+0x2c>
			}
		}
		else
		{
			lcd_clear();
    5208:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <lcd_clear>
			lcd_sendString((uint8_t *)"Wrong Enter");
    520c:	82 ef       	ldi	r24, 0xF2	; 242
    520e:	91 e0       	ldi	r25, 0x01	; 1
    5210:	0e 94 75 1d 	call	0x3aea	; 0x3aea <lcd_sendString>
    5214:	80 e0       	ldi	r24, 0x00	; 0
    5216:	90 e0       	ldi	r25, 0x00	; 0
    5218:	aa e7       	ldi	r26, 0x7A	; 122
    521a:	b4 e4       	ldi	r27, 0x44	; 68
    521c:	8b 87       	std	Y+11, r24	; 0x0b
    521e:	9c 87       	std	Y+12, r25	; 0x0c
    5220:	ad 87       	std	Y+13, r26	; 0x0d
    5222:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5224:	6b 85       	ldd	r22, Y+11	; 0x0b
    5226:	7c 85       	ldd	r23, Y+12	; 0x0c
    5228:	8d 85       	ldd	r24, Y+13	; 0x0d
    522a:	9e 85       	ldd	r25, Y+14	; 0x0e
    522c:	20 e0       	ldi	r18, 0x00	; 0
    522e:	30 e0       	ldi	r19, 0x00	; 0
    5230:	4a ef       	ldi	r20, 0xFA	; 250
    5232:	54 e4       	ldi	r21, 0x44	; 68
    5234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5238:	dc 01       	movw	r26, r24
    523a:	cb 01       	movw	r24, r22
    523c:	8f 83       	std	Y+7, r24	; 0x07
    523e:	98 87       	std	Y+8, r25	; 0x08
    5240:	a9 87       	std	Y+9, r26	; 0x09
    5242:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5244:	6f 81       	ldd	r22, Y+7	; 0x07
    5246:	78 85       	ldd	r23, Y+8	; 0x08
    5248:	89 85       	ldd	r24, Y+9	; 0x09
    524a:	9a 85       	ldd	r25, Y+10	; 0x0a
    524c:	20 e0       	ldi	r18, 0x00	; 0
    524e:	30 e0       	ldi	r19, 0x00	; 0
    5250:	40 e8       	ldi	r20, 0x80	; 128
    5252:	5f e3       	ldi	r21, 0x3F	; 63
    5254:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5258:	88 23       	and	r24, r24
    525a:	2c f4       	brge	.+10     	; 0x5266 <main+0x14c>
		__ticks = 1;
    525c:	81 e0       	ldi	r24, 0x01	; 1
    525e:	90 e0       	ldi	r25, 0x00	; 0
    5260:	9e 83       	std	Y+6, r25	; 0x06
    5262:	8d 83       	std	Y+5, r24	; 0x05
    5264:	3f c0       	rjmp	.+126    	; 0x52e4 <main+0x1ca>
	else if (__tmp > 65535)
    5266:	6f 81       	ldd	r22, Y+7	; 0x07
    5268:	78 85       	ldd	r23, Y+8	; 0x08
    526a:	89 85       	ldd	r24, Y+9	; 0x09
    526c:	9a 85       	ldd	r25, Y+10	; 0x0a
    526e:	20 e0       	ldi	r18, 0x00	; 0
    5270:	3f ef       	ldi	r19, 0xFF	; 255
    5272:	4f e7       	ldi	r20, 0x7F	; 127
    5274:	57 e4       	ldi	r21, 0x47	; 71
    5276:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    527a:	18 16       	cp	r1, r24
    527c:	4c f5       	brge	.+82     	; 0x52d0 <main+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    527e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5280:	7c 85       	ldd	r23, Y+12	; 0x0c
    5282:	8d 85       	ldd	r24, Y+13	; 0x0d
    5284:	9e 85       	ldd	r25, Y+14	; 0x0e
    5286:	20 e0       	ldi	r18, 0x00	; 0
    5288:	30 e0       	ldi	r19, 0x00	; 0
    528a:	40 e2       	ldi	r20, 0x20	; 32
    528c:	51 e4       	ldi	r21, 0x41	; 65
    528e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5292:	dc 01       	movw	r26, r24
    5294:	cb 01       	movw	r24, r22
    5296:	bc 01       	movw	r22, r24
    5298:	cd 01       	movw	r24, r26
    529a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    529e:	dc 01       	movw	r26, r24
    52a0:	cb 01       	movw	r24, r22
    52a2:	9e 83       	std	Y+6, r25	; 0x06
    52a4:	8d 83       	std	Y+5, r24	; 0x05
    52a6:	0f c0       	rjmp	.+30     	; 0x52c6 <main+0x1ac>
    52a8:	88 ec       	ldi	r24, 0xC8	; 200
    52aa:	90 e0       	ldi	r25, 0x00	; 0
    52ac:	9c 83       	std	Y+4, r25	; 0x04
    52ae:	8b 83       	std	Y+3, r24	; 0x03
    52b0:	8b 81       	ldd	r24, Y+3	; 0x03
    52b2:	9c 81       	ldd	r25, Y+4	; 0x04
    52b4:	01 97       	sbiw	r24, 0x01	; 1
    52b6:	f1 f7       	brne	.-4      	; 0x52b4 <main+0x19a>
    52b8:	9c 83       	std	Y+4, r25	; 0x04
    52ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52bc:	8d 81       	ldd	r24, Y+5	; 0x05
    52be:	9e 81       	ldd	r25, Y+6	; 0x06
    52c0:	01 97       	sbiw	r24, 0x01	; 1
    52c2:	9e 83       	std	Y+6, r25	; 0x06
    52c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52c6:	8d 81       	ldd	r24, Y+5	; 0x05
    52c8:	9e 81       	ldd	r25, Y+6	; 0x06
    52ca:	00 97       	sbiw	r24, 0x00	; 0
    52cc:	69 f7       	brne	.-38     	; 0x52a8 <main+0x18e>
    52ce:	3b cf       	rjmp	.-394    	; 0x5146 <main+0x2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52d0:	6f 81       	ldd	r22, Y+7	; 0x07
    52d2:	78 85       	ldd	r23, Y+8	; 0x08
    52d4:	89 85       	ldd	r24, Y+9	; 0x09
    52d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    52d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52dc:	dc 01       	movw	r26, r24
    52de:	cb 01       	movw	r24, r22
    52e0:	9e 83       	std	Y+6, r25	; 0x06
    52e2:	8d 83       	std	Y+5, r24	; 0x05
    52e4:	8d 81       	ldd	r24, Y+5	; 0x05
    52e6:	9e 81       	ldd	r25, Y+6	; 0x06
    52e8:	9a 83       	std	Y+2, r25	; 0x02
    52ea:	89 83       	std	Y+1, r24	; 0x01
    52ec:	89 81       	ldd	r24, Y+1	; 0x01
    52ee:	9a 81       	ldd	r25, Y+2	; 0x02
    52f0:	01 97       	sbiw	r24, 0x01	; 1
    52f2:	f1 f7       	brne	.-4      	; 0x52f0 <main+0x1d6>
    52f4:	9a 83       	std	Y+2, r25	; 0x02
    52f6:	89 83       	std	Y+1, r24	; 0x01
    52f8:	26 cf       	rjmp	.-436    	; 0x5146 <main+0x2c>

000052fa <__mulsi3>:
    52fa:	62 9f       	mul	r22, r18
    52fc:	d0 01       	movw	r26, r0
    52fe:	73 9f       	mul	r23, r19
    5300:	f0 01       	movw	r30, r0
    5302:	82 9f       	mul	r24, r18
    5304:	e0 0d       	add	r30, r0
    5306:	f1 1d       	adc	r31, r1
    5308:	64 9f       	mul	r22, r20
    530a:	e0 0d       	add	r30, r0
    530c:	f1 1d       	adc	r31, r1
    530e:	92 9f       	mul	r25, r18
    5310:	f0 0d       	add	r31, r0
    5312:	83 9f       	mul	r24, r19
    5314:	f0 0d       	add	r31, r0
    5316:	74 9f       	mul	r23, r20
    5318:	f0 0d       	add	r31, r0
    531a:	65 9f       	mul	r22, r21
    531c:	f0 0d       	add	r31, r0
    531e:	99 27       	eor	r25, r25
    5320:	72 9f       	mul	r23, r18
    5322:	b0 0d       	add	r27, r0
    5324:	e1 1d       	adc	r30, r1
    5326:	f9 1f       	adc	r31, r25
    5328:	63 9f       	mul	r22, r19
    532a:	b0 0d       	add	r27, r0
    532c:	e1 1d       	adc	r30, r1
    532e:	f9 1f       	adc	r31, r25
    5330:	bd 01       	movw	r22, r26
    5332:	cf 01       	movw	r24, r30
    5334:	11 24       	eor	r1, r1
    5336:	08 95       	ret

00005338 <__udivmodhi4>:
    5338:	aa 1b       	sub	r26, r26
    533a:	bb 1b       	sub	r27, r27
    533c:	51 e1       	ldi	r21, 0x11	; 17
    533e:	07 c0       	rjmp	.+14     	; 0x534e <__udivmodhi4_ep>

00005340 <__udivmodhi4_loop>:
    5340:	aa 1f       	adc	r26, r26
    5342:	bb 1f       	adc	r27, r27
    5344:	a6 17       	cp	r26, r22
    5346:	b7 07       	cpc	r27, r23
    5348:	10 f0       	brcs	.+4      	; 0x534e <__udivmodhi4_ep>
    534a:	a6 1b       	sub	r26, r22
    534c:	b7 0b       	sbc	r27, r23

0000534e <__udivmodhi4_ep>:
    534e:	88 1f       	adc	r24, r24
    5350:	99 1f       	adc	r25, r25
    5352:	5a 95       	dec	r21
    5354:	a9 f7       	brne	.-22     	; 0x5340 <__udivmodhi4_loop>
    5356:	80 95       	com	r24
    5358:	90 95       	com	r25
    535a:	bc 01       	movw	r22, r24
    535c:	cd 01       	movw	r24, r26
    535e:	08 95       	ret

00005360 <__udivmodsi4>:
    5360:	a1 e2       	ldi	r26, 0x21	; 33
    5362:	1a 2e       	mov	r1, r26
    5364:	aa 1b       	sub	r26, r26
    5366:	bb 1b       	sub	r27, r27
    5368:	fd 01       	movw	r30, r26
    536a:	0d c0       	rjmp	.+26     	; 0x5386 <__udivmodsi4_ep>

0000536c <__udivmodsi4_loop>:
    536c:	aa 1f       	adc	r26, r26
    536e:	bb 1f       	adc	r27, r27
    5370:	ee 1f       	adc	r30, r30
    5372:	ff 1f       	adc	r31, r31
    5374:	a2 17       	cp	r26, r18
    5376:	b3 07       	cpc	r27, r19
    5378:	e4 07       	cpc	r30, r20
    537a:	f5 07       	cpc	r31, r21
    537c:	20 f0       	brcs	.+8      	; 0x5386 <__udivmodsi4_ep>
    537e:	a2 1b       	sub	r26, r18
    5380:	b3 0b       	sbc	r27, r19
    5382:	e4 0b       	sbc	r30, r20
    5384:	f5 0b       	sbc	r31, r21

00005386 <__udivmodsi4_ep>:
    5386:	66 1f       	adc	r22, r22
    5388:	77 1f       	adc	r23, r23
    538a:	88 1f       	adc	r24, r24
    538c:	99 1f       	adc	r25, r25
    538e:	1a 94       	dec	r1
    5390:	69 f7       	brne	.-38     	; 0x536c <__udivmodsi4_loop>
    5392:	60 95       	com	r22
    5394:	70 95       	com	r23
    5396:	80 95       	com	r24
    5398:	90 95       	com	r25
    539a:	9b 01       	movw	r18, r22
    539c:	ac 01       	movw	r20, r24
    539e:	bd 01       	movw	r22, r26
    53a0:	cf 01       	movw	r24, r30
    53a2:	08 95       	ret

000053a4 <__prologue_saves__>:
    53a4:	2f 92       	push	r2
    53a6:	3f 92       	push	r3
    53a8:	4f 92       	push	r4
    53aa:	5f 92       	push	r5
    53ac:	6f 92       	push	r6
    53ae:	7f 92       	push	r7
    53b0:	8f 92       	push	r8
    53b2:	9f 92       	push	r9
    53b4:	af 92       	push	r10
    53b6:	bf 92       	push	r11
    53b8:	cf 92       	push	r12
    53ba:	df 92       	push	r13
    53bc:	ef 92       	push	r14
    53be:	ff 92       	push	r15
    53c0:	0f 93       	push	r16
    53c2:	1f 93       	push	r17
    53c4:	cf 93       	push	r28
    53c6:	df 93       	push	r29
    53c8:	cd b7       	in	r28, 0x3d	; 61
    53ca:	de b7       	in	r29, 0x3e	; 62
    53cc:	ca 1b       	sub	r28, r26
    53ce:	db 0b       	sbc	r29, r27
    53d0:	0f b6       	in	r0, 0x3f	; 63
    53d2:	f8 94       	cli
    53d4:	de bf       	out	0x3e, r29	; 62
    53d6:	0f be       	out	0x3f, r0	; 63
    53d8:	cd bf       	out	0x3d, r28	; 61
    53da:	09 94       	ijmp

000053dc <__epilogue_restores__>:
    53dc:	2a 88       	ldd	r2, Y+18	; 0x12
    53de:	39 88       	ldd	r3, Y+17	; 0x11
    53e0:	48 88       	ldd	r4, Y+16	; 0x10
    53e2:	5f 84       	ldd	r5, Y+15	; 0x0f
    53e4:	6e 84       	ldd	r6, Y+14	; 0x0e
    53e6:	7d 84       	ldd	r7, Y+13	; 0x0d
    53e8:	8c 84       	ldd	r8, Y+12	; 0x0c
    53ea:	9b 84       	ldd	r9, Y+11	; 0x0b
    53ec:	aa 84       	ldd	r10, Y+10	; 0x0a
    53ee:	b9 84       	ldd	r11, Y+9	; 0x09
    53f0:	c8 84       	ldd	r12, Y+8	; 0x08
    53f2:	df 80       	ldd	r13, Y+7	; 0x07
    53f4:	ee 80       	ldd	r14, Y+6	; 0x06
    53f6:	fd 80       	ldd	r15, Y+5	; 0x05
    53f8:	0c 81       	ldd	r16, Y+4	; 0x04
    53fa:	1b 81       	ldd	r17, Y+3	; 0x03
    53fc:	aa 81       	ldd	r26, Y+2	; 0x02
    53fe:	b9 81       	ldd	r27, Y+1	; 0x01
    5400:	ce 0f       	add	r28, r30
    5402:	d1 1d       	adc	r29, r1
    5404:	0f b6       	in	r0, 0x3f	; 63
    5406:	f8 94       	cli
    5408:	de bf       	out	0x3e, r29	; 62
    540a:	0f be       	out	0x3f, r0	; 63
    540c:	cd bf       	out	0x3d, r28	; 61
    540e:	ed 01       	movw	r28, r26
    5410:	08 95       	ret

00005412 <_exit>:
    5412:	f8 94       	cli

00005414 <__stop_program>:
    5414:	ff cf       	rjmp	.-2      	; 0x5414 <__stop_program>
