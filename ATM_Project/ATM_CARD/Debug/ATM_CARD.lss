
ATM_CARD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e6  00800060  00004200  00004294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d7  00800146  00800146  0000437a  2**0
                  ALLOC
  3 .stab         000047ac  00000000  00000000  0000437c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002047  00000000  00000000  00008b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000ab6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000acaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ae1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ca68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d953  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e700  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e860  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000eaed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f2bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__vector_1>
       8:	0c 94 ca 0c 	jmp	0x1994	; 0x1994 <__vector_2>
       c:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 0e 08 	jmp	0x101c	; 0x101c <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 34       	cpi	r26, 0x46	; 70
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e4       	ldi	r26, 0x46	; 70
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 31       	cpi	r26, 0x1D	; 29
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 22 20 	call	0x4044	; 0x4044 <main>
      8a:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c7 20 	jmp	0x418e	; 0x418e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e2       	ldi	r26, 0x2F	; 47
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d3 20 	jmp	0x41a6	; 0x41a6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d3 20 	jmp	0x41a6	; 0x41a6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c7 20 	jmp	0x418e	; 0x418e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e2       	ldi	r24, 0x2F	; 47
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d3 20 	jmp	0x41a6	; 0x41a6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d3 20 	jmp	0x41a6	; 0x41a6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d3 20 	jmp	0x41a6	; 0x41a6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f3 20 	jmp	0x41e6	; 0x41e6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <SER_UARTvoidSendString>:
 * @brief Send String
 * 
 * @param Str String is sending
 */
void SER_UARTvoidSendString(uint8_t *Str)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <SER_UARTvoidSendString+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i = 0;
     b56:	19 82       	std	Y+1, r1	; 0x01
    for (i = 0; Str[i]; i++)
     b58:	19 82       	std	Y+1, r1	; 0x01
     b5a:	0e c0       	rjmp	.+28     	; 0xb78 <SER_UARTvoidSendString+0x32>
    {
        UART_ENSendData(Str[i]);
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	28 2f       	mov	r18, r24
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	9b 81       	ldd	r25, Y+3	; 0x03
     b66:	fc 01       	movw	r30, r24
     b68:	e2 0f       	add	r30, r18
     b6a:	f3 1f       	adc	r31, r19
     b6c:	80 81       	ld	r24, Z
     b6e:	0e 94 41 07 	call	0xe82	; 0xe82 <UART_ENSendData>
 * @param Str String is sending
 */
void SER_UARTvoidSendString(uint8_t *Str)
{
    uint8_t i = 0;
    for (i = 0; Str[i]; i++)
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	8f 5f       	subi	r24, 0xFF	; 255
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	8a 81       	ldd	r24, Y+2	; 0x02
     b80:	9b 81       	ldd	r25, Y+3	; 0x03
     b82:	fc 01       	movw	r30, r24
     b84:	e2 0f       	add	r30, r18
     b86:	f3 1f       	adc	r31, r19
     b88:	80 81       	ld	r24, Z
     b8a:	88 23       	and	r24, r24
     b8c:	39 f7       	brne	.-50     	; 0xb5c <SER_UARTvoidSendString+0x16>
    {
        UART_ENSendData(Str[i]);
    }
    UART_ENSendData('\r');
     b8e:	8d e0       	ldi	r24, 0x0D	; 13
     b90:	0e 94 41 07 	call	0xe82	; 0xe82 <UART_ENSendData>
}
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	08 95       	ret

00000ba0 <SER_UARTvoidReceiveString>:
 * @brief Recevie String
 * 
 * @param Str Store String in Str
 */
void SER_UARTvoidReceiveString(uint8_t *Str)
{
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	df 93       	push	r29
     ba6:	cf 93       	push	r28
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <SER_UARTvoidReceiveString+0xa>
     baa:	0f 92       	push	r0
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	9b 83       	std	Y+3, r25	; 0x03
     bb2:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i = 0;
     bb4:	19 82       	std	Y+1, r1	; 0x01
    Str[i] = UART_u8ReceiveData();
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	9b 81       	ldd	r25, Y+3	; 0x03
     bc0:	8c 01       	movw	r16, r24
     bc2:	02 0f       	add	r16, r18
     bc4:	13 1f       	adc	r17, r19
     bc6:	0e 94 6b 07 	call	0xed6	; 0xed6 <UART_u8ReceiveData>
     bca:	f8 01       	movw	r30, r16
     bcc:	80 83       	st	Z, r24
     bce:	0f c0       	rjmp	.+30     	; 0xbee <SER_UARTvoidReceiveString+0x4e>
    while (Str[i] != '\r')
    {
        i++;
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	8f 5f       	subi	r24, 0xFF	; 255
     bd4:	89 83       	std	Y+1, r24	; 0x01
        Str[i] = UART_u8ReceiveData();
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	9b 81       	ldd	r25, Y+3	; 0x03
     be0:	8c 01       	movw	r16, r24
     be2:	02 0f       	add	r16, r18
     be4:	13 1f       	adc	r17, r19
     be6:	0e 94 6b 07 	call	0xed6	; 0xed6 <UART_u8ReceiveData>
     bea:	f8 01       	movw	r30, r16
     bec:	80 83       	st	Z, r24
 */
void SER_UARTvoidReceiveString(uint8_t *Str)
{
    uint8_t i = 0;
    Str[i] = UART_u8ReceiveData();
    while (Str[i] != '\r')
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	9b 81       	ldd	r25, Y+3	; 0x03
     bf8:	fc 01       	movw	r30, r24
     bfa:	e2 0f       	add	r30, r18
     bfc:	f3 1f       	adc	r31, r19
     bfe:	80 81       	ld	r24, Z
     c00:	8d 30       	cpi	r24, 0x0D	; 13
     c02:	31 f7       	brne	.-52     	; 0xbd0 <SER_UARTvoidReceiveString+0x30>
    {
        i++;
        Str[i] = UART_u8ReceiveData();
    }
    /* replace to NULL */
    Str[i] = 0;
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	9b 81       	ldd	r25, Y+3	; 0x03
     c0e:	fc 01       	movw	r30, r24
     c10:	e2 0f       	add	r30, r18
     c12:	f3 1f       	adc	r31, r19
     c14:	10 82       	st	Z, r1
}
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret

00000c26 <SER_UARTvoidReceiveStringNoBLOCKING>:
 * @brief Receive No Blocking 
 * 
 * @param Str Store String in Str
 */
void SER_UARTvoidReceiveStringNoBLOCKING(uint8_t *Str)
{
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <SER_UARTvoidReceiveStringNoBLOCKING+0x6>
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <SER_UARTvoidReceiveStringNoBLOCKING+0x8>
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	9c 83       	std	Y+4, r25	; 0x04
     c34:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t i = 0, Data = 0;
     c36:	19 82       	std	Y+1, r1	; 0x01
     c38:	1a 82       	std	Y+2, r1	; 0x02
    do
    {
        if (UART_u8ReceiveNoBlock(&Data))
     c3a:	ce 01       	movw	r24, r28
     c3c:	02 96       	adiw	r24, 0x02	; 2
     c3e:	0e 94 a4 07 	call	0xf48	; 0xf48 <UART_u8ReceiveNoBlock>
     c42:	88 23       	and	r24, r24
     c44:	c1 f0       	breq	.+48     	; 0xc76 <SER_UARTvoidReceiveStringNoBLOCKING+0x50>
        {
            Str[i] = Data;
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	9c 81       	ldd	r25, Y+4	; 0x04
     c50:	fc 01       	movw	r30, r24
     c52:	e2 0f       	add	r30, r18
     c54:	f3 1f       	adc	r31, r19
     c56:	8a 81       	ldd	r24, Y+2	; 0x02
     c58:	80 83       	st	Z, r24
            i++;
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	8f 5f       	subi	r24, 0xFF	; 255
     c5e:	89 83       	std	Y+1, r24	; 0x01
        }
        else
        {
            break;
        }
    } while (Str[i] - 1 != '\r');
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	8b 81       	ldd	r24, Y+3	; 0x03
     c68:	9c 81       	ldd	r25, Y+4	; 0x04
     c6a:	fc 01       	movw	r30, r24
     c6c:	e2 0f       	add	r30, r18
     c6e:	f3 1f       	adc	r31, r19
     c70:	80 81       	ld	r24, Z
     c72:	8e 30       	cpi	r24, 0x0E	; 14
     c74:	11 f7       	brne	.-60     	; 0xc3a <SER_UARTvoidReceiveStringNoBLOCKING+0x14>

    /* replace to NULL */
    Str[i - 1] = '\0';
     c76:	89 81       	ldd	r24, Y+1	; 0x01
     c78:	88 2f       	mov	r24, r24
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	9c 01       	movw	r18, r24
     c7e:	21 50       	subi	r18, 0x01	; 1
     c80:	30 40       	sbci	r19, 0x00	; 0
     c82:	8b 81       	ldd	r24, Y+3	; 0x03
     c84:	9c 81       	ldd	r25, Y+4	; 0x04
     c86:	fc 01       	movw	r30, r24
     c88:	e2 0f       	add	r30, r18
     c8a:	f3 1f       	adc	r31, r19
     c8c:	10 82       	st	Z, r1
}
     c8e:	0f 90       	pop	r0
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	cf 91       	pop	r28
     c98:	df 91       	pop	r29
     c9a:	08 95       	ret

00000c9c <SER_UARTvoidSendLongNum>:
 * @brief Send Number
 * 
 * @param Numb Number
 */
void SER_UARTvoidSendLongNum(uint32_t Numb)
{
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	00 d0       	rcall	.+0      	; 0xca2 <SER_UARTvoidSendLongNum+0x6>
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <SER_UARTvoidSendLongNum+0x8>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	69 83       	std	Y+1, r22	; 0x01
     caa:	7a 83       	std	Y+2, r23	; 0x02
     cac:	8b 83       	std	Y+3, r24	; 0x03
     cae:	9c 83       	std	Y+4, r25	; 0x04
    UART_ENSendData((uint8_t)(Numb & 0x000000FF));
     cb0:	89 81       	ldd	r24, Y+1	; 0x01
     cb2:	0e 94 41 07 	call	0xe82	; 0xe82 <UART_ENSendData>
    UART_ENSendData((uint8_t)((Numb >> 8) & 0x000000FF));
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	ab 81       	ldd	r26, Y+3	; 0x03
     cbc:	bc 81       	ldd	r27, Y+4	; 0x04
     cbe:	89 2f       	mov	r24, r25
     cc0:	9a 2f       	mov	r25, r26
     cc2:	ab 2f       	mov	r26, r27
     cc4:	bb 27       	eor	r27, r27
     cc6:	0e 94 41 07 	call	0xe82	; 0xe82 <UART_ENSendData>
    UART_ENSendData((uint8_t)((Numb >> 16) & 0x000000FF));
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	9a 81       	ldd	r25, Y+2	; 0x02
     cce:	ab 81       	ldd	r26, Y+3	; 0x03
     cd0:	bc 81       	ldd	r27, Y+4	; 0x04
     cd2:	cd 01       	movw	r24, r26
     cd4:	aa 27       	eor	r26, r26
     cd6:	bb 27       	eor	r27, r27
     cd8:	0e 94 41 07 	call	0xe82	; 0xe82 <UART_ENSendData>
    UART_ENSendData((uint8_t)((Numb >> 24) & 0x000000FF));
     cdc:	89 81       	ldd	r24, Y+1	; 0x01
     cde:	9a 81       	ldd	r25, Y+2	; 0x02
     ce0:	ab 81       	ldd	r26, Y+3	; 0x03
     ce2:	bc 81       	ldd	r27, Y+4	; 0x04
     ce4:	8b 2f       	mov	r24, r27
     ce6:	99 27       	eor	r25, r25
     ce8:	aa 27       	eor	r26, r26
     cea:	bb 27       	eor	r27, r27
     cec:	0e 94 41 07 	call	0xe82	; 0xe82 <UART_ENSendData>
}
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	0f 90       	pop	r0
     cf8:	cf 91       	pop	r28
     cfa:	df 91       	pop	r29
     cfc:	08 95       	ret

00000cfe <SER_UARTu32ReceiveLongNum>:
 * @brief Receive Number
 * 
 * @return Number
 */
uint32_t SER_UARTu32ReceiveLongNum(void)
{
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	28 97       	sbiw	r28, 0x08	; 8
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
    /* Receive 32Bit divide on 4 Times */
    uint8_t B1 = UART_u8ReceiveData();
     d12:	0e 94 6b 07 	call	0xed6	; 0xed6 <UART_u8ReceiveData>
     d16:	88 87       	std	Y+8, r24	; 0x08
    uint8_t B2 = UART_u8ReceiveData();
     d18:	0e 94 6b 07 	call	0xed6	; 0xed6 <UART_u8ReceiveData>
     d1c:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t B3 = UART_u8ReceiveData();
     d1e:	0e 94 6b 07 	call	0xed6	; 0xed6 <UART_u8ReceiveData>
     d22:	8e 83       	std	Y+6, r24	; 0x06
    uint8_t B4 = UART_u8ReceiveData();
     d24:	0e 94 6b 07 	call	0xed6	; 0xed6 <UART_u8ReceiveData>
     d28:	8d 83       	std	Y+5, r24	; 0x05

    /*  */
    uint32_t u32_Numb = B1 | ((uint32_t)B2 << 8) | ((uint32_t)B3 << 16) | ((uint32_t)B4 << 24);
     d2a:	88 85       	ldd	r24, Y+8	; 0x08
     d2c:	28 2f       	mov	r18, r24
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	40 e0       	ldi	r20, 0x00	; 0
     d32:	50 e0       	ldi	r21, 0x00	; 0
     d34:	8f 81       	ldd	r24, Y+7	; 0x07
     d36:	88 2f       	mov	r24, r24
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	a0 e0       	ldi	r26, 0x00	; 0
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	ba 2f       	mov	r27, r26
     d40:	a9 2f       	mov	r26, r25
     d42:	98 2f       	mov	r25, r24
     d44:	88 27       	eor	r24, r24
     d46:	28 2b       	or	r18, r24
     d48:	39 2b       	or	r19, r25
     d4a:	4a 2b       	or	r20, r26
     d4c:	5b 2b       	or	r21, r27
     d4e:	8e 81       	ldd	r24, Y+6	; 0x06
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	a0 e0       	ldi	r26, 0x00	; 0
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	dc 01       	movw	r26, r24
     d5a:	99 27       	eor	r25, r25
     d5c:	88 27       	eor	r24, r24
     d5e:	28 2b       	or	r18, r24
     d60:	39 2b       	or	r19, r25
     d62:	4a 2b       	or	r20, r26
     d64:	5b 2b       	or	r21, r27
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	88 2f       	mov	r24, r24
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	a0 e0       	ldi	r26, 0x00	; 0
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	b8 2f       	mov	r27, r24
     d72:	aa 27       	eor	r26, r26
     d74:	99 27       	eor	r25, r25
     d76:	88 27       	eor	r24, r24
     d78:	82 2b       	or	r24, r18
     d7a:	93 2b       	or	r25, r19
     d7c:	a4 2b       	or	r26, r20
     d7e:	b5 2b       	or	r27, r21
     d80:	89 83       	std	Y+1, r24	; 0x01
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	ab 83       	std	Y+3, r26	; 0x03
     d86:	bc 83       	std	Y+4, r27	; 0x04

    return u32_Numb;
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	ab 81       	ldd	r26, Y+3	; 0x03
     d8e:	bc 81       	ldd	r27, Y+4	; 0x04
}
     d90:	bc 01       	movw	r22, r24
     d92:	cd 01       	movw	r24, r26
     d94:	28 96       	adiw	r28, 0x08	; 8
     d96:	0f b6       	in	r0, 0x3f	; 63
     d98:	f8 94       	cli
     d9a:	de bf       	out	0x3e, r29	; 62
     d9c:	0f be       	out	0x3f, r0	; 63
     d9e:	cd bf       	out	0x3d, r28	; 61
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <UART_ENInit>:
 * @brief Initialized UART 
 * 
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENInit(void)
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	0f 92       	push	r0
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
    EN_ERRORSTATE_t Enstate;
    Enstate = E_OK;
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	89 83       	std	Y+1, r24	; 0x01
    /* Clear  URSEL to update UBRRH*/
    CLRBIT(UCSRC, URSEL);
     db4:	a0 e4       	ldi	r26, 0x40	; 64
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e0 e4       	ldi	r30, 0x40	; 64
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	8f 77       	andi	r24, 0x7F	; 127
     dc0:	8c 93       	st	X, r24
    /* Boud Rate */
    UBRRH = HIGHUBRR;
     dc2:	e0 e4       	ldi	r30, 0x40	; 64
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	10 82       	st	Z, r1
    UBRRL = LOWUBRR;
     dc8:	e9 e2       	ldi	r30, 0x29	; 41
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	83 e3       	ldi	r24, 0x33	; 51
     dce:	80 83       	st	Z, r24
#if UART_SPEED == DOUBLE
    SETBIT(UCSRA, U2X);

/* UART NORMAL Speed */
#elif UART_SPEED == NORMAL
    CLRBIT(UCSRA, U2X);
     dd0:	ab e2       	ldi	r26, 0x2B	; 43
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	eb e2       	ldi	r30, 0x2B	; 43
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	8d 7f       	andi	r24, 0xFD	; 253
     ddc:	8c 93       	st	X, r24
#endif

/* Select STOP Bit */
#if STOPBIT == _1BIT
    /* Set URSEL to update UCSRC*/
    SETBIT(UCSRC, URSEL);
     dde:	a0 e4       	ldi	r26, 0x40	; 64
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e0 e4       	ldi	r30, 0x40	; 64
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	80 68       	ori	r24, 0x80	; 128
     dea:	8c 93       	st	X, r24
    CLRBIT(UCSRC, USBS);
     dec:	a0 e4       	ldi	r26, 0x40	; 64
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e0 e4       	ldi	r30, 0x40	; 64
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	87 7f       	andi	r24, 0xF7	; 247
     df8:	8c 93       	st	X, r24

/* Disable Parity */
#if UART_PARITY == DISABLED

    /* Set URSEL to update UCSRC*/
    SETBIT(UCSRC, URSEL);
     dfa:	a0 e4       	ldi	r26, 0x40	; 64
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e0 e4       	ldi	r30, 0x40	; 64
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	80 68       	ori	r24, 0x80	; 128
     e06:	8c 93       	st	X, r24

    CLRBIT(UCSRC, UPM0);
     e08:	a0 e4       	ldi	r26, 0x40	; 64
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e0 e4       	ldi	r30, 0x40	; 64
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	8f 7e       	andi	r24, 0xEF	; 239
     e14:	8c 93       	st	X, r24
    CLRBIT(UCSRC, UPM1);
     e16:	a0 e4       	ldi	r26, 0x40	; 64
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e0 e4       	ldi	r30, 0x40	; 64
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	8f 7d       	andi	r24, 0xDF	; 223
     e22:	8c 93       	st	X, r24
    CLRBIT(UCSRC, UCSZ0);
    SETBIT(UCSRC, UCSZ1);
    CLRBIT(UCSRB, UCSZ2);
#elif DATAFRAM == _8BIT
    /* Set URSEL to update UCSRC*/
    SETBIT(UCSRC, URSEL);
     e24:	a0 e4       	ldi	r26, 0x40	; 64
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	e0 e4       	ldi	r30, 0x40	; 64
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	80 68       	ori	r24, 0x80	; 128
     e30:	8c 93       	st	X, r24
    SETBIT(UCSRC, UCSZ0);
     e32:	a0 e4       	ldi	r26, 0x40	; 64
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e0 e4       	ldi	r30, 0x40	; 64
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	82 60       	ori	r24, 0x02	; 2
     e3e:	8c 93       	st	X, r24
    SETBIT(UCSRC, UCSZ1);
     e40:	a0 e4       	ldi	r26, 0x40	; 64
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e0 e4       	ldi	r30, 0x40	; 64
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	84 60       	ori	r24, 0x04	; 4
     e4c:	8c 93       	st	X, r24
    CLRBIT(UCSRB, UCSZ2);
     e4e:	aa e2       	ldi	r26, 0x2A	; 42
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	ea e2       	ldi	r30, 0x2A	; 42
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	8b 7f       	andi	r24, 0xFB	; 251
     e5a:	8c 93       	st	X, r24

    /**
     * @brief Receiver Enable
     * 
     */
    SETBIT(UCSRB, RXEN);
     e5c:	aa e2       	ldi	r26, 0x2A	; 42
     e5e:	b0 e0       	ldi	r27, 0x00	; 0
     e60:	ea e2       	ldi	r30, 0x2A	; 42
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 81       	ld	r24, Z
     e66:	80 61       	ori	r24, 0x10	; 16
     e68:	8c 93       	st	X, r24
    /**
     * @brief Transmitter Enable
     * 
     */
    SETBIT(UCSRB, TXEN);
     e6a:	aa e2       	ldi	r26, 0x2A	; 42
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	ea e2       	ldi	r30, 0x2A	; 42
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	88 60       	ori	r24, 0x08	; 8
     e76:	8c 93       	st	X, r24

    return Enstate;
     e78:	89 81       	ldd	r24, Y+1	; 0x01
} /* UART_ENInit */
     e7a:	0f 90       	pop	r0
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <UART_ENSendData>:
 * 
 * @param Data char want to send
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENSendData(uint8_t Data)
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	0f 92       	push	r0
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	89 83       	std	Y+1, r24	; 0x01
    /* Wait to Data Register Empty */
    while (!GETBIT(UCSRA, UDRE))
     e8e:	eb e2       	ldi	r30, 0x2B	; 43
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	82 95       	swap	r24
     e96:	86 95       	lsr	r24
     e98:	87 70       	andi	r24, 0x07	; 7
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	81 70       	andi	r24, 0x01	; 1
     ea0:	90 70       	andi	r25, 0x00	; 0
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	a1 f3       	breq	.-24     	; 0xe8e <UART_ENSendData+0xc>
        ;

    UDR = Data;
     ea6:	ec e2       	ldi	r30, 0x2C	; 44
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	80 83       	st	Z, r24
    return E_OK;
     eae:	81 e0       	ldi	r24, 0x01	; 1
}
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <UART_ENSendNoBlock>:
 * 
 * @param Data char want to send
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENSendNoBlock(uint8_t Data)
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	0f 92       	push	r0
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	89 83       	std	Y+1, r24	; 0x01
    UDR = Data;
     ec4:	ec e2       	ldi	r30, 0x2C	; 44
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	80 83       	st	Z, r24
    return E_OK;
     ecc:	81 e0       	ldi	r24, 0x01	; 1
}
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <UART_u8ReceiveData>:
 * @brief Receive Data From another device
 * 
 * @return uint8_t Data From Register
 */
uint8_t UART_u8ReceiveData(void)
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
    while (!GETBIT(UCSRA, RXC))
     ede:	eb e2       	ldi	r30, 0x2B	; 43
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	88 23       	and	r24, r24
     ee6:	dc f7       	brge	.-10     	; 0xede <UART_u8ReceiveData+0x8>
        ;
    return UDR;
     ee8:	ec e2       	ldi	r30, 0x2C	; 44
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
}
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <UART_voidTXInterruptDisable>:
/**
 * @brief Disable Transmit Interrupt
 *
 */
void UART_voidTXInterruptDisable(void)
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
    CLRBIT(UCSRB, TXCIE);
     efc:	aa e2       	ldi	r26, 0x2A	; 42
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ea e2       	ldi	r30, 0x2A	; 42
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	8f 7b       	andi	r24, 0xBF	; 191
     f08:	8c 93       	st	X, r24
    CLRBIT(SREG, I_BIT);
     f0a:	af e5       	ldi	r26, 0x5F	; 95
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	ef e5       	ldi	r30, 0x5F	; 95
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	8f 77       	andi	r24, 0x7F	; 127
     f16:	8c 93       	st	X, r24
}
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <UART_voidRXInterruptDisable>:
/**
 * @brief Disable Receive Interrupt
 *
 */
void UART_voidRXInterruptDisable(void)
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	cd b7       	in	r28, 0x3d	; 61
     f24:	de b7       	in	r29, 0x3e	; 62
    CLRBIT(UCSRB, RXCIE);
     f26:	aa e2       	ldi	r26, 0x2A	; 42
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	ea e2       	ldi	r30, 0x2A	; 42
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8f 77       	andi	r24, 0x7F	; 127
     f32:	8c 93       	st	X, r24
    CLRBIT(SREG, I_BIT);
     f34:	af e5       	ldi	r26, 0x5F	; 95
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ef e5       	ldi	r30, 0x5F	; 95
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	8f 77       	andi	r24, 0x7F	; 127
     f40:	8c 93       	st	X, r24
}
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <UART_u8ReceiveNoBlock>:
 * 
 * @param Data 
 * @return uint8_t Data From Register
 */
uint8_t UART_u8ReceiveNoBlock()
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	0f 92       	push	r0
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
    uint8_t status = 0;
     f52:	19 82       	std	Y+1, r1	; 0x01
//    else
//    {
//        /* do nothing */
//    }

    return UDR;
     f54:	ec e2       	ldi	r30, 0x2C	; 44
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
}
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <UART_voidTXInterruptEnable>:
/**
 * @brief Enable Transmit Interrupt
 * 
 */
void UART_voidTXInterruptEnable(void)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
    SETBIT(UCSRB, TXCIE);
     f6a:	aa e2       	ldi	r26, 0x2A	; 42
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	ea e2       	ldi	r30, 0x2A	; 42
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	80 64       	ori	r24, 0x40	; 64
     f76:	8c 93       	st	X, r24
    SETBIT(SREG, I_BIT);
     f78:	af e5       	ldi	r26, 0x5F	; 95
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	ef e5       	ldi	r30, 0x5F	; 95
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	80 68       	ori	r24, 0x80	; 128
     f84:	8c 93       	st	X, r24
}
     f86:	cf 91       	pop	r28
     f88:	df 91       	pop	r29
     f8a:	08 95       	ret

00000f8c <UART_voidRXInterruptEnable>:
/**
 * @brief Enable Receive Interrupt
 * 
 */
void UART_voidRXInterruptEnable(void)
{
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
    SETBIT(UCSRB, RXCIE);
     f94:	aa e2       	ldi	r26, 0x2A	; 42
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ea e2       	ldi	r30, 0x2A	; 42
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 68       	ori	r24, 0x80	; 128
     fa0:	8c 93       	st	X, r24
    SETBIT(SREG, I_BIT);
     fa2:	af e5       	ldi	r26, 0x5F	; 95
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	ef e5       	ldi	r30, 0x5F	; 95
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	80 68       	ori	r24, 0x80	; 128
     fae:	8c 93       	st	X, r24
}
     fb0:	cf 91       	pop	r28
     fb2:	df 91       	pop	r29
     fb4:	08 95       	ret

00000fb6 <UART_voidSendString_Ashync>:
 * @brief Asynchronous Function Send 
 * 
 * @param str Data to send
 */
void UART_voidSendString_Ashync(uint8_t *str)
{
     fb6:	df 93       	push	r29
     fb8:	cf 93       	push	r28
     fba:	00 d0       	rcall	.+0      	; 0xfbc <UART_voidSendString_Ashync+0x6>
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	9a 83       	std	Y+2, r25	; 0x02
     fc2:	89 83       	std	Y+1, r24	; 0x01
    /* Flag using For Protection if call function before string is end */
    if (gFlag == 1)
     fc4:	80 91 37 01 	lds	r24, 0x0137
     fc8:	81 30       	cpi	r24, 0x01	; 1
     fca:	79 f4       	brne	.+30     	; 0xfea <UART_voidSendString_Ashync+0x34>
    {
        /* Send First Letter we bsend b2y fy ISR*/
        UART_ENSendNoBlock(str[0]);
     fcc:	e9 81       	ldd	r30, Y+1	; 0x01
     fce:	fa 81       	ldd	r31, Y+2	; 0x02
     fd0:	80 81       	ld	r24, Z
     fd2:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <UART_ENSendNoBlock>

        /* Flag will Fired when data is Sent Then go to isr */
        UART_voidTXInterruptEnable();
     fd6:	0e 94 b1 07 	call	0xf62	; 0xf62 <UART_voidTXInterruptEnable>
        gPsend_str = str;
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	9a 81       	ldd	r25, Y+2	; 0x02
     fde:	90 93 47 01 	sts	0x0147, r25
     fe2:	80 93 46 01 	sts	0x0146, r24
        gFlag = 0;
     fe6:	10 92 37 01 	sts	0x0137, r1
    }
}
     fea:	0f 90       	pop	r0
     fec:	0f 90       	pop	r0
     fee:	cf 91       	pop	r28
     ff0:	df 91       	pop	r29
     ff2:	08 95       	ret

00000ff4 <UART_voidReceiveString_Ashync>:
 * @brief Asynchronous Function Receive 
 * 
 * @param Str Data to Receive
 */
void UART_voidReceiveString_Ashync(uint8_t *Str)
{
     ff4:	df 93       	push	r29
     ff6:	cf 93       	push	r28
     ff8:	00 d0       	rcall	.+0      	; 0xffa <UART_voidReceiveString_Ashync+0x6>
     ffa:	cd b7       	in	r28, 0x3d	; 61
     ffc:	de b7       	in	r29, 0x3e	; 62
     ffe:	9a 83       	std	Y+2, r25	; 0x02
    1000:	89 83       	std	Y+1, r24	; 0x01
    UART_voidRXInterruptEnable();
    1002:	0e 94 c6 07 	call	0xf8c	; 0xf8c <UART_voidRXInterruptEnable>
    gPrece_str = Str;
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	9a 81       	ldd	r25, Y+2	; 0x02
    100a:	90 93 49 01 	sts	0x0149, r25
    100e:	80 93 48 01 	sts	0x0148, r24
}
    1012:	0f 90       	pop	r0
    1014:	0f 90       	pop	r0
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <__vector_15>:
/**
 * @brief Transmit interrupt 
 * 
 */
void __vector_15(void)
{
    101c:	1f 92       	push	r1
    101e:	0f 92       	push	r0
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	0f 92       	push	r0
    1024:	11 24       	eor	r1, r1
    1026:	2f 93       	push	r18
    1028:	3f 93       	push	r19
    102a:	4f 93       	push	r20
    102c:	5f 93       	push	r21
    102e:	6f 93       	push	r22
    1030:	7f 93       	push	r23
    1032:	8f 93       	push	r24
    1034:	9f 93       	push	r25
    1036:	af 93       	push	r26
    1038:	bf 93       	push	r27
    103a:	ef 93       	push	r30
    103c:	ff 93       	push	r31
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    /* Start with Second Letter */
    /* First Letter is sent in Function Ashync */
    static uint8_t i = 1;

    if (gPsend_str[i] != '\0')
    1046:	20 91 46 01 	lds	r18, 0x0146
    104a:	30 91 47 01 	lds	r19, 0x0147
    104e:	80 91 38 01 	lds	r24, 0x0138
    1052:	88 2f       	mov	r24, r24
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	f9 01       	movw	r30, r18
    1058:	e8 0f       	add	r30, r24
    105a:	f9 1f       	adc	r31, r25
    105c:	80 81       	ld	r24, Z
    105e:	88 23       	and	r24, r24
    1060:	a1 f0       	breq	.+40     	; 0x108a <__vector_15+0x6e>
    {
        UART_ENSendNoBlock(gPsend_str[i]);
    1062:	20 91 46 01 	lds	r18, 0x0146
    1066:	30 91 47 01 	lds	r19, 0x0147
    106a:	80 91 38 01 	lds	r24, 0x0138
    106e:	88 2f       	mov	r24, r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	f9 01       	movw	r30, r18
    1074:	e8 0f       	add	r30, r24
    1076:	f9 1f       	adc	r31, r25
    1078:	80 81       	ld	r24, Z
    107a:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <UART_ENSendNoBlock>
        i++;
    107e:	80 91 38 01 	lds	r24, 0x0138
    1082:	8f 5f       	subi	r24, 0xFF	; 255
    1084:	80 93 38 01 	sts	0x0138, r24
    1088:	06 c0       	rjmp	.+12     	; 0x1096 <__vector_15+0x7a>
    }
    /* String is End So start with Second Letter */
    else
    {
        i = 1;
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	80 93 38 01 	sts	0x0138, r24
        gFlag = 1;
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	80 93 37 01 	sts	0x0137, r24
    }
}
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	ff 91       	pop	r31
    109c:	ef 91       	pop	r30
    109e:	bf 91       	pop	r27
    10a0:	af 91       	pop	r26
    10a2:	9f 91       	pop	r25
    10a4:	8f 91       	pop	r24
    10a6:	7f 91       	pop	r23
    10a8:	6f 91       	pop	r22
    10aa:	5f 91       	pop	r21
    10ac:	4f 91       	pop	r20
    10ae:	3f 91       	pop	r19
    10b0:	2f 91       	pop	r18
    10b2:	0f 90       	pop	r0
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	0f 90       	pop	r0
    10b8:	1f 90       	pop	r1
    10ba:	18 95       	reti

000010bc <MUSART1_voidSetCallBack>:

/**
 * @brief Receive interrupt
 * 
 */
void MUSART1_voidSetCallBack(void (*ptr) (void) ){
    10bc:	df 93       	push	r29
    10be:	cf 93       	push	r28
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <MUSART1_voidSetCallBack+0x6>
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
    10c6:	9a 83       	std	Y+2, r25	; 0x02
    10c8:	89 83       	std	Y+1, r24	; 0x01
   MUSART1_CallBack = ptr;
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	9a 81       	ldd	r25, Y+2	; 0x02
    10ce:	90 93 4b 01 	sts	0x014B, r25
    10d2:	80 93 4a 01 	sts	0x014A, r24
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <__vector_13>:
void __vector_13(void)
{
    10e0:	1f 92       	push	r1
    10e2:	0f 92       	push	r0
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	0f 92       	push	r0
    10e8:	11 24       	eor	r1, r1
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	2f 93       	push	r18
    10f0:	3f 93       	push	r19
    10f2:	4f 93       	push	r20
    10f4:	5f 93       	push	r21
    10f6:	6f 93       	push	r22
    10f8:	7f 93       	push	r23
    10fa:	8f 93       	push	r24
    10fc:	9f 93       	push	r25
    10fe:	af 93       	push	r26
    1100:	bf 93       	push	r27
    1102:	ef 93       	push	r30
    1104:	ff 93       	push	r31
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
//        i++;
//    }
//    if (i > 98)
//        i = 0;
	static uint8_t i = 0;
	    gPrece_str[i] = UART_u8ReceiveNoBlock();
    110e:	20 91 48 01 	lds	r18, 0x0148
    1112:	30 91 49 01 	lds	r19, 0x0149
    1116:	80 91 b1 01 	lds	r24, 0x01B1
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	89 01       	movw	r16, r18
    1120:	08 0f       	add	r16, r24
    1122:	19 1f       	adc	r17, r25
    1124:	0e 94 a4 07 	call	0xf48	; 0xf48 <UART_u8ReceiveNoBlock>
    1128:	f8 01       	movw	r30, r16
    112a:	80 83       	st	Z, r24
	    if (gPrece_str[i] == '\r')
    112c:	20 91 48 01 	lds	r18, 0x0148
    1130:	30 91 49 01 	lds	r19, 0x0149
    1134:	80 91 b1 01 	lds	r24, 0x01B1
    1138:	88 2f       	mov	r24, r24
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	f9 01       	movw	r30, r18
    113e:	e8 0f       	add	r30, r24
    1140:	f9 1f       	adc	r31, r25
    1142:	80 81       	ld	r24, Z
    1144:	8d 30       	cpi	r24, 0x0D	; 13
    1146:	79 f4       	brne	.+30     	; 0x1166 <__vector_13+0x86>
	    {
	        gPrece_str[i] = '\0';
    1148:	20 91 48 01 	lds	r18, 0x0148
    114c:	30 91 49 01 	lds	r19, 0x0149
    1150:	80 91 b1 01 	lds	r24, 0x01B1
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	f9 01       	movw	r30, r18
    115a:	e8 0f       	add	r30, r24
    115c:	f9 1f       	adc	r31, r25
    115e:	10 82       	st	Z, r1
	        i = 0;
    1160:	10 92 b1 01 	sts	0x01B1, r1
    1164:	05 c0       	rjmp	.+10     	; 0x1170 <__vector_13+0x90>
	    }
	    else
	    {
	        i++;
    1166:	80 91 b1 01 	lds	r24, 0x01B1
    116a:	8f 5f       	subi	r24, 0xFF	; 255
    116c:	80 93 b1 01 	sts	0x01B1, r24
	    }

	    if (i > 98)
    1170:	80 91 b1 01 	lds	r24, 0x01B1
    1174:	83 36       	cpi	r24, 0x63	; 99
    1176:	10 f0       	brcs	.+4      	; 0x117c <__vector_13+0x9c>
	       i = 0;
    1178:	10 92 b1 01 	sts	0x01B1, r1

}
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	ff 91       	pop	r31
    1182:	ef 91       	pop	r30
    1184:	bf 91       	pop	r27
    1186:	af 91       	pop	r26
    1188:	9f 91       	pop	r25
    118a:	8f 91       	pop	r24
    118c:	7f 91       	pop	r23
    118e:	6f 91       	pop	r22
    1190:	5f 91       	pop	r21
    1192:	4f 91       	pop	r20
    1194:	3f 91       	pop	r19
    1196:	2f 91       	pop	r18
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	0f 90       	pop	r0
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	0f 90       	pop	r0
    11a2:	1f 90       	pop	r1
    11a4:	18 95       	reti

000011a6 <SPI_VidInitMaster>:
#include "UART_int.h"
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void SPI_VidInitMaster(void) 
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	DDRB = DDRB | (1<<PB4);
    11ae:	a7 e3       	ldi	r26, 0x37	; 55
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e7 e3       	ldi	r30, 0x37	; 55
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	80 61       	ori	r24, 0x10	; 16
    11ba:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB5);
    11bc:	a7 e3       	ldi	r26, 0x37	; 55
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e7 e3       	ldi	r30, 0x37	; 55
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	80 62       	ori	r24, 0x20	; 32
    11c8:	8c 93       	st	X, r24
	DDRB = DDRB & ~(1<<PB6);
    11ca:	a7 e3       	ldi	r26, 0x37	; 55
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e7 e3       	ldi	r30, 0x37	; 55
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	8f 7b       	andi	r24, 0xBF	; 191
    11d6:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB7);
    11d8:	a7 e3       	ldi	r26, 0x37	; 55
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e7 e3       	ldi	r30, 0x37	; 55
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	80 68       	ori	r24, 0x80	; 128
    11e4:	8c 93       	st	X, r24

	SPCR = (1<<SPE) | (1<<MSTR); // enable SPI + enable Master + choose SPI clock = Fosc/4
    11e6:	ed e2       	ldi	r30, 0x2D	; 45
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 e5       	ldi	r24, 0x50	; 80
    11ec:	80 83       	st	Z, r24
}
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <SPI_VidInitSlave>:

void SPI_VidInitSlave(void)
{ 
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	DDRB = DDRB & (~(1<<PB4));  
    11fc:	a7 e3       	ldi	r26, 0x37	; 55
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e7 e3       	ldi	r30, 0x37	; 55
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	8f 7e       	andi	r24, 0xEF	; 239
    1208:	8c 93       	st	X, r24
	DDRB = DDRB & (~(1<<PB5));
    120a:	a7 e3       	ldi	r26, 0x37	; 55
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e7 e3       	ldi	r30, 0x37	; 55
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	8f 7d       	andi	r24, 0xDF	; 223
    1216:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB6);
    1218:	a7 e3       	ldi	r26, 0x37	; 55
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e7 e3       	ldi	r30, 0x37	; 55
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	80 64       	ori	r24, 0x40	; 64
    1224:	8c 93       	st	X, r24
	DDRB = DDRB & (~(1<<PB7));
    1226:	a7 e3       	ldi	r26, 0x37	; 55
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e7 e3       	ldi	r30, 0x37	; 55
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	8f 77       	andi	r24, 0x7F	; 127
    1232:	8c 93       	st	X, r24
	SPCR = (1<<SPE); // just enable SPI + choose SPI clock = Fosc/4
    1234:	ed e2       	ldi	r30, 0x2D	; 45
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 e4       	ldi	r24, 0x40	; 64
    123a:	80 83       	st	Z, r24
}
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <SPI_VidSendByte>:

void SPI_VidSendByte( uint8_t copy_U8Data)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	0f 92       	push	r0
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
    124c:	89 83       	std	Y+1, r24	; 0x01
	SPDR = copy_U8Data; //send data by SPI
    124e:	ef e2       	ldi	r30, 0x2F	; 47
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	80 83       	st	Z, r24
	while (!((SPSR) & (1 << SPIF))); //wait until SPI interrupt flag=1 (data is sent correctly)
    1256:	ee e2       	ldi	r30, 0x2E	; 46
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	88 23       	and	r24, r24
    125e:	dc f7       	brge	.-10     	; 0x1256 <SPI_VidSendByte+0x14>
}
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <SPI_U8RecieveByte_admin>:
uint8_t SPI_U8RecieveByte_admin(void){
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	00 d0       	rcall	.+0      	; 0x126e <SPI_U8RecieveByte_admin+0x6>
    126e:	00 d0       	rcall	.+0      	; 0x1270 <SPI_U8RecieveByte_admin+0x8>
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
	uint32_t count=0;
    1274:	19 82       	std	Y+1, r1	; 0x01
    1276:	1a 82       	std	Y+2, r1	; 0x02
    1278:	1b 82       	std	Y+3, r1	; 0x03
    127a:	1c 82       	std	Y+4, r1	; 0x04
    127c:	17 c0       	rjmp	.+46     	; 0x12ac <SPI_U8RecieveByte_admin+0x44>

	while (!((SPSR) & (1 << SPIF))){	   //wait until SPI interrupt flag=1(data is receive correctly)
		if((count==3000000)){
    127e:	89 81       	ldd	r24, Y+1	; 0x01
    1280:	9a 81       	ldd	r25, Y+2	; 0x02
    1282:	ab 81       	ldd	r26, Y+3	; 0x03
    1284:	bc 81       	ldd	r27, Y+4	; 0x04
    1286:	80 3c       	cpi	r24, 0xC0	; 192
    1288:	26 ec       	ldi	r18, 0xC6	; 198
    128a:	92 07       	cpc	r25, r18
    128c:	2d e2       	ldi	r18, 0x2D	; 45
    128e:	a2 07       	cpc	r26, r18
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	b2 07       	cpc	r27, r18
    1294:	81 f0       	breq	.+32     	; 0x12b6 <SPI_U8RecieveByte_admin+0x4e>

			break;
		}
		else{
			count++;
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	9a 81       	ldd	r25, Y+2	; 0x02
    129a:	ab 81       	ldd	r26, Y+3	; 0x03
    129c:	bc 81       	ldd	r27, Y+4	; 0x04
    129e:	01 96       	adiw	r24, 0x01	; 1
    12a0:	a1 1d       	adc	r26, r1
    12a2:	b1 1d       	adc	r27, r1
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	9a 83       	std	Y+2, r25	; 0x02
    12a8:	ab 83       	std	Y+3, r26	; 0x03
    12aa:	bc 83       	std	Y+4, r27	; 0x04
	while (!((SPSR) & (1 << SPIF))); //wait until SPI interrupt flag=1 (data is sent correctly)
}
uint8_t SPI_U8RecieveByte_admin(void){
	uint32_t count=0;

	while (!((SPSR) & (1 << SPIF))){	   //wait until SPI interrupt flag=1(data is receive correctly)
    12ac:	ee e2       	ldi	r30, 0x2E	; 46
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	88 23       	and	r24, r24
    12b4:	24 f7       	brge	.-56     	; 0x127e <SPI_U8RecieveByte_admin+0x16>
			count++;

		}

	}
	return SPDR; //return the received byte from SPI data register
    12b6:	ef e2       	ldi	r30, 0x2F	; 47
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z

}
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <SPI_U8RecieveByte>:



uint8_t SPI_U8RecieveByte(void)
{
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62

	while (!((SPSR) & (1 << SPIF)));	   //wait until SPI interrupt flag=1(data is receive correctly)
    12d2:	ee e2       	ldi	r30, 0x2E	; 46
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	88 23       	and	r24, r24
    12da:	dc f7       	brge	.-10     	; 0x12d2 <SPI_U8RecieveByte+0x8>
	return SPDR; //return the received byte from SPI data register
    12dc:	ef e2       	ldi	r30, 0x2F	; 47
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z

}
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <SPI_VidSendString>:
void SPI_VidSendString( uint8_t *copy_str)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <SPI_VidSendString+0x6>
    12ee:	0f 92       	push	r0
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	9b 83       	std	Y+3, r25	; 0x03
    12f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    12f8:	19 82       	std	Y+1, r1	; 0x01
    12fa:	0e c0       	rjmp	.+28     	; 0x1318 <SPI_VidSendString+0x30>

	while(copy_str[i] != '\0')
	{

		SPI_VidSendByte(copy_str[i]);
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	9b 81       	ldd	r25, Y+3	; 0x03
    1306:	fc 01       	movw	r30, r24
    1308:	e2 0f       	add	r30, r18
    130a:	f3 1f       	adc	r31, r19
    130c:	80 81       	ld	r24, Z
    130e:	0e 94 21 09 	call	0x1242	; 0x1242 <SPI_VidSendByte>
		i++;
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	8f 5f       	subi	r24, 0xFF	; 255
    1316:	89 83       	std	Y+1, r24	; 0x01
}
void SPI_VidSendString( uint8_t *copy_str)
{
	uint8_t i = 0;

	while(copy_str[i] != '\0')
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	9b 81       	ldd	r25, Y+3	; 0x03
    1322:	fc 01       	movw	r30, r24
    1324:	e2 0f       	add	r30, r18
    1326:	f3 1f       	adc	r31, r19
    1328:	80 81       	ld	r24, Z
    132a:	88 23       	and	r24, r24
    132c:	39 f7       	brne	.-50     	; 0x12fc <SPI_VidSendString+0x14>

		SPI_VidSendByte(copy_str[i]);
		i++;

	}
	copy_str[i] = '\r';
    132e:	89 81       	ldd	r24, Y+1	; 0x01
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	8a 81       	ldd	r24, Y+2	; 0x02
    1336:	9b 81       	ldd	r25, Y+3	; 0x03
    1338:	fc 01       	movw	r30, r24
    133a:	e2 0f       	add	r30, r18
    133c:	f3 1f       	adc	r31, r19
    133e:	8d e0       	ldi	r24, 0x0D	; 13
    1340:	80 83       	st	Z, r24
	copy_str[i+1] = '\0';
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	88 2f       	mov	r24, r24
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	9c 01       	movw	r18, r24
    134a:	2f 5f       	subi	r18, 0xFF	; 255
    134c:	3f 4f       	sbci	r19, 0xFF	; 255
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	9b 81       	ldd	r25, Y+3	; 0x03
    1352:	fc 01       	movw	r30, r24
    1354:	e2 0f       	add	r30, r18
    1356:	f3 1f       	adc	r31, r19
    1358:	10 82       	st	Z, r1

}
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <SPI_VidRecieveString>:

void SPI_VidRecieveString(uint8_t *copy_str)
{
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	df 93       	push	r29
    136c:	cf 93       	push	r28
    136e:	00 d0       	rcall	.+0      	; 0x1370 <SPI_VidRecieveString+0xa>
    1370:	0f 92       	push	r0
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	9b 83       	std	Y+3, r25	; 0x03
    1378:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i = 0;
    137a:	19 82       	std	Y+1, r1	; 0x01
	copy_str[i] = SPI_U8RecieveByte();
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	9b 81       	ldd	r25, Y+3	; 0x03
    1386:	8c 01       	movw	r16, r24
    1388:	02 0f       	add	r16, r18
    138a:	13 1f       	adc	r17, r19
    138c:	0e 94 65 09 	call	0x12ca	; 0x12ca <SPI_U8RecieveByte>
    1390:	f8 01       	movw	r30, r16
    1392:	80 83       	st	Z, r24
    1394:	0f c0       	rjmp	.+30     	; 0x13b4 <SPI_VidRecieveString+0x4e>
	while(copy_str[i] != '\r')
	{
		i++;
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	8f 5f       	subi	r24, 0xFF	; 255
    139a:	89 83       	std	Y+1, r24	; 0x01
		copy_str[i] = SPI_U8RecieveByte();
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	9b 81       	ldd	r25, Y+3	; 0x03
    13a6:	8c 01       	movw	r16, r24
    13a8:	02 0f       	add	r16, r18
    13aa:	13 1f       	adc	r17, r19
    13ac:	0e 94 65 09 	call	0x12ca	; 0x12ca <SPI_U8RecieveByte>
    13b0:	f8 01       	movw	r30, r16
    13b2:	80 83       	st	Z, r24

void SPI_VidRecieveString(uint8_t *copy_str)
{
	unsigned char i = 0;
	copy_str[i] = SPI_U8RecieveByte();
	while(copy_str[i] != '\r')
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	9b 81       	ldd	r25, Y+3	; 0x03
    13be:	fc 01       	movw	r30, r24
    13c0:	e2 0f       	add	r30, r18
    13c2:	f3 1f       	adc	r31, r19
    13c4:	80 81       	ld	r24, Z
    13c6:	8d 30       	cpi	r24, 0x0D	; 13
    13c8:	31 f7       	brne	.-52     	; 0x1396 <SPI_VidRecieveString+0x30>
	{
		i++;
		copy_str[i] = SPI_U8RecieveByte();
	}
	copy_str[i] = '\0';
    13ca:	89 81       	ldd	r24, Y+1	; 0x01
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	9b 81       	ldd	r25, Y+3	; 0x03
    13d4:	fc 01       	movw	r30, r24
    13d6:	e2 0f       	add	r30, r18
    13d8:	f3 1f       	adc	r31, r19
    13da:	10 82       	st	Z, r1
}
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	0f 90       	pop	r0
    13e2:	cf 91       	pop	r28
    13e4:	df 91       	pop	r29
    13e6:	1f 91       	pop	r17
    13e8:	0f 91       	pop	r16
    13ea:	08 95       	ret

000013ec <I2C_MasterInit>:

//#include "I2C_Private.h"

//#include <util/delay.h>

void I2C_MasterInit(void){
    13ec:	df 93       	push	r29
    13ee:	cf 93       	push	r28
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
	// prescaler =1
		CLRBIT(TWSR,0);
    13f4:	a1 e2       	ldi	r26, 0x21	; 33
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e1 e2       	ldi	r30, 0x21	; 33
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	8e 7f       	andi	r24, 0xFE	; 254
    1400:	8c 93       	st	X, r24
		CLRBIT(TWSR,1);
    1402:	a1 e2       	ldi	r26, 0x21	; 33
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e1 e2       	ldi	r30, 0x21	; 33
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	8d 7f       	andi	r24, 0xFD	; 253
    140e:	8c 93       	st	X, r24
		TWBR=32;//400khz
    1410:	e0 e2       	ldi	r30, 0x20	; 32
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 e2       	ldi	r24, 0x20	; 32
    1416:	80 83       	st	Z, r24
		//SETBIT(TWCR,6);// enable ACK

		SETBIT(TWCR,2);// enable
    1418:	a6 e5       	ldi	r26, 0x56	; 86
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e6 e5       	ldi	r30, 0x56	; 86
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	84 60       	ori	r24, 0x04	; 4
    1424:	8c 93       	st	X, r24

		TWAR=0b00000111;
    1426:	e2 e2       	ldi	r30, 0x22	; 34
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	87 e0       	ldi	r24, 0x07	; 7
    142c:	80 83       	st	Z, r24



}
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <I2C_MasterStart>:
void I2C_MasterStart(void){
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62

	SETBIT(TWCR,5);// enable start bit
    143c:	a6 e5       	ldi	r26, 0x56	; 86
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e6 e5       	ldi	r30, 0x56	; 86
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	80 62       	ori	r24, 0x20	; 32
    1448:	8c 93       	st	X, r24
	SETBIT(TWCR,7);// clear flag
    144a:	a6 e5       	ldi	r26, 0x56	; 86
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e6 e5       	ldi	r30, 0x56	; 86
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	80 68       	ori	r24, 0x80	; 128
    1456:	8c 93       	st	X, r24

	while(GETBIT(TWCR,7)==0);
    1458:	e6 e5       	ldi	r30, 0x56	; 86
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	88 23       	and	r24, r24
    1460:	dc f7       	brge	.-10     	; 0x1458 <I2C_MasterStart+0x24>

}
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <I2C_SlaveInit>:


void I2C_SlaveInit(void){
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
	TWBR=32;//400khz
    1470:	e0 e2       	ldi	r30, 0x20	; 32
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	80 e2       	ldi	r24, 0x20	; 32
    1476:	80 83       	st	Z, r24


	TWAR=0b00000010;
    1478:	e2 e2       	ldi	r30, 0x22	; 34
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	82 e0       	ldi	r24, 0x02	; 2
    147e:	80 83       	st	Z, r24
	SETBIT(TWCR,6);// enable ack
    1480:	a6 e5       	ldi	r26, 0x56	; 86
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e6 e5       	ldi	r30, 0x56	; 86
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	80 64       	ori	r24, 0x40	; 64
    148c:	8c 93       	st	X, r24

	SETBIT(TWCR,2);// enable i2c
    148e:	a6 e5       	ldi	r26, 0x56	; 86
    1490:	b0 e0       	ldi	r27, 0x00	; 0
    1492:	e6 e5       	ldi	r30, 0x56	; 86
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	84 60       	ori	r24, 0x04	; 4
    149a:	8c 93       	st	X, r24

	//SETBIT(TWCR,7);// clear flag
	//while(GETBIT(TWCR,7)==0);


	I2C_ReadDataByte();
    149c:	0e 94 bf 0a 	call	0x157e	; 0x157e <I2C_ReadDataByte>


}
    14a0:	cf 91       	pop	r28
    14a2:	df 91       	pop	r29
    14a4:	08 95       	ret

000014a6 <I2C_SendSlaveAddressWithWrite>:

void I2C_SendSlaveAddressWithWrite(uint8_t address){
    14a6:	df 93       	push	r29
    14a8:	cf 93       	push	r28
    14aa:	0f 92       	push	r0
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	89 83       	std	Y+1, r24	; 0x01
	TWDR=(address<<1);
    14b2:	e3 e2       	ldi	r30, 0x23	; 35
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	88 0f       	add	r24, r24
    14ba:	80 83       	st	Z, r24
	/* Write operation */
		CLRBIT(TWDR,0);
    14bc:	a3 e2       	ldi	r26, 0x23	; 35
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e3 e2       	ldi	r30, 0x23	; 35
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8e 7f       	andi	r24, 0xFE	; 254
    14c8:	8c 93       	st	X, r24
			CLRBIT(TWCR,5);// clear start bit
    14ca:	a6 e5       	ldi	r26, 0x56	; 86
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e6 e5       	ldi	r30, 0x56	; 86
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	8f 7d       	andi	r24, 0xDF	; 223
    14d6:	8c 93       	st	X, r24
			SETBIT(TWCR,7);// clear flag
    14d8:	a6 e5       	ldi	r26, 0x56	; 86
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e6 e5       	ldi	r30, 0x56	; 86
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 68       	ori	r24, 0x80	; 128
    14e4:	8c 93       	st	X, r24
			while(GETBIT(TWCR,7)==0);
    14e6:	e6 e5       	ldi	r30, 0x56	; 86
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	88 23       	and	r24, r24
    14ee:	dc f7       	brge	.-10     	; 0x14e6 <I2C_SendSlaveAddressWithWrite+0x40>
}
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <I2C_SendSlaveAddressWithRead>:

void I2C_SendSlaveAddressWithRead(uint8_t address){
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	0f 92       	push	r0
    14fe:	cd b7       	in	r28, 0x3d	; 61
    1500:	de b7       	in	r29, 0x3e	; 62
    1502:	89 83       	std	Y+1, r24	; 0x01
	TWDR=(address<<1);
    1504:	e3 e2       	ldi	r30, 0x23	; 35
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	88 0f       	add	r24, r24
    150c:	80 83       	st	Z, r24
	SETBIT(TWDR,0);// read
    150e:	a3 e2       	ldi	r26, 0x23	; 35
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e3 e2       	ldi	r30, 0x23	; 35
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	81 60       	ori	r24, 0x01	; 1
    151a:	8c 93       	st	X, r24

	CLRBIT(TWCR,5);// clear start bit
    151c:	a6 e5       	ldi	r26, 0x56	; 86
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	e6 e5       	ldi	r30, 0x56	; 86
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8f 7d       	andi	r24, 0xDF	; 223
    1528:	8c 93       	st	X, r24
	SETBIT(TWCR,7);// clear flag
    152a:	a6 e5       	ldi	r26, 0x56	; 86
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e6 e5       	ldi	r30, 0x56	; 86
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	80 68       	ori	r24, 0x80	; 128
    1536:	8c 93       	st	X, r24
	while(GETBIT(TWCR,7)==0);
    1538:	e6 e5       	ldi	r30, 0x56	; 86
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	88 23       	and	r24, r24
    1540:	dc f7       	brge	.-10     	; 0x1538 <I2C_SendSlaveAddressWithRead+0x40>
}
    1542:	0f 90       	pop	r0
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <I2C_WriteDataByte>:

void I2C_WriteDataByte(uint8_t data){
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	0f 92       	push	r0
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	89 83       	std	Y+1, r24	; 0x01

TWDR=data;
    1556:	e3 e2       	ldi	r30, 0x23	; 35
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	89 81       	ldd	r24, Y+1	; 0x01
    155c:	80 83       	st	Z, r24
SETBIT(TWCR,7);// clear flag
    155e:	a6 e5       	ldi	r26, 0x56	; 86
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e6 e5       	ldi	r30, 0x56	; 86
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	80 68       	ori	r24, 0x80	; 128
    156a:	8c 93       	st	X, r24
while(GETBIT(TWCR,7)==0);
    156c:	e6 e5       	ldi	r30, 0x56	; 86
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	88 23       	and	r24, r24
    1574:	dc f7       	brge	.-10     	; 0x156c <I2C_WriteDataByte+0x22>

}
    1576:	0f 90       	pop	r0
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <I2C_ReadDataByte>:
uint8_t I2C_ReadDataByte(void){
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	0f 92       	push	r0
    1584:	cd b7       	in	r28, 0x3d	; 61
    1586:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;
SETBIT(TWCR,7);// clear flag
    1588:	a6 e5       	ldi	r26, 0x56	; 86
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e6 e5       	ldi	r30, 0x56	; 86
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	80 68       	ori	r24, 0x80	; 128
    1594:	8c 93       	st	X, r24
while(GETBIT(TWCR,7)==0);
    1596:	e6 e5       	ldi	r30, 0x56	; 86
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	88 23       	and	r24, r24
    159e:	dc f7       	brge	.-10     	; 0x1596 <I2C_ReadDataByte+0x18>

value=TWDR;
    15a0:	e3 e2       	ldi	r30, 0x23	; 35
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	89 83       	std	Y+1, r24	; 0x01
return value;
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15aa:	0f 90       	pop	r0
    15ac:	cf 91       	pop	r28
    15ae:	df 91       	pop	r29
    15b0:	08 95       	ret

000015b2 <I2C_MasterStop>:
void I2C_MasterStop(void){
    15b2:	df 93       	push	r29
    15b4:	cf 93       	push	r28
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62

	SETBIT(TWCR,4);// enable stop bit
    15ba:	a6 e5       	ldi	r26, 0x56	; 86
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e6 e5       	ldi	r30, 0x56	; 86
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	80 61       	ori	r24, 0x10	; 16
    15c6:	8c 93       	st	X, r24
	SETBIT(TWCR,2);// enable i2c bit
    15c8:	a6 e5       	ldi	r26, 0x56	; 86
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e6 e5       	ldi	r30, 0x56	; 86
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	84 60       	ori	r24, 0x04	; 4
    15d4:	8c 93       	st	X, r24

	SETBIT(TWCR,7);// clear flag
    15d6:	a6 e5       	ldi	r26, 0x56	; 86
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e6 e5       	ldi	r30, 0x56	; 86
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	80 68       	ori	r24, 0x80	; 128
    15e2:	8c 93       	st	X, r24



}
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <EXTI_ENEnable>:
 * 
 * @param Interrupt EXTI_INT0 | EXTI_INT1 | EXTI_INT2
 * @return EN_ERRORSTATE_t 
 */
EN_EXTIERRORSTATE_t EXTI_ENEnable(EN_EXTI_t Interrupt)
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <EXTI_ENEnable+0x6>
    15f0:	00 d0       	rcall	.+0      	; 0x15f2 <EXTI_ENEnable+0x8>
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
    15f6:	8a 83       	std	Y+2, r24	; 0x02
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    15f8:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	3c 83       	std	Y+4, r19	; 0x04
    1602:	2b 83       	std	Y+3, r18	; 0x03
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	91 05       	cpc	r25, r1
    160c:	c1 f0       	breq	.+48     	; 0x163e <EXTI_ENEnable+0x54>
    160e:	2b 81       	ldd	r18, Y+3	; 0x03
    1610:	3c 81       	ldd	r19, Y+4	; 0x04
    1612:	22 30       	cpi	r18, 0x02	; 2
    1614:	31 05       	cpc	r19, r1
    1616:	11 f1       	breq	.+68     	; 0x165c <EXTI_ENEnable+0x72>
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	00 97       	sbiw	r24, 0x00	; 0
    161e:	69 f5       	brne	.+90     	; 0x167a <EXTI_ENEnable+0x90>
	{
	case EXTI_INT0:
		SETBIT(GICR, INT0);
    1620:	ab e5       	ldi	r26, 0x5B	; 91
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	eb e5       	ldi	r30, 0x5B	; 91
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	80 64       	ori	r24, 0x40	; 64
    162c:	8c 93       	st	X, r24
		SETBIT(SREG, I_BIT);
    162e:	af e5       	ldi	r26, 0x5F	; 95
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	ef e5       	ldi	r30, 0x5F	; 95
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	80 68       	ori	r24, 0x80	; 128
    163a:	8c 93       	st	X, r24
    163c:	20 c0       	rjmp	.+64     	; 0x167e <EXTI_ENEnable+0x94>
		break;
	case EXTI_INT1:
		SETBIT(GICR, INT1);
    163e:	ab e5       	ldi	r26, 0x5B	; 91
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	eb e5       	ldi	r30, 0x5B	; 91
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	80 68       	ori	r24, 0x80	; 128
    164a:	8c 93       	st	X, r24
		SETBIT(SREG, I_BIT);
    164c:	af e5       	ldi	r26, 0x5F	; 95
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	ef e5       	ldi	r30, 0x5F	; 95
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	80 68       	ori	r24, 0x80	; 128
    1658:	8c 93       	st	X, r24
    165a:	11 c0       	rjmp	.+34     	; 0x167e <EXTI_ENEnable+0x94>
		break;
	case EXTI_INT2:
		SETBIT(GICR, INT2);
    165c:	ab e5       	ldi	r26, 0x5B	; 91
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	eb e5       	ldi	r30, 0x5B	; 91
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	80 62       	ori	r24, 0x20	; 32
    1668:	8c 93       	st	X, r24
		SETBIT(SREG, I_BIT);
    166a:	af e5       	ldi	r26, 0x5F	; 95
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	ef e5       	ldi	r30, 0x5F	; 95
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	80 68       	ori	r24, 0x80	; 128
    1676:	8c 93       	st	X, r24
    1678:	02 c0       	rjmp	.+4      	; 0x167e <EXTI_ENEnable+0x94>
		break;
	default:
		state = E_EXT_ERROR;
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    167e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <EXTI_ENisable>:

EN_EXTIERRORSTATE_t EXTI_ENisable(EN_EXTI_t Interrupt)
{
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	00 d0       	rcall	.+0      	; 0x1694 <EXTI_ENisable+0x6>
    1694:	00 d0       	rcall	.+0      	; 0x1696 <EXTI_ENisable+0x8>
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	8a 83       	std	Y+2, r24	; 0x02
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    169c:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	3c 83       	std	Y+4, r19	; 0x04
    16a6:	2b 83       	std	Y+3, r18	; 0x03
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	9c 81       	ldd	r25, Y+4	; 0x04
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	91 05       	cpc	r25, r1
    16b0:	c1 f0       	breq	.+48     	; 0x16e2 <EXTI_ENisable+0x54>
    16b2:	2b 81       	ldd	r18, Y+3	; 0x03
    16b4:	3c 81       	ldd	r19, Y+4	; 0x04
    16b6:	22 30       	cpi	r18, 0x02	; 2
    16b8:	31 05       	cpc	r19, r1
    16ba:	11 f1       	breq	.+68     	; 0x1700 <EXTI_ENisable+0x72>
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	9c 81       	ldd	r25, Y+4	; 0x04
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	69 f5       	brne	.+90     	; 0x171e <EXTI_ENisable+0x90>
	{
	case EXTI_INT0:
		CLRBIT(GICR, INT0);
    16c4:	ab e5       	ldi	r26, 0x5B	; 91
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	eb e5       	ldi	r30, 0x5B	; 91
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	8f 7b       	andi	r24, 0xBF	; 191
    16d0:	8c 93       	st	X, r24
		CLRBIT(SREG, I_BIT);
    16d2:	af e5       	ldi	r26, 0x5F	; 95
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	ef e5       	ldi	r30, 0x5F	; 95
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8f 77       	andi	r24, 0x7F	; 127
    16de:	8c 93       	st	X, r24
    16e0:	20 c0       	rjmp	.+64     	; 0x1722 <EXTI_ENisable+0x94>
		break;
	case EXTI_INT1:
		CLRBIT(GICR, INT1);
    16e2:	ab e5       	ldi	r26, 0x5B	; 91
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	eb e5       	ldi	r30, 0x5B	; 91
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8f 77       	andi	r24, 0x7F	; 127
    16ee:	8c 93       	st	X, r24
		CLRBIT(SREG, I_BIT);
    16f0:	af e5       	ldi	r26, 0x5F	; 95
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	ef e5       	ldi	r30, 0x5F	; 95
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	8f 77       	andi	r24, 0x7F	; 127
    16fc:	8c 93       	st	X, r24
    16fe:	11 c0       	rjmp	.+34     	; 0x1722 <EXTI_ENisable+0x94>
		break;
	case EXTI_INT2:
		CLRBIT(GICR, INT2);
    1700:	ab e5       	ldi	r26, 0x5B	; 91
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	eb e5       	ldi	r30, 0x5B	; 91
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	8f 7d       	andi	r24, 0xDF	; 223
    170c:	8c 93       	st	X, r24
		CLRBIT(SREG, I_BIT);
    170e:	af e5       	ldi	r26, 0x5F	; 95
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	ef e5       	ldi	r30, 0x5F	; 95
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	8f 77       	andi	r24, 0x7F	; 127
    171a:	8c 93       	st	X, r24
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <EXTI_ENisable+0x94>
		break;
	default:
		state = E_EXT_ERROR;
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    1722:	89 81       	ldd	r24, Y+1	; 0x01
} /* EXTI_voidDisable */
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <EXTI_ENTriggerEdge>:

EN_EXTIERRORSTATE_t EXTI_ENTriggerEdge(EN_EXTI_t Interrupt, EN_TriggerEdge_t Edge)
{
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	29 97       	sbiw	r28, 0x09	; 9
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	f8 94       	cli
    1740:	de bf       	out	0x3e, r29	; 62
    1742:	0f be       	out	0x3f, r0	; 63
    1744:	cd bf       	out	0x3d, r28	; 61
    1746:	8a 83       	std	Y+2, r24	; 0x02
    1748:	6b 83       	std	Y+3, r22	; 0x03
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    174a:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	39 87       	std	Y+9, r19	; 0x09
    1754:	28 87       	std	Y+8, r18	; 0x08
    1756:	88 85       	ldd	r24, Y+8	; 0x08
    1758:	99 85       	ldd	r25, Y+9	; 0x09
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	91 05       	cpc	r25, r1
    175e:	d9 f0       	breq	.+54     	; 0x1796 <EXTI_ENTriggerEdge+0x64>
    1760:	28 85       	ldd	r18, Y+8	; 0x08
    1762:	39 85       	ldd	r19, Y+9	; 0x09
    1764:	22 30       	cpi	r18, 0x02	; 2
    1766:	31 05       	cpc	r19, r1
    1768:	09 f4       	brne	.+2      	; 0x176c <EXTI_ENTriggerEdge+0x3a>
    176a:	73 c0       	rjmp	.+230    	; 0x1852 <EXTI_ENTriggerEdge+0x120>
    176c:	88 85       	ldd	r24, Y+8	; 0x08
    176e:	99 85       	ldd	r25, Y+9	; 0x09
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	09 f0       	breq	.+2      	; 0x1776 <EXTI_ENTriggerEdge+0x44>
    1774:	91 c0       	rjmp	.+290    	; 0x1898 <EXTI_ENTriggerEdge+0x166>
	{
	case EXTI_INT0:
		MCUCR &= 0xFC;
    1776:	a5 e5       	ldi	r26, 0x55	; 85
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e5 e5       	ldi	r30, 0x55	; 85
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	8c 7f       	andi	r24, 0xFC	; 252
    1782:	8c 93       	st	X, r24
		MCUCR |= Edge;
    1784:	a5 e5       	ldi	r26, 0x55	; 85
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e5 e5       	ldi	r30, 0x55	; 85
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	90 81       	ld	r25, Z
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	89 2b       	or	r24, r25
    1792:	8c 93       	st	X, r24
    1794:	83 c0       	rjmp	.+262    	; 0x189c <EXTI_ENTriggerEdge+0x16a>
		break;
	case EXTI_INT1:
		switch (Edge)
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	3f 83       	std	Y+7, r19	; 0x07
    179e:	2e 83       	std	Y+6, r18	; 0x06
    17a0:	8e 81       	ldd	r24, Y+6	; 0x06
    17a2:	9f 81       	ldd	r25, Y+7	; 0x07
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	91 05       	cpc	r25, r1
    17a8:	21 f1       	breq	.+72     	; 0x17f2 <EXTI_ENTriggerEdge+0xc0>
    17aa:	2e 81       	ldd	r18, Y+6	; 0x06
    17ac:	3f 81       	ldd	r19, Y+7	; 0x07
    17ae:	22 30       	cpi	r18, 0x02	; 2
    17b0:	31 05       	cpc	r19, r1
    17b2:	2c f4       	brge	.+10     	; 0x17be <EXTI_ENTriggerEdge+0x8c>
    17b4:	8e 81       	ldd	r24, Y+6	; 0x06
    17b6:	9f 81       	ldd	r25, Y+7	; 0x07
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	61 f0       	breq	.+24     	; 0x17d4 <EXTI_ENTriggerEdge+0xa2>
    17bc:	47 c0       	rjmp	.+142    	; 0x184c <EXTI_ENTriggerEdge+0x11a>
    17be:	2e 81       	ldd	r18, Y+6	; 0x06
    17c0:	3f 81       	ldd	r19, Y+7	; 0x07
    17c2:	22 30       	cpi	r18, 0x02	; 2
    17c4:	31 05       	cpc	r19, r1
    17c6:	21 f1       	breq	.+72     	; 0x1810 <EXTI_ENTriggerEdge+0xde>
    17c8:	8e 81       	ldd	r24, Y+6	; 0x06
    17ca:	9f 81       	ldd	r25, Y+7	; 0x07
    17cc:	83 30       	cpi	r24, 0x03	; 3
    17ce:	91 05       	cpc	r25, r1
    17d0:	71 f1       	breq	.+92     	; 0x182e <EXTI_ENTriggerEdge+0xfc>
    17d2:	3c c0       	rjmp	.+120    	; 0x184c <EXTI_ENTriggerEdge+0x11a>
		{
		case LOW_LEVEL:
			CLRBIT(MCUCR, ISC10);
    17d4:	a5 e5       	ldi	r26, 0x55	; 85
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e5 e5       	ldi	r30, 0x55	; 85
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	8b 7f       	andi	r24, 0xFB	; 251
    17e0:	8c 93       	st	X, r24
			CLRBIT(MCUCR, ISC11);
    17e2:	a5 e5       	ldi	r26, 0x55	; 85
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e5 e5       	ldi	r30, 0x55	; 85
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	87 7f       	andi	r24, 0xF7	; 247
    17ee:	8c 93       	st	X, r24
    17f0:	55 c0       	rjmp	.+170    	; 0x189c <EXTI_ENTriggerEdge+0x16a>
			break;
		case ANY_LOGIC_CHANGE:
			SETBIT(MCUCR, ISC10);
    17f2:	a5 e5       	ldi	r26, 0x55	; 85
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e5 e5       	ldi	r30, 0x55	; 85
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	84 60       	ori	r24, 0x04	; 4
    17fe:	8c 93       	st	X, r24
			CLRBIT(MCUCR, ISC11);
    1800:	a5 e5       	ldi	r26, 0x55	; 85
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e5 e5       	ldi	r30, 0x55	; 85
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	87 7f       	andi	r24, 0xF7	; 247
    180c:	8c 93       	st	X, r24
    180e:	46 c0       	rjmp	.+140    	; 0x189c <EXTI_ENTriggerEdge+0x16a>
			break;
		case FALLING_EDGE:
			CLRBIT(MCUCR, ISC10);
    1810:	a5 e5       	ldi	r26, 0x55	; 85
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	e5 e5       	ldi	r30, 0x55	; 85
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	8b 7f       	andi	r24, 0xFB	; 251
    181c:	8c 93       	st	X, r24
			SETBIT(MCUCR, ISC11);
    181e:	a5 e5       	ldi	r26, 0x55	; 85
    1820:	b0 e0       	ldi	r27, 0x00	; 0
    1822:	e5 e5       	ldi	r30, 0x55	; 85
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	88 60       	ori	r24, 0x08	; 8
    182a:	8c 93       	st	X, r24
    182c:	37 c0       	rjmp	.+110    	; 0x189c <EXTI_ENTriggerEdge+0x16a>
			break;
		case RISING_EDGE:
			SETBIT(MCUCR, ISC10);
    182e:	a5 e5       	ldi	r26, 0x55	; 85
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e5 e5       	ldi	r30, 0x55	; 85
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	84 60       	ori	r24, 0x04	; 4
    183a:	8c 93       	st	X, r24
			SETBIT(MCUCR, ISC11);
    183c:	a5 e5       	ldi	r26, 0x55	; 85
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e5 e5       	ldi	r30, 0x55	; 85
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	88 60       	ori	r24, 0x08	; 8
    1848:	8c 93       	st	X, r24
    184a:	28 c0       	rjmp	.+80     	; 0x189c <EXTI_ENTriggerEdge+0x16a>
			break;
		default:
			state = E_EXT_ERROR;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	25 c0       	rjmp	.+74     	; 0x189c <EXTI_ENTriggerEdge+0x16a>
			break;
		}
		break;
	case EXTI_INT2:
		switch (Edge)
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	3d 83       	std	Y+5, r19	; 0x05
    185a:	2c 83       	std	Y+4, r18	; 0x04
    185c:	8c 81       	ldd	r24, Y+4	; 0x04
    185e:	9d 81       	ldd	r25, Y+5	; 0x05
    1860:	82 30       	cpi	r24, 0x02	; 2
    1862:	91 05       	cpc	r25, r1
    1864:	31 f0       	breq	.+12     	; 0x1872 <EXTI_ENTriggerEdge+0x140>
    1866:	2c 81       	ldd	r18, Y+4	; 0x04
    1868:	3d 81       	ldd	r19, Y+5	; 0x05
    186a:	23 30       	cpi	r18, 0x03	; 3
    186c:	31 05       	cpc	r19, r1
    186e:	49 f0       	breq	.+18     	; 0x1882 <EXTI_ENTriggerEdge+0x150>
    1870:	10 c0       	rjmp	.+32     	; 0x1892 <EXTI_ENTriggerEdge+0x160>
		{
		case FALLING_EDGE:
			CLRBIT(MCUCSR, ISC2);
    1872:	a4 e5       	ldi	r26, 0x54	; 84
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e4 e5       	ldi	r30, 0x54	; 84
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	8f 7b       	andi	r24, 0xBF	; 191
    187e:	8c 93       	st	X, r24
    1880:	0d c0       	rjmp	.+26     	; 0x189c <EXTI_ENTriggerEdge+0x16a>
			break;
		case RISING_EDGE:
			SETBIT(MCUCSR, ISC2);
    1882:	a4 e5       	ldi	r26, 0x54	; 84
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e4 e5       	ldi	r30, 0x54	; 84
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	80 64       	ori	r24, 0x40	; 64
    188e:	8c 93       	st	X, r24
    1890:	05 c0       	rjmp	.+10     	; 0x189c <EXTI_ENTriggerEdge+0x16a>
			break;
		default:
			state = E_EXT_ERROR;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	89 83       	std	Y+1, r24	; 0x01
    1896:	02 c0       	rjmp	.+4      	; 0x189c <EXTI_ENTriggerEdge+0x16a>
			break;
		}
		break;

	default:
		state = E_EXT_ERROR;
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    189c:	89 81       	ldd	r24, Y+1	; 0x01
} /* EXTI_voidTriggerEdge */
    189e:	29 96       	adiw	r28, 0x09	; 9
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <EXTI_SetCallBack>:

EN_EXTIERRORSTATE_t EXTI_SetCallBack(EN_EXTI_t Interrupt, void (*LocalPtr)(void))
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <EXTI_SetCallBack+0x6>
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <EXTI_SetCallBack+0x8>
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <EXTI_SetCallBack+0xa>
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	8a 83       	std	Y+2, r24	; 0x02
    18c0:	7c 83       	std	Y+4, r23	; 0x04
    18c2:	6b 83       	std	Y+3, r22	; 0x03
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    18c4:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	28 2f       	mov	r18, r24
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	3e 83       	std	Y+6, r19	; 0x06
    18ce:	2d 83       	std	Y+5, r18	; 0x05
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	9e 81       	ldd	r25, Y+6	; 0x06
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	91 05       	cpc	r25, r1
    18d8:	81 f0       	breq	.+32     	; 0x18fa <EXTI_SetCallBack+0x4a>
    18da:	2d 81       	ldd	r18, Y+5	; 0x05
    18dc:	3e 81       	ldd	r19, Y+6	; 0x06
    18de:	22 30       	cpi	r18, 0x02	; 2
    18e0:	31 05       	cpc	r19, r1
    18e2:	91 f0       	breq	.+36     	; 0x1908 <EXTI_SetCallBack+0x58>
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	a9 f4       	brne	.+42     	; 0x1916 <EXTI_SetCallBack+0x66>
	{
	case EXTI_INT0:
		EXTI_INT0_FPtr = LocalPtr;
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	90 93 b3 01 	sts	0x01B3, r25
    18f4:	80 93 b2 01 	sts	0x01B2, r24
    18f8:	10 c0       	rjmp	.+32     	; 0x191a <EXTI_SetCallBack+0x6a>
		break;
	case EXTI_INT1:
		EXTI_INT1_FPtr = LocalPtr;
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	9c 81       	ldd	r25, Y+4	; 0x04
    18fe:	90 93 b5 01 	sts	0x01B5, r25
    1902:	80 93 b4 01 	sts	0x01B4, r24
    1906:	09 c0       	rjmp	.+18     	; 0x191a <EXTI_SetCallBack+0x6a>
		break;
	case EXTI_INT2:
		EXTI_INT2_FPtr = LocalPtr;
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	9c 81       	ldd	r25, Y+4	; 0x04
    190c:	90 93 b7 01 	sts	0x01B7, r25
    1910:	80 93 b6 01 	sts	0x01B6, r24
    1914:	02 c0       	rjmp	.+4      	; 0x191a <EXTI_SetCallBack+0x6a>
		break;
	default:
		state = E_EXT_ERROR;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    191a:	89 81       	ldd	r24, Y+1	; 0x01

} /* EXTI_SetCallBack */
    191c:	26 96       	adiw	r28, 0x06	; 6
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	cd bf       	out	0x3d, r28	; 61
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <__vector_1>:

void __vector_1(void)
{
    192e:	1f 92       	push	r1
    1930:	0f 92       	push	r0
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	0f 92       	push	r0
    1936:	11 24       	eor	r1, r1
    1938:	2f 93       	push	r18
    193a:	3f 93       	push	r19
    193c:	4f 93       	push	r20
    193e:	5f 93       	push	r21
    1940:	6f 93       	push	r22
    1942:	7f 93       	push	r23
    1944:	8f 93       	push	r24
    1946:	9f 93       	push	r25
    1948:	af 93       	push	r26
    194a:	bf 93       	push	r27
    194c:	ef 93       	push	r30
    194e:	ff 93       	push	r31
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_INT0_FPtr != NULLPTR)
    1958:	80 91 b2 01 	lds	r24, 0x01B2
    195c:	90 91 b3 01 	lds	r25, 0x01B3
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	29 f0       	breq	.+10     	; 0x196e <__vector_1+0x40>
	{
		EXTI_INT0_FPtr();
    1964:	e0 91 b2 01 	lds	r30, 0x01B2
    1968:	f0 91 b3 01 	lds	r31, 0x01B3
    196c:	09 95       	icall
	}
}
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	ff 91       	pop	r31
    1974:	ef 91       	pop	r30
    1976:	bf 91       	pop	r27
    1978:	af 91       	pop	r26
    197a:	9f 91       	pop	r25
    197c:	8f 91       	pop	r24
    197e:	7f 91       	pop	r23
    1980:	6f 91       	pop	r22
    1982:	5f 91       	pop	r21
    1984:	4f 91       	pop	r20
    1986:	3f 91       	pop	r19
    1988:	2f 91       	pop	r18
    198a:	0f 90       	pop	r0
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	0f 90       	pop	r0
    1990:	1f 90       	pop	r1
    1992:	18 95       	reti

00001994 <__vector_2>:

void __vector_2(void)
{
    1994:	1f 92       	push	r1
    1996:	0f 92       	push	r0
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	0f 92       	push	r0
    199c:	11 24       	eor	r1, r1
    199e:	2f 93       	push	r18
    19a0:	3f 93       	push	r19
    19a2:	4f 93       	push	r20
    19a4:	5f 93       	push	r21
    19a6:	6f 93       	push	r22
    19a8:	7f 93       	push	r23
    19aa:	8f 93       	push	r24
    19ac:	9f 93       	push	r25
    19ae:	af 93       	push	r26
    19b0:	bf 93       	push	r27
    19b2:	ef 93       	push	r30
    19b4:	ff 93       	push	r31
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_INT1_FPtr != NULLPTR)
    19be:	80 91 b4 01 	lds	r24, 0x01B4
    19c2:	90 91 b5 01 	lds	r25, 0x01B5
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	29 f0       	breq	.+10     	; 0x19d4 <__vector_2+0x40>
	{
		EXTI_INT1_FPtr();
    19ca:	e0 91 b4 01 	lds	r30, 0x01B4
    19ce:	f0 91 b5 01 	lds	r31, 0x01B5
    19d2:	09 95       	icall
	}
}
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	ff 91       	pop	r31
    19da:	ef 91       	pop	r30
    19dc:	bf 91       	pop	r27
    19de:	af 91       	pop	r26
    19e0:	9f 91       	pop	r25
    19e2:	8f 91       	pop	r24
    19e4:	7f 91       	pop	r23
    19e6:	6f 91       	pop	r22
    19e8:	5f 91       	pop	r21
    19ea:	4f 91       	pop	r20
    19ec:	3f 91       	pop	r19
    19ee:	2f 91       	pop	r18
    19f0:	0f 90       	pop	r0
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	0f 90       	pop	r0
    19f6:	1f 90       	pop	r1
    19f8:	18 95       	reti

000019fa <__vector_3>:

void __vector_3(void)
{
    19fa:	1f 92       	push	r1
    19fc:	0f 92       	push	r0
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	0f 92       	push	r0
    1a02:	11 24       	eor	r1, r1
    1a04:	2f 93       	push	r18
    1a06:	3f 93       	push	r19
    1a08:	4f 93       	push	r20
    1a0a:	5f 93       	push	r21
    1a0c:	6f 93       	push	r22
    1a0e:	7f 93       	push	r23
    1a10:	8f 93       	push	r24
    1a12:	9f 93       	push	r25
    1a14:	af 93       	push	r26
    1a16:	bf 93       	push	r27
    1a18:	ef 93       	push	r30
    1a1a:	ff 93       	push	r31
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_INT2_FPtr != NULLPTR)
    1a24:	80 91 b6 01 	lds	r24, 0x01B6
    1a28:	90 91 b7 01 	lds	r25, 0x01B7
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	29 f0       	breq	.+10     	; 0x1a3a <__vector_3+0x40>
	{
		EXTI_INT2_FPtr();
    1a30:	e0 91 b6 01 	lds	r30, 0x01B6
    1a34:	f0 91 b7 01 	lds	r31, 0x01B7
    1a38:	09 95       	icall
	}
}
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	ff 91       	pop	r31
    1a40:	ef 91       	pop	r30
    1a42:	bf 91       	pop	r27
    1a44:	af 91       	pop	r26
    1a46:	9f 91       	pop	r25
    1a48:	8f 91       	pop	r24
    1a4a:	7f 91       	pop	r23
    1a4c:	6f 91       	pop	r22
    1a4e:	5f 91       	pop	r21
    1a50:	4f 91       	pop	r20
    1a52:	3f 91       	pop	r19
    1a54:	2f 91       	pop	r18
    1a56:	0f 90       	pop	r0
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	0f 90       	pop	r0
    1a5c:	1f 90       	pop	r1
    1a5e:	18 95       	reti

00001a60 <DIO_voidSetPinValue>:
 * @param EN_Pin    PIN Number
 * @param EN_Value  HIGH or LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	cd b7       	in	r28, 0x3d	; 61
    1a66:	de b7       	in	r29, 0x3e	; 62
    1a68:	28 97       	sbiw	r28, 0x08	; 8
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	8a 83       	std	Y+2, r24	; 0x02
    1a76:	6b 83       	std	Y+3, r22	; 0x03
    1a78:	4c 83       	std	Y+4, r20	; 0x04
    EN_ERRORSTATE_t state;
    state = E_OK;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Value == LOW)
    1a7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a80:	88 23       	and	r24, r24
    1a82:	09 f0       	breq	.+2      	; 0x1a86 <DIO_voidSetPinValue+0x26>
    1a84:	76 c0       	rjmp	.+236    	; 0x1b72 <DIO_voidSetPinValue+0x112>
    {
        switch (EN_Port)
    1a86:	8a 81       	ldd	r24, Y+2	; 0x02
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	38 87       	std	Y+8, r19	; 0x08
    1a8e:	2f 83       	std	Y+7, r18	; 0x07
    1a90:	8f 81       	ldd	r24, Y+7	; 0x07
    1a92:	98 85       	ldd	r25, Y+8	; 0x08
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	91 05       	cpc	r25, r1
    1a98:	59 f1       	breq	.+86     	; 0x1af0 <DIO_voidSetPinValue+0x90>
    1a9a:	2f 81       	ldd	r18, Y+7	; 0x07
    1a9c:	38 85       	ldd	r19, Y+8	; 0x08
    1a9e:	22 30       	cpi	r18, 0x02	; 2
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	2c f4       	brge	.+10     	; 0x1aae <DIO_voidSetPinValue+0x4e>
    1aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa6:	98 85       	ldd	r25, Y+8	; 0x08
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	69 f0       	breq	.+26     	; 0x1ac6 <DIO_voidSetPinValue+0x66>
    1aac:	60 c0       	rjmp	.+192    	; 0x1b6e <DIO_voidSetPinValue+0x10e>
    1aae:	2f 81       	ldd	r18, Y+7	; 0x07
    1ab0:	38 85       	ldd	r19, Y+8	; 0x08
    1ab2:	22 30       	cpi	r18, 0x02	; 2
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	89 f1       	breq	.+98     	; 0x1b1a <DIO_voidSetPinValue+0xba>
    1ab8:	8f 81       	ldd	r24, Y+7	; 0x07
    1aba:	98 85       	ldd	r25, Y+8	; 0x08
    1abc:	83 30       	cpi	r24, 0x03	; 3
    1abe:	91 05       	cpc	r25, r1
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <DIO_voidSetPinValue+0x64>
    1ac2:	40 c0       	rjmp	.+128    	; 0x1b44 <DIO_voidSetPinValue+0xe4>
    1ac4:	54 c0       	rjmp	.+168    	; 0x1b6e <DIO_voidSetPinValue+0x10e>
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
    1ac6:	ab e3       	ldi	r26, 0x3B	; 59
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	eb e3       	ldi	r30, 0x3B	; 59
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 2e       	mov	r0, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <DIO_voidSetPinValue+0x84>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <DIO_voidSetPinValue+0x80>
    1ae8:	80 95       	com	r24
    1aea:	84 23       	and	r24, r20
    1aec:	8c 93       	st	X, r24
    1aee:	b5 c0       	rjmp	.+362    	; 0x1c5a <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
    1af0:	a8 e3       	ldi	r26, 0x38	; 56
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e8 e3       	ldi	r30, 0x38	; 56
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	48 2f       	mov	r20, r24
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	02 2e       	mov	r0, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <DIO_voidSetPinValue+0xae>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	0a 94       	dec	r0
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <DIO_voidSetPinValue+0xaa>
    1b12:	80 95       	com	r24
    1b14:	84 23       	and	r24, r20
    1b16:	8c 93       	st	X, r24
    1b18:	a0 c0       	rjmp	.+320    	; 0x1c5a <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
    1b1a:	a5 e3       	ldi	r26, 0x35	; 53
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	e5 e3       	ldi	r30, 0x35	; 53
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	48 2f       	mov	r20, r24
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	02 2e       	mov	r0, r18
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <DIO_voidSetPinValue+0xd8>
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	0a 94       	dec	r0
    1b3a:	e2 f7       	brpl	.-8      	; 0x1b34 <DIO_voidSetPinValue+0xd4>
    1b3c:	80 95       	com	r24
    1b3e:	84 23       	and	r24, r20
    1b40:	8c 93       	st	X, r24
    1b42:	8b c0       	rjmp	.+278    	; 0x1c5a <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
    1b44:	a2 e3       	ldi	r26, 0x32	; 50
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	e2 e3       	ldi	r30, 0x32	; 50
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_voidSetPinValue+0x102>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_voidSetPinValue+0xfe>
    1b66:	80 95       	com	r24
    1b68:	84 23       	and	r24, r20
    1b6a:	8c 93       	st	X, r24
    1b6c:	76 c0       	rjmp	.+236    	; 0x1c5a <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_ERROR;
    1b6e:	19 82       	std	Y+1, r1	; 0x01
    1b70:	74 c0       	rjmp	.+232    	; 0x1c5a <DIO_voidSetPinValue+0x1fa>
            break;
        }
    }
    else if (EN_Value == HIGH)
    1b72:	8c 81       	ldd	r24, Y+4	; 0x04
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <DIO_voidSetPinValue+0x11a>
    1b78:	70 c0       	rjmp	.+224    	; 0x1c5a <DIO_voidSetPinValue+0x1fa>
    {
        switch (EN_Port)
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	3e 83       	std	Y+6, r19	; 0x06
    1b82:	2d 83       	std	Y+5, r18	; 0x05
    1b84:	8d 81       	ldd	r24, Y+5	; 0x05
    1b86:	9e 81       	ldd	r25, Y+6	; 0x06
    1b88:	81 30       	cpi	r24, 0x01	; 1
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	49 f1       	breq	.+82     	; 0x1be0 <DIO_voidSetPinValue+0x180>
    1b8e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b90:	3e 81       	ldd	r19, Y+6	; 0x06
    1b92:	22 30       	cpi	r18, 0x02	; 2
    1b94:	31 05       	cpc	r19, r1
    1b96:	2c f4       	brge	.+10     	; 0x1ba2 <DIO_voidSetPinValue+0x142>
    1b98:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	61 f0       	breq	.+24     	; 0x1bb8 <DIO_voidSetPinValue+0x158>
    1ba0:	5b c0       	rjmp	.+182    	; 0x1c58 <DIO_voidSetPinValue+0x1f8>
    1ba2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ba4:	3e 81       	ldd	r19, Y+6	; 0x06
    1ba6:	22 30       	cpi	r18, 0x02	; 2
    1ba8:	31 05       	cpc	r19, r1
    1baa:	71 f1       	breq	.+92     	; 0x1c08 <DIO_voidSetPinValue+0x1a8>
    1bac:	8d 81       	ldd	r24, Y+5	; 0x05
    1bae:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb0:	83 30       	cpi	r24, 0x03	; 3
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	e9 f1       	breq	.+122    	; 0x1c30 <DIO_voidSetPinValue+0x1d0>
    1bb6:	50 c0       	rjmp	.+160    	; 0x1c58 <DIO_voidSetPinValue+0x1f8>
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
    1bb8:	ab e3       	ldi	r26, 0x3B	; 59
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	eb e3       	ldi	r30, 0x3B	; 59
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	48 2f       	mov	r20, r24
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	02 2e       	mov	r0, r18
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <DIO_voidSetPinValue+0x176>
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	0a 94       	dec	r0
    1bd8:	e2 f7       	brpl	.-8      	; 0x1bd2 <DIO_voidSetPinValue+0x172>
    1bda:	84 2b       	or	r24, r20
    1bdc:	8c 93       	st	X, r24
    1bde:	3d c0       	rjmp	.+122    	; 0x1c5a <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
    1be0:	a8 e3       	ldi	r26, 0x38	; 56
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e8 e3       	ldi	r30, 0x38	; 56
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	48 2f       	mov	r20, r24
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	02 2e       	mov	r0, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <DIO_voidSetPinValue+0x19e>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <DIO_voidSetPinValue+0x19a>
    1c02:	84 2b       	or	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	29 c0       	rjmp	.+82     	; 0x1c5a <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
    1c08:	a5 e3       	ldi	r26, 0x35	; 53
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e5 e3       	ldi	r30, 0x35	; 53
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8b 81       	ldd	r24, Y+3	; 0x03
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 2e       	mov	r0, r18
    1c20:	02 c0       	rjmp	.+4      	; 0x1c26 <DIO_voidSetPinValue+0x1c6>
    1c22:	88 0f       	add	r24, r24
    1c24:	99 1f       	adc	r25, r25
    1c26:	0a 94       	dec	r0
    1c28:	e2 f7       	brpl	.-8      	; 0x1c22 <DIO_voidSetPinValue+0x1c2>
    1c2a:	84 2b       	or	r24, r20
    1c2c:	8c 93       	st	X, r24
    1c2e:	15 c0       	rjmp	.+42     	; 0x1c5a <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
    1c30:	a2 e3       	ldi	r26, 0x32	; 50
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e2 e3       	ldi	r30, 0x32	; 50
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3e:	28 2f       	mov	r18, r24
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	02 2e       	mov	r0, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <DIO_voidSetPinValue+0x1ee>
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	0a 94       	dec	r0
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <DIO_voidSetPinValue+0x1ea>
    1c52:	84 2b       	or	r24, r20
    1c54:	8c 93       	st	X, r24
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_ERROR;
    1c58:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinValue */
    1c5c:	28 96       	adiw	r28, 0x08	; 8
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <DIO_voidSetPinDirection>:
 * @param EN_Pin  PIN Number
 * @param EN_Direction Direction of the Pin INPUT | OUTPUT
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	28 97       	sbiw	r28, 0x08	; 8
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	8a 83       	std	Y+2, r24	; 0x02
    1c84:	6b 83       	std	Y+3, r22	; 0x03
    1c86:	4c 83       	std	Y+4, r20	; 0x04
    EN_ERRORSTATE_t state;
    state = E_OK;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Direction == INPUT)
    1c8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8e:	88 23       	and	r24, r24
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <DIO_voidSetPinDirection+0x26>
    1c92:	76 c0       	rjmp	.+236    	; 0x1d80 <DIO_voidSetPinDirection+0x112>
    {
        switch (EN_port)
    1c94:	8a 81       	ldd	r24, Y+2	; 0x02
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	38 87       	std	Y+8, r19	; 0x08
    1c9c:	2f 83       	std	Y+7, r18	; 0x07
    1c9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1ca0:	98 85       	ldd	r25, Y+8	; 0x08
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	59 f1       	breq	.+86     	; 0x1cfe <DIO_voidSetPinDirection+0x90>
    1ca8:	2f 81       	ldd	r18, Y+7	; 0x07
    1caa:	38 85       	ldd	r19, Y+8	; 0x08
    1cac:	22 30       	cpi	r18, 0x02	; 2
    1cae:	31 05       	cpc	r19, r1
    1cb0:	2c f4       	brge	.+10     	; 0x1cbc <DIO_voidSetPinDirection+0x4e>
    1cb2:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb4:	98 85       	ldd	r25, Y+8	; 0x08
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	69 f0       	breq	.+26     	; 0x1cd4 <DIO_voidSetPinDirection+0x66>
    1cba:	60 c0       	rjmp	.+192    	; 0x1d7c <DIO_voidSetPinDirection+0x10e>
    1cbc:	2f 81       	ldd	r18, Y+7	; 0x07
    1cbe:	38 85       	ldd	r19, Y+8	; 0x08
    1cc0:	22 30       	cpi	r18, 0x02	; 2
    1cc2:	31 05       	cpc	r19, r1
    1cc4:	89 f1       	breq	.+98     	; 0x1d28 <DIO_voidSetPinDirection+0xba>
    1cc6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cc8:	98 85       	ldd	r25, Y+8	; 0x08
    1cca:	83 30       	cpi	r24, 0x03	; 3
    1ccc:	91 05       	cpc	r25, r1
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <DIO_voidSetPinDirection+0x64>
    1cd0:	40 c0       	rjmp	.+128    	; 0x1d52 <DIO_voidSetPinDirection+0xe4>
    1cd2:	54 c0       	rjmp	.+168    	; 0x1d7c <DIO_voidSetPinDirection+0x10e>
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
    1cd4:	aa e3       	ldi	r26, 0x3A	; 58
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	ea e3       	ldi	r30, 0x3A	; 58
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	48 2f       	mov	r20, r24
    1ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	02 2e       	mov	r0, r18
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <DIO_voidSetPinDirection+0x84>
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	0a 94       	dec	r0
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <DIO_voidSetPinDirection+0x80>
    1cf6:	80 95       	com	r24
    1cf8:	84 23       	and	r24, r20
    1cfa:	8c 93       	st	X, r24
    1cfc:	b5 c0       	rjmp	.+362    	; 0x1e68 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
    1cfe:	a7 e3       	ldi	r26, 0x37	; 55
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e7 e3       	ldi	r30, 0x37	; 55
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	80 81       	ld	r24, Z
    1d08:	48 2f       	mov	r20, r24
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	02 2e       	mov	r0, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <DIO_voidSetPinDirection+0xae>
    1d18:	88 0f       	add	r24, r24
    1d1a:	99 1f       	adc	r25, r25
    1d1c:	0a 94       	dec	r0
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <DIO_voidSetPinDirection+0xaa>
    1d20:	80 95       	com	r24
    1d22:	84 23       	and	r24, r20
    1d24:	8c 93       	st	X, r24
    1d26:	a0 c0       	rjmp	.+320    	; 0x1e68 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
    1d28:	a4 e3       	ldi	r26, 0x34	; 52
    1d2a:	b0 e0       	ldi	r27, 0x00	; 0
    1d2c:	e4 e3       	ldi	r30, 0x34	; 52
    1d2e:	f0 e0       	ldi	r31, 0x00	; 0
    1d30:	80 81       	ld	r24, Z
    1d32:	48 2f       	mov	r20, r24
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	02 2e       	mov	r0, r18
    1d40:	02 c0       	rjmp	.+4      	; 0x1d46 <DIO_voidSetPinDirection+0xd8>
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	0a 94       	dec	r0
    1d48:	e2 f7       	brpl	.-8      	; 0x1d42 <DIO_voidSetPinDirection+0xd4>
    1d4a:	80 95       	com	r24
    1d4c:	84 23       	and	r24, r20
    1d4e:	8c 93       	st	X, r24
    1d50:	8b c0       	rjmp	.+278    	; 0x1e68 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
    1d52:	a1 e3       	ldi	r26, 0x31	; 49
    1d54:	b0 e0       	ldi	r27, 0x00	; 0
    1d56:	e1 e3       	ldi	r30, 0x31	; 49
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	80 81       	ld	r24, Z
    1d5c:	48 2f       	mov	r20, r24
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	02 2e       	mov	r0, r18
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <DIO_voidSetPinDirection+0x102>
    1d6c:	88 0f       	add	r24, r24
    1d6e:	99 1f       	adc	r25, r25
    1d70:	0a 94       	dec	r0
    1d72:	e2 f7       	brpl	.-8      	; 0x1d6c <DIO_voidSetPinDirection+0xfe>
    1d74:	80 95       	com	r24
    1d76:	84 23       	and	r24, r20
    1d78:	8c 93       	st	X, r24
    1d7a:	76 c0       	rjmp	.+236    	; 0x1e68 <DIO_voidSetPinDirection+0x1fa>
            break;
        default:
            state = E_ERROR;
    1d7c:	19 82       	std	Y+1, r1	; 0x01
    1d7e:	74 c0       	rjmp	.+232    	; 0x1e68 <DIO_voidSetPinDirection+0x1fa>
            break;
        }
    }
    else if (EN_Direction == OUTPUT)
    1d80:	8c 81       	ldd	r24, Y+4	; 0x04
    1d82:	81 30       	cpi	r24, 0x01	; 1
    1d84:	09 f0       	breq	.+2      	; 0x1d88 <DIO_voidSetPinDirection+0x11a>
    1d86:	70 c0       	rjmp	.+224    	; 0x1e68 <DIO_voidSetPinDirection+0x1fa>
    {
        switch (EN_port)
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	3e 83       	std	Y+6, r19	; 0x06
    1d90:	2d 83       	std	Y+5, r18	; 0x05
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	81 30       	cpi	r24, 0x01	; 1
    1d98:	91 05       	cpc	r25, r1
    1d9a:	49 f1       	breq	.+82     	; 0x1dee <DIO_voidSetPinDirection+0x180>
    1d9c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d9e:	3e 81       	ldd	r19, Y+6	; 0x06
    1da0:	22 30       	cpi	r18, 0x02	; 2
    1da2:	31 05       	cpc	r19, r1
    1da4:	2c f4       	brge	.+10     	; 0x1db0 <DIO_voidSetPinDirection+0x142>
    1da6:	8d 81       	ldd	r24, Y+5	; 0x05
    1da8:	9e 81       	ldd	r25, Y+6	; 0x06
    1daa:	00 97       	sbiw	r24, 0x00	; 0
    1dac:	61 f0       	breq	.+24     	; 0x1dc6 <DIO_voidSetPinDirection+0x158>
    1dae:	5b c0       	rjmp	.+182    	; 0x1e66 <DIO_voidSetPinDirection+0x1f8>
    1db0:	2d 81       	ldd	r18, Y+5	; 0x05
    1db2:	3e 81       	ldd	r19, Y+6	; 0x06
    1db4:	22 30       	cpi	r18, 0x02	; 2
    1db6:	31 05       	cpc	r19, r1
    1db8:	71 f1       	breq	.+92     	; 0x1e16 <DIO_voidSetPinDirection+0x1a8>
    1dba:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbe:	83 30       	cpi	r24, 0x03	; 3
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	e9 f1       	breq	.+122    	; 0x1e3e <DIO_voidSetPinDirection+0x1d0>
    1dc4:	50 c0       	rjmp	.+160    	; 0x1e66 <DIO_voidSetPinDirection+0x1f8>
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
    1dc6:	aa e3       	ldi	r26, 0x3A	; 58
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	ea e3       	ldi	r30, 0x3A	; 58
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	02 2e       	mov	r0, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <DIO_voidSetPinDirection+0x176>
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	0a 94       	dec	r0
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <DIO_voidSetPinDirection+0x172>
    1de8:	84 2b       	or	r24, r20
    1dea:	8c 93       	st	X, r24
    1dec:	3d c0       	rjmp	.+122    	; 0x1e68 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
    1dee:	a7 e3       	ldi	r26, 0x37	; 55
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e7 e3       	ldi	r30, 0x37	; 55
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	48 2f       	mov	r20, r24
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	28 2f       	mov	r18, r24
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	02 2e       	mov	r0, r18
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <DIO_voidSetPinDirection+0x19e>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	0a 94       	dec	r0
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <DIO_voidSetPinDirection+0x19a>
    1e10:	84 2b       	or	r24, r20
    1e12:	8c 93       	st	X, r24
    1e14:	29 c0       	rjmp	.+82     	; 0x1e68 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
    1e16:	a4 e3       	ldi	r26, 0x34	; 52
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e4 e3       	ldi	r30, 0x34	; 52
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	48 2f       	mov	r20, r24
    1e22:	8b 81       	ldd	r24, Y+3	; 0x03
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	02 2e       	mov	r0, r18
    1e2e:	02 c0       	rjmp	.+4      	; 0x1e34 <DIO_voidSetPinDirection+0x1c6>
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	0a 94       	dec	r0
    1e36:	e2 f7       	brpl	.-8      	; 0x1e30 <DIO_voidSetPinDirection+0x1c2>
    1e38:	84 2b       	or	r24, r20
    1e3a:	8c 93       	st	X, r24
    1e3c:	15 c0       	rjmp	.+42     	; 0x1e68 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
    1e3e:	a1 e3       	ldi	r26, 0x31	; 49
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e1 e3       	ldi	r30, 0x31	; 49
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	48 2f       	mov	r20, r24
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	02 2e       	mov	r0, r18
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <DIO_voidSetPinDirection+0x1ee>
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	0a 94       	dec	r0
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <DIO_voidSetPinDirection+0x1ea>
    1e60:	84 2b       	or	r24, r20
    1e62:	8c 93       	st	X, r24
    1e64:	01 c0       	rjmp	.+2      	; 0x1e68 <DIO_voidSetPinDirection+0x1fa>
            break;
        default:
            state = E_ERROR;
    1e66:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinDirection */
    1e6a:	28 96       	adiw	r28, 0x08	; 8
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <DIO_u8GetPinValue>:
 * @param EN_Port           PORT Name
 * @param EN_Pin            PIN Number
 * @return EN_value_type    return Pin HIGH | LOW
 */
EN_value_type DIO_u8GetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	00 d0       	rcall	.+0      	; 0x1e82 <DIO_u8GetPinValue+0x6>
    1e82:	00 d0       	rcall	.+0      	; 0x1e84 <DIO_u8GetPinValue+0x8>
    1e84:	0f 92       	push	r0
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	8a 83       	std	Y+2, r24	; 0x02
    1e8c:	6b 83       	std	Y+3, r22	; 0x03
    EN_value_type EN_ret_val;
    switch (EN_Port)
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	3d 83       	std	Y+5, r19	; 0x05
    1e96:	2c 83       	std	Y+4, r18	; 0x04
    1e98:	4c 81       	ldd	r20, Y+4	; 0x04
    1e9a:	5d 81       	ldd	r21, Y+5	; 0x05
    1e9c:	41 30       	cpi	r20, 0x01	; 1
    1e9e:	51 05       	cpc	r21, r1
    1ea0:	41 f1       	breq	.+80     	; 0x1ef2 <DIO_u8GetPinValue+0x76>
    1ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea6:	82 30       	cpi	r24, 0x02	; 2
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	34 f4       	brge	.+12     	; 0x1eb8 <DIO_u8GetPinValue+0x3c>
    1eac:	2c 81       	ldd	r18, Y+4	; 0x04
    1eae:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb0:	21 15       	cp	r18, r1
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	61 f0       	breq	.+24     	; 0x1ece <DIO_u8GetPinValue+0x52>
    1eb6:	52 c0       	rjmp	.+164    	; 0x1f5c <DIO_u8GetPinValue+0xe0>
    1eb8:	4c 81       	ldd	r20, Y+4	; 0x04
    1eba:	5d 81       	ldd	r21, Y+5	; 0x05
    1ebc:	42 30       	cpi	r20, 0x02	; 2
    1ebe:	51 05       	cpc	r21, r1
    1ec0:	51 f1       	breq	.+84     	; 0x1f16 <DIO_u8GetPinValue+0x9a>
    1ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ec4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ec6:	83 30       	cpi	r24, 0x03	; 3
    1ec8:	91 05       	cpc	r25, r1
    1eca:	b9 f1       	breq	.+110    	; 0x1f3a <DIO_u8GetPinValue+0xbe>
    1ecc:	47 c0       	rjmp	.+142    	; 0x1f5c <DIO_u8GetPinValue+0xe0>
    {
    case PORT_A:
        EN_ret_val = GETBIT(PINA, EN_Pin);
    1ece:	e9 e3       	ldi	r30, 0x39	; 57
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	a9 01       	movw	r20, r18
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <DIO_u8GetPinValue+0x6a>
    1ee2:	55 95       	asr	r21
    1ee4:	47 95       	ror	r20
    1ee6:	8a 95       	dec	r24
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <DIO_u8GetPinValue+0x66>
    1eea:	ca 01       	movw	r24, r20
    1eec:	81 70       	andi	r24, 0x01	; 1
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	35 c0       	rjmp	.+106    	; 0x1f5c <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_B:
        EN_ret_val = GETBIT(PINB, EN_Pin);
    1ef2:	e6 e3       	ldi	r30, 0x36	; 54
    1ef4:	f0 e0       	ldi	r31, 0x00	; 0
    1ef6:	80 81       	ld	r24, Z
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	88 2f       	mov	r24, r24
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	a9 01       	movw	r20, r18
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <DIO_u8GetPinValue+0x8e>
    1f06:	55 95       	asr	r21
    1f08:	47 95       	ror	r20
    1f0a:	8a 95       	dec	r24
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <DIO_u8GetPinValue+0x8a>
    1f0e:	ca 01       	movw	r24, r20
    1f10:	81 70       	andi	r24, 0x01	; 1
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	23 c0       	rjmp	.+70     	; 0x1f5c <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_C:
        EN_ret_val = GETBIT(PINC, EN_Pin);
    1f16:	e3 e3       	ldi	r30, 0x33	; 51
    1f18:	f0 e0       	ldi	r31, 0x00	; 0
    1f1a:	80 81       	ld	r24, Z
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	88 2f       	mov	r24, r24
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	a9 01       	movw	r20, r18
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <DIO_u8GetPinValue+0xb2>
    1f2a:	55 95       	asr	r21
    1f2c:	47 95       	ror	r20
    1f2e:	8a 95       	dec	r24
    1f30:	e2 f7       	brpl	.-8      	; 0x1f2a <DIO_u8GetPinValue+0xae>
    1f32:	ca 01       	movw	r24, r20
    1f34:	81 70       	andi	r24, 0x01	; 1
    1f36:	89 83       	std	Y+1, r24	; 0x01
    1f38:	11 c0       	rjmp	.+34     	; 0x1f5c <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_D:
        EN_ret_val = GETBIT(PIND, EN_Pin);
    1f3a:	e0 e3       	ldi	r30, 0x30	; 48
    1f3c:	f0 e0       	ldi	r31, 0x00	; 0
    1f3e:	80 81       	ld	r24, Z
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	88 2f       	mov	r24, r24
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	a9 01       	movw	r20, r18
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <DIO_u8GetPinValue+0xd6>
    1f4e:	55 95       	asr	r21
    1f50:	47 95       	ror	r20
    1f52:	8a 95       	dec	r24
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <DIO_u8GetPinValue+0xd2>
    1f56:	ca 01       	movw	r24, r20
    1f58:	81 70       	andi	r24, 0x01	; 1
    1f5a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return EN_ret_val;
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_u8GetPinValue */
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <DIO_voidTogPin>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidTogPin(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <DIO_voidTogPin+0x6>
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <DIO_voidTogPin+0x8>
    1f76:	0f 92       	push	r0
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	8a 83       	std	Y+2, r24	; 0x02
    1f7e:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	3d 83       	std	Y+5, r19	; 0x05
    1f8c:	2c 83       	std	Y+4, r18	; 0x04
    1f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f90:	9d 81       	ldd	r25, Y+5	; 0x05
    1f92:	81 30       	cpi	r24, 0x01	; 1
    1f94:	91 05       	cpc	r25, r1
    1f96:	49 f1       	breq	.+82     	; 0x1fea <DIO_voidTogPin+0x7c>
    1f98:	2c 81       	ldd	r18, Y+4	; 0x04
    1f9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f9c:	22 30       	cpi	r18, 0x02	; 2
    1f9e:	31 05       	cpc	r19, r1
    1fa0:	2c f4       	brge	.+10     	; 0x1fac <DIO_voidTogPin+0x3e>
    1fa2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	61 f0       	breq	.+24     	; 0x1fc2 <DIO_voidTogPin+0x54>
    1faa:	5b c0       	rjmp	.+182    	; 0x2062 <DIO_voidTogPin+0xf4>
    1fac:	2c 81       	ldd	r18, Y+4	; 0x04
    1fae:	3d 81       	ldd	r19, Y+5	; 0x05
    1fb0:	22 30       	cpi	r18, 0x02	; 2
    1fb2:	31 05       	cpc	r19, r1
    1fb4:	71 f1       	breq	.+92     	; 0x2012 <DIO_voidTogPin+0xa4>
    1fb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fba:	83 30       	cpi	r24, 0x03	; 3
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	e9 f1       	breq	.+122    	; 0x203a <DIO_voidTogPin+0xcc>
    1fc0:	50 c0       	rjmp	.+160    	; 0x2062 <DIO_voidTogPin+0xf4>
    {
    case PORT_A:
        TGLBIT(PORTA, EN_Pin);
    1fc2:	ab e3       	ldi	r26, 0x3B	; 59
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	eb e3       	ldi	r30, 0x3B	; 59
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	48 2f       	mov	r20, r24
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	02 2e       	mov	r0, r18
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <DIO_voidTogPin+0x72>
    1fdc:	88 0f       	add	r24, r24
    1fde:	99 1f       	adc	r25, r25
    1fe0:	0a 94       	dec	r0
    1fe2:	e2 f7       	brpl	.-8      	; 0x1fdc <DIO_voidTogPin+0x6e>
    1fe4:	84 27       	eor	r24, r20
    1fe6:	8c 93       	st	X, r24
    1fe8:	3d c0       	rjmp	.+122    	; 0x2064 <DIO_voidTogPin+0xf6>
        break;
    case PORT_B:
        TGLBIT(PORTB, EN_Pin);
    1fea:	a8 e3       	ldi	r26, 0x38	; 56
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e8 e3       	ldi	r30, 0x38	; 56
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	48 2f       	mov	r20, r24
    1ff6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	02 2e       	mov	r0, r18
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <DIO_voidTogPin+0x9a>
    2004:	88 0f       	add	r24, r24
    2006:	99 1f       	adc	r25, r25
    2008:	0a 94       	dec	r0
    200a:	e2 f7       	brpl	.-8      	; 0x2004 <DIO_voidTogPin+0x96>
    200c:	84 27       	eor	r24, r20
    200e:	8c 93       	st	X, r24
    2010:	29 c0       	rjmp	.+82     	; 0x2064 <DIO_voidTogPin+0xf6>
        break;
    case PORT_C:
        TGLBIT(PORTC, EN_Pin);
    2012:	a5 e3       	ldi	r26, 0x35	; 53
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e5 e3       	ldi	r30, 0x35	; 53
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	48 2f       	mov	r20, r24
    201e:	8b 81       	ldd	r24, Y+3	; 0x03
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	02 2e       	mov	r0, r18
    202a:	02 c0       	rjmp	.+4      	; 0x2030 <DIO_voidTogPin+0xc2>
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	0a 94       	dec	r0
    2032:	e2 f7       	brpl	.-8      	; 0x202c <DIO_voidTogPin+0xbe>
    2034:	84 27       	eor	r24, r20
    2036:	8c 93       	st	X, r24
    2038:	15 c0       	rjmp	.+42     	; 0x2064 <DIO_voidTogPin+0xf6>
        break;
    case PORT_D:
        TGLBIT(PORTD, EN_Pin);
    203a:	a2 e3       	ldi	r26, 0x32	; 50
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e2 e3       	ldi	r30, 0x32	; 50
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	48 2f       	mov	r20, r24
    2046:	8b 81       	ldd	r24, Y+3	; 0x03
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	02 2e       	mov	r0, r18
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <DIO_voidTogPin+0xea>
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	0a 94       	dec	r0
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <DIO_voidTogPin+0xe6>
    205c:	84 27       	eor	r24, r20
    205e:	8c 93       	st	X, r24
    2060:	01 c0       	rjmp	.+2      	; 0x2064 <DIO_voidTogPin+0xf6>
        break;
    default:
        state = E_ERROR;
    2062:	19 82       	std	Y+1, r1	; 0x01
        break;
    }

    return state;
    2064:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidTogPin */
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <DIO_voidSetPortValue>:
 * @param EN_Port PORT Name
 * @param EN_Value HIGH | LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPortValue(EN_port_num EN_Port, EN_value_type EN_Value)
{
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	00 d0       	rcall	.+0      	; 0x207c <DIO_voidSetPortValue+0x6>
    207c:	00 d0       	rcall	.+0      	; 0x207e <DIO_voidSetPortValue+0x8>
    207e:	0f 92       	push	r0
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	8a 83       	std	Y+2, r24	; 0x02
    2086:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	3d 83       	std	Y+5, r19	; 0x05
    2094:	2c 83       	std	Y+4, r18	; 0x04
    2096:	8c 81       	ldd	r24, Y+4	; 0x04
    2098:	9d 81       	ldd	r25, Y+5	; 0x05
    209a:	81 30       	cpi	r24, 0x01	; 1
    209c:	91 05       	cpc	r25, r1
    209e:	d1 f0       	breq	.+52     	; 0x20d4 <DIO_voidSetPortValue+0x5e>
    20a0:	2c 81       	ldd	r18, Y+4	; 0x04
    20a2:	3d 81       	ldd	r19, Y+5	; 0x05
    20a4:	22 30       	cpi	r18, 0x02	; 2
    20a6:	31 05       	cpc	r19, r1
    20a8:	2c f4       	brge	.+10     	; 0x20b4 <DIO_voidSetPortValue+0x3e>
    20aa:	8c 81       	ldd	r24, Y+4	; 0x04
    20ac:	9d 81       	ldd	r25, Y+5	; 0x05
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	61 f0       	breq	.+24     	; 0x20ca <DIO_voidSetPortValue+0x54>
    20b2:	1f c0       	rjmp	.+62     	; 0x20f2 <DIO_voidSetPortValue+0x7c>
    20b4:	2c 81       	ldd	r18, Y+4	; 0x04
    20b6:	3d 81       	ldd	r19, Y+5	; 0x05
    20b8:	22 30       	cpi	r18, 0x02	; 2
    20ba:	31 05       	cpc	r19, r1
    20bc:	81 f0       	breq	.+32     	; 0x20de <DIO_voidSetPortValue+0x68>
    20be:	8c 81       	ldd	r24, Y+4	; 0x04
    20c0:	9d 81       	ldd	r25, Y+5	; 0x05
    20c2:	83 30       	cpi	r24, 0x03	; 3
    20c4:	91 05       	cpc	r25, r1
    20c6:	81 f0       	breq	.+32     	; 0x20e8 <DIO_voidSetPortValue+0x72>
    20c8:	14 c0       	rjmp	.+40     	; 0x20f2 <DIO_voidSetPortValue+0x7c>
    {
    case PORT_A:
        PORTA = EN_Value;
    20ca:	eb e3       	ldi	r30, 0x3B	; 59
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	80 83       	st	Z, r24
    20d2:	10 c0       	rjmp	.+32     	; 0x20f4 <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_B:
        PORTB = EN_Value;
    20d4:	e8 e3       	ldi	r30, 0x38	; 56
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	80 83       	st	Z, r24
    20dc:	0b c0       	rjmp	.+22     	; 0x20f4 <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_C:
        PORTC = EN_Value;
    20de:	e5 e3       	ldi	r30, 0x35	; 53
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	8b 81       	ldd	r24, Y+3	; 0x03
    20e4:	80 83       	st	Z, r24
    20e6:	06 c0       	rjmp	.+12     	; 0x20f4 <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_D:
        PORTD = EN_Value;
    20e8:	e2 e3       	ldi	r30, 0x32	; 50
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	80 83       	st	Z, r24
    20f0:	01 c0       	rjmp	.+2      	; 0x20f4 <DIO_voidSetPortValue+0x7e>
        break;
    default:
        state = E_ERROR;
    20f2:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    20f4:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPortValue */
    20f6:	0f 90       	pop	r0
    20f8:	0f 90       	pop	r0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <DIO_voidSetPortDirection>:
 * @param EN_Port PORT Name
 * @param EN_Direction PORT Direction
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPortDirection(EN_port_num EN_Port, EN_direction_type EN_Direction)
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	00 d0       	rcall	.+0      	; 0x210c <DIO_voidSetPortDirection+0x6>
    210c:	00 d0       	rcall	.+0      	; 0x210e <DIO_voidSetPortDirection+0x8>
    210e:	0f 92       	push	r0
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	8a 83       	std	Y+2, r24	; 0x02
    2116:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	28 2f       	mov	r18, r24
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	3d 83       	std	Y+5, r19	; 0x05
    2124:	2c 83       	std	Y+4, r18	; 0x04
    2126:	8c 81       	ldd	r24, Y+4	; 0x04
    2128:	9d 81       	ldd	r25, Y+5	; 0x05
    212a:	81 30       	cpi	r24, 0x01	; 1
    212c:	91 05       	cpc	r25, r1
    212e:	d1 f0       	breq	.+52     	; 0x2164 <DIO_voidSetPortDirection+0x5e>
    2130:	2c 81       	ldd	r18, Y+4	; 0x04
    2132:	3d 81       	ldd	r19, Y+5	; 0x05
    2134:	22 30       	cpi	r18, 0x02	; 2
    2136:	31 05       	cpc	r19, r1
    2138:	2c f4       	brge	.+10     	; 0x2144 <DIO_voidSetPortDirection+0x3e>
    213a:	8c 81       	ldd	r24, Y+4	; 0x04
    213c:	9d 81       	ldd	r25, Y+5	; 0x05
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	61 f0       	breq	.+24     	; 0x215a <DIO_voidSetPortDirection+0x54>
    2142:	1f c0       	rjmp	.+62     	; 0x2182 <DIO_voidSetPortDirection+0x7c>
    2144:	2c 81       	ldd	r18, Y+4	; 0x04
    2146:	3d 81       	ldd	r19, Y+5	; 0x05
    2148:	22 30       	cpi	r18, 0x02	; 2
    214a:	31 05       	cpc	r19, r1
    214c:	81 f0       	breq	.+32     	; 0x216e <DIO_voidSetPortDirection+0x68>
    214e:	8c 81       	ldd	r24, Y+4	; 0x04
    2150:	9d 81       	ldd	r25, Y+5	; 0x05
    2152:	83 30       	cpi	r24, 0x03	; 3
    2154:	91 05       	cpc	r25, r1
    2156:	81 f0       	breq	.+32     	; 0x2178 <DIO_voidSetPortDirection+0x72>
    2158:	14 c0       	rjmp	.+40     	; 0x2182 <DIO_voidSetPortDirection+0x7c>
    {
    case PORT_A:
        DDRA = EN_Direction;
    215a:	ea e3       	ldi	r30, 0x3A	; 58
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	80 83       	st	Z, r24
    2162:	10 c0       	rjmp	.+32     	; 0x2184 <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_B:
        DDRB = EN_Direction;
    2164:	e7 e3       	ldi	r30, 0x37	; 55
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	80 83       	st	Z, r24
    216c:	0b c0       	rjmp	.+22     	; 0x2184 <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_C:
        DDRC = EN_Direction;
    216e:	e4 e3       	ldi	r30, 0x34	; 52
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	80 83       	st	Z, r24
    2176:	06 c0       	rjmp	.+12     	; 0x2184 <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_D:
        DDRD = EN_Direction;
    2178:	e1 e3       	ldi	r30, 0x31	; 49
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	80 83       	st	Z, r24
    2180:	01 c0       	rjmp	.+2      	; 0x2184 <DIO_voidSetPortDirection+0x7e>
        break;
    default:
        state = E_ERROR;
    2182:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    2184:	89 81       	ldd	r24, Y+1	; 0x01

} /* DIO_voidSetPortDirection */
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <DIO_voidInpullUp>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidInpullUp(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	00 d0       	rcall	.+0      	; 0x219c <DIO_voidInpullUp+0x6>
    219c:	00 d0       	rcall	.+0      	; 0x219e <DIO_voidInpullUp+0x8>
    219e:	0f 92       	push	r0
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	8a 83       	std	Y+2, r24	; 0x02
    21a6:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
    21ac:	8a 81       	ldd	r24, Y+2	; 0x02
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	3d 83       	std	Y+5, r19	; 0x05
    21b4:	2c 83       	std	Y+4, r18	; 0x04
    21b6:	8c 81       	ldd	r24, Y+4	; 0x04
    21b8:	9d 81       	ldd	r25, Y+5	; 0x05
    21ba:	81 30       	cpi	r24, 0x01	; 1
    21bc:	91 05       	cpc	r25, r1
    21be:	09 f4       	brne	.+2      	; 0x21c2 <DIO_voidInpullUp+0x2c>
    21c0:	3e c0       	rjmp	.+124    	; 0x223e <DIO_voidInpullUp+0xa8>
    21c2:	2c 81       	ldd	r18, Y+4	; 0x04
    21c4:	3d 81       	ldd	r19, Y+5	; 0x05
    21c6:	22 30       	cpi	r18, 0x02	; 2
    21c8:	31 05       	cpc	r19, r1
    21ca:	2c f4       	brge	.+10     	; 0x21d6 <DIO_voidInpullUp+0x40>
    21cc:	8c 81       	ldd	r24, Y+4	; 0x04
    21ce:	9d 81       	ldd	r25, Y+5	; 0x05
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	71 f0       	breq	.+28     	; 0x21f0 <DIO_voidInpullUp+0x5a>
    21d4:	a9 c0       	rjmp	.+338    	; 0x2328 <DIO_voidInpullUp+0x192>
    21d6:	2c 81       	ldd	r18, Y+4	; 0x04
    21d8:	3d 81       	ldd	r19, Y+5	; 0x05
    21da:	22 30       	cpi	r18, 0x02	; 2
    21dc:	31 05       	cpc	r19, r1
    21de:	09 f4       	brne	.+2      	; 0x21e2 <DIO_voidInpullUp+0x4c>
    21e0:	55 c0       	rjmp	.+170    	; 0x228c <DIO_voidInpullUp+0xf6>
    21e2:	8c 81       	ldd	r24, Y+4	; 0x04
    21e4:	9d 81       	ldd	r25, Y+5	; 0x05
    21e6:	83 30       	cpi	r24, 0x03	; 3
    21e8:	91 05       	cpc	r25, r1
    21ea:	09 f4       	brne	.+2      	; 0x21ee <DIO_voidInpullUp+0x58>
    21ec:	76 c0       	rjmp	.+236    	; 0x22da <DIO_voidInpullUp+0x144>
    21ee:	9c c0       	rjmp	.+312    	; 0x2328 <DIO_voidInpullUp+0x192>
    {
    case PORT_A:
        CLRBIT(DDRA, EN_Pin);
    21f0:	aa e3       	ldi	r26, 0x3A	; 58
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	ea e3       	ldi	r30, 0x3A	; 58
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	48 2f       	mov	r20, r24
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	02 c0       	rjmp	.+4      	; 0x220c <DIO_voidInpullUp+0x76>
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	2a 95       	dec	r18
    220e:	e2 f7       	brpl	.-8      	; 0x2208 <DIO_voidInpullUp+0x72>
    2210:	80 95       	com	r24
    2212:	84 23       	and	r24, r20
    2214:	8c 93       	st	X, r24
        SETBIT(PORTA, EN_Pin);
    2216:	ab e3       	ldi	r26, 0x3B	; 59
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	eb e3       	ldi	r30, 0x3B	; 59
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	48 2f       	mov	r20, r24
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	02 2e       	mov	r0, r18
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <DIO_voidInpullUp+0x9e>
    2230:	88 0f       	add	r24, r24
    2232:	99 1f       	adc	r25, r25
    2234:	0a 94       	dec	r0
    2236:	e2 f7       	brpl	.-8      	; 0x2230 <DIO_voidInpullUp+0x9a>
    2238:	84 2b       	or	r24, r20
    223a:	8c 93       	st	X, r24
    223c:	76 c0       	rjmp	.+236    	; 0x232a <DIO_voidInpullUp+0x194>
        break;
    case PORT_B:
        CLRBIT(DDRB, EN_Pin);
    223e:	a7 e3       	ldi	r26, 0x37	; 55
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	e7 e3       	ldi	r30, 0x37	; 55
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	48 2f       	mov	r20, r24
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	02 c0       	rjmp	.+4      	; 0x225a <DIO_voidInpullUp+0xc4>
    2256:	88 0f       	add	r24, r24
    2258:	99 1f       	adc	r25, r25
    225a:	2a 95       	dec	r18
    225c:	e2 f7       	brpl	.-8      	; 0x2256 <DIO_voidInpullUp+0xc0>
    225e:	80 95       	com	r24
    2260:	84 23       	and	r24, r20
    2262:	8c 93       	st	X, r24
        SETBIT(PORTB, EN_Pin);
    2264:	a8 e3       	ldi	r26, 0x38	; 56
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	e8 e3       	ldi	r30, 0x38	; 56
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	48 2f       	mov	r20, r24
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	28 2f       	mov	r18, r24
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	02 2e       	mov	r0, r18
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <DIO_voidInpullUp+0xec>
    227e:	88 0f       	add	r24, r24
    2280:	99 1f       	adc	r25, r25
    2282:	0a 94       	dec	r0
    2284:	e2 f7       	brpl	.-8      	; 0x227e <DIO_voidInpullUp+0xe8>
    2286:	84 2b       	or	r24, r20
    2288:	8c 93       	st	X, r24
    228a:	4f c0       	rjmp	.+158    	; 0x232a <DIO_voidInpullUp+0x194>
        break;
    case PORT_C:
        CLRBIT(DDRC, EN_Pin);
    228c:	a4 e3       	ldi	r26, 0x34	; 52
    228e:	b0 e0       	ldi	r27, 0x00	; 0
    2290:	e4 e3       	ldi	r30, 0x34	; 52
    2292:	f0 e0       	ldi	r31, 0x00	; 0
    2294:	80 81       	ld	r24, Z
    2296:	48 2f       	mov	r20, r24
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	81 e0       	ldi	r24, 0x01	; 1
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	02 c0       	rjmp	.+4      	; 0x22a8 <DIO_voidInpullUp+0x112>
    22a4:	88 0f       	add	r24, r24
    22a6:	99 1f       	adc	r25, r25
    22a8:	2a 95       	dec	r18
    22aa:	e2 f7       	brpl	.-8      	; 0x22a4 <DIO_voidInpullUp+0x10e>
    22ac:	80 95       	com	r24
    22ae:	84 23       	and	r24, r20
    22b0:	8c 93       	st	X, r24
        SETBIT(PORTC, EN_Pin);
    22b2:	a5 e3       	ldi	r26, 0x35	; 53
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	e5 e3       	ldi	r30, 0x35	; 53
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	48 2f       	mov	r20, r24
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	28 2f       	mov	r18, r24
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	02 2e       	mov	r0, r18
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <DIO_voidInpullUp+0x13a>
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	0a 94       	dec	r0
    22d2:	e2 f7       	brpl	.-8      	; 0x22cc <DIO_voidInpullUp+0x136>
    22d4:	84 2b       	or	r24, r20
    22d6:	8c 93       	st	X, r24
    22d8:	28 c0       	rjmp	.+80     	; 0x232a <DIO_voidInpullUp+0x194>
        break;
    case PORT_D:
        CLRBIT(DDRD, EN_Pin);
    22da:	a1 e3       	ldi	r26, 0x31	; 49
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e1 e3       	ldi	r30, 0x31	; 49
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	48 2f       	mov	r20, r24
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	81 e0       	ldi	r24, 0x01	; 1
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	02 c0       	rjmp	.+4      	; 0x22f6 <DIO_voidInpullUp+0x160>
    22f2:	88 0f       	add	r24, r24
    22f4:	99 1f       	adc	r25, r25
    22f6:	2a 95       	dec	r18
    22f8:	e2 f7       	brpl	.-8      	; 0x22f2 <DIO_voidInpullUp+0x15c>
    22fa:	80 95       	com	r24
    22fc:	84 23       	and	r24, r20
    22fe:	8c 93       	st	X, r24
        SETBIT(PORTD, EN_Pin);
    2300:	a2 e3       	ldi	r26, 0x32	; 50
    2302:	b0 e0       	ldi	r27, 0x00	; 0
    2304:	e2 e3       	ldi	r30, 0x32	; 50
    2306:	f0 e0       	ldi	r31, 0x00	; 0
    2308:	80 81       	ld	r24, Z
    230a:	48 2f       	mov	r20, r24
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	28 2f       	mov	r18, r24
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	02 2e       	mov	r0, r18
    2318:	02 c0       	rjmp	.+4      	; 0x231e <DIO_voidInpullUp+0x188>
    231a:	88 0f       	add	r24, r24
    231c:	99 1f       	adc	r25, r25
    231e:	0a 94       	dec	r0
    2320:	e2 f7       	brpl	.-8      	; 0x231a <DIO_voidInpullUp+0x184>
    2322:	84 2b       	or	r24, r20
    2324:	8c 93       	st	X, r24
    2326:	01 c0       	rjmp	.+2      	; 0x232a <DIO_voidInpullUp+0x194>
        break;
    default:
        state = E_ERROR;
    2328:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    232a:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidInpullUp */
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <MOTOR_voidInit>:


#include "DIO_Interface.h"
#include "MOTOR_Config.h"

void MOTOR_voidInit(void){
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
#if  NUM_OF_MOTORS == CONNECT_TWO_MOTOR
/*INIATE MOTOR ONE ON H-BRIDGE*/
DIO_voidSetPinDirection (MOTOR1_PORT, MOTOR1_PIN1,OUTPUT);
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	60 e0       	ldi	r22, 0x00	; 0
    2348:	41 e0       	ldi	r20, 0x01	; 1
    234a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR1_PORT,  MOTOR1_PIN2,OUTPUT);
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	62 e0       	ldi	r22, 0x02	; 2
    2352:	41 e0       	ldi	r20, 0x01	; 1
    2354:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR1_PORT,MOTOR1_ENABLE,OUTPUT);
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	63 e0       	ldi	r22, 0x03	; 3
    235c:	41 e0       	ldi	r20, 0x01	; 1
    235e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>

/*INIATE MOTOR TWO ON H-BRIDGE*/
DIO_voidSetPinDirection (MOTOR2_PORT, MOTOR2_PIN1,OUTPUT);
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	64 e0       	ldi	r22, 0x04	; 4
    2366:	41 e0       	ldi	r20, 0x01	; 1
    2368:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR2_PORT,  MOTOR2_PIN2,OUTPUT);
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	65 e0       	ldi	r22, 0x05	; 5
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR2_PORT,MOTOR2_ENABLE,OUTPUT);
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	63 e0       	ldi	r22, 0x03	; 3
    237a:	41 e0       	ldi	r20, 0x01	; 1
    237c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR1_PORT,  MOTOR1_PIN2,OUTPUT);
DIO_voidSetPinDirection(MOTOR1_PORT,MOTOR1_ENABLE,OUTPUT);

#endif
#if MOTOR_STATE ==  MOTOR_Generate_pwm
DIO_voidSetPinDirection (MOTOR_PORT, MOTOR_PIN1,OUTPUT);
    2380:	83 e0       	ldi	r24, 0x03	; 3
    2382:	65 e0       	ldi	r22, 0x05	; 5
    2384:	41 e0       	ldi	r20, 0x01	; 1
    2386:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR_PORT,  MOTOR_PIN2,OUTPUT);
    238a:	83 e0       	ldi	r24, 0x03	; 3
    238c:	66 e0       	ldi	r22, 0x06	; 6
    238e:	41 e0       	ldi	r20, 0x01	; 1
    2390:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR_PORT,MOTOR1_ENABLE,OUTPUT);
    2394:	83 e0       	ldi	r24, 0x03	; 3
    2396:	63 e0       	ldi	r22, 0x03	; 3
    2398:	41 e0       	ldi	r20, 0x01	; 1
    239a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>
DIO_voidSetPinValue(MOTOR_PORT, MOTOR_PIN1,HIGH);
    239e:	83 e0       	ldi	r24, 0x03	; 3
    23a0:	65 e0       	ldi	r22, 0x05	; 5
    23a2:	41 e0       	ldi	r20, 0x01	; 1
    23a4:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
DIO_voidSetPinValue(MOTOR_PORT, MOTOR_PIN2,LOW);
    23a8:	83 e0       	ldi	r24, 0x03	; 3
    23aa:	66 e0       	ldi	r22, 0x06	; 6
    23ac:	40 e0       	ldi	r20, 0x00	; 0
    23ae:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
#else
#endif
}
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	08 95       	ret

000023b8 <MOTOR_voidRotateClkWise>:

void MOTOR_voidRotateClkWise(uint8_t copy_uint8_ttop,uint8_t copy_uint8_tdown){
    23b8:	df 93       	push	r29
    23ba:	cf 93       	push	r28
    23bc:	00 d0       	rcall	.+0      	; 0x23be <MOTOR_voidRotateClkWise+0x6>
    23be:	cd b7       	in	r28, 0x3d	; 61
    23c0:	de b7       	in	r29, 0x3e	; 62
    23c2:	89 83       	std	Y+1, r24	; 0x01
    23c4:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_uint8_ttop == 1){
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	81 30       	cpi	r24, 0x01	; 1
    23ca:	81 f4       	brne	.+32     	; 0x23ec <MOTOR_voidRotateClkWise+0x34>
		/*INIATE MOTOR ONE ON H-BRIDGE*/
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,HIGH);
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	60 e0       	ldi	r22, 0x00	; 0
    23d0:	41 e0       	ldi	r20, 0x01	; 1
    23d2:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	62 e0       	ldi	r22, 0x02	; 2
    23da:	40 e0       	ldi	r20, 0x00	; 0
    23dc:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,MOTOR1_ENABLE, HIGH);
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	63 e0       	ldi	r22, 0x03	; 3
    23e4:	41 e0       	ldi	r20, 0x01	; 1
    23e6:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    23ea:	0d c0       	rjmp	.+26     	; 0x2406 <MOTOR_voidRotateClkWise+0x4e>
	}
	else if(copy_uint8_ttop == 0){
    23ec:	89 81       	ldd	r24, Y+1	; 0x01
    23ee:	88 23       	and	r24, r24
    23f0:	51 f4       	brne	.+20     	; 0x2406 <MOTOR_voidRotateClkWise+0x4e>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	62 e0       	ldi	r22, 0x02	; 2
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	62 e0       	ldi	r22, 0x02	; 2
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	}
	/*INIATE MOTOR ONE ON H-BRIDGE*/
	if(copy_uint8_tdown== 1){
    2406:	8a 81       	ldd	r24, Y+2	; 0x02
    2408:	81 30       	cpi	r24, 0x01	; 1
    240a:	81 f4       	brne	.+32     	; 0x242c <MOTOR_voidRotateClkWise+0x74>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,HIGH);
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	64 e0       	ldi	r22, 0x04	; 4
    2410:	41 e0       	ldi	r20, 0x01	; 1
    2412:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,LOW);
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	65 e0       	ldi	r22, 0x05	; 5
    241a:	40 e0       	ldi	r20, 0x00	; 0
    241c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_ENABLE, HIGH);
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	63 e0       	ldi	r22, 0x03	; 3
    2424:	41 e0       	ldi	r20, 0x01	; 1
    2426:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    242a:	0d c0       	rjmp	.+26     	; 0x2446 <MOTOR_voidRotateClkWise+0x8e>
	}
	else if(copy_uint8_tdown == 0){
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	88 23       	and	r24, r24
    2430:	51 f4       	brne	.+20     	; 0x2446 <MOTOR_voidRotateClkWise+0x8e>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_PIN2,LOW);
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	65 e0       	ldi	r22, 0x05	; 5
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_PIN2,LOW);
    243c:	81 e0       	ldi	r24, 0x01	; 1
    243e:	65 e0       	ldi	r22, 0x05	; 5
    2440:	40 e0       	ldi	r20, 0x00	; 0
    2442:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	}

}
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <MOTOR_voidRotateAntiClkWise>:
void MOTOR_voidRotateAntiClkWise(uint8_t copy_uint8_ttop,uint8_t copy_uint8_tdown){
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	00 d0       	rcall	.+0      	; 0x2456 <MOTOR_voidRotateAntiClkWise+0x6>
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	89 83       	std	Y+1, r24	; 0x01
    245c:	6a 83       	std	Y+2, r22	; 0x02
	if (copy_uint8_ttop == 1)
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	81 30       	cpi	r24, 0x01	; 1
    2462:	81 f4       	brne	.+32     	; 0x2484 <MOTOR_voidRotateAntiClkWise+0x34>
	{
		/*INIATE MOTOR ONE ON H-BRIDGE*/
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,LOW);
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	60 e0       	ldi	r22, 0x00	; 0
    2468:	40 e0       	ldi	r20, 0x00	; 0
    246a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,  MOTOR1_PIN2,HIGH);
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	62 e0       	ldi	r22, 0x02	; 2
    2472:	41 e0       	ldi	r20, 0x01	; 1
    2474:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,MOTOR1_ENABLE,HIGH);
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	63 e0       	ldi	r22, 0x03	; 3
    247c:	41 e0       	ldi	r20, 0x01	; 1
    247e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    2482:	0d c0       	rjmp	.+26     	; 0x249e <MOTOR_voidRotateAntiClkWise+0x4e>
	}
	else if(copy_uint8_ttop== 0)
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	88 23       	and	r24, r24
    2488:	51 f4       	brne	.+20     	; 0x249e <MOTOR_voidRotateAntiClkWise+0x4e>
	{
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,LOW);
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	60 e0       	ldi	r22, 0x00	; 0
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	62 e0       	ldi	r22, 0x02	; 2
    2498:	40 e0       	ldi	r20, 0x00	; 0
    249a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	}
		/*INIATE MOTOR ONE ON H-BRIDGE*/
	if(copy_uint8_tdown == 1)
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	81 30       	cpi	r24, 0x01	; 1
    24a2:	81 f4       	brne	.+32     	; 0x24c4 <MOTOR_voidRotateAntiClkWise+0x74>
	{
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,LOW);
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	64 e0       	ldi	r22, 0x04	; 4
    24a8:	40 e0       	ldi	r20, 0x00	; 0
    24aa:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,HIGH);
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	65 e0       	ldi	r22, 0x05	; 5
    24b2:	41 e0       	ldi	r20, 0x01	; 1
    24b4:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_ENABLE,HIGH);
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	63 e0       	ldi	r22, 0x03	; 3
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    24c2:	0d c0       	rjmp	.+26     	; 0x24de <MOTOR_voidRotateAntiClkWise+0x8e>
	}


	else if(copy_uint8_tdown == 0 ){
    24c4:	8a 81       	ldd	r24, Y+2	; 0x02
    24c6:	88 23       	and	r24, r24
    24c8:	51 f4       	brne	.+20     	; 0x24de <MOTOR_voidRotateAntiClkWise+0x8e>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,LOW);
    24ca:	81 e0       	ldi	r24, 0x01	; 1
    24cc:	64 e0       	ldi	r22, 0x04	; 4
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,LOW);
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	65 e0       	ldi	r22, 0x05	; 5
    24d8:	40 e0       	ldi	r20, 0x00	; 0
    24da:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	}


}
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <MOTOR_voidStop>:

void MOTOR_voidStop(void){
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue( MOTOR1_PORT,MOTOR1_PIN1,LOW);
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	60 e0       	ldi	r22, 0x00	; 0
    24f4:	40 e0       	ldi	r20, 0x00	; 0
    24f6:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR1_PORT,MOTOR1_PIN2,LOW);
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	62 e0       	ldi	r22, 0x02	; 2
    24fe:	40 e0       	ldi	r20, 0x00	; 0
    2500:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_PIN1,LOW);
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	64 e0       	ldi	r22, 0x04	; 4
    2508:	40 e0       	ldi	r20, 0x00	; 0
    250a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_PIN2,LOW);
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	65 e0       	ldi	r22, 0x05	; 5
    2512:	40 e0       	ldi	r20, 0x00	; 0
    2514:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_ENABLE,LOW);
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	63 e0       	ldi	r22, 0x03	; 3
    251c:	40 e0       	ldi	r20, 0x00	; 0
    251e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
}
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <lcd_init>:
#define INCREMENT_CURSOR            0x06
#define LCD_FIRSTLINE				0x80
#define LCD_SECONDLINE				0xC0

void lcd_init(void)
{
    2528:	0f 93       	push	r16
    252a:	1f 93       	push	r17
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	c0 57       	subi	r28, 0x70	; 112
    2536:	d0 40       	sbci	r29, 0x00	; 0
    2538:	0f b6       	in	r0, 0x3f	; 63
    253a:	f8 94       	cli
    253c:	de bf       	out	0x3e, r29	; 62
    253e:	0f be       	out	0x3f, r0	; 63
    2540:	cd bf       	out	0x3d, r28	; 61
    2542:	fe 01       	movw	r30, r28
    2544:	e3 59       	subi	r30, 0x93	; 147
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	a0 e2       	ldi	r26, 0x20	; 32
    254e:	b2 e4       	ldi	r27, 0x42	; 66
    2550:	80 83       	st	Z, r24
    2552:	91 83       	std	Z+1, r25	; 0x01
    2554:	a2 83       	std	Z+2, r26	; 0x02
    2556:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2558:	8e 01       	movw	r16, r28
    255a:	07 59       	subi	r16, 0x97	; 151
    255c:	1f 4f       	sbci	r17, 0xFF	; 255
    255e:	fe 01       	movw	r30, r28
    2560:	e3 59       	subi	r30, 0x93	; 147
    2562:	ff 4f       	sbci	r31, 0xFF	; 255
    2564:	60 81       	ld	r22, Z
    2566:	71 81       	ldd	r23, Z+1	; 0x01
    2568:	82 81       	ldd	r24, Z+2	; 0x02
    256a:	93 81       	ldd	r25, Z+3	; 0x03
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	4a ef       	ldi	r20, 0xFA	; 250
    2572:	54 e4       	ldi	r21, 0x44	; 68
    2574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	f8 01       	movw	r30, r16
    257e:	80 83       	st	Z, r24
    2580:	91 83       	std	Z+1, r25	; 0x01
    2582:	a2 83       	std	Z+2, r26	; 0x02
    2584:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2586:	fe 01       	movw	r30, r28
    2588:	e7 59       	subi	r30, 0x97	; 151
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	60 81       	ld	r22, Z
    258e:	71 81       	ldd	r23, Z+1	; 0x01
    2590:	82 81       	ldd	r24, Z+2	; 0x02
    2592:	93 81       	ldd	r25, Z+3	; 0x03
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e8       	ldi	r20, 0x80	; 128
    259a:	5f e3       	ldi	r21, 0x3F	; 63
    259c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a0:	88 23       	and	r24, r24
    25a2:	44 f4       	brge	.+16     	; 0x25b4 <lcd_init+0x8c>
		__ticks = 1;
    25a4:	fe 01       	movw	r30, r28
    25a6:	e9 59       	subi	r30, 0x99	; 153
    25a8:	ff 4f       	sbci	r31, 0xFF	; 255
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	91 83       	std	Z+1, r25	; 0x01
    25b0:	80 83       	st	Z, r24
    25b2:	64 c0       	rjmp	.+200    	; 0x267c <lcd_init+0x154>
	else if (__tmp > 65535)
    25b4:	fe 01       	movw	r30, r28
    25b6:	e7 59       	subi	r30, 0x97	; 151
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	3f ef       	ldi	r19, 0xFF	; 255
    25c6:	4f e7       	ldi	r20, 0x7F	; 127
    25c8:	57 e4       	ldi	r21, 0x47	; 71
    25ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ce:	18 16       	cp	r1, r24
    25d0:	0c f0       	brlt	.+2      	; 0x25d4 <lcd_init+0xac>
    25d2:	43 c0       	rjmp	.+134    	; 0x265a <lcd_init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d4:	fe 01       	movw	r30, r28
    25d6:	e3 59       	subi	r30, 0x93	; 147
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	60 81       	ld	r22, Z
    25dc:	71 81       	ldd	r23, Z+1	; 0x01
    25de:	82 81       	ldd	r24, Z+2	; 0x02
    25e0:	93 81       	ldd	r25, Z+3	; 0x03
    25e2:	20 e0       	ldi	r18, 0x00	; 0
    25e4:	30 e0       	ldi	r19, 0x00	; 0
    25e6:	40 e2       	ldi	r20, 0x20	; 32
    25e8:	51 e4       	ldi	r21, 0x41	; 65
    25ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	8e 01       	movw	r16, r28
    25f4:	09 59       	subi	r16, 0x99	; 153
    25f6:	1f 4f       	sbci	r17, 0xFF	; 255
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	f8 01       	movw	r30, r16
    2606:	91 83       	std	Z+1, r25	; 0x01
    2608:	80 83       	st	Z, r24
    260a:	1f c0       	rjmp	.+62     	; 0x264a <lcd_init+0x122>
    260c:	fe 01       	movw	r30, r28
    260e:	eb 59       	subi	r30, 0x9B	; 155
    2610:	ff 4f       	sbci	r31, 0xFF	; 255
    2612:	88 ec       	ldi	r24, 0xC8	; 200
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    261a:	fe 01       	movw	r30, r28
    261c:	eb 59       	subi	r30, 0x9B	; 155
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	80 81       	ld	r24, Z
    2622:	91 81       	ldd	r25, Z+1	; 0x01
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <lcd_init+0xfc>
    2628:	fe 01       	movw	r30, r28
    262a:	eb 59       	subi	r30, 0x9B	; 155
    262c:	ff 4f       	sbci	r31, 0xFF	; 255
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2632:	de 01       	movw	r26, r28
    2634:	a9 59       	subi	r26, 0x99	; 153
    2636:	bf 4f       	sbci	r27, 0xFF	; 255
    2638:	fe 01       	movw	r30, r28
    263a:	e9 59       	subi	r30, 0x99	; 153
    263c:	ff 4f       	sbci	r31, 0xFF	; 255
    263e:	80 81       	ld	r24, Z
    2640:	91 81       	ldd	r25, Z+1	; 0x01
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	11 96       	adiw	r26, 0x01	; 1
    2646:	9c 93       	st	X, r25
    2648:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    264a:	fe 01       	movw	r30, r28
    264c:	e9 59       	subi	r30, 0x99	; 153
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	00 97       	sbiw	r24, 0x00	; 0
    2656:	d1 f6       	brne	.-76     	; 0x260c <lcd_init+0xe4>
    2658:	27 c0       	rjmp	.+78     	; 0x26a8 <lcd_init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265a:	8e 01       	movw	r16, r28
    265c:	09 59       	subi	r16, 0x99	; 153
    265e:	1f 4f       	sbci	r17, 0xFF	; 255
    2660:	fe 01       	movw	r30, r28
    2662:	e7 59       	subi	r30, 0x97	; 151
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	60 81       	ld	r22, Z
    2668:	71 81       	ldd	r23, Z+1	; 0x01
    266a:	82 81       	ldd	r24, Z+2	; 0x02
    266c:	93 81       	ldd	r25, Z+3	; 0x03
    266e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	f8 01       	movw	r30, r16
    2678:	91 83       	std	Z+1, r25	; 0x01
    267a:	80 83       	st	Z, r24
    267c:	de 01       	movw	r26, r28
    267e:	ad 59       	subi	r26, 0x9D	; 157
    2680:	bf 4f       	sbci	r27, 0xFF	; 255
    2682:	fe 01       	movw	r30, r28
    2684:	e9 59       	subi	r30, 0x99	; 153
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 81       	ld	r24, Z
    268a:	91 81       	ldd	r25, Z+1	; 0x01
    268c:	8d 93       	st	X+, r24
    268e:	9c 93       	st	X, r25
    2690:	fe 01       	movw	r30, r28
    2692:	ed 59       	subi	r30, 0x9D	; 157
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	80 81       	ld	r24, Z
    2698:	91 81       	ldd	r25, Z+1	; 0x01
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	f1 f7       	brne	.-4      	; 0x269a <lcd_init+0x172>
    269e:	fe 01       	movw	r30, r28
    26a0:	ed 59       	subi	r30, 0x9D	; 157
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	91 83       	std	Z+1, r25	; 0x01
    26a6:	80 83       	st	Z, r24
    _delay_ms(40);    
 
    DIO_voidSetPinDirection(LS_PIN,OUTPUT);
    26a8:	82 e0       	ldi	r24, 0x02	; 2
    26aa:	60 e0       	ldi	r22, 0x00	; 0
    26ac:	41 e0       	ldi	r20, 0x01	; 1
    26ae:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(EN_PIN,OUTPUT);
    26b2:	82 e0       	ldi	r24, 0x02	; 2
    26b4:	62 e0       	ldi	r22, 0x02	; 2
    26b6:	41 e0       	ldi	r20, 0x01	; 1
    26b8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(R_W_PIN,OUTPUT);	
    26bc:	82 e0       	ldi	r24, 0x02	; 2
    26be:	61 e0       	ldi	r22, 0x01	; 1
    26c0:	41 e0       	ldi	r20, 0x01	; 1
    26c2:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>
    26c6:	fe 01       	movw	r30, r28
    26c8:	e1 5a       	subi	r30, 0xA1	; 161
    26ca:	ff 4f       	sbci	r31, 0xFF	; 255
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	a0 ea       	ldi	r26, 0xA0	; 160
    26d2:	b0 e4       	ldi	r27, 0x40	; 64
    26d4:	80 83       	st	Z, r24
    26d6:	91 83       	std	Z+1, r25	; 0x01
    26d8:	a2 83       	std	Z+2, r26	; 0x02
    26da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26dc:	8e 01       	movw	r16, r28
    26de:	05 5a       	subi	r16, 0xA5	; 165
    26e0:	1f 4f       	sbci	r17, 0xFF	; 255
    26e2:	fe 01       	movw	r30, r28
    26e4:	e1 5a       	subi	r30, 0xA1	; 161
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	60 81       	ld	r22, Z
    26ea:	71 81       	ldd	r23, Z+1	; 0x01
    26ec:	82 81       	ldd	r24, Z+2	; 0x02
    26ee:	93 81       	ldd	r25, Z+3	; 0x03
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	4a ef       	ldi	r20, 0xFA	; 250
    26f6:	54 e4       	ldi	r21, 0x44	; 68
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	f8 01       	movw	r30, r16
    2702:	80 83       	st	Z, r24
    2704:	91 83       	std	Z+1, r25	; 0x01
    2706:	a2 83       	std	Z+2, r26	; 0x02
    2708:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    270a:	fe 01       	movw	r30, r28
    270c:	e5 5a       	subi	r30, 0xA5	; 165
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	60 81       	ld	r22, Z
    2712:	71 81       	ldd	r23, Z+1	; 0x01
    2714:	82 81       	ldd	r24, Z+2	; 0x02
    2716:	93 81       	ldd	r25, Z+3	; 0x03
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e8       	ldi	r20, 0x80	; 128
    271e:	5f e3       	ldi	r21, 0x3F	; 63
    2720:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2724:	88 23       	and	r24, r24
    2726:	44 f4       	brge	.+16     	; 0x2738 <lcd_init+0x210>
		__ticks = 1;
    2728:	fe 01       	movw	r30, r28
    272a:	e7 5a       	subi	r30, 0xA7	; 167
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	91 83       	std	Z+1, r25	; 0x01
    2734:	80 83       	st	Z, r24
    2736:	64 c0       	rjmp	.+200    	; 0x2800 <lcd_init+0x2d8>
	else if (__tmp > 65535)
    2738:	fe 01       	movw	r30, r28
    273a:	e5 5a       	subi	r30, 0xA5	; 165
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	60 81       	ld	r22, Z
    2740:	71 81       	ldd	r23, Z+1	; 0x01
    2742:	82 81       	ldd	r24, Z+2	; 0x02
    2744:	93 81       	ldd	r25, Z+3	; 0x03
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	3f ef       	ldi	r19, 0xFF	; 255
    274a:	4f e7       	ldi	r20, 0x7F	; 127
    274c:	57 e4       	ldi	r21, 0x47	; 71
    274e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2752:	18 16       	cp	r1, r24
    2754:	0c f0       	brlt	.+2      	; 0x2758 <lcd_init+0x230>
    2756:	43 c0       	rjmp	.+134    	; 0x27de <lcd_init+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2758:	fe 01       	movw	r30, r28
    275a:	e1 5a       	subi	r30, 0xA1	; 161
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	60 81       	ld	r22, Z
    2760:	71 81       	ldd	r23, Z+1	; 0x01
    2762:	82 81       	ldd	r24, Z+2	; 0x02
    2764:	93 81       	ldd	r25, Z+3	; 0x03
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e2       	ldi	r20, 0x20	; 32
    276c:	51 e4       	ldi	r21, 0x41	; 65
    276e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	8e 01       	movw	r16, r28
    2778:	07 5a       	subi	r16, 0xA7	; 167
    277a:	1f 4f       	sbci	r17, 0xFF	; 255
    277c:	bc 01       	movw	r22, r24
    277e:	cd 01       	movw	r24, r26
    2780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	f8 01       	movw	r30, r16
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	80 83       	st	Z, r24
    278e:	1f c0       	rjmp	.+62     	; 0x27ce <lcd_init+0x2a6>
    2790:	fe 01       	movw	r30, r28
    2792:	e9 5a       	subi	r30, 0xA9	; 169
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	88 ec       	ldi	r24, 0xC8	; 200
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	91 83       	std	Z+1, r25	; 0x01
    279c:	80 83       	st	Z, r24
    279e:	fe 01       	movw	r30, r28
    27a0:	e9 5a       	subi	r30, 0xA9	; 169
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	80 81       	ld	r24, Z
    27a6:	91 81       	ldd	r25, Z+1	; 0x01
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <lcd_init+0x280>
    27ac:	fe 01       	movw	r30, r28
    27ae:	e9 5a       	subi	r30, 0xA9	; 169
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	91 83       	std	Z+1, r25	; 0x01
    27b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b6:	de 01       	movw	r26, r28
    27b8:	a7 5a       	subi	r26, 0xA7	; 167
    27ba:	bf 4f       	sbci	r27, 0xFF	; 255
    27bc:	fe 01       	movw	r30, r28
    27be:	e7 5a       	subi	r30, 0xA7	; 167
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	91 81       	ldd	r25, Z+1	; 0x01
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	11 96       	adiw	r26, 0x01	; 1
    27ca:	9c 93       	st	X, r25
    27cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ce:	fe 01       	movw	r30, r28
    27d0:	e7 5a       	subi	r30, 0xA7	; 167
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	80 81       	ld	r24, Z
    27d6:	91 81       	ldd	r25, Z+1	; 0x01
    27d8:	00 97       	sbiw	r24, 0x00	; 0
    27da:	d1 f6       	brne	.-76     	; 0x2790 <lcd_init+0x268>
    27dc:	27 c0       	rjmp	.+78     	; 0x282c <lcd_init+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27de:	8e 01       	movw	r16, r28
    27e0:	07 5a       	subi	r16, 0xA7	; 167
    27e2:	1f 4f       	sbci	r17, 0xFF	; 255
    27e4:	fe 01       	movw	r30, r28
    27e6:	e5 5a       	subi	r30, 0xA5	; 165
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	60 81       	ld	r22, Z
    27ec:	71 81       	ldd	r23, Z+1	; 0x01
    27ee:	82 81       	ldd	r24, Z+2	; 0x02
    27f0:	93 81       	ldd	r25, Z+3	; 0x03
    27f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	f8 01       	movw	r30, r16
    27fc:	91 83       	std	Z+1, r25	; 0x01
    27fe:	80 83       	st	Z, r24
    2800:	de 01       	movw	r26, r28
    2802:	ab 5a       	subi	r26, 0xAB	; 171
    2804:	bf 4f       	sbci	r27, 0xFF	; 255
    2806:	fe 01       	movw	r30, r28
    2808:	e7 5a       	subi	r30, 0xA7	; 167
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	80 81       	ld	r24, Z
    280e:	91 81       	ldd	r25, Z+1	; 0x01
    2810:	8d 93       	st	X+, r24
    2812:	9c 93       	st	X, r25
    2814:	fe 01       	movw	r30, r28
    2816:	eb 5a       	subi	r30, 0xAB	; 171
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	80 81       	ld	r24, Z
    281c:	91 81       	ldd	r25, Z+1	; 0x01
    281e:	01 97       	sbiw	r24, 0x01	; 1
    2820:	f1 f7       	brne	.-4      	; 0x281e <lcd_init+0x2f6>
    2822:	fe 01       	movw	r30, r28
    2824:	eb 5a       	subi	r30, 0xAB	; 171
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	91 83       	std	Z+1, r25	; 0x01
    282a:	80 83       	st	Z, r24
	_delay_ms(5);	
    DIO_voidSetPortDirection(LCD_DATA_PORT,PRTOUTPUT );
    282c:	82 e0       	ldi	r24, 0x02	; 2
    282e:	6f ef       	ldi	r22, 0xFF	; 255
    2830:	0e 94 83 10 	call	0x2106	; 0x2106 <DIO_voidSetPortDirection>

    lcd_command(0x33);
    2834:	83 e3       	ldi	r24, 0x33	; 51
    2836:	0e 94 38 17 	call	0x2e70	; 0x2e70 <lcd_command>
    283a:	fe 01       	movw	r30, r28
    283c:	ef 5a       	subi	r30, 0xAF	; 175
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	a0 e0       	ldi	r26, 0x00	; 0
    2846:	b0 e4       	ldi	r27, 0x40	; 64
    2848:	80 83       	st	Z, r24
    284a:	91 83       	std	Z+1, r25	; 0x01
    284c:	a2 83       	std	Z+2, r26	; 0x02
    284e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2850:	8e 01       	movw	r16, r28
    2852:	03 5b       	subi	r16, 0xB3	; 179
    2854:	1f 4f       	sbci	r17, 0xFF	; 255
    2856:	fe 01       	movw	r30, r28
    2858:	ef 5a       	subi	r30, 0xAF	; 175
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	60 81       	ld	r22, Z
    285e:	71 81       	ldd	r23, Z+1	; 0x01
    2860:	82 81       	ldd	r24, Z+2	; 0x02
    2862:	93 81       	ldd	r25, Z+3	; 0x03
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	4a ef       	ldi	r20, 0xFA	; 250
    286a:	54 e4       	ldi	r21, 0x44	; 68
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	f8 01       	movw	r30, r16
    2876:	80 83       	st	Z, r24
    2878:	91 83       	std	Z+1, r25	; 0x01
    287a:	a2 83       	std	Z+2, r26	; 0x02
    287c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    287e:	fe 01       	movw	r30, r28
    2880:	e3 5b       	subi	r30, 0xB3	; 179
    2882:	ff 4f       	sbci	r31, 0xFF	; 255
    2884:	60 81       	ld	r22, Z
    2886:	71 81       	ldd	r23, Z+1	; 0x01
    2888:	82 81       	ldd	r24, Z+2	; 0x02
    288a:	93 81       	ldd	r25, Z+3	; 0x03
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	40 e8       	ldi	r20, 0x80	; 128
    2892:	5f e3       	ldi	r21, 0x3F	; 63
    2894:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2898:	88 23       	and	r24, r24
    289a:	44 f4       	brge	.+16     	; 0x28ac <lcd_init+0x384>
		__ticks = 1;
    289c:	fe 01       	movw	r30, r28
    289e:	e5 5b       	subi	r30, 0xB5	; 181
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	91 83       	std	Z+1, r25	; 0x01
    28a8:	80 83       	st	Z, r24
    28aa:	64 c0       	rjmp	.+200    	; 0x2974 <lcd_init+0x44c>
	else if (__tmp > 65535)
    28ac:	fe 01       	movw	r30, r28
    28ae:	e3 5b       	subi	r30, 0xB3	; 179
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	60 81       	ld	r22, Z
    28b4:	71 81       	ldd	r23, Z+1	; 0x01
    28b6:	82 81       	ldd	r24, Z+2	; 0x02
    28b8:	93 81       	ldd	r25, Z+3	; 0x03
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	3f ef       	ldi	r19, 0xFF	; 255
    28be:	4f e7       	ldi	r20, 0x7F	; 127
    28c0:	57 e4       	ldi	r21, 0x47	; 71
    28c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28c6:	18 16       	cp	r1, r24
    28c8:	0c f0       	brlt	.+2      	; 0x28cc <lcd_init+0x3a4>
    28ca:	43 c0       	rjmp	.+134    	; 0x2952 <lcd_init+0x42a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28cc:	fe 01       	movw	r30, r28
    28ce:	ef 5a       	subi	r30, 0xAF	; 175
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	60 81       	ld	r22, Z
    28d4:	71 81       	ldd	r23, Z+1	; 0x01
    28d6:	82 81       	ldd	r24, Z+2	; 0x02
    28d8:	93 81       	ldd	r25, Z+3	; 0x03
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e2       	ldi	r20, 0x20	; 32
    28e0:	51 e4       	ldi	r21, 0x41	; 65
    28e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	8e 01       	movw	r16, r28
    28ec:	05 5b       	subi	r16, 0xB5	; 181
    28ee:	1f 4f       	sbci	r17, 0xFF	; 255
    28f0:	bc 01       	movw	r22, r24
    28f2:	cd 01       	movw	r24, r26
    28f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	f8 01       	movw	r30, r16
    28fe:	91 83       	std	Z+1, r25	; 0x01
    2900:	80 83       	st	Z, r24
    2902:	1f c0       	rjmp	.+62     	; 0x2942 <lcd_init+0x41a>
    2904:	fe 01       	movw	r30, r28
    2906:	e7 5b       	subi	r30, 0xB7	; 183
    2908:	ff 4f       	sbci	r31, 0xFF	; 255
    290a:	88 ec       	ldi	r24, 0xC8	; 200
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	91 83       	std	Z+1, r25	; 0x01
    2910:	80 83       	st	Z, r24
    2912:	fe 01       	movw	r30, r28
    2914:	e7 5b       	subi	r30, 0xB7	; 183
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	80 81       	ld	r24, Z
    291a:	91 81       	ldd	r25, Z+1	; 0x01
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	f1 f7       	brne	.-4      	; 0x291c <lcd_init+0x3f4>
    2920:	fe 01       	movw	r30, r28
    2922:	e7 5b       	subi	r30, 0xB7	; 183
    2924:	ff 4f       	sbci	r31, 0xFF	; 255
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292a:	de 01       	movw	r26, r28
    292c:	a5 5b       	subi	r26, 0xB5	; 181
    292e:	bf 4f       	sbci	r27, 0xFF	; 255
    2930:	fe 01       	movw	r30, r28
    2932:	e5 5b       	subi	r30, 0xB5	; 181
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	80 81       	ld	r24, Z
    2938:	91 81       	ldd	r25, Z+1	; 0x01
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	11 96       	adiw	r26, 0x01	; 1
    293e:	9c 93       	st	X, r25
    2940:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2942:	fe 01       	movw	r30, r28
    2944:	e5 5b       	subi	r30, 0xB5	; 181
    2946:	ff 4f       	sbci	r31, 0xFF	; 255
    2948:	80 81       	ld	r24, Z
    294a:	91 81       	ldd	r25, Z+1	; 0x01
    294c:	00 97       	sbiw	r24, 0x00	; 0
    294e:	d1 f6       	brne	.-76     	; 0x2904 <lcd_init+0x3dc>
    2950:	27 c0       	rjmp	.+78     	; 0x29a0 <lcd_init+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2952:	8e 01       	movw	r16, r28
    2954:	05 5b       	subi	r16, 0xB5	; 181
    2956:	1f 4f       	sbci	r17, 0xFF	; 255
    2958:	fe 01       	movw	r30, r28
    295a:	e3 5b       	subi	r30, 0xB3	; 179
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	60 81       	ld	r22, Z
    2960:	71 81       	ldd	r23, Z+1	; 0x01
    2962:	82 81       	ldd	r24, Z+2	; 0x02
    2964:	93 81       	ldd	r25, Z+3	; 0x03
    2966:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	f8 01       	movw	r30, r16
    2970:	91 83       	std	Z+1, r25	; 0x01
    2972:	80 83       	st	Z, r24
    2974:	de 01       	movw	r26, r28
    2976:	a9 5b       	subi	r26, 0xB9	; 185
    2978:	bf 4f       	sbci	r27, 0xFF	; 255
    297a:	fe 01       	movw	r30, r28
    297c:	e5 5b       	subi	r30, 0xB5	; 181
    297e:	ff 4f       	sbci	r31, 0xFF	; 255
    2980:	80 81       	ld	r24, Z
    2982:	91 81       	ldd	r25, Z+1	; 0x01
    2984:	8d 93       	st	X+, r24
    2986:	9c 93       	st	X, r25
    2988:	fe 01       	movw	r30, r28
    298a:	e9 5b       	subi	r30, 0xB9	; 185
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	80 81       	ld	r24, Z
    2990:	91 81       	ldd	r25, Z+1	; 0x01
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	f1 f7       	brne	.-4      	; 0x2992 <lcd_init+0x46a>
    2996:	fe 01       	movw	r30, r28
    2998:	e9 5b       	subi	r30, 0xB9	; 185
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
    _delay_ms(2);	
    lcd_command(0x32);    
    29a0:	82 e3       	ldi	r24, 0x32	; 50
    29a2:	0e 94 38 17 	call	0x2e70	; 0x2e70 <lcd_command>
    29a6:	fe 01       	movw	r30, r28
    29a8:	ed 5b       	subi	r30, 0xBD	; 189
    29aa:	ff 4f       	sbci	r31, 0xFF	; 255
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	a0 e0       	ldi	r26, 0x00	; 0
    29b2:	b0 e4       	ldi	r27, 0x40	; 64
    29b4:	80 83       	st	Z, r24
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	a2 83       	std	Z+2, r26	; 0x02
    29ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29bc:	8e 01       	movw	r16, r28
    29be:	01 5c       	subi	r16, 0xC1	; 193
    29c0:	1f 4f       	sbci	r17, 0xFF	; 255
    29c2:	fe 01       	movw	r30, r28
    29c4:	ed 5b       	subi	r30, 0xBD	; 189
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	60 81       	ld	r22, Z
    29ca:	71 81       	ldd	r23, Z+1	; 0x01
    29cc:	82 81       	ldd	r24, Z+2	; 0x02
    29ce:	93 81       	ldd	r25, Z+3	; 0x03
    29d0:	20 e0       	ldi	r18, 0x00	; 0
    29d2:	30 e0       	ldi	r19, 0x00	; 0
    29d4:	4a ef       	ldi	r20, 0xFA	; 250
    29d6:	54 e4       	ldi	r21, 0x44	; 68
    29d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29dc:	dc 01       	movw	r26, r24
    29de:	cb 01       	movw	r24, r22
    29e0:	f8 01       	movw	r30, r16
    29e2:	80 83       	st	Z, r24
    29e4:	91 83       	std	Z+1, r25	; 0x01
    29e6:	a2 83       	std	Z+2, r26	; 0x02
    29e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29ea:	fe 01       	movw	r30, r28
    29ec:	ff 96       	adiw	r30, 0x3f	; 63
    29ee:	60 81       	ld	r22, Z
    29f0:	71 81       	ldd	r23, Z+1	; 0x01
    29f2:	82 81       	ldd	r24, Z+2	; 0x02
    29f4:	93 81       	ldd	r25, Z+3	; 0x03
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e8       	ldi	r20, 0x80	; 128
    29fc:	5f e3       	ldi	r21, 0x3F	; 63
    29fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a02:	88 23       	and	r24, r24
    2a04:	2c f4       	brge	.+10     	; 0x2a10 <lcd_init+0x4e8>
		__ticks = 1;
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	90 e0       	ldi	r25, 0x00	; 0
    2a0a:	9e af       	std	Y+62, r25	; 0x3e
    2a0c:	8d af       	std	Y+61, r24	; 0x3d
    2a0e:	46 c0       	rjmp	.+140    	; 0x2a9c <lcd_init+0x574>
	else if (__tmp > 65535)
    2a10:	fe 01       	movw	r30, r28
    2a12:	ff 96       	adiw	r30, 0x3f	; 63
    2a14:	60 81       	ld	r22, Z
    2a16:	71 81       	ldd	r23, Z+1	; 0x01
    2a18:	82 81       	ldd	r24, Z+2	; 0x02
    2a1a:	93 81       	ldd	r25, Z+3	; 0x03
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	3f ef       	ldi	r19, 0xFF	; 255
    2a20:	4f e7       	ldi	r20, 0x7F	; 127
    2a22:	57 e4       	ldi	r21, 0x47	; 71
    2a24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a28:	18 16       	cp	r1, r24
    2a2a:	64 f5       	brge	.+88     	; 0x2a84 <lcd_init+0x55c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	ed 5b       	subi	r30, 0xBD	; 189
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	60 81       	ld	r22, Z
    2a34:	71 81       	ldd	r23, Z+1	; 0x01
    2a36:	82 81       	ldd	r24, Z+2	; 0x02
    2a38:	93 81       	ldd	r25, Z+3	; 0x03
    2a3a:	20 e0       	ldi	r18, 0x00	; 0
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	40 e2       	ldi	r20, 0x20	; 32
    2a40:	51 e4       	ldi	r21, 0x41	; 65
    2a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a46:	dc 01       	movw	r26, r24
    2a48:	cb 01       	movw	r24, r22
    2a4a:	bc 01       	movw	r22, r24
    2a4c:	cd 01       	movw	r24, r26
    2a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	9e af       	std	Y+62, r25	; 0x3e
    2a58:	8d af       	std	Y+61, r24	; 0x3d
    2a5a:	0f c0       	rjmp	.+30     	; 0x2a7a <lcd_init+0x552>
    2a5c:	88 ec       	ldi	r24, 0xC8	; 200
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	9c af       	std	Y+60, r25	; 0x3c
    2a62:	8b af       	std	Y+59, r24	; 0x3b
    2a64:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a66:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	f1 f7       	brne	.-4      	; 0x2a68 <lcd_init+0x540>
    2a6c:	9c af       	std	Y+60, r25	; 0x3c
    2a6e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a70:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a72:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a74:	01 97       	sbiw	r24, 0x01	; 1
    2a76:	9e af       	std	Y+62, r25	; 0x3e
    2a78:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a7e:	00 97       	sbiw	r24, 0x00	; 0
    2a80:	69 f7       	brne	.-38     	; 0x2a5c <lcd_init+0x534>
    2a82:	16 c0       	rjmp	.+44     	; 0x2ab0 <lcd_init+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a84:	fe 01       	movw	r30, r28
    2a86:	ff 96       	adiw	r30, 0x3f	; 63
    2a88:	60 81       	ld	r22, Z
    2a8a:	71 81       	ldd	r23, Z+1	; 0x01
    2a8c:	82 81       	ldd	r24, Z+2	; 0x02
    2a8e:	93 81       	ldd	r25, Z+3	; 0x03
    2a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	9e af       	std	Y+62, r25	; 0x3e
    2a9a:	8d af       	std	Y+61, r24	; 0x3d
    2a9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2aa0:	9a af       	std	Y+58, r25	; 0x3a
    2aa2:	89 af       	std	Y+57, r24	; 0x39
    2aa4:	89 ad       	ldd	r24, Y+57	; 0x39
    2aa6:	9a ad       	ldd	r25, Y+58	; 0x3a
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <lcd_init+0x580>
    2aac:	9a af       	std	Y+58, r25	; 0x3a
    2aae:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
    lcd_command(TWO_LINES_5X7_DOT_MATRIX);
    2ab0:	88 e2       	ldi	r24, 0x28	; 40
    2ab2:	0e 94 38 17 	call	0x2e70	; 0x2e70 <lcd_command>
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	a0 e0       	ldi	r26, 0x00	; 0
    2abc:	b0 e4       	ldi	r27, 0x40	; 64
    2abe:	8d ab       	std	Y+53, r24	; 0x35
    2ac0:	9e ab       	std	Y+54, r25	; 0x36
    2ac2:	af ab       	std	Y+55, r26	; 0x37
    2ac4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ac6:	6d a9       	ldd	r22, Y+53	; 0x35
    2ac8:	7e a9       	ldd	r23, Y+54	; 0x36
    2aca:	8f a9       	ldd	r24, Y+55	; 0x37
    2acc:	98 ad       	ldd	r25, Y+56	; 0x38
    2ace:	20 e0       	ldi	r18, 0x00	; 0
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	4a ef       	ldi	r20, 0xFA	; 250
    2ad4:	54 e4       	ldi	r21, 0x44	; 68
    2ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ada:	dc 01       	movw	r26, r24
    2adc:	cb 01       	movw	r24, r22
    2ade:	89 ab       	std	Y+49, r24	; 0x31
    2ae0:	9a ab       	std	Y+50, r25	; 0x32
    2ae2:	ab ab       	std	Y+51, r26	; 0x33
    2ae4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ae6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ae8:	7a a9       	ldd	r23, Y+50	; 0x32
    2aea:	8b a9       	ldd	r24, Y+51	; 0x33
    2aec:	9c a9       	ldd	r25, Y+52	; 0x34
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	40 e8       	ldi	r20, 0x80	; 128
    2af4:	5f e3       	ldi	r21, 0x3F	; 63
    2af6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2afa:	88 23       	and	r24, r24
    2afc:	2c f4       	brge	.+10     	; 0x2b08 <lcd_init+0x5e0>
		__ticks = 1;
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	90 e0       	ldi	r25, 0x00	; 0
    2b02:	98 ab       	std	Y+48, r25	; 0x30
    2b04:	8f a7       	std	Y+47, r24	; 0x2f
    2b06:	3f c0       	rjmp	.+126    	; 0x2b86 <lcd_init+0x65e>
	else if (__tmp > 65535)
    2b08:	69 a9       	ldd	r22, Y+49	; 0x31
    2b0a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b0c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b0e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	3f ef       	ldi	r19, 0xFF	; 255
    2b14:	4f e7       	ldi	r20, 0x7F	; 127
    2b16:	57 e4       	ldi	r21, 0x47	; 71
    2b18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b1c:	18 16       	cp	r1, r24
    2b1e:	4c f5       	brge	.+82     	; 0x2b72 <lcd_init+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b20:	6d a9       	ldd	r22, Y+53	; 0x35
    2b22:	7e a9       	ldd	r23, Y+54	; 0x36
    2b24:	8f a9       	ldd	r24, Y+55	; 0x37
    2b26:	98 ad       	ldd	r25, Y+56	; 0x38
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	30 e0       	ldi	r19, 0x00	; 0
    2b2c:	40 e2       	ldi	r20, 0x20	; 32
    2b2e:	51 e4       	ldi	r21, 0x41	; 65
    2b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	bc 01       	movw	r22, r24
    2b3a:	cd 01       	movw	r24, r26
    2b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	98 ab       	std	Y+48, r25	; 0x30
    2b46:	8f a7       	std	Y+47, r24	; 0x2f
    2b48:	0f c0       	rjmp	.+30     	; 0x2b68 <lcd_init+0x640>
    2b4a:	88 ec       	ldi	r24, 0xC8	; 200
    2b4c:	90 e0       	ldi	r25, 0x00	; 0
    2b4e:	9e a7       	std	Y+46, r25	; 0x2e
    2b50:	8d a7       	std	Y+45, r24	; 0x2d
    2b52:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b54:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <lcd_init+0x62e>
    2b5a:	9e a7       	std	Y+46, r25	; 0x2e
    2b5c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b60:	98 a9       	ldd	r25, Y+48	; 0x30
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	98 ab       	std	Y+48, r25	; 0x30
    2b66:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b68:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b6a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b6c:	00 97       	sbiw	r24, 0x00	; 0
    2b6e:	69 f7       	brne	.-38     	; 0x2b4a <lcd_init+0x622>
    2b70:	14 c0       	rjmp	.+40     	; 0x2b9a <lcd_init+0x672>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b72:	69 a9       	ldd	r22, Y+49	; 0x31
    2b74:	7a a9       	ldd	r23, Y+50	; 0x32
    2b76:	8b a9       	ldd	r24, Y+51	; 0x33
    2b78:	9c a9       	ldd	r25, Y+52	; 0x34
    2b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	98 ab       	std	Y+48, r25	; 0x30
    2b84:	8f a7       	std	Y+47, r24	; 0x2f
    2b86:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b88:	98 a9       	ldd	r25, Y+48	; 0x30
    2b8a:	9c a7       	std	Y+44, r25	; 0x2c
    2b8c:	8b a7       	std	Y+43, r24	; 0x2b
    2b8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b90:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	f1 f7       	brne	.-4      	; 0x2b92 <lcd_init+0x66a>
    2b96:	9c a7       	std	Y+44, r25	; 0x2c
    2b98:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);
    lcd_command(DISPLAY_ON_CURSOR_OFF);
    2b9a:	8c e0       	ldi	r24, 0x0C	; 12
    2b9c:	0e 94 38 17 	call	0x2e70	; 0x2e70 <lcd_command>
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	a0 e0       	ldi	r26, 0x00	; 0
    2ba6:	b0 e4       	ldi	r27, 0x40	; 64
    2ba8:	8f a3       	std	Y+39, r24	; 0x27
    2baa:	98 a7       	std	Y+40, r25	; 0x28
    2bac:	a9 a7       	std	Y+41, r26	; 0x29
    2bae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb0:	6f a1       	ldd	r22, Y+39	; 0x27
    2bb2:	78 a5       	ldd	r23, Y+40	; 0x28
    2bb4:	89 a5       	ldd	r24, Y+41	; 0x29
    2bb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bb8:	20 e0       	ldi	r18, 0x00	; 0
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	4a ef       	ldi	r20, 0xFA	; 250
    2bbe:	54 e4       	ldi	r21, 0x44	; 68
    2bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bc4:	dc 01       	movw	r26, r24
    2bc6:	cb 01       	movw	r24, r22
    2bc8:	8b a3       	std	Y+35, r24	; 0x23
    2bca:	9c a3       	std	Y+36, r25	; 0x24
    2bcc:	ad a3       	std	Y+37, r26	; 0x25
    2bce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bd0:	6b a1       	ldd	r22, Y+35	; 0x23
    2bd2:	7c a1       	ldd	r23, Y+36	; 0x24
    2bd4:	8d a1       	ldd	r24, Y+37	; 0x25
    2bd6:	9e a1       	ldd	r25, Y+38	; 0x26
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	40 e8       	ldi	r20, 0x80	; 128
    2bde:	5f e3       	ldi	r21, 0x3F	; 63
    2be0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2be4:	88 23       	and	r24, r24
    2be6:	2c f4       	brge	.+10     	; 0x2bf2 <lcd_init+0x6ca>
		__ticks = 1;
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	9a a3       	std	Y+34, r25	; 0x22
    2bee:	89 a3       	std	Y+33, r24	; 0x21
    2bf0:	3f c0       	rjmp	.+126    	; 0x2c70 <lcd_init+0x748>
	else if (__tmp > 65535)
    2bf2:	6b a1       	ldd	r22, Y+35	; 0x23
    2bf4:	7c a1       	ldd	r23, Y+36	; 0x24
    2bf6:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf8:	9e a1       	ldd	r25, Y+38	; 0x26
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	3f ef       	ldi	r19, 0xFF	; 255
    2bfe:	4f e7       	ldi	r20, 0x7F	; 127
    2c00:	57 e4       	ldi	r21, 0x47	; 71
    2c02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c06:	18 16       	cp	r1, r24
    2c08:	4c f5       	brge	.+82     	; 0x2c5c <lcd_init+0x734>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0a:	6f a1       	ldd	r22, Y+39	; 0x27
    2c0c:	78 a5       	ldd	r23, Y+40	; 0x28
    2c0e:	89 a5       	ldd	r24, Y+41	; 0x29
    2c10:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	40 e2       	ldi	r20, 0x20	; 32
    2c18:	51 e4       	ldi	r21, 0x41	; 65
    2c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	bc 01       	movw	r22, r24
    2c24:	cd 01       	movw	r24, r26
    2c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2a:	dc 01       	movw	r26, r24
    2c2c:	cb 01       	movw	r24, r22
    2c2e:	9a a3       	std	Y+34, r25	; 0x22
    2c30:	89 a3       	std	Y+33, r24	; 0x21
    2c32:	0f c0       	rjmp	.+30     	; 0x2c52 <lcd_init+0x72a>
    2c34:	88 ec       	ldi	r24, 0xC8	; 200
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	98 a3       	std	Y+32, r25	; 0x20
    2c3a:	8f 8f       	std	Y+31, r24	; 0x1f
    2c3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c3e:	98 a1       	ldd	r25, Y+32	; 0x20
    2c40:	01 97       	sbiw	r24, 0x01	; 1
    2c42:	f1 f7       	brne	.-4      	; 0x2c40 <lcd_init+0x718>
    2c44:	98 a3       	std	Y+32, r25	; 0x20
    2c46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c48:	89 a1       	ldd	r24, Y+33	; 0x21
    2c4a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	9a a3       	std	Y+34, r25	; 0x22
    2c50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c52:	89 a1       	ldd	r24, Y+33	; 0x21
    2c54:	9a a1       	ldd	r25, Y+34	; 0x22
    2c56:	00 97       	sbiw	r24, 0x00	; 0
    2c58:	69 f7       	brne	.-38     	; 0x2c34 <lcd_init+0x70c>
    2c5a:	14 c0       	rjmp	.+40     	; 0x2c84 <lcd_init+0x75c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c5c:	6b a1       	ldd	r22, Y+35	; 0x23
    2c5e:	7c a1       	ldd	r23, Y+36	; 0x24
    2c60:	8d a1       	ldd	r24, Y+37	; 0x25
    2c62:	9e a1       	ldd	r25, Y+38	; 0x26
    2c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	9a a3       	std	Y+34, r25	; 0x22
    2c6e:	89 a3       	std	Y+33, r24	; 0x21
    2c70:	89 a1       	ldd	r24, Y+33	; 0x21
    2c72:	9a a1       	ldd	r25, Y+34	; 0x22
    2c74:	9e 8f       	std	Y+30, r25	; 0x1e
    2c76:	8d 8f       	std	Y+29, r24	; 0x1d
    2c78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	f1 f7       	brne	.-4      	; 0x2c7c <lcd_init+0x754>
    2c80:	9e 8f       	std	Y+30, r25	; 0x1e
    2c82:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);	
    lcd_command(INCREMENT_CURSOR);
    2c84:	86 e0       	ldi	r24, 0x06	; 6
    2c86:	0e 94 38 17 	call	0x2e70	; 0x2e70 <lcd_command>
    2c8a:	80 e0       	ldi	r24, 0x00	; 0
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	a0 e0       	ldi	r26, 0x00	; 0
    2c90:	b0 e4       	ldi	r27, 0x40	; 64
    2c92:	89 8f       	std	Y+25, r24	; 0x19
    2c94:	9a 8f       	std	Y+26, r25	; 0x1a
    2c96:	ab 8f       	std	Y+27, r26	; 0x1b
    2c98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c9a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ca0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	4a ef       	ldi	r20, 0xFA	; 250
    2ca8:	54 e4       	ldi	r21, 0x44	; 68
    2caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cae:	dc 01       	movw	r26, r24
    2cb0:	cb 01       	movw	r24, r22
    2cb2:	8d 8b       	std	Y+21, r24	; 0x15
    2cb4:	9e 8b       	std	Y+22, r25	; 0x16
    2cb6:	af 8b       	std	Y+23, r26	; 0x17
    2cb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cba:	6d 89       	ldd	r22, Y+21	; 0x15
    2cbc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	40 e8       	ldi	r20, 0x80	; 128
    2cc8:	5f e3       	ldi	r21, 0x3F	; 63
    2cca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cce:	88 23       	and	r24, r24
    2cd0:	2c f4       	brge	.+10     	; 0x2cdc <lcd_init+0x7b4>
		__ticks = 1;
    2cd2:	81 e0       	ldi	r24, 0x01	; 1
    2cd4:	90 e0       	ldi	r25, 0x00	; 0
    2cd6:	9c 8b       	std	Y+20, r25	; 0x14
    2cd8:	8b 8b       	std	Y+19, r24	; 0x13
    2cda:	3f c0       	rjmp	.+126    	; 0x2d5a <lcd_init+0x832>
	else if (__tmp > 65535)
    2cdc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cde:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	3f ef       	ldi	r19, 0xFF	; 255
    2ce8:	4f e7       	ldi	r20, 0x7F	; 127
    2cea:	57 e4       	ldi	r21, 0x47	; 71
    2cec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cf0:	18 16       	cp	r1, r24
    2cf2:	4c f5       	brge	.+82     	; 0x2d46 <lcd_init+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf4:	69 8d       	ldd	r22, Y+25	; 0x19
    2cf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e2       	ldi	r20, 0x20	; 32
    2d02:	51 e4       	ldi	r21, 0x41	; 65
    2d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	bc 01       	movw	r22, r24
    2d0e:	cd 01       	movw	r24, r26
    2d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	9c 8b       	std	Y+20, r25	; 0x14
    2d1a:	8b 8b       	std	Y+19, r24	; 0x13
    2d1c:	0f c0       	rjmp	.+30     	; 0x2d3c <lcd_init+0x814>
    2d1e:	88 ec       	ldi	r24, 0xC8	; 200
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	9a 8b       	std	Y+18, r25	; 0x12
    2d24:	89 8b       	std	Y+17, r24	; 0x11
    2d26:	89 89       	ldd	r24, Y+17	; 0x11
    2d28:	9a 89       	ldd	r25, Y+18	; 0x12
    2d2a:	01 97       	sbiw	r24, 0x01	; 1
    2d2c:	f1 f7       	brne	.-4      	; 0x2d2a <lcd_init+0x802>
    2d2e:	9a 8b       	std	Y+18, r25	; 0x12
    2d30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d32:	8b 89       	ldd	r24, Y+19	; 0x13
    2d34:	9c 89       	ldd	r25, Y+20	; 0x14
    2d36:	01 97       	sbiw	r24, 0x01	; 1
    2d38:	9c 8b       	std	Y+20, r25	; 0x14
    2d3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d40:	00 97       	sbiw	r24, 0x00	; 0
    2d42:	69 f7       	brne	.-38     	; 0x2d1e <lcd_init+0x7f6>
    2d44:	14 c0       	rjmp	.+40     	; 0x2d6e <lcd_init+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d46:	6d 89       	ldd	r22, Y+21	; 0x15
    2d48:	7e 89       	ldd	r23, Y+22	; 0x16
    2d4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	9c 8b       	std	Y+20, r25	; 0x14
    2d58:	8b 8b       	std	Y+19, r24	; 0x13
    2d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d5e:	98 8b       	std	Y+16, r25	; 0x10
    2d60:	8f 87       	std	Y+15, r24	; 0x0f
    2d62:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d64:	98 89       	ldd	r25, Y+16	; 0x10
    2d66:	01 97       	sbiw	r24, 0x01	; 1
    2d68:	f1 f7       	brne	.-4      	; 0x2d66 <lcd_init+0x83e>
    2d6a:	98 8b       	std	Y+16, r25	; 0x10
    2d6c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);   	
    lcd_command(DISPLAY_CLEAR);
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	0e 94 38 17 	call	0x2e70	; 0x2e70 <lcd_command>
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	a0 e0       	ldi	r26, 0x00	; 0
    2d7a:	b0 e4       	ldi	r27, 0x40	; 64
    2d7c:	8b 87       	std	Y+11, r24	; 0x0b
    2d7e:	9c 87       	std	Y+12, r25	; 0x0c
    2d80:	ad 87       	std	Y+13, r26	; 0x0d
    2d82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	4a ef       	ldi	r20, 0xFA	; 250
    2d92:	54 e4       	ldi	r21, 0x44	; 68
    2d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	8f 83       	std	Y+7, r24	; 0x07
    2d9e:	98 87       	std	Y+8, r25	; 0x08
    2da0:	a9 87       	std	Y+9, r26	; 0x09
    2da2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2da4:	6f 81       	ldd	r22, Y+7	; 0x07
    2da6:	78 85       	ldd	r23, Y+8	; 0x08
    2da8:	89 85       	ldd	r24, Y+9	; 0x09
    2daa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dac:	20 e0       	ldi	r18, 0x00	; 0
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	40 e8       	ldi	r20, 0x80	; 128
    2db2:	5f e3       	ldi	r21, 0x3F	; 63
    2db4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2db8:	88 23       	and	r24, r24
    2dba:	2c f4       	brge	.+10     	; 0x2dc6 <lcd_init+0x89e>
		__ticks = 1;
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	9e 83       	std	Y+6, r25	; 0x06
    2dc2:	8d 83       	std	Y+5, r24	; 0x05
    2dc4:	3f c0       	rjmp	.+126    	; 0x2e44 <lcd_init+0x91c>
	else if (__tmp > 65535)
    2dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc8:	78 85       	ldd	r23, Y+8	; 0x08
    2dca:	89 85       	ldd	r24, Y+9	; 0x09
    2dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	3f ef       	ldi	r19, 0xFF	; 255
    2dd2:	4f e7       	ldi	r20, 0x7F	; 127
    2dd4:	57 e4       	ldi	r21, 0x47	; 71
    2dd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dda:	18 16       	cp	r1, r24
    2ddc:	4c f5       	brge	.+82     	; 0x2e30 <lcd_init+0x908>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2de0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2de2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2de4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e2       	ldi	r20, 0x20	; 32
    2dec:	51 e4       	ldi	r21, 0x41	; 65
    2dee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2df2:	dc 01       	movw	r26, r24
    2df4:	cb 01       	movw	r24, r22
    2df6:	bc 01       	movw	r22, r24
    2df8:	cd 01       	movw	r24, r26
    2dfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	9e 83       	std	Y+6, r25	; 0x06
    2e04:	8d 83       	std	Y+5, r24	; 0x05
    2e06:	0f c0       	rjmp	.+30     	; 0x2e26 <lcd_init+0x8fe>
    2e08:	88 ec       	ldi	r24, 0xC8	; 200
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	9c 83       	std	Y+4, r25	; 0x04
    2e0e:	8b 83       	std	Y+3, r24	; 0x03
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
    2e12:	9c 81       	ldd	r25, Y+4	; 0x04
    2e14:	01 97       	sbiw	r24, 0x01	; 1
    2e16:	f1 f7       	brne	.-4      	; 0x2e14 <lcd_init+0x8ec>
    2e18:	9c 83       	std	Y+4, r25	; 0x04
    2e1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e20:	01 97       	sbiw	r24, 0x01	; 1
    2e22:	9e 83       	std	Y+6, r25	; 0x06
    2e24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e26:	8d 81       	ldd	r24, Y+5	; 0x05
    2e28:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	69 f7       	brne	.-38     	; 0x2e08 <lcd_init+0x8e0>
    2e2e:	14 c0       	rjmp	.+40     	; 0x2e58 <lcd_init+0x930>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e30:	6f 81       	ldd	r22, Y+7	; 0x07
    2e32:	78 85       	ldd	r23, Y+8	; 0x08
    2e34:	89 85       	ldd	r24, Y+9	; 0x09
    2e36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e3c:	dc 01       	movw	r26, r24
    2e3e:	cb 01       	movw	r24, r22
    2e40:	9e 83       	std	Y+6, r25	; 0x06
    2e42:	8d 83       	std	Y+5, r24	; 0x05
    2e44:	8d 81       	ldd	r24, Y+5	; 0x05
    2e46:	9e 81       	ldd	r25, Y+6	; 0x06
    2e48:	9a 83       	std	Y+2, r25	; 0x02
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    2e4c:	89 81       	ldd	r24, Y+1	; 0x01
    2e4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e50:	01 97       	sbiw	r24, 0x01	; 1
    2e52:	f1 f7       	brne	.-4      	; 0x2e50 <lcd_init+0x928>
    2e54:	9a 83       	std	Y+2, r25	; 0x02
    2e56:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    2e58:	c0 59       	subi	r28, 0x90	; 144
    2e5a:	df 4f       	sbci	r29, 0xFF	; 255
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	cf 91       	pop	r28
    2e68:	df 91       	pop	r29
    2e6a:	1f 91       	pop	r17
    2e6c:	0f 91       	pop	r16
    2e6e:	08 95       	ret

00002e70 <lcd_command>:
void lcd_command(uint8_t cmd)
{
    2e70:	0f 93       	push	r16
    2e72:	1f 93       	push	r17
    2e74:	df 93       	push	r29
    2e76:	cf 93       	push	r28
    2e78:	cd b7       	in	r28, 0x3d	; 61
    2e7a:	de b7       	in	r29, 0x3e	; 62
    2e7c:	c7 54       	subi	r28, 0x47	; 71
    2e7e:	d0 40       	sbci	r29, 0x00	; 0
    2e80:	0f b6       	in	r0, 0x3f	; 63
    2e82:	f8 94       	cli
    2e84:	de bf       	out	0x3e, r29	; 62
    2e86:	0f be       	out	0x3f, r0	; 63
    2e88:	cd bf       	out	0x3d, r28	; 61
    2e8a:	fe 01       	movw	r30, r28
    2e8c:	e9 5b       	subi	r30, 0xB9	; 185
    2e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e90:	80 83       	st	Z, r24
    DIO_voidSetPortValue(LCD_DATA_PORT, (cmd&0xf0));
    2e92:	fe 01       	movw	r30, r28
    2e94:	e9 5b       	subi	r30, 0xB9	; 185
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	80 81       	ld	r24, Z
    2e9a:	98 2f       	mov	r25, r24
    2e9c:	90 7f       	andi	r25, 0xF0	; 240
    2e9e:	82 e0       	ldi	r24, 0x02	; 2
    2ea0:	69 2f       	mov	r22, r25
    2ea2:	0e 94 3b 10 	call	0x2076	; 0x2076 <DIO_voidSetPortValue>
    DIO_voidSetPinValue(LS_PIN,LOW);
    2ea6:	82 e0       	ldi	r24, 0x02	; 2
    2ea8:	60 e0       	ldi	r22, 0x00	; 0
    2eaa:	40 e0       	ldi	r20, 0x00	; 0
    2eac:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(R_W_PIN,LOW);    
    2eb0:	82 e0       	ldi	r24, 0x02	; 2
    2eb2:	61 e0       	ldi	r22, 0x01	; 1
    2eb4:	40 e0       	ldi	r20, 0x00	; 0
    2eb6:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(EN_PIN,HIGH);    
    2eba:	82 e0       	ldi	r24, 0x02	; 2
    2ebc:	62 e0       	ldi	r22, 0x02	; 2
    2ebe:	41 e0       	ldi	r20, 0x01	; 1
    2ec0:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	ed 5b       	subi	r30, 0xBD	; 189
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	a0 e0       	ldi	r26, 0x00	; 0
    2ed0:	b0 e4       	ldi	r27, 0x40	; 64
    2ed2:	80 83       	st	Z, r24
    2ed4:	91 83       	std	Z+1, r25	; 0x01
    2ed6:	a2 83       	std	Z+2, r26	; 0x02
    2ed8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eda:	8e 01       	movw	r16, r28
    2edc:	01 5c       	subi	r16, 0xC1	; 193
    2ede:	1f 4f       	sbci	r17, 0xFF	; 255
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	ed 5b       	subi	r30, 0xBD	; 189
    2ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee6:	60 81       	ld	r22, Z
    2ee8:	71 81       	ldd	r23, Z+1	; 0x01
    2eea:	82 81       	ldd	r24, Z+2	; 0x02
    2eec:	93 81       	ldd	r25, Z+3	; 0x03
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	4a ef       	ldi	r20, 0xFA	; 250
    2ef4:	54 e4       	ldi	r21, 0x44	; 68
    2ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	f8 01       	movw	r30, r16
    2f00:	80 83       	st	Z, r24
    2f02:	91 83       	std	Z+1, r25	; 0x01
    2f04:	a2 83       	std	Z+2, r26	; 0x02
    2f06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f08:	fe 01       	movw	r30, r28
    2f0a:	ff 96       	adiw	r30, 0x3f	; 63
    2f0c:	60 81       	ld	r22, Z
    2f0e:	71 81       	ldd	r23, Z+1	; 0x01
    2f10:	82 81       	ldd	r24, Z+2	; 0x02
    2f12:	93 81       	ldd	r25, Z+3	; 0x03
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	40 e8       	ldi	r20, 0x80	; 128
    2f1a:	5f e3       	ldi	r21, 0x3F	; 63
    2f1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f20:	88 23       	and	r24, r24
    2f22:	2c f4       	brge	.+10     	; 0x2f2e <lcd_command+0xbe>
		__ticks = 1;
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	9e af       	std	Y+62, r25	; 0x3e
    2f2a:	8d af       	std	Y+61, r24	; 0x3d
    2f2c:	46 c0       	rjmp	.+140    	; 0x2fba <lcd_command+0x14a>
	else if (__tmp > 65535)
    2f2e:	fe 01       	movw	r30, r28
    2f30:	ff 96       	adiw	r30, 0x3f	; 63
    2f32:	60 81       	ld	r22, Z
    2f34:	71 81       	ldd	r23, Z+1	; 0x01
    2f36:	82 81       	ldd	r24, Z+2	; 0x02
    2f38:	93 81       	ldd	r25, Z+3	; 0x03
    2f3a:	20 e0       	ldi	r18, 0x00	; 0
    2f3c:	3f ef       	ldi	r19, 0xFF	; 255
    2f3e:	4f e7       	ldi	r20, 0x7F	; 127
    2f40:	57 e4       	ldi	r21, 0x47	; 71
    2f42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f46:	18 16       	cp	r1, r24
    2f48:	64 f5       	brge	.+88     	; 0x2fa2 <lcd_command+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4a:	fe 01       	movw	r30, r28
    2f4c:	ed 5b       	subi	r30, 0xBD	; 189
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	60 81       	ld	r22, Z
    2f52:	71 81       	ldd	r23, Z+1	; 0x01
    2f54:	82 81       	ldd	r24, Z+2	; 0x02
    2f56:	93 81       	ldd	r25, Z+3	; 0x03
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	40 e2       	ldi	r20, 0x20	; 32
    2f5e:	51 e4       	ldi	r21, 0x41	; 65
    2f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	bc 01       	movw	r22, r24
    2f6a:	cd 01       	movw	r24, r26
    2f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	9e af       	std	Y+62, r25	; 0x3e
    2f76:	8d af       	std	Y+61, r24	; 0x3d
    2f78:	0f c0       	rjmp	.+30     	; 0x2f98 <lcd_command+0x128>
    2f7a:	88 ec       	ldi	r24, 0xC8	; 200
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	9c af       	std	Y+60, r25	; 0x3c
    2f80:	8b af       	std	Y+59, r24	; 0x3b
    2f82:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f84:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f86:	01 97       	sbiw	r24, 0x01	; 1
    2f88:	f1 f7       	brne	.-4      	; 0x2f86 <lcd_command+0x116>
    2f8a:	9c af       	std	Y+60, r25	; 0x3c
    2f8c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f90:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	9e af       	std	Y+62, r25	; 0x3e
    2f96:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f98:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f9c:	00 97       	sbiw	r24, 0x00	; 0
    2f9e:	69 f7       	brne	.-38     	; 0x2f7a <lcd_command+0x10a>
    2fa0:	16 c0       	rjmp	.+44     	; 0x2fce <lcd_command+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa2:	fe 01       	movw	r30, r28
    2fa4:	ff 96       	adiw	r30, 0x3f	; 63
    2fa6:	60 81       	ld	r22, Z
    2fa8:	71 81       	ldd	r23, Z+1	; 0x01
    2faa:	82 81       	ldd	r24, Z+2	; 0x02
    2fac:	93 81       	ldd	r25, Z+3	; 0x03
    2fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	9e af       	std	Y+62, r25	; 0x3e
    2fb8:	8d af       	std	Y+61, r24	; 0x3d
    2fba:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fbc:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fbe:	9a af       	std	Y+58, r25	; 0x3a
    2fc0:	89 af       	std	Y+57, r24	; 0x39
    2fc2:	89 ad       	ldd	r24, Y+57	; 0x39
    2fc4:	9a ad       	ldd	r25, Y+58	; 0x3a
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	f1 f7       	brne	.-4      	; 0x2fc6 <lcd_command+0x156>
    2fca:	9a af       	std	Y+58, r25	; 0x3a
    2fcc:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(2);    
    DIO_voidSetPinValue(EN_PIN,LOW);
    2fce:	82 e0       	ldi	r24, 0x02	; 2
    2fd0:	62 e0       	ldi	r22, 0x02	; 2
    2fd2:	40 e0       	ldi	r20, 0x00	; 0
    2fd4:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	90 e0       	ldi	r25, 0x00	; 0
    2fdc:	a0 e0       	ldi	r26, 0x00	; 0
    2fde:	b0 e4       	ldi	r27, 0x40	; 64
    2fe0:	8d ab       	std	Y+53, r24	; 0x35
    2fe2:	9e ab       	std	Y+54, r25	; 0x36
    2fe4:	af ab       	std	Y+55, r26	; 0x37
    2fe6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe8:	6d a9       	ldd	r22, Y+53	; 0x35
    2fea:	7e a9       	ldd	r23, Y+54	; 0x36
    2fec:	8f a9       	ldd	r24, Y+55	; 0x37
    2fee:	98 ad       	ldd	r25, Y+56	; 0x38
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	4a ef       	ldi	r20, 0xFA	; 250
    2ff6:	54 e4       	ldi	r21, 0x44	; 68
    2ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	89 ab       	std	Y+49, r24	; 0x31
    3002:	9a ab       	std	Y+50, r25	; 0x32
    3004:	ab ab       	std	Y+51, r26	; 0x33
    3006:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3008:	69 a9       	ldd	r22, Y+49	; 0x31
    300a:	7a a9       	ldd	r23, Y+50	; 0x32
    300c:	8b a9       	ldd	r24, Y+51	; 0x33
    300e:	9c a9       	ldd	r25, Y+52	; 0x34
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	40 e8       	ldi	r20, 0x80	; 128
    3016:	5f e3       	ldi	r21, 0x3F	; 63
    3018:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    301c:	88 23       	and	r24, r24
    301e:	2c f4       	brge	.+10     	; 0x302a <lcd_command+0x1ba>
		__ticks = 1;
    3020:	81 e0       	ldi	r24, 0x01	; 1
    3022:	90 e0       	ldi	r25, 0x00	; 0
    3024:	98 ab       	std	Y+48, r25	; 0x30
    3026:	8f a7       	std	Y+47, r24	; 0x2f
    3028:	3f c0       	rjmp	.+126    	; 0x30a8 <lcd_command+0x238>
	else if (__tmp > 65535)
    302a:	69 a9       	ldd	r22, Y+49	; 0x31
    302c:	7a a9       	ldd	r23, Y+50	; 0x32
    302e:	8b a9       	ldd	r24, Y+51	; 0x33
    3030:	9c a9       	ldd	r25, Y+52	; 0x34
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	3f ef       	ldi	r19, 0xFF	; 255
    3036:	4f e7       	ldi	r20, 0x7F	; 127
    3038:	57 e4       	ldi	r21, 0x47	; 71
    303a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    303e:	18 16       	cp	r1, r24
    3040:	4c f5       	brge	.+82     	; 0x3094 <lcd_command+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3042:	6d a9       	ldd	r22, Y+53	; 0x35
    3044:	7e a9       	ldd	r23, Y+54	; 0x36
    3046:	8f a9       	ldd	r24, Y+55	; 0x37
    3048:	98 ad       	ldd	r25, Y+56	; 0x38
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	40 e2       	ldi	r20, 0x20	; 32
    3050:	51 e4       	ldi	r21, 0x41	; 65
    3052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	bc 01       	movw	r22, r24
    305c:	cd 01       	movw	r24, r26
    305e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	98 ab       	std	Y+48, r25	; 0x30
    3068:	8f a7       	std	Y+47, r24	; 0x2f
    306a:	0f c0       	rjmp	.+30     	; 0x308a <lcd_command+0x21a>
    306c:	88 ec       	ldi	r24, 0xC8	; 200
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	9e a7       	std	Y+46, r25	; 0x2e
    3072:	8d a7       	std	Y+45, r24	; 0x2d
    3074:	8d a5       	ldd	r24, Y+45	; 0x2d
    3076:	9e a5       	ldd	r25, Y+46	; 0x2e
    3078:	01 97       	sbiw	r24, 0x01	; 1
    307a:	f1 f7       	brne	.-4      	; 0x3078 <lcd_command+0x208>
    307c:	9e a7       	std	Y+46, r25	; 0x2e
    307e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3080:	8f a5       	ldd	r24, Y+47	; 0x2f
    3082:	98 a9       	ldd	r25, Y+48	; 0x30
    3084:	01 97       	sbiw	r24, 0x01	; 1
    3086:	98 ab       	std	Y+48, r25	; 0x30
    3088:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    308a:	8f a5       	ldd	r24, Y+47	; 0x2f
    308c:	98 a9       	ldd	r25, Y+48	; 0x30
    308e:	00 97       	sbiw	r24, 0x00	; 0
    3090:	69 f7       	brne	.-38     	; 0x306c <lcd_command+0x1fc>
    3092:	14 c0       	rjmp	.+40     	; 0x30bc <lcd_command+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3094:	69 a9       	ldd	r22, Y+49	; 0x31
    3096:	7a a9       	ldd	r23, Y+50	; 0x32
    3098:	8b a9       	ldd	r24, Y+51	; 0x33
    309a:	9c a9       	ldd	r25, Y+52	; 0x34
    309c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	98 ab       	std	Y+48, r25	; 0x30
    30a6:	8f a7       	std	Y+47, r24	; 0x2f
    30a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    30aa:	98 a9       	ldd	r25, Y+48	; 0x30
    30ac:	9c a7       	std	Y+44, r25	; 0x2c
    30ae:	8b a7       	std	Y+43, r24	; 0x2b
    30b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    30b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    30b4:	01 97       	sbiw	r24, 0x01	; 1
    30b6:	f1 f7       	brne	.-4      	; 0x30b4 <lcd_command+0x244>
    30b8:	9c a7       	std	Y+44, r25	; 0x2c
    30ba:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);     
    DIO_voidSetPortValue(LCD_DATA_PORT, (cmd<<4));
    30bc:	fe 01       	movw	r30, r28
    30be:	e9 5b       	subi	r30, 0xB9	; 185
    30c0:	ff 4f       	sbci	r31, 0xFF	; 255
    30c2:	80 81       	ld	r24, Z
    30c4:	98 2f       	mov	r25, r24
    30c6:	92 95       	swap	r25
    30c8:	90 7f       	andi	r25, 0xF0	; 240
    30ca:	82 e0       	ldi	r24, 0x02	; 2
    30cc:	69 2f       	mov	r22, r25
    30ce:	0e 94 3b 10 	call	0x2076	; 0x2076 <DIO_voidSetPortValue>
    DIO_voidSetPinValue(EN_PIN,HIGH);  
    30d2:	82 e0       	ldi	r24, 0x02	; 2
    30d4:	62 e0       	ldi	r22, 0x02	; 2
    30d6:	41 e0       	ldi	r20, 0x01	; 1
    30d8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	a0 e0       	ldi	r26, 0x00	; 0
    30e2:	b0 e4       	ldi	r27, 0x40	; 64
    30e4:	8f a3       	std	Y+39, r24	; 0x27
    30e6:	98 a7       	std	Y+40, r25	; 0x28
    30e8:	a9 a7       	std	Y+41, r26	; 0x29
    30ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ec:	6f a1       	ldd	r22, Y+39	; 0x27
    30ee:	78 a5       	ldd	r23, Y+40	; 0x28
    30f0:	89 a5       	ldd	r24, Y+41	; 0x29
    30f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	30 e0       	ldi	r19, 0x00	; 0
    30f8:	4a ef       	ldi	r20, 0xFA	; 250
    30fa:	54 e4       	ldi	r21, 0x44	; 68
    30fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3100:	dc 01       	movw	r26, r24
    3102:	cb 01       	movw	r24, r22
    3104:	8b a3       	std	Y+35, r24	; 0x23
    3106:	9c a3       	std	Y+36, r25	; 0x24
    3108:	ad a3       	std	Y+37, r26	; 0x25
    310a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    310c:	6b a1       	ldd	r22, Y+35	; 0x23
    310e:	7c a1       	ldd	r23, Y+36	; 0x24
    3110:	8d a1       	ldd	r24, Y+37	; 0x25
    3112:	9e a1       	ldd	r25, Y+38	; 0x26
    3114:	20 e0       	ldi	r18, 0x00	; 0
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	40 e8       	ldi	r20, 0x80	; 128
    311a:	5f e3       	ldi	r21, 0x3F	; 63
    311c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3120:	88 23       	and	r24, r24
    3122:	2c f4       	brge	.+10     	; 0x312e <lcd_command+0x2be>
		__ticks = 1;
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	9a a3       	std	Y+34, r25	; 0x22
    312a:	89 a3       	std	Y+33, r24	; 0x21
    312c:	3f c0       	rjmp	.+126    	; 0x31ac <lcd_command+0x33c>
	else if (__tmp > 65535)
    312e:	6b a1       	ldd	r22, Y+35	; 0x23
    3130:	7c a1       	ldd	r23, Y+36	; 0x24
    3132:	8d a1       	ldd	r24, Y+37	; 0x25
    3134:	9e a1       	ldd	r25, Y+38	; 0x26
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	3f ef       	ldi	r19, 0xFF	; 255
    313a:	4f e7       	ldi	r20, 0x7F	; 127
    313c:	57 e4       	ldi	r21, 0x47	; 71
    313e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3142:	18 16       	cp	r1, r24
    3144:	4c f5       	brge	.+82     	; 0x3198 <lcd_command+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3146:	6f a1       	ldd	r22, Y+39	; 0x27
    3148:	78 a5       	ldd	r23, Y+40	; 0x28
    314a:	89 a5       	ldd	r24, Y+41	; 0x29
    314c:	9a a5       	ldd	r25, Y+42	; 0x2a
    314e:	20 e0       	ldi	r18, 0x00	; 0
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	40 e2       	ldi	r20, 0x20	; 32
    3154:	51 e4       	ldi	r21, 0x41	; 65
    3156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	bc 01       	movw	r22, r24
    3160:	cd 01       	movw	r24, r26
    3162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	9a a3       	std	Y+34, r25	; 0x22
    316c:	89 a3       	std	Y+33, r24	; 0x21
    316e:	0f c0       	rjmp	.+30     	; 0x318e <lcd_command+0x31e>
    3170:	88 ec       	ldi	r24, 0xC8	; 200
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	98 a3       	std	Y+32, r25	; 0x20
    3176:	8f 8f       	std	Y+31, r24	; 0x1f
    3178:	8f 8d       	ldd	r24, Y+31	; 0x1f
    317a:	98 a1       	ldd	r25, Y+32	; 0x20
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	f1 f7       	brne	.-4      	; 0x317c <lcd_command+0x30c>
    3180:	98 a3       	std	Y+32, r25	; 0x20
    3182:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3184:	89 a1       	ldd	r24, Y+33	; 0x21
    3186:	9a a1       	ldd	r25, Y+34	; 0x22
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	9a a3       	std	Y+34, r25	; 0x22
    318c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    318e:	89 a1       	ldd	r24, Y+33	; 0x21
    3190:	9a a1       	ldd	r25, Y+34	; 0x22
    3192:	00 97       	sbiw	r24, 0x00	; 0
    3194:	69 f7       	brne	.-38     	; 0x3170 <lcd_command+0x300>
    3196:	14 c0       	rjmp	.+40     	; 0x31c0 <lcd_command+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3198:	6b a1       	ldd	r22, Y+35	; 0x23
    319a:	7c a1       	ldd	r23, Y+36	; 0x24
    319c:	8d a1       	ldd	r24, Y+37	; 0x25
    319e:	9e a1       	ldd	r25, Y+38	; 0x26
    31a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	9a a3       	std	Y+34, r25	; 0x22
    31aa:	89 a3       	std	Y+33, r24	; 0x21
    31ac:	89 a1       	ldd	r24, Y+33	; 0x21
    31ae:	9a a1       	ldd	r25, Y+34	; 0x22
    31b0:	9e 8f       	std	Y+30, r25	; 0x1e
    31b2:	8d 8f       	std	Y+29, r24	; 0x1d
    31b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31b8:	01 97       	sbiw	r24, 0x01	; 1
    31ba:	f1 f7       	brne	.-4      	; 0x31b8 <lcd_command+0x348>
    31bc:	9e 8f       	std	Y+30, r25	; 0x1e
    31be:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);   
    DIO_voidSetPinValue(EN_PIN,LOW);
    31c0:	82 e0       	ldi	r24, 0x02	; 2
    31c2:	62 e0       	ldi	r22, 0x02	; 2
    31c4:	40 e0       	ldi	r20, 0x00	; 0
    31c6:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	a0 e0       	ldi	r26, 0x00	; 0
    31d0:	b0 e4       	ldi	r27, 0x40	; 64
    31d2:	89 8f       	std	Y+25, r24	; 0x19
    31d4:	9a 8f       	std	Y+26, r25	; 0x1a
    31d6:	ab 8f       	std	Y+27, r26	; 0x1b
    31d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31da:	69 8d       	ldd	r22, Y+25	; 0x19
    31dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	4a ef       	ldi	r20, 0xFA	; 250
    31e8:	54 e4       	ldi	r21, 0x44	; 68
    31ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	8d 8b       	std	Y+21, r24	; 0x15
    31f4:	9e 8b       	std	Y+22, r25	; 0x16
    31f6:	af 8b       	std	Y+23, r26	; 0x17
    31f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31fa:	6d 89       	ldd	r22, Y+21	; 0x15
    31fc:	7e 89       	ldd	r23, Y+22	; 0x16
    31fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3200:	98 8d       	ldd	r25, Y+24	; 0x18
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e8       	ldi	r20, 0x80	; 128
    3208:	5f e3       	ldi	r21, 0x3F	; 63
    320a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    320e:	88 23       	and	r24, r24
    3210:	2c f4       	brge	.+10     	; 0x321c <lcd_command+0x3ac>
		__ticks = 1;
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	9c 8b       	std	Y+20, r25	; 0x14
    3218:	8b 8b       	std	Y+19, r24	; 0x13
    321a:	3f c0       	rjmp	.+126    	; 0x329a <lcd_command+0x42a>
	else if (__tmp > 65535)
    321c:	6d 89       	ldd	r22, Y+21	; 0x15
    321e:	7e 89       	ldd	r23, Y+22	; 0x16
    3220:	8f 89       	ldd	r24, Y+23	; 0x17
    3222:	98 8d       	ldd	r25, Y+24	; 0x18
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	3f ef       	ldi	r19, 0xFF	; 255
    3228:	4f e7       	ldi	r20, 0x7F	; 127
    322a:	57 e4       	ldi	r21, 0x47	; 71
    322c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3230:	18 16       	cp	r1, r24
    3232:	4c f5       	brge	.+82     	; 0x3286 <lcd_command+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3234:	69 8d       	ldd	r22, Y+25	; 0x19
    3236:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3238:	8b 8d       	ldd	r24, Y+27	; 0x1b
    323a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e2       	ldi	r20, 0x20	; 32
    3242:	51 e4       	ldi	r21, 0x41	; 65
    3244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	9c 8b       	std	Y+20, r25	; 0x14
    325a:	8b 8b       	std	Y+19, r24	; 0x13
    325c:	0f c0       	rjmp	.+30     	; 0x327c <lcd_command+0x40c>
    325e:	88 ec       	ldi	r24, 0xC8	; 200
    3260:	90 e0       	ldi	r25, 0x00	; 0
    3262:	9a 8b       	std	Y+18, r25	; 0x12
    3264:	89 8b       	std	Y+17, r24	; 0x11
    3266:	89 89       	ldd	r24, Y+17	; 0x11
    3268:	9a 89       	ldd	r25, Y+18	; 0x12
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	f1 f7       	brne	.-4      	; 0x326a <lcd_command+0x3fa>
    326e:	9a 8b       	std	Y+18, r25	; 0x12
    3270:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3272:	8b 89       	ldd	r24, Y+19	; 0x13
    3274:	9c 89       	ldd	r25, Y+20	; 0x14
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	9c 8b       	std	Y+20, r25	; 0x14
    327a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327c:	8b 89       	ldd	r24, Y+19	; 0x13
    327e:	9c 89       	ldd	r25, Y+20	; 0x14
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	69 f7       	brne	.-38     	; 0x325e <lcd_command+0x3ee>
    3284:	14 c0       	rjmp	.+40     	; 0x32ae <lcd_command+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3286:	6d 89       	ldd	r22, Y+21	; 0x15
    3288:	7e 89       	ldd	r23, Y+22	; 0x16
    328a:	8f 89       	ldd	r24, Y+23	; 0x17
    328c:	98 8d       	ldd	r25, Y+24	; 0x18
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9c 8b       	std	Y+20, r25	; 0x14
    3298:	8b 8b       	std	Y+19, r24	; 0x13
    329a:	8b 89       	ldd	r24, Y+19	; 0x13
    329c:	9c 89       	ldd	r25, Y+20	; 0x14
    329e:	98 8b       	std	Y+16, r25	; 0x10
    32a0:	8f 87       	std	Y+15, r24	; 0x0f
    32a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a4:	98 89       	ldd	r25, Y+16	; 0x10
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <lcd_command+0x436>
    32aa:	98 8b       	std	Y+16, r25	; 0x10
    32ac:	8f 87       	std	Y+15, r24	; 0x0f
    32ae:	80 e0       	ldi	r24, 0x00	; 0
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	a0 ea       	ldi	r26, 0xA0	; 160
    32b4:	b0 e4       	ldi	r27, 0x40	; 64
    32b6:	8b 87       	std	Y+11, r24	; 0x0b
    32b8:	9c 87       	std	Y+12, r25	; 0x0c
    32ba:	ad 87       	std	Y+13, r26	; 0x0d
    32bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32be:	6b 85       	ldd	r22, Y+11	; 0x0b
    32c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    32c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	4a ef       	ldi	r20, 0xFA	; 250
    32cc:	54 e4       	ldi	r21, 0x44	; 68
    32ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32d2:	dc 01       	movw	r26, r24
    32d4:	cb 01       	movw	r24, r22
    32d6:	8f 83       	std	Y+7, r24	; 0x07
    32d8:	98 87       	std	Y+8, r25	; 0x08
    32da:	a9 87       	std	Y+9, r26	; 0x09
    32dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32de:	6f 81       	ldd	r22, Y+7	; 0x07
    32e0:	78 85       	ldd	r23, Y+8	; 0x08
    32e2:	89 85       	ldd	r24, Y+9	; 0x09
    32e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	40 e8       	ldi	r20, 0x80	; 128
    32ec:	5f e3       	ldi	r21, 0x3F	; 63
    32ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32f2:	88 23       	and	r24, r24
    32f4:	2c f4       	brge	.+10     	; 0x3300 <lcd_command+0x490>
		__ticks = 1;
    32f6:	81 e0       	ldi	r24, 0x01	; 1
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	9e 83       	std	Y+6, r25	; 0x06
    32fc:	8d 83       	std	Y+5, r24	; 0x05
    32fe:	3f c0       	rjmp	.+126    	; 0x337e <lcd_command+0x50e>
	else if (__tmp > 65535)
    3300:	6f 81       	ldd	r22, Y+7	; 0x07
    3302:	78 85       	ldd	r23, Y+8	; 0x08
    3304:	89 85       	ldd	r24, Y+9	; 0x09
    3306:	9a 85       	ldd	r25, Y+10	; 0x0a
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	3f ef       	ldi	r19, 0xFF	; 255
    330c:	4f e7       	ldi	r20, 0x7F	; 127
    330e:	57 e4       	ldi	r21, 0x47	; 71
    3310:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3314:	18 16       	cp	r1, r24
    3316:	4c f5       	brge	.+82     	; 0x336a <lcd_command+0x4fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3318:	6b 85       	ldd	r22, Y+11	; 0x0b
    331a:	7c 85       	ldd	r23, Y+12	; 0x0c
    331c:	8d 85       	ldd	r24, Y+13	; 0x0d
    331e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	40 e2       	ldi	r20, 0x20	; 32
    3326:	51 e4       	ldi	r21, 0x41	; 65
    3328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    332c:	dc 01       	movw	r26, r24
    332e:	cb 01       	movw	r24, r22
    3330:	bc 01       	movw	r22, r24
    3332:	cd 01       	movw	r24, r26
    3334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3338:	dc 01       	movw	r26, r24
    333a:	cb 01       	movw	r24, r22
    333c:	9e 83       	std	Y+6, r25	; 0x06
    333e:	8d 83       	std	Y+5, r24	; 0x05
    3340:	0f c0       	rjmp	.+30     	; 0x3360 <lcd_command+0x4f0>
    3342:	88 ec       	ldi	r24, 0xC8	; 200
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	9c 83       	std	Y+4, r25	; 0x04
    3348:	8b 83       	std	Y+3, r24	; 0x03
    334a:	8b 81       	ldd	r24, Y+3	; 0x03
    334c:	9c 81       	ldd	r25, Y+4	; 0x04
    334e:	01 97       	sbiw	r24, 0x01	; 1
    3350:	f1 f7       	brne	.-4      	; 0x334e <lcd_command+0x4de>
    3352:	9c 83       	std	Y+4, r25	; 0x04
    3354:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3356:	8d 81       	ldd	r24, Y+5	; 0x05
    3358:	9e 81       	ldd	r25, Y+6	; 0x06
    335a:	01 97       	sbiw	r24, 0x01	; 1
    335c:	9e 83       	std	Y+6, r25	; 0x06
    335e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3360:	8d 81       	ldd	r24, Y+5	; 0x05
    3362:	9e 81       	ldd	r25, Y+6	; 0x06
    3364:	00 97       	sbiw	r24, 0x00	; 0
    3366:	69 f7       	brne	.-38     	; 0x3342 <lcd_command+0x4d2>
    3368:	14 c0       	rjmp	.+40     	; 0x3392 <lcd_command+0x522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    336a:	6f 81       	ldd	r22, Y+7	; 0x07
    336c:	78 85       	ldd	r23, Y+8	; 0x08
    336e:	89 85       	ldd	r24, Y+9	; 0x09
    3370:	9a 85       	ldd	r25, Y+10	; 0x0a
    3372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	9e 83       	std	Y+6, r25	; 0x06
    337c:	8d 83       	std	Y+5, r24	; 0x05
    337e:	8d 81       	ldd	r24, Y+5	; 0x05
    3380:	9e 81       	ldd	r25, Y+6	; 0x06
    3382:	9a 83       	std	Y+2, r25	; 0x02
    3384:	89 83       	std	Y+1, r24	; 0x01
    3386:	89 81       	ldd	r24, Y+1	; 0x01
    3388:	9a 81       	ldd	r25, Y+2	; 0x02
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	f1 f7       	brne	.-4      	; 0x338a <lcd_command+0x51a>
    338e:	9a 83       	std	Y+2, r25	; 0x02
    3390:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);  
	
    _delay_ms(5); 	 	        
}
    3392:	c9 5b       	subi	r28, 0xB9	; 185
    3394:	df 4f       	sbci	r29, 0xFF	; 255
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
    33a0:	cf 91       	pop	r28
    33a2:	df 91       	pop	r29
    33a4:	1f 91       	pop	r17
    33a6:	0f 91       	pop	r16
    33a8:	08 95       	ret

000033aa <lcd_sendChar>:
void lcd_sendChar(uint8_t data)
{
    33aa:	df 93       	push	r29
    33ac:	cf 93       	push	r28
    33ae:	cd b7       	in	r28, 0x3d	; 61
    33b0:	de b7       	in	r29, 0x3e	; 62
    33b2:	e9 97       	sbiw	r28, 0x39	; 57
    33b4:	0f b6       	in	r0, 0x3f	; 63
    33b6:	f8 94       	cli
    33b8:	de bf       	out	0x3e, r29	; 62
    33ba:	0f be       	out	0x3f, r0	; 63
    33bc:	cd bf       	out	0x3d, r28	; 61
    33be:	89 af       	std	Y+57, r24	; 0x39
    DIO_voidSetPortValue(LCD_DATA_PORT,(data&0xf0));
    33c0:	89 ad       	ldd	r24, Y+57	; 0x39
    33c2:	98 2f       	mov	r25, r24
    33c4:	90 7f       	andi	r25, 0xF0	; 240
    33c6:	82 e0       	ldi	r24, 0x02	; 2
    33c8:	69 2f       	mov	r22, r25
    33ca:	0e 94 3b 10 	call	0x2076	; 0x2076 <DIO_voidSetPortValue>
    DIO_voidSetPinValue(LS_PIN,HIGH);
    33ce:	82 e0       	ldi	r24, 0x02	; 2
    33d0:	60 e0       	ldi	r22, 0x00	; 0
    33d2:	41 e0       	ldi	r20, 0x01	; 1
    33d4:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(R_W_PIN,LOW);    
    33d8:	82 e0       	ldi	r24, 0x02	; 2
    33da:	61 e0       	ldi	r22, 0x01	; 1
    33dc:	40 e0       	ldi	r20, 0x00	; 0
    33de:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(EN_PIN,HIGH);    
    33e2:	82 e0       	ldi	r24, 0x02	; 2
    33e4:	62 e0       	ldi	r22, 0x02	; 2
    33e6:	41 e0       	ldi	r20, 0x01	; 1
    33e8:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	a0 e0       	ldi	r26, 0x00	; 0
    33f2:	b0 e4       	ldi	r27, 0x40	; 64
    33f4:	8d ab       	std	Y+53, r24	; 0x35
    33f6:	9e ab       	std	Y+54, r25	; 0x36
    33f8:	af ab       	std	Y+55, r26	; 0x37
    33fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33fc:	6d a9       	ldd	r22, Y+53	; 0x35
    33fe:	7e a9       	ldd	r23, Y+54	; 0x36
    3400:	8f a9       	ldd	r24, Y+55	; 0x37
    3402:	98 ad       	ldd	r25, Y+56	; 0x38
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	4a ef       	ldi	r20, 0xFA	; 250
    340a:	54 e4       	ldi	r21, 0x44	; 68
    340c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	89 ab       	std	Y+49, r24	; 0x31
    3416:	9a ab       	std	Y+50, r25	; 0x32
    3418:	ab ab       	std	Y+51, r26	; 0x33
    341a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    341c:	69 a9       	ldd	r22, Y+49	; 0x31
    341e:	7a a9       	ldd	r23, Y+50	; 0x32
    3420:	8b a9       	ldd	r24, Y+51	; 0x33
    3422:	9c a9       	ldd	r25, Y+52	; 0x34
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	40 e8       	ldi	r20, 0x80	; 128
    342a:	5f e3       	ldi	r21, 0x3F	; 63
    342c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3430:	88 23       	and	r24, r24
    3432:	2c f4       	brge	.+10     	; 0x343e <lcd_sendChar+0x94>
		__ticks = 1;
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	98 ab       	std	Y+48, r25	; 0x30
    343a:	8f a7       	std	Y+47, r24	; 0x2f
    343c:	3f c0       	rjmp	.+126    	; 0x34bc <lcd_sendChar+0x112>
	else if (__tmp > 65535)
    343e:	69 a9       	ldd	r22, Y+49	; 0x31
    3440:	7a a9       	ldd	r23, Y+50	; 0x32
    3442:	8b a9       	ldd	r24, Y+51	; 0x33
    3444:	9c a9       	ldd	r25, Y+52	; 0x34
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	3f ef       	ldi	r19, 0xFF	; 255
    344a:	4f e7       	ldi	r20, 0x7F	; 127
    344c:	57 e4       	ldi	r21, 0x47	; 71
    344e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3452:	18 16       	cp	r1, r24
    3454:	4c f5       	brge	.+82     	; 0x34a8 <lcd_sendChar+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3456:	6d a9       	ldd	r22, Y+53	; 0x35
    3458:	7e a9       	ldd	r23, Y+54	; 0x36
    345a:	8f a9       	ldd	r24, Y+55	; 0x37
    345c:	98 ad       	ldd	r25, Y+56	; 0x38
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	40 e2       	ldi	r20, 0x20	; 32
    3464:	51 e4       	ldi	r21, 0x41	; 65
    3466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	bc 01       	movw	r22, r24
    3470:	cd 01       	movw	r24, r26
    3472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	98 ab       	std	Y+48, r25	; 0x30
    347c:	8f a7       	std	Y+47, r24	; 0x2f
    347e:	0f c0       	rjmp	.+30     	; 0x349e <lcd_sendChar+0xf4>
    3480:	88 ec       	ldi	r24, 0xC8	; 200
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	9e a7       	std	Y+46, r25	; 0x2e
    3486:	8d a7       	std	Y+45, r24	; 0x2d
    3488:	8d a5       	ldd	r24, Y+45	; 0x2d
    348a:	9e a5       	ldd	r25, Y+46	; 0x2e
    348c:	01 97       	sbiw	r24, 0x01	; 1
    348e:	f1 f7       	brne	.-4      	; 0x348c <lcd_sendChar+0xe2>
    3490:	9e a7       	std	Y+46, r25	; 0x2e
    3492:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3494:	8f a5       	ldd	r24, Y+47	; 0x2f
    3496:	98 a9       	ldd	r25, Y+48	; 0x30
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	98 ab       	std	Y+48, r25	; 0x30
    349c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    349e:	8f a5       	ldd	r24, Y+47	; 0x2f
    34a0:	98 a9       	ldd	r25, Y+48	; 0x30
    34a2:	00 97       	sbiw	r24, 0x00	; 0
    34a4:	69 f7       	brne	.-38     	; 0x3480 <lcd_sendChar+0xd6>
    34a6:	14 c0       	rjmp	.+40     	; 0x34d0 <lcd_sendChar+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34a8:	69 a9       	ldd	r22, Y+49	; 0x31
    34aa:	7a a9       	ldd	r23, Y+50	; 0x32
    34ac:	8b a9       	ldd	r24, Y+51	; 0x33
    34ae:	9c a9       	ldd	r25, Y+52	; 0x34
    34b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b4:	dc 01       	movw	r26, r24
    34b6:	cb 01       	movw	r24, r22
    34b8:	98 ab       	std	Y+48, r25	; 0x30
    34ba:	8f a7       	std	Y+47, r24	; 0x2f
    34bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    34be:	98 a9       	ldd	r25, Y+48	; 0x30
    34c0:	9c a7       	std	Y+44, r25	; 0x2c
    34c2:	8b a7       	std	Y+43, r24	; 0x2b
    34c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    34c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    34c8:	01 97       	sbiw	r24, 0x01	; 1
    34ca:	f1 f7       	brne	.-4      	; 0x34c8 <lcd_sendChar+0x11e>
    34cc:	9c a7       	std	Y+44, r25	; 0x2c
    34ce:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);    
    DIO_voidSetPinValue(EN_PIN,LOW);
    34d0:	82 e0       	ldi	r24, 0x02	; 2
    34d2:	62 e0       	ldi	r22, 0x02	; 2
    34d4:	40 e0       	ldi	r20, 0x00	; 0
    34d6:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	a0 e0       	ldi	r26, 0x00	; 0
    34e0:	b0 e4       	ldi	r27, 0x40	; 64
    34e2:	8f a3       	std	Y+39, r24	; 0x27
    34e4:	98 a7       	std	Y+40, r25	; 0x28
    34e6:	a9 a7       	std	Y+41, r26	; 0x29
    34e8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34ea:	6f a1       	ldd	r22, Y+39	; 0x27
    34ec:	78 a5       	ldd	r23, Y+40	; 0x28
    34ee:	89 a5       	ldd	r24, Y+41	; 0x29
    34f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	4a ef       	ldi	r20, 0xFA	; 250
    34f8:	54 e4       	ldi	r21, 0x44	; 68
    34fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	8b a3       	std	Y+35, r24	; 0x23
    3504:	9c a3       	std	Y+36, r25	; 0x24
    3506:	ad a3       	std	Y+37, r26	; 0x25
    3508:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    350a:	6b a1       	ldd	r22, Y+35	; 0x23
    350c:	7c a1       	ldd	r23, Y+36	; 0x24
    350e:	8d a1       	ldd	r24, Y+37	; 0x25
    3510:	9e a1       	ldd	r25, Y+38	; 0x26
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	40 e8       	ldi	r20, 0x80	; 128
    3518:	5f e3       	ldi	r21, 0x3F	; 63
    351a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    351e:	88 23       	and	r24, r24
    3520:	2c f4       	brge	.+10     	; 0x352c <lcd_sendChar+0x182>
		__ticks = 1;
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	9a a3       	std	Y+34, r25	; 0x22
    3528:	89 a3       	std	Y+33, r24	; 0x21
    352a:	3f c0       	rjmp	.+126    	; 0x35aa <lcd_sendChar+0x200>
	else if (__tmp > 65535)
    352c:	6b a1       	ldd	r22, Y+35	; 0x23
    352e:	7c a1       	ldd	r23, Y+36	; 0x24
    3530:	8d a1       	ldd	r24, Y+37	; 0x25
    3532:	9e a1       	ldd	r25, Y+38	; 0x26
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	3f ef       	ldi	r19, 0xFF	; 255
    3538:	4f e7       	ldi	r20, 0x7F	; 127
    353a:	57 e4       	ldi	r21, 0x47	; 71
    353c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3540:	18 16       	cp	r1, r24
    3542:	4c f5       	brge	.+82     	; 0x3596 <lcd_sendChar+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3544:	6f a1       	ldd	r22, Y+39	; 0x27
    3546:	78 a5       	ldd	r23, Y+40	; 0x28
    3548:	89 a5       	ldd	r24, Y+41	; 0x29
    354a:	9a a5       	ldd	r25, Y+42	; 0x2a
    354c:	20 e0       	ldi	r18, 0x00	; 0
    354e:	30 e0       	ldi	r19, 0x00	; 0
    3550:	40 e2       	ldi	r20, 0x20	; 32
    3552:	51 e4       	ldi	r21, 0x41	; 65
    3554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3558:	dc 01       	movw	r26, r24
    355a:	cb 01       	movw	r24, r22
    355c:	bc 01       	movw	r22, r24
    355e:	cd 01       	movw	r24, r26
    3560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3564:	dc 01       	movw	r26, r24
    3566:	cb 01       	movw	r24, r22
    3568:	9a a3       	std	Y+34, r25	; 0x22
    356a:	89 a3       	std	Y+33, r24	; 0x21
    356c:	0f c0       	rjmp	.+30     	; 0x358c <lcd_sendChar+0x1e2>
    356e:	88 ec       	ldi	r24, 0xC8	; 200
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	98 a3       	std	Y+32, r25	; 0x20
    3574:	8f 8f       	std	Y+31, r24	; 0x1f
    3576:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3578:	98 a1       	ldd	r25, Y+32	; 0x20
    357a:	01 97       	sbiw	r24, 0x01	; 1
    357c:	f1 f7       	brne	.-4      	; 0x357a <lcd_sendChar+0x1d0>
    357e:	98 a3       	std	Y+32, r25	; 0x20
    3580:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3582:	89 a1       	ldd	r24, Y+33	; 0x21
    3584:	9a a1       	ldd	r25, Y+34	; 0x22
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	9a a3       	std	Y+34, r25	; 0x22
    358a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    358c:	89 a1       	ldd	r24, Y+33	; 0x21
    358e:	9a a1       	ldd	r25, Y+34	; 0x22
    3590:	00 97       	sbiw	r24, 0x00	; 0
    3592:	69 f7       	brne	.-38     	; 0x356e <lcd_sendChar+0x1c4>
    3594:	14 c0       	rjmp	.+40     	; 0x35be <lcd_sendChar+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3596:	6b a1       	ldd	r22, Y+35	; 0x23
    3598:	7c a1       	ldd	r23, Y+36	; 0x24
    359a:	8d a1       	ldd	r24, Y+37	; 0x25
    359c:	9e a1       	ldd	r25, Y+38	; 0x26
    359e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	9a a3       	std	Y+34, r25	; 0x22
    35a8:	89 a3       	std	Y+33, r24	; 0x21
    35aa:	89 a1       	ldd	r24, Y+33	; 0x21
    35ac:	9a a1       	ldd	r25, Y+34	; 0x22
    35ae:	9e 8f       	std	Y+30, r25	; 0x1e
    35b0:	8d 8f       	std	Y+29, r24	; 0x1d
    35b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35b6:	01 97       	sbiw	r24, 0x01	; 1
    35b8:	f1 f7       	brne	.-4      	; 0x35b6 <lcd_sendChar+0x20c>
    35ba:	9e 8f       	std	Y+30, r25	; 0x1e
    35bc:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);     
    DIO_voidSetPortValue(LCD_DATA_PORT, (data<<4));
    35be:	89 ad       	ldd	r24, Y+57	; 0x39
    35c0:	98 2f       	mov	r25, r24
    35c2:	92 95       	swap	r25
    35c4:	90 7f       	andi	r25, 0xF0	; 240
    35c6:	82 e0       	ldi	r24, 0x02	; 2
    35c8:	69 2f       	mov	r22, r25
    35ca:	0e 94 3b 10 	call	0x2076	; 0x2076 <DIO_voidSetPortValue>
    DIO_voidSetPinValue(LS_PIN,HIGH);    
    35ce:	82 e0       	ldi	r24, 0x02	; 2
    35d0:	60 e0       	ldi	r22, 0x00	; 0
    35d2:	41 e0       	ldi	r20, 0x01	; 1
    35d4:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(EN_PIN,HIGH);  
    35d8:	82 e0       	ldi	r24, 0x02	; 2
    35da:	62 e0       	ldi	r22, 0x02	; 2
    35dc:	41 e0       	ldi	r20, 0x01	; 1
    35de:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    35e2:	80 e0       	ldi	r24, 0x00	; 0
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	a0 e0       	ldi	r26, 0x00	; 0
    35e8:	b0 e4       	ldi	r27, 0x40	; 64
    35ea:	89 8f       	std	Y+25, r24	; 0x19
    35ec:	9a 8f       	std	Y+26, r25	; 0x1a
    35ee:	ab 8f       	std	Y+27, r26	; 0x1b
    35f0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f2:	69 8d       	ldd	r22, Y+25	; 0x19
    35f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	4a ef       	ldi	r20, 0xFA	; 250
    3600:	54 e4       	ldi	r21, 0x44	; 68
    3602:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3606:	dc 01       	movw	r26, r24
    3608:	cb 01       	movw	r24, r22
    360a:	8d 8b       	std	Y+21, r24	; 0x15
    360c:	9e 8b       	std	Y+22, r25	; 0x16
    360e:	af 8b       	std	Y+23, r26	; 0x17
    3610:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3612:	6d 89       	ldd	r22, Y+21	; 0x15
    3614:	7e 89       	ldd	r23, Y+22	; 0x16
    3616:	8f 89       	ldd	r24, Y+23	; 0x17
    3618:	98 8d       	ldd	r25, Y+24	; 0x18
    361a:	20 e0       	ldi	r18, 0x00	; 0
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	40 e8       	ldi	r20, 0x80	; 128
    3620:	5f e3       	ldi	r21, 0x3F	; 63
    3622:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3626:	88 23       	and	r24, r24
    3628:	2c f4       	brge	.+10     	; 0x3634 <lcd_sendChar+0x28a>
		__ticks = 1;
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	9c 8b       	std	Y+20, r25	; 0x14
    3630:	8b 8b       	std	Y+19, r24	; 0x13
    3632:	3f c0       	rjmp	.+126    	; 0x36b2 <lcd_sendChar+0x308>
	else if (__tmp > 65535)
    3634:	6d 89       	ldd	r22, Y+21	; 0x15
    3636:	7e 89       	ldd	r23, Y+22	; 0x16
    3638:	8f 89       	ldd	r24, Y+23	; 0x17
    363a:	98 8d       	ldd	r25, Y+24	; 0x18
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	3f ef       	ldi	r19, 0xFF	; 255
    3640:	4f e7       	ldi	r20, 0x7F	; 127
    3642:	57 e4       	ldi	r21, 0x47	; 71
    3644:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3648:	18 16       	cp	r1, r24
    364a:	4c f5       	brge	.+82     	; 0x369e <lcd_sendChar+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    364c:	69 8d       	ldd	r22, Y+25	; 0x19
    364e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3650:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3652:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	40 e2       	ldi	r20, 0x20	; 32
    365a:	51 e4       	ldi	r21, 0x41	; 65
    365c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3660:	dc 01       	movw	r26, r24
    3662:	cb 01       	movw	r24, r22
    3664:	bc 01       	movw	r22, r24
    3666:	cd 01       	movw	r24, r26
    3668:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366c:	dc 01       	movw	r26, r24
    366e:	cb 01       	movw	r24, r22
    3670:	9c 8b       	std	Y+20, r25	; 0x14
    3672:	8b 8b       	std	Y+19, r24	; 0x13
    3674:	0f c0       	rjmp	.+30     	; 0x3694 <lcd_sendChar+0x2ea>
    3676:	88 ec       	ldi	r24, 0xC8	; 200
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	9a 8b       	std	Y+18, r25	; 0x12
    367c:	89 8b       	std	Y+17, r24	; 0x11
    367e:	89 89       	ldd	r24, Y+17	; 0x11
    3680:	9a 89       	ldd	r25, Y+18	; 0x12
    3682:	01 97       	sbiw	r24, 0x01	; 1
    3684:	f1 f7       	brne	.-4      	; 0x3682 <lcd_sendChar+0x2d8>
    3686:	9a 8b       	std	Y+18, r25	; 0x12
    3688:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    368a:	8b 89       	ldd	r24, Y+19	; 0x13
    368c:	9c 89       	ldd	r25, Y+20	; 0x14
    368e:	01 97       	sbiw	r24, 0x01	; 1
    3690:	9c 8b       	std	Y+20, r25	; 0x14
    3692:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3694:	8b 89       	ldd	r24, Y+19	; 0x13
    3696:	9c 89       	ldd	r25, Y+20	; 0x14
    3698:	00 97       	sbiw	r24, 0x00	; 0
    369a:	69 f7       	brne	.-38     	; 0x3676 <lcd_sendChar+0x2cc>
    369c:	14 c0       	rjmp	.+40     	; 0x36c6 <lcd_sendChar+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    369e:	6d 89       	ldd	r22, Y+21	; 0x15
    36a0:	7e 89       	ldd	r23, Y+22	; 0x16
    36a2:	8f 89       	ldd	r24, Y+23	; 0x17
    36a4:	98 8d       	ldd	r25, Y+24	; 0x18
    36a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36aa:	dc 01       	movw	r26, r24
    36ac:	cb 01       	movw	r24, r22
    36ae:	9c 8b       	std	Y+20, r25	; 0x14
    36b0:	8b 8b       	std	Y+19, r24	; 0x13
    36b2:	8b 89       	ldd	r24, Y+19	; 0x13
    36b4:	9c 89       	ldd	r25, Y+20	; 0x14
    36b6:	98 8b       	std	Y+16, r25	; 0x10
    36b8:	8f 87       	std	Y+15, r24	; 0x0f
    36ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    36bc:	98 89       	ldd	r25, Y+16	; 0x10
    36be:	01 97       	sbiw	r24, 0x01	; 1
    36c0:	f1 f7       	brne	.-4      	; 0x36be <lcd_sendChar+0x314>
    36c2:	98 8b       	std	Y+16, r25	; 0x10
    36c4:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);   
    DIO_voidSetPinValue(EN_PIN,LOW);  
    36c6:	82 e0       	ldi	r24, 0x02	; 2
    36c8:	62 e0       	ldi	r22, 0x02	; 2
    36ca:	40 e0       	ldi	r20, 0x00	; 0
    36cc:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	a0 e0       	ldi	r26, 0x00	; 0
    36d6:	b0 e4       	ldi	r27, 0x40	; 64
    36d8:	8b 87       	std	Y+11, r24	; 0x0b
    36da:	9c 87       	std	Y+12, r25	; 0x0c
    36dc:	ad 87       	std	Y+13, r26	; 0x0d
    36de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	4a ef       	ldi	r20, 0xFA	; 250
    36ee:	54 e4       	ldi	r21, 0x44	; 68
    36f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	8f 83       	std	Y+7, r24	; 0x07
    36fa:	98 87       	std	Y+8, r25	; 0x08
    36fc:	a9 87       	std	Y+9, r26	; 0x09
    36fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3700:	6f 81       	ldd	r22, Y+7	; 0x07
    3702:	78 85       	ldd	r23, Y+8	; 0x08
    3704:	89 85       	ldd	r24, Y+9	; 0x09
    3706:	9a 85       	ldd	r25, Y+10	; 0x0a
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	40 e8       	ldi	r20, 0x80	; 128
    370e:	5f e3       	ldi	r21, 0x3F	; 63
    3710:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3714:	88 23       	and	r24, r24
    3716:	2c f4       	brge	.+10     	; 0x3722 <lcd_sendChar+0x378>
		__ticks = 1;
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	9e 83       	std	Y+6, r25	; 0x06
    371e:	8d 83       	std	Y+5, r24	; 0x05
    3720:	3f c0       	rjmp	.+126    	; 0x37a0 <lcd_sendChar+0x3f6>
	else if (__tmp > 65535)
    3722:	6f 81       	ldd	r22, Y+7	; 0x07
    3724:	78 85       	ldd	r23, Y+8	; 0x08
    3726:	89 85       	ldd	r24, Y+9	; 0x09
    3728:	9a 85       	ldd	r25, Y+10	; 0x0a
    372a:	20 e0       	ldi	r18, 0x00	; 0
    372c:	3f ef       	ldi	r19, 0xFF	; 255
    372e:	4f e7       	ldi	r20, 0x7F	; 127
    3730:	57 e4       	ldi	r21, 0x47	; 71
    3732:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3736:	18 16       	cp	r1, r24
    3738:	4c f5       	brge	.+82     	; 0x378c <lcd_sendChar+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    373a:	6b 85       	ldd	r22, Y+11	; 0x0b
    373c:	7c 85       	ldd	r23, Y+12	; 0x0c
    373e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3740:	9e 85       	ldd	r25, Y+14	; 0x0e
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	40 e2       	ldi	r20, 0x20	; 32
    3748:	51 e4       	ldi	r21, 0x41	; 65
    374a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374e:	dc 01       	movw	r26, r24
    3750:	cb 01       	movw	r24, r22
    3752:	bc 01       	movw	r22, r24
    3754:	cd 01       	movw	r24, r26
    3756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    375a:	dc 01       	movw	r26, r24
    375c:	cb 01       	movw	r24, r22
    375e:	9e 83       	std	Y+6, r25	; 0x06
    3760:	8d 83       	std	Y+5, r24	; 0x05
    3762:	0f c0       	rjmp	.+30     	; 0x3782 <lcd_sendChar+0x3d8>
    3764:	88 ec       	ldi	r24, 0xC8	; 200
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	9c 83       	std	Y+4, r25	; 0x04
    376a:	8b 83       	std	Y+3, r24	; 0x03
    376c:	8b 81       	ldd	r24, Y+3	; 0x03
    376e:	9c 81       	ldd	r25, Y+4	; 0x04
    3770:	01 97       	sbiw	r24, 0x01	; 1
    3772:	f1 f7       	brne	.-4      	; 0x3770 <lcd_sendChar+0x3c6>
    3774:	9c 83       	std	Y+4, r25	; 0x04
    3776:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3778:	8d 81       	ldd	r24, Y+5	; 0x05
    377a:	9e 81       	ldd	r25, Y+6	; 0x06
    377c:	01 97       	sbiw	r24, 0x01	; 1
    377e:	9e 83       	std	Y+6, r25	; 0x06
    3780:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3782:	8d 81       	ldd	r24, Y+5	; 0x05
    3784:	9e 81       	ldd	r25, Y+6	; 0x06
    3786:	00 97       	sbiw	r24, 0x00	; 0
    3788:	69 f7       	brne	.-38     	; 0x3764 <lcd_sendChar+0x3ba>
    378a:	14 c0       	rjmp	.+40     	; 0x37b4 <lcd_sendChar+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    378c:	6f 81       	ldd	r22, Y+7	; 0x07
    378e:	78 85       	ldd	r23, Y+8	; 0x08
    3790:	89 85       	ldd	r24, Y+9	; 0x09
    3792:	9a 85       	ldd	r25, Y+10	; 0x0a
    3794:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3798:	dc 01       	movw	r26, r24
    379a:	cb 01       	movw	r24, r22
    379c:	9e 83       	std	Y+6, r25	; 0x06
    379e:	8d 83       	std	Y+5, r24	; 0x05
    37a0:	8d 81       	ldd	r24, Y+5	; 0x05
    37a2:	9e 81       	ldd	r25, Y+6	; 0x06
    37a4:	9a 83       	std	Y+2, r25	; 0x02
    37a6:	89 83       	std	Y+1, r24	; 0x01
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	9a 81       	ldd	r25, Y+2	; 0x02
    37ac:	01 97       	sbiw	r24, 0x01	; 1
    37ae:	f1 f7       	brne	.-4      	; 0x37ac <lcd_sendChar+0x402>
    37b0:	9a 83       	std	Y+2, r25	; 0x02
    37b2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);   	

}
    37b4:	e9 96       	adiw	r28, 0x39	; 57
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	f8 94       	cli
    37ba:	de bf       	out	0x3e, r29	; 62
    37bc:	0f be       	out	0x3f, r0	; 63
    37be:	cd bf       	out	0x3d, r28	; 61
    37c0:	cf 91       	pop	r28
    37c2:	df 91       	pop	r29
    37c4:	08 95       	ret

000037c6 <lcd_sendString>:
void lcd_sendString(uint8_t * data)
{
    37c6:	df 93       	push	r29
    37c8:	cf 93       	push	r28
    37ca:	00 d0       	rcall	.+0      	; 0x37cc <lcd_sendString+0x6>
    37cc:	0f 92       	push	r0
    37ce:	cd b7       	in	r28, 0x3d	; 61
    37d0:	de b7       	in	r29, 0x3e	; 62
    37d2:	9b 83       	std	Y+3, r25	; 0x03
    37d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i=0;
    37d6:	19 82       	std	Y+1, r1	; 0x01
    37d8:	0e c0       	rjmp	.+28     	; 0x37f6 <lcd_sendString+0x30>

	while(data[i] != '\0')
	{

		lcd_sendChar(data[i]);
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	28 2f       	mov	r18, r24
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	8a 81       	ldd	r24, Y+2	; 0x02
    37e2:	9b 81       	ldd	r25, Y+3	; 0x03
    37e4:	fc 01       	movw	r30, r24
    37e6:	e2 0f       	add	r30, r18
    37e8:	f3 1f       	adc	r31, r19
    37ea:	80 81       	ld	r24, Z
    37ec:	0e 94 d5 19 	call	0x33aa	; 0x33aa <lcd_sendChar>
		i++;
    37f0:	89 81       	ldd	r24, Y+1	; 0x01
    37f2:	8f 5f       	subi	r24, 0xFF	; 255
    37f4:	89 83       	std	Y+1, r24	; 0x01
}
void lcd_sendString(uint8_t * data)
{
	uint8_t i=0;

	while(data[i] != '\0')
    37f6:	89 81       	ldd	r24, Y+1	; 0x01
    37f8:	28 2f       	mov	r18, r24
    37fa:	30 e0       	ldi	r19, 0x00	; 0
    37fc:	8a 81       	ldd	r24, Y+2	; 0x02
    37fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3800:	fc 01       	movw	r30, r24
    3802:	e2 0f       	add	r30, r18
    3804:	f3 1f       	adc	r31, r19
    3806:	80 81       	ld	r24, Z
    3808:	88 23       	and	r24, r24
    380a:	39 f7       	brne	.-50     	; 0x37da <lcd_sendString+0x14>
	{

		lcd_sendChar(data[i]);
		i++;
	}
}
    380c:	0f 90       	pop	r0
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	cf 91       	pop	r28
    3814:	df 91       	pop	r29
    3816:	08 95       	ret

00003818 <lcd_sendNum>:
void lcd_sendNum( u16 copy_u16number)
{
    3818:	df 93       	push	r29
    381a:	cf 93       	push	r28
    381c:	cd b7       	in	r28, 0x3d	; 61
    381e:	de b7       	in	r29, 0x3e	; 62
    3820:	2a 97       	sbiw	r28, 0x0a	; 10
    3822:	0f b6       	in	r0, 0x3f	; 63
    3824:	f8 94       	cli
    3826:	de bf       	out	0x3e, r29	; 62
    3828:	0f be       	out	0x3f, r0	; 63
    382a:	cd bf       	out	0x3d, r28	; 61
    382c:	98 87       	std	Y+8, r25	; 0x08
    382e:	8f 83       	std	Y+7, r24	; 0x07

	if (copy_u16number==0)
    3830:	8f 81       	ldd	r24, Y+7	; 0x07
    3832:	98 85       	ldd	r25, Y+8	; 0x08
    3834:	00 97       	sbiw	r24, 0x00	; 0
    3836:	19 f4       	brne	.+6      	; 0x383e <lcd_sendNum+0x26>
	{
		lcd_sendChar('0');
    3838:	80 e3       	ldi	r24, 0x30	; 48
    383a:	0e 94 d5 19 	call	0x33aa	; 0x33aa <lcd_sendChar>
	}
	sint8_t i=0;
    383e:	19 82       	std	Y+1, r1	; 0x01
    3840:	1f c0       	rjmp	.+62     	; 0x3880 <lcd_sendNum+0x68>
	uint8_t str_num[5];
	while(copy_u16number>0)
	{
		str_num[i]=copy_u16number%10;
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	e8 2f       	mov	r30, r24
    3846:	ff 27       	eor	r31, r31
    3848:	e7 fd       	sbrc	r30, 7
    384a:	f0 95       	com	r31
    384c:	8f 81       	ldd	r24, Y+7	; 0x07
    384e:	98 85       	ldd	r25, Y+8	; 0x08
    3850:	2a e0       	ldi	r18, 0x0A	; 10
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	b9 01       	movw	r22, r18
    3856:	0e 94 91 20 	call	0x4122	; 0x4122 <__udivmodhi4>
    385a:	28 2f       	mov	r18, r24
    385c:	ce 01       	movw	r24, r28
    385e:	02 96       	adiw	r24, 0x02	; 2
    3860:	e8 0f       	add	r30, r24
    3862:	f9 1f       	adc	r31, r25
    3864:	20 83       	st	Z, r18
		copy_u16number/=10;
    3866:	8f 81       	ldd	r24, Y+7	; 0x07
    3868:	98 85       	ldd	r25, Y+8	; 0x08
    386a:	2a e0       	ldi	r18, 0x0A	; 10
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	b9 01       	movw	r22, r18
    3870:	0e 94 91 20 	call	0x4122	; 0x4122 <__udivmodhi4>
    3874:	cb 01       	movw	r24, r22
    3876:	98 87       	std	Y+8, r25	; 0x08
    3878:	8f 83       	std	Y+7, r24	; 0x07
		i++;
    387a:	89 81       	ldd	r24, Y+1	; 0x01
    387c:	8f 5f       	subi	r24, 0xFF	; 255
    387e:	89 83       	std	Y+1, r24	; 0x01
	{
		lcd_sendChar('0');
	}
	sint8_t i=0;
	uint8_t str_num[5];
	while(copy_u16number>0)
    3880:	8f 81       	ldd	r24, Y+7	; 0x07
    3882:	98 85       	ldd	r25, Y+8	; 0x08
    3884:	00 97       	sbiw	r24, 0x00	; 0
    3886:	e9 f6       	brne	.-70     	; 0x3842 <lcd_sendNum+0x2a>
	{
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
    3888:	89 81       	ldd	r24, Y+1	; 0x01
    388a:	81 50       	subi	r24, 0x01	; 1
    388c:	89 83       	std	Y+1, r24	; 0x01
    388e:	7e c0       	rjmp	.+252    	; 0x398c <lcd_sendNum+0x174>
	while(i>=0)
	{
		switch(str_num[i])
    3890:	89 81       	ldd	r24, Y+1	; 0x01
    3892:	28 2f       	mov	r18, r24
    3894:	33 27       	eor	r19, r19
    3896:	27 fd       	sbrc	r18, 7
    3898:	30 95       	com	r19
    389a:	ce 01       	movw	r24, r28
    389c:	02 96       	adiw	r24, 0x02	; 2
    389e:	fc 01       	movw	r30, r24
    38a0:	e2 0f       	add	r30, r18
    38a2:	f3 1f       	adc	r31, r19
    38a4:	80 81       	ld	r24, Z
    38a6:	28 2f       	mov	r18, r24
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	3a 87       	std	Y+10, r19	; 0x0a
    38ac:	29 87       	std	Y+9, r18	; 0x09
    38ae:	89 85       	ldd	r24, Y+9	; 0x09
    38b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b2:	84 30       	cpi	r24, 0x04	; 4
    38b4:	91 05       	cpc	r25, r1
    38b6:	09 f4       	brne	.+2      	; 0x38ba <lcd_sendNum+0xa2>
    38b8:	4f c0       	rjmp	.+158    	; 0x3958 <lcd_sendNum+0x140>
    38ba:	29 85       	ldd	r18, Y+9	; 0x09
    38bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    38be:	25 30       	cpi	r18, 0x05	; 5
    38c0:	31 05       	cpc	r19, r1
    38c2:	d4 f4       	brge	.+52     	; 0x38f8 <lcd_sendNum+0xe0>
    38c4:	89 85       	ldd	r24, Y+9	; 0x09
    38c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c8:	81 30       	cpi	r24, 0x01	; 1
    38ca:	91 05       	cpc	r25, r1
    38cc:	c9 f1       	breq	.+114    	; 0x3940 <lcd_sendNum+0x128>
    38ce:	29 85       	ldd	r18, Y+9	; 0x09
    38d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    38d2:	22 30       	cpi	r18, 0x02	; 2
    38d4:	31 05       	cpc	r19, r1
    38d6:	2c f4       	brge	.+10     	; 0x38e2 <lcd_sendNum+0xca>
    38d8:	89 85       	ldd	r24, Y+9	; 0x09
    38da:	9a 85       	ldd	r25, Y+10	; 0x0a
    38dc:	00 97       	sbiw	r24, 0x00	; 0
    38de:	61 f1       	breq	.+88     	; 0x3938 <lcd_sendNum+0x120>
    38e0:	52 c0       	rjmp	.+164    	; 0x3986 <lcd_sendNum+0x16e>
    38e2:	29 85       	ldd	r18, Y+9	; 0x09
    38e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    38e6:	22 30       	cpi	r18, 0x02	; 2
    38e8:	31 05       	cpc	r19, r1
    38ea:	71 f1       	breq	.+92     	; 0x3948 <lcd_sendNum+0x130>
    38ec:	89 85       	ldd	r24, Y+9	; 0x09
    38ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    38f0:	83 30       	cpi	r24, 0x03	; 3
    38f2:	91 05       	cpc	r25, r1
    38f4:	69 f1       	breq	.+90     	; 0x3950 <lcd_sendNum+0x138>
    38f6:	47 c0       	rjmp	.+142    	; 0x3986 <lcd_sendNum+0x16e>
    38f8:	29 85       	ldd	r18, Y+9	; 0x09
    38fa:	3a 85       	ldd	r19, Y+10	; 0x0a
    38fc:	27 30       	cpi	r18, 0x07	; 7
    38fe:	31 05       	cpc	r19, r1
    3900:	b9 f1       	breq	.+110    	; 0x3970 <lcd_sendNum+0x158>
    3902:	89 85       	ldd	r24, Y+9	; 0x09
    3904:	9a 85       	ldd	r25, Y+10	; 0x0a
    3906:	88 30       	cpi	r24, 0x08	; 8
    3908:	91 05       	cpc	r25, r1
    390a:	5c f4       	brge	.+22     	; 0x3922 <lcd_sendNum+0x10a>
    390c:	29 85       	ldd	r18, Y+9	; 0x09
    390e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3910:	25 30       	cpi	r18, 0x05	; 5
    3912:	31 05       	cpc	r19, r1
    3914:	29 f1       	breq	.+74     	; 0x3960 <lcd_sendNum+0x148>
    3916:	89 85       	ldd	r24, Y+9	; 0x09
    3918:	9a 85       	ldd	r25, Y+10	; 0x0a
    391a:	86 30       	cpi	r24, 0x06	; 6
    391c:	91 05       	cpc	r25, r1
    391e:	21 f1       	breq	.+72     	; 0x3968 <lcd_sendNum+0x150>
    3920:	32 c0       	rjmp	.+100    	; 0x3986 <lcd_sendNum+0x16e>
    3922:	29 85       	ldd	r18, Y+9	; 0x09
    3924:	3a 85       	ldd	r19, Y+10	; 0x0a
    3926:	28 30       	cpi	r18, 0x08	; 8
    3928:	31 05       	cpc	r19, r1
    392a:	31 f1       	breq	.+76     	; 0x3978 <lcd_sendNum+0x160>
    392c:	89 85       	ldd	r24, Y+9	; 0x09
    392e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3930:	89 30       	cpi	r24, 0x09	; 9
    3932:	91 05       	cpc	r25, r1
    3934:	29 f1       	breq	.+74     	; 0x3980 <lcd_sendNum+0x168>
    3936:	27 c0       	rjmp	.+78     	; 0x3986 <lcd_sendNum+0x16e>
		{
		case 0 : lcd_sendChar('0');break;
    3938:	80 e3       	ldi	r24, 0x30	; 48
    393a:	0e 94 d5 19 	call	0x33aa	; 0x33aa <lcd_sendChar>
    393e:	23 c0       	rjmp	.+70     	; 0x3986 <lcd_sendNum+0x16e>
		case 1 : lcd_sendChar('1');break;
    3940:	81 e3       	ldi	r24, 0x31	; 49
    3942:	0e 94 d5 19 	call	0x33aa	; 0x33aa <lcd_sendChar>
    3946:	1f c0       	rjmp	.+62     	; 0x3986 <lcd_sendNum+0x16e>
		case 2 : lcd_sendChar('2');break;
    3948:	82 e3       	ldi	r24, 0x32	; 50
    394a:	0e 94 d5 19 	call	0x33aa	; 0x33aa <lcd_sendChar>
    394e:	1b c0       	rjmp	.+54     	; 0x3986 <lcd_sendNum+0x16e>
		case 3 : lcd_sendChar('3');break;
    3950:	83 e3       	ldi	r24, 0x33	; 51
    3952:	0e 94 d5 19 	call	0x33aa	; 0x33aa <lcd_sendChar>
    3956:	17 c0       	rjmp	.+46     	; 0x3986 <lcd_sendNum+0x16e>
		case 4 : lcd_sendChar('4');break;
    3958:	84 e3       	ldi	r24, 0x34	; 52
    395a:	0e 94 d5 19 	call	0x33aa	; 0x33aa <lcd_sendChar>
    395e:	13 c0       	rjmp	.+38     	; 0x3986 <lcd_sendNum+0x16e>
		case 5 : lcd_sendChar('5');break;
    3960:	85 e3       	ldi	r24, 0x35	; 53
    3962:	0e 94 d5 19 	call	0x33aa	; 0x33aa <lcd_sendChar>
    3966:	0f c0       	rjmp	.+30     	; 0x3986 <lcd_sendNum+0x16e>
		case 6 : lcd_sendChar('6');break;
    3968:	86 e3       	ldi	r24, 0x36	; 54
    396a:	0e 94 d5 19 	call	0x33aa	; 0x33aa <lcd_sendChar>
    396e:	0b c0       	rjmp	.+22     	; 0x3986 <lcd_sendNum+0x16e>
		case 7 : lcd_sendChar('7');break;
    3970:	87 e3       	ldi	r24, 0x37	; 55
    3972:	0e 94 d5 19 	call	0x33aa	; 0x33aa <lcd_sendChar>
    3976:	07 c0       	rjmp	.+14     	; 0x3986 <lcd_sendNum+0x16e>
		case 8 : lcd_sendChar('8');break;
    3978:	88 e3       	ldi	r24, 0x38	; 56
    397a:	0e 94 d5 19 	call	0x33aa	; 0x33aa <lcd_sendChar>
    397e:	03 c0       	rjmp	.+6      	; 0x3986 <lcd_sendNum+0x16e>
		case 9 : lcd_sendChar('9');break;
    3980:	89 e3       	ldi	r24, 0x39	; 57
    3982:	0e 94 d5 19 	call	0x33aa	; 0x33aa <lcd_sendChar>
		}

		i--;
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	81 50       	subi	r24, 0x01	; 1
    398a:	89 83       	std	Y+1, r24	; 0x01
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
	while(i>=0)
    398c:	89 81       	ldd	r24, Y+1	; 0x01
    398e:	88 23       	and	r24, r24
    3990:	0c f0       	brlt	.+2      	; 0x3994 <lcd_sendNum+0x17c>
    3992:	7e cf       	rjmp	.-260    	; 0x3890 <lcd_sendNum+0x78>

		i--;
	}


}
    3994:	2a 96       	adiw	r28, 0x0a	; 10
    3996:	0f b6       	in	r0, 0x3f	; 63
    3998:	f8 94       	cli
    399a:	de bf       	out	0x3e, r29	; 62
    399c:	0f be       	out	0x3f, r0	; 63
    399e:	cd bf       	out	0x3d, r28	; 61
    39a0:	cf 91       	pop	r28
    39a2:	df 91       	pop	r29
    39a4:	08 95       	ret

000039a6 <lcd_SetPosition>:

void lcd_SetPosition(uint8_t raw, uint8_t column)
{
    39a6:	df 93       	push	r29
    39a8:	cf 93       	push	r28
    39aa:	00 d0       	rcall	.+0      	; 0x39ac <lcd_SetPosition+0x6>
    39ac:	cd b7       	in	r28, 0x3d	; 61
    39ae:	de b7       	in	r29, 0x3e	; 62
    39b0:	89 83       	std	Y+1, r24	; 0x01
    39b2:	6a 83       	std	Y+2, r22	; 0x02
	if(0==raw)   
    39b4:	89 81       	ldd	r24, Y+1	; 0x01
    39b6:	88 23       	and	r24, r24
    39b8:	21 f4       	brne	.+8      	; 0x39c2 <lcd_SetPosition+0x1c>
	{
	lcd_command(LCD_FIRSTLINE+column);
    39ba:	8a 81       	ldd	r24, Y+2	; 0x02
    39bc:	80 58       	subi	r24, 0x80	; 128
    39be:	0e 94 38 17 	call	0x2e70	; 0x2e70 <lcd_command>
	}
	if(1==raw)
    39c2:	89 81       	ldd	r24, Y+1	; 0x01
    39c4:	81 30       	cpi	r24, 0x01	; 1
    39c6:	21 f4       	brne	.+8      	; 0x39d0 <lcd_SetPosition+0x2a>
	{
	lcd_command(LCD_SECONDLINE+column);                                   
    39c8:	8a 81       	ldd	r24, Y+2	; 0x02
    39ca:	80 54       	subi	r24, 0x40	; 64
    39cc:	0e 94 38 17 	call	0x2e70	; 0x2e70 <lcd_command>
	}

}
    39d0:	0f 90       	pop	r0
    39d2:	0f 90       	pop	r0
    39d4:	cf 91       	pop	r28
    39d6:	df 91       	pop	r29
    39d8:	08 95       	ret

000039da <lcd_clear>:

void lcd_clear(void)
{
    39da:	df 93       	push	r29
    39dc:	cf 93       	push	r28
    39de:	cd b7       	in	r28, 0x3d	; 61
    39e0:	de b7       	in	r29, 0x3e	; 62
    39e2:	2e 97       	sbiw	r28, 0x0e	; 14
    39e4:	0f b6       	in	r0, 0x3f	; 63
    39e6:	f8 94       	cli
    39e8:	de bf       	out	0x3e, r29	; 62
    39ea:	0f be       	out	0x3f, r0	; 63
    39ec:	cd bf       	out	0x3d, r28	; 61
    lcd_command(DISPLAY_CLEAR);
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	0e 94 38 17 	call	0x2e70	; 0x2e70 <lcd_command>
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	a0 e0       	ldi	r26, 0x00	; 0
    39fa:	b0 e4       	ldi	r27, 0x40	; 64
    39fc:	8b 87       	std	Y+11, r24	; 0x0b
    39fe:	9c 87       	std	Y+12, r25	; 0x0c
    3a00:	ad 87       	std	Y+13, r26	; 0x0d
    3a02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a04:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a06:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a08:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a0c:	20 e0       	ldi	r18, 0x00	; 0
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	4a ef       	ldi	r20, 0xFA	; 250
    3a12:	54 e4       	ldi	r21, 0x44	; 68
    3a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	8f 83       	std	Y+7, r24	; 0x07
    3a1e:	98 87       	std	Y+8, r25	; 0x08
    3a20:	a9 87       	std	Y+9, r26	; 0x09
    3a22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a24:	6f 81       	ldd	r22, Y+7	; 0x07
    3a26:	78 85       	ldd	r23, Y+8	; 0x08
    3a28:	89 85       	ldd	r24, Y+9	; 0x09
    3a2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2c:	20 e0       	ldi	r18, 0x00	; 0
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	40 e8       	ldi	r20, 0x80	; 128
    3a32:	5f e3       	ldi	r21, 0x3F	; 63
    3a34:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a38:	88 23       	and	r24, r24
    3a3a:	2c f4       	brge	.+10     	; 0x3a46 <lcd_clear+0x6c>
		__ticks = 1;
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	9e 83       	std	Y+6, r25	; 0x06
    3a42:	8d 83       	std	Y+5, r24	; 0x05
    3a44:	3f c0       	rjmp	.+126    	; 0x3ac4 <lcd_clear+0xea>
	else if (__tmp > 65535)
    3a46:	6f 81       	ldd	r22, Y+7	; 0x07
    3a48:	78 85       	ldd	r23, Y+8	; 0x08
    3a4a:	89 85       	ldd	r24, Y+9	; 0x09
    3a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	3f ef       	ldi	r19, 0xFF	; 255
    3a52:	4f e7       	ldi	r20, 0x7F	; 127
    3a54:	57 e4       	ldi	r21, 0x47	; 71
    3a56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a5a:	18 16       	cp	r1, r24
    3a5c:	4c f5       	brge	.+82     	; 0x3ab0 <lcd_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a60:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a62:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a64:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	40 e2       	ldi	r20, 0x20	; 32
    3a6c:	51 e4       	ldi	r21, 0x41	; 65
    3a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	bc 01       	movw	r22, r24
    3a78:	cd 01       	movw	r24, r26
    3a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	9e 83       	std	Y+6, r25	; 0x06
    3a84:	8d 83       	std	Y+5, r24	; 0x05
    3a86:	0f c0       	rjmp	.+30     	; 0x3aa6 <lcd_clear+0xcc>
    3a88:	88 ec       	ldi	r24, 0xC8	; 200
    3a8a:	90 e0       	ldi	r25, 0x00	; 0
    3a8c:	9c 83       	std	Y+4, r25	; 0x04
    3a8e:	8b 83       	std	Y+3, r24	; 0x03
    3a90:	8b 81       	ldd	r24, Y+3	; 0x03
    3a92:	9c 81       	ldd	r25, Y+4	; 0x04
    3a94:	01 97       	sbiw	r24, 0x01	; 1
    3a96:	f1 f7       	brne	.-4      	; 0x3a94 <lcd_clear+0xba>
    3a98:	9c 83       	std	Y+4, r25	; 0x04
    3a9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa0:	01 97       	sbiw	r24, 0x01	; 1
    3aa2:	9e 83       	std	Y+6, r25	; 0x06
    3aa4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aaa:	00 97       	sbiw	r24, 0x00	; 0
    3aac:	69 f7       	brne	.-38     	; 0x3a88 <lcd_clear+0xae>
    3aae:	14 c0       	rjmp	.+40     	; 0x3ad8 <lcd_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ab0:	6f 81       	ldd	r22, Y+7	; 0x07
    3ab2:	78 85       	ldd	r23, Y+8	; 0x08
    3ab4:	89 85       	ldd	r24, Y+9	; 0x09
    3ab6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3abc:	dc 01       	movw	r26, r24
    3abe:	cb 01       	movw	r24, r22
    3ac0:	9e 83       	std	Y+6, r25	; 0x06
    3ac2:	8d 83       	std	Y+5, r24	; 0x05
    3ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac8:	9a 83       	std	Y+2, r25	; 0x02
    3aca:	89 83       	std	Y+1, r24	; 0x01
    3acc:	89 81       	ldd	r24, Y+1	; 0x01
    3ace:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad0:	01 97       	sbiw	r24, 0x01	; 1
    3ad2:	f1 f7       	brne	.-4      	; 0x3ad0 <lcd_clear+0xf6>
    3ad4:	9a 83       	std	Y+2, r25	; 0x02
    3ad6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    3ad8:	2e 96       	adiw	r28, 0x0e	; 14
    3ada:	0f b6       	in	r0, 0x3f	; 63
    3adc:	f8 94       	cli
    3ade:	de bf       	out	0x3e, r29	; 62
    3ae0:	0f be       	out	0x3f, r0	; 63
    3ae2:	cd bf       	out	0x3d, r28	; 61
    3ae4:	cf 91       	pop	r28
    3ae6:	df 91       	pop	r29
    3ae8:	08 95       	ret

00003aea <KEYPAD_voidInit>:
/**
 * @brief Initialize KeyPad Pins
 * 
 */
void KEYPAD_voidInit(void)
{
    3aea:	df 93       	push	r29
    3aec:	cf 93       	push	r28
    3aee:	cd b7       	in	r28, 0x3d	; 61
    3af0:	de b7       	in	r29, 0x3e	; 62
    DIO_voidInpullUp(KEYPAD_PORT, KEYPAD_INPUT0);
    3af2:	80 e0       	ldi	r24, 0x00	; 0
    3af4:	64 e0       	ldi	r22, 0x04	; 4
    3af6:	0e 94 cb 10 	call	0x2196	; 0x2196 <DIO_voidInpullUp>
    DIO_voidInpullUp(KEYPAD_PORT, KEYPAD_INPUT1);
    3afa:	80 e0       	ldi	r24, 0x00	; 0
    3afc:	65 e0       	ldi	r22, 0x05	; 5
    3afe:	0e 94 cb 10 	call	0x2196	; 0x2196 <DIO_voidInpullUp>
    DIO_voidInpullUp(KEYPAD_PORT, KEYPAD_INPUT2);
    3b02:	80 e0       	ldi	r24, 0x00	; 0
    3b04:	66 e0       	ldi	r22, 0x06	; 6
    3b06:	0e 94 cb 10 	call	0x2196	; 0x2196 <DIO_voidInpullUp>


    DIO_voidSetPinDirection(KEYPAD_PORT, KEYPAD_OUTPUT0, OUTPUT);
    3b0a:	80 e0       	ldi	r24, 0x00	; 0
    3b0c:	60 e0       	ldi	r22, 0x00	; 0
    3b0e:	41 e0       	ldi	r20, 0x01	; 1
    3b10:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KEYPAD_PORT, KEYPAD_OUTPUT1, OUTPUT);
    3b14:	80 e0       	ldi	r24, 0x00	; 0
    3b16:	61 e0       	ldi	r22, 0x01	; 1
    3b18:	41 e0       	ldi	r20, 0x01	; 1
    3b1a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KEYPAD_PORT, KEYPAD_OUTPUT2, OUTPUT);
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	62 e0       	ldi	r22, 0x02	; 2
    3b22:	41 e0       	ldi	r20, 0x01	; 1
    3b24:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KEYPAD_PORT, KEYPAD_OUTPUT3, OUTPUT);
    3b28:	80 e0       	ldi	r24, 0x00	; 0
    3b2a:	63 e0       	ldi	r22, 0x03	; 3
    3b2c:	41 e0       	ldi	r20, 0x01	; 1
    3b2e:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>

    DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0, HIGH);
    3b32:	80 e0       	ldi	r24, 0x00	; 0
    3b34:	60 e0       	ldi	r22, 0x00	; 0
    3b36:	41 e0       	ldi	r20, 0x01	; 1
    3b38:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT1, HIGH);
    3b3c:	80 e0       	ldi	r24, 0x00	; 0
    3b3e:	61 e0       	ldi	r22, 0x01	; 1
    3b40:	41 e0       	ldi	r20, 0x01	; 1
    3b42:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT2, HIGH);
    3b46:	80 e0       	ldi	r24, 0x00	; 0
    3b48:	62 e0       	ldi	r22, 0x02	; 2
    3b4a:	41 e0       	ldi	r20, 0x01	; 1
    3b4c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT3, HIGH);
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	63 e0       	ldi	r22, 0x03	; 3
    3b54:	41 e0       	ldi	r20, 0x01	; 1
    3b56:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
}
    3b5a:	cf 91       	pop	r28
    3b5c:	df 91       	pop	r29
    3b5e:	08 95       	ret

00003b60 <KEYPAD_u8Read>:
 * @brief Read Pressed Button on KeyPad and Return Key
 * 
 * @return uint8_t Pressed
 */
uint8_t KEYPAD_u8Read(void)
{
    3b60:	df 93       	push	r29
    3b62:	cf 93       	push	r28
    3b64:	00 d0       	rcall	.+0      	; 0x3b66 <KEYPAD_u8Read+0x6>
    3b66:	0f 92       	push	r0
    3b68:	cd b7       	in	r28, 0x3d	; 61
    3b6a:	de b7       	in	r29, 0x3e	; 62
    uint8_t i, j, key = DEFAULT_KEY;
    3b6c:	8e e2       	ldi	r24, 0x2E	; 46
    3b6e:	89 83       	std	Y+1, r24	; 0x01
    while (1)
    {
        for (i = 0; i < ROW; i++)
    3b70:	1b 82       	std	Y+3, r1	; 0x03
    3b72:	39 c0       	rjmp	.+114    	; 0x3be6 <KEYPAD_u8Read+0x86>
        {
            DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0 + i, LOW);
    3b74:	80 e0       	ldi	r24, 0x00	; 0
    3b76:	6b 81       	ldd	r22, Y+3	; 0x03
    3b78:	40 e0       	ldi	r20, 0x00	; 0
    3b7a:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
            for (j = 0; j < COL; j++)
    3b7e:	1a 82       	std	Y+2, r1	; 0x02
    3b80:	27 c0       	rjmp	.+78     	; 0x3bd0 <KEYPAD_u8Read+0x70>
            {
                if (!DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_INPUT0 + j))
    3b82:	8a 81       	ldd	r24, Y+2	; 0x02
    3b84:	98 2f       	mov	r25, r24
    3b86:	9c 5f       	subi	r25, 0xFC	; 252
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	69 2f       	mov	r22, r25
    3b8c:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <DIO_u8GetPinValue>
    3b90:	88 23       	and	r24, r24
    3b92:	d9 f4       	brne	.+54     	; 0x3bca <KEYPAD_u8Read+0x6a>
                {
                    key = gKEYPADArr[i][j];
    3b94:	8b 81       	ldd	r24, Y+3	; 0x03
    3b96:	28 2f       	mov	r18, r24
    3b98:	30 e0       	ldi	r19, 0x00	; 0
    3b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9c:	48 2f       	mov	r20, r24
    3b9e:	50 e0       	ldi	r21, 0x00	; 0
    3ba0:	c9 01       	movw	r24, r18
    3ba2:	88 0f       	add	r24, r24
    3ba4:	99 1f       	adc	r25, r25
    3ba6:	82 0f       	add	r24, r18
    3ba8:	93 1f       	adc	r25, r19
    3baa:	84 0f       	add	r24, r20
    3bac:	95 1f       	adc	r25, r21
    3bae:	fc 01       	movw	r30, r24
    3bb0:	e7 5c       	subi	r30, 0xC7	; 199
    3bb2:	fe 4f       	sbci	r31, 0xFE	; 254
    3bb4:	80 81       	ld	r24, Z
    3bb6:	89 83       	std	Y+1, r24	; 0x01
                    while (!DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_INPUT0 + j))
    3bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bba:	98 2f       	mov	r25, r24
    3bbc:	9c 5f       	subi	r25, 0xFC	; 252
    3bbe:	80 e0       	ldi	r24, 0x00	; 0
    3bc0:	69 2f       	mov	r22, r25
    3bc2:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <DIO_u8GetPinValue>
    3bc6:	88 23       	and	r24, r24
    3bc8:	b9 f3       	breq	.-18     	; 0x3bb8 <KEYPAD_u8Read+0x58>
    while (1)
    {
        for (i = 0; i < ROW; i++)
        {
            DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0 + i, LOW);
            for (j = 0; j < COL; j++)
    3bca:	8a 81       	ldd	r24, Y+2	; 0x02
    3bcc:	8f 5f       	subi	r24, 0xFF	; 255
    3bce:	8a 83       	std	Y+2, r24	; 0x02
    3bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd2:	83 30       	cpi	r24, 0x03	; 3
    3bd4:	b0 f2       	brcs	.-84     	; 0x3b82 <KEYPAD_u8Read+0x22>
                    key = gKEYPADArr[i][j];
                    while (!DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_INPUT0 + j))
                        ;
                }
            }
            DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0 + i, HIGH);
    3bd6:	80 e0       	ldi	r24, 0x00	; 0
    3bd8:	6b 81       	ldd	r22, Y+3	; 0x03
    3bda:	41 e0       	ldi	r20, 0x01	; 1
    3bdc:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <DIO_voidSetPinValue>
uint8_t KEYPAD_u8Read(void)
{
    uint8_t i, j, key = DEFAULT_KEY;
    while (1)
    {
        for (i = 0; i < ROW; i++)
    3be0:	8b 81       	ldd	r24, Y+3	; 0x03
    3be2:	8f 5f       	subi	r24, 0xFF	; 255
    3be4:	8b 83       	std	Y+3, r24	; 0x03
    3be6:	8b 81       	ldd	r24, Y+3	; 0x03
    3be8:	84 30       	cpi	r24, 0x04	; 4
    3bea:	20 f2       	brcs	.-120    	; 0x3b74 <KEYPAD_u8Read+0x14>
                        ;
                }
            }
            DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0 + i, HIGH);
        }
        return key;
    3bec:	89 81       	ldd	r24, Y+1	; 0x01
    }
}
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
    3bf4:	cf 91       	pop	r28
    3bf6:	df 91       	pop	r29
    3bf8:	08 95       	ret

00003bfa <eeprom_send_string>:

#include "I2C_interface.h"
#include "UART_int.h"
#include "EEPROM_interface.h"
void eeprom_send_string(uint8_t *str)
{
    3bfa:	df 93       	push	r29
    3bfc:	cf 93       	push	r28
    3bfe:	00 d0       	rcall	.+0      	; 0x3c00 <eeprom_send_string+0x6>
    3c00:	00 d0       	rcall	.+0      	; 0x3c02 <eeprom_send_string+0x8>
    3c02:	cd b7       	in	r28, 0x3d	; 61
    3c04:	de b7       	in	r29, 0x3e	; 62
    3c06:	9c 83       	std	Y+4, r25	; 0x04
    3c08:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t i = 0, value;
    3c0a:	1a 82       	std	Y+2, r1	; 0x02
	I2C_MasterStart();
    3c0c:	0e 94 1a 0a 	call	0x1434	; 0x1434 <I2C_MasterStart>
	I2C_SendSlaveAddressWithWrite(0b01010000);
    3c10:	80 e5       	ldi	r24, 0x50	; 80
    3c12:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <I2C_SendSlaveAddressWithWrite>
	I2C_WriteDataByte(0b00000001);
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	0e 94 a5 0a 	call	0x154a	; 0x154a <I2C_WriteDataByte>
    3c1c:	0e c0       	rjmp	.+28     	; 0x3c3a <eeprom_send_string+0x40>
	while (str[i] != '\0')
	{
		I2C_WriteDataByte(str[i] );
    3c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c20:	28 2f       	mov	r18, r24
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	8b 81       	ldd	r24, Y+3	; 0x03
    3c26:	9c 81       	ldd	r25, Y+4	; 0x04
    3c28:	fc 01       	movw	r30, r24
    3c2a:	e2 0f       	add	r30, r18
    3c2c:	f3 1f       	adc	r31, r19
    3c2e:	80 81       	ld	r24, Z
    3c30:	0e 94 a5 0a 	call	0x154a	; 0x154a <I2C_WriteDataByte>
		i++;
    3c34:	8a 81       	ldd	r24, Y+2	; 0x02
    3c36:	8f 5f       	subi	r24, 0xFF	; 255
    3c38:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t i = 0, value;
	I2C_MasterStart();
	I2C_SendSlaveAddressWithWrite(0b01010000);
	I2C_WriteDataByte(0b00000001);
	while (str[i] != '\0')
    3c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3c:	28 2f       	mov	r18, r24
    3c3e:	30 e0       	ldi	r19, 0x00	; 0
    3c40:	8b 81       	ldd	r24, Y+3	; 0x03
    3c42:	9c 81       	ldd	r25, Y+4	; 0x04
    3c44:	fc 01       	movw	r30, r24
    3c46:	e2 0f       	add	r30, r18
    3c48:	f3 1f       	adc	r31, r19
    3c4a:	80 81       	ld	r24, Z
    3c4c:	88 23       	and	r24, r24
    3c4e:	39 f7       	brne	.-50     	; 0x3c1e <eeprom_send_string+0x24>
	{
		I2C_WriteDataByte(str[i] );
		i++;
	}
	I2C_MasterStop();
    3c50:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <I2C_MasterStop>
}
    3c54:	0f 90       	pop	r0
    3c56:	0f 90       	pop	r0
    3c58:	0f 90       	pop	r0
    3c5a:	0f 90       	pop	r0
    3c5c:	cf 91       	pop	r28
    3c5e:	df 91       	pop	r29
    3c60:	08 95       	ret

00003c62 <eeprom_recieve_string>:
void eeprom_recieve_string(uint8_t *str)
{
    3c62:	0f 93       	push	r16
    3c64:	1f 93       	push	r17
    3c66:	df 93       	push	r29
    3c68:	cf 93       	push	r28
    3c6a:	00 d0       	rcall	.+0      	; 0x3c6c <eeprom_recieve_string+0xa>
    3c6c:	00 d0       	rcall	.+0      	; 0x3c6e <eeprom_recieve_string+0xc>
    3c6e:	cd b7       	in	r28, 0x3d	; 61
    3c70:	de b7       	in	r29, 0x3e	; 62
    3c72:	9c 83       	std	Y+4, r25	; 0x04
    3c74:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t i = 0, value;
    3c76:	1a 82       	std	Y+2, r1	; 0x02
	I2C_MasterStart();
    3c78:	0e 94 1a 0a 	call	0x1434	; 0x1434 <I2C_MasterStart>
	I2C_SendSlaveAddressWithWrite(0b01010000);
    3c7c:	80 e5       	ldi	r24, 0x50	; 80
    3c7e:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <I2C_SendSlaveAddressWithWrite>
	I2C_WriteDataByte(0b00000001);
    3c82:	81 e0       	ldi	r24, 0x01	; 1
    3c84:	0e 94 a5 0a 	call	0x154a	; 0x154a <I2C_WriteDataByte>
    3c88:	16 c0       	rjmp	.+44     	; 0x3cb6 <eeprom_recieve_string+0x54>

	while (i != 4)
	{
		I2C_MasterStart();
    3c8a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <I2C_MasterStart>
		I2C_SendSlaveAddressWithRead(0b01010000);
    3c8e:	80 e5       	ldi	r24, 0x50	; 80
    3c90:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <I2C_SendSlaveAddressWithRead>
		str[i] = I2C_ReadDataByte();
    3c94:	8a 81       	ldd	r24, Y+2	; 0x02
    3c96:	28 2f       	mov	r18, r24
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c9e:	8c 01       	movw	r16, r24
    3ca0:	02 0f       	add	r16, r18
    3ca2:	13 1f       	adc	r17, r19
    3ca4:	0e 94 bf 0a 	call	0x157e	; 0x157e <I2C_ReadDataByte>
    3ca8:	f8 01       	movw	r30, r16
    3caa:	80 83       	st	Z, r24
		I2C_MasterStop();
    3cac:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <I2C_MasterStop>
		i++;
    3cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb2:	8f 5f       	subi	r24, 0xFF	; 255
    3cb4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0, value;
	I2C_MasterStart();
	I2C_SendSlaveAddressWithWrite(0b01010000);
	I2C_WriteDataByte(0b00000001);

	while (i != 4)
    3cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb8:	84 30       	cpi	r24, 0x04	; 4
    3cba:	39 f7       	brne	.-50     	; 0x3c8a <eeprom_recieve_string+0x28>
		I2C_SendSlaveAddressWithRead(0b01010000);
		str[i] = I2C_ReadDataByte();
		I2C_MasterStop();
		i++;
	}
	str[i]='\0';
    3cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cbe:	28 2f       	mov	r18, r24
    3cc0:	30 e0       	ldi	r19, 0x00	; 0
    3cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc6:	fc 01       	movw	r30, r24
    3cc8:	e2 0f       	add	r30, r18
    3cca:	f3 1f       	adc	r31, r19
    3ccc:	10 82       	st	Z, r1
}
    3cce:	0f 90       	pop	r0
    3cd0:	0f 90       	pop	r0
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	cf 91       	pop	r28
    3cd8:	df 91       	pop	r29
    3cda:	1f 91       	pop	r17
    3cdc:	0f 91       	pop	r16
    3cde:	08 95       	ret

00003ce0 <change_stringToBin>:

uint8_t change_stringToBin(uint8_t *str)
{
    3ce0:	df 93       	push	r29
    3ce2:	cf 93       	push	r28
    3ce4:	cd b7       	in	r28, 0x3d	; 61
    3ce6:	de b7       	in	r29, 0x3e	; 62
    3ce8:	2d 97       	sbiw	r28, 0x0d	; 13
    3cea:	0f b6       	in	r0, 0x3f	; 63
    3cec:	f8 94       	cli
    3cee:	de bf       	out	0x3e, r29	; 62
    3cf0:	0f be       	out	0x3f, r0	; 63
    3cf2:	cd bf       	out	0x3d, r28	; 61
    3cf4:	9d 87       	std	Y+13, r25	; 0x0d
    3cf6:	8c 87       	std	Y+12, r24	; 0x0c
	uint32_t num = 0;
    3cf8:	18 86       	std	Y+8, r1	; 0x08
    3cfa:	19 86       	std	Y+9, r1	; 0x09
    3cfc:	1a 86       	std	Y+10, r1	; 0x0a
    3cfe:	1b 86       	std	Y+11, r1	; 0x0b
	uint32_t bin = 0;
    3d00:	1c 82       	std	Y+4, r1	; 0x04
    3d02:	1d 82       	std	Y+5, r1	; 0x05
    3d04:	1e 82       	std	Y+6, r1	; 0x06
    3d06:	1f 82       	std	Y+7, r1	; 0x07
	uint8_t temp = 0;
    3d08:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t weight = 1;
    3d0a:	81 e0       	ldi	r24, 0x01	; 1
    3d0c:	8a 83       	std	Y+2, r24	; 0x02

	for (uint8_t i = 0; i < 8; i++)
    3d0e:	19 82       	std	Y+1, r1	; 0x01
    3d10:	29 c0       	rjmp	.+82     	; 0x3d64 <change_stringToBin+0x84>
	{
		num = num * 10 + str[i] - '0';
    3d12:	88 85       	ldd	r24, Y+8	; 0x08
    3d14:	99 85       	ldd	r25, Y+9	; 0x09
    3d16:	aa 85       	ldd	r26, Y+10	; 0x0a
    3d18:	bb 85       	ldd	r27, Y+11	; 0x0b
    3d1a:	2a e0       	ldi	r18, 0x0A	; 10
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	40 e0       	ldi	r20, 0x00	; 0
    3d20:	50 e0       	ldi	r21, 0x00	; 0
    3d22:	bc 01       	movw	r22, r24
    3d24:	cd 01       	movw	r24, r26
    3d26:	0e 94 72 20 	call	0x40e4	; 0x40e4 <__mulsi3>
    3d2a:	ab 01       	movw	r20, r22
    3d2c:	bc 01       	movw	r22, r24
    3d2e:	89 81       	ldd	r24, Y+1	; 0x01
    3d30:	28 2f       	mov	r18, r24
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	8c 85       	ldd	r24, Y+12	; 0x0c
    3d36:	9d 85       	ldd	r25, Y+13	; 0x0d
    3d38:	fc 01       	movw	r30, r24
    3d3a:	e2 0f       	add	r30, r18
    3d3c:	f3 1f       	adc	r31, r19
    3d3e:	80 81       	ld	r24, Z
    3d40:	88 2f       	mov	r24, r24
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	a0 e0       	ldi	r26, 0x00	; 0
    3d46:	b0 e0       	ldi	r27, 0x00	; 0
    3d48:	84 0f       	add	r24, r20
    3d4a:	95 1f       	adc	r25, r21
    3d4c:	a6 1f       	adc	r26, r22
    3d4e:	b7 1f       	adc	r27, r23
    3d50:	c0 97       	sbiw	r24, 0x30	; 48
    3d52:	a1 09       	sbc	r26, r1
    3d54:	b1 09       	sbc	r27, r1
    3d56:	88 87       	std	Y+8, r24	; 0x08
    3d58:	99 87       	std	Y+9, r25	; 0x09
    3d5a:	aa 87       	std	Y+10, r26	; 0x0a
    3d5c:	bb 87       	std	Y+11, r27	; 0x0b
	uint32_t num = 0;
	uint32_t bin = 0;
	uint8_t temp = 0;
	uint8_t weight = 1;

	for (uint8_t i = 0; i < 8; i++)
    3d5e:	89 81       	ldd	r24, Y+1	; 0x01
    3d60:	8f 5f       	subi	r24, 0xFF	; 255
    3d62:	89 83       	std	Y+1, r24	; 0x01
    3d64:	89 81       	ldd	r24, Y+1	; 0x01
    3d66:	88 30       	cpi	r24, 0x08	; 8
    3d68:	a0 f2       	brcs	.-88     	; 0x3d12 <change_stringToBin+0x32>
    3d6a:	46 c0       	rjmp	.+140    	; 0x3df8 <change_stringToBin+0x118>
		num = num * 10 + str[i] - '0';
	}

	while (num > 0)
	{
		temp = num % 10;
    3d6c:	88 85       	ldd	r24, Y+8	; 0x08
    3d6e:	99 85       	ldd	r25, Y+9	; 0x09
    3d70:	aa 85       	ldd	r26, Y+10	; 0x0a
    3d72:	bb 85       	ldd	r27, Y+11	; 0x0b
    3d74:	2a e0       	ldi	r18, 0x0A	; 10
    3d76:	30 e0       	ldi	r19, 0x00	; 0
    3d78:	40 e0       	ldi	r20, 0x00	; 0
    3d7a:	50 e0       	ldi	r21, 0x00	; 0
    3d7c:	bc 01       	movw	r22, r24
    3d7e:	cd 01       	movw	r24, r26
    3d80:	0e 94 a5 20 	call	0x414a	; 0x414a <__udivmodsi4>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	8b 83       	std	Y+3, r24	; 0x03
		num = num / 10;
    3d8a:	88 85       	ldd	r24, Y+8	; 0x08
    3d8c:	99 85       	ldd	r25, Y+9	; 0x09
    3d8e:	aa 85       	ldd	r26, Y+10	; 0x0a
    3d90:	bb 85       	ldd	r27, Y+11	; 0x0b
    3d92:	2a e0       	ldi	r18, 0x0A	; 10
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	40 e0       	ldi	r20, 0x00	; 0
    3d98:	50 e0       	ldi	r21, 0x00	; 0
    3d9a:	bc 01       	movw	r22, r24
    3d9c:	cd 01       	movw	r24, r26
    3d9e:	0e 94 a5 20 	call	0x414a	; 0x414a <__udivmodsi4>
    3da2:	da 01       	movw	r26, r20
    3da4:	c9 01       	movw	r24, r18
    3da6:	88 87       	std	Y+8, r24	; 0x08
    3da8:	99 87       	std	Y+9, r25	; 0x09
    3daa:	aa 87       	std	Y+10, r26	; 0x0a
    3dac:	bb 87       	std	Y+11, r27	; 0x0b
		bin = bin + temp * weight;
    3dae:	8b 81       	ldd	r24, Y+3	; 0x03
    3db0:	28 2f       	mov	r18, r24
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	8a 81       	ldd	r24, Y+2	; 0x02
    3db6:	88 2f       	mov	r24, r24
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	ac 01       	movw	r20, r24
    3dbc:	24 9f       	mul	r18, r20
    3dbe:	c0 01       	movw	r24, r0
    3dc0:	25 9f       	mul	r18, r21
    3dc2:	90 0d       	add	r25, r0
    3dc4:	34 9f       	mul	r19, r20
    3dc6:	90 0d       	add	r25, r0
    3dc8:	11 24       	eor	r1, r1
    3dca:	9c 01       	movw	r18, r24
    3dcc:	44 27       	eor	r20, r20
    3dce:	37 fd       	sbrc	r19, 7
    3dd0:	40 95       	com	r20
    3dd2:	54 2f       	mov	r21, r20
    3dd4:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd6:	9d 81       	ldd	r25, Y+5	; 0x05
    3dd8:	ae 81       	ldd	r26, Y+6	; 0x06
    3dda:	bf 81       	ldd	r27, Y+7	; 0x07
    3ddc:	82 0f       	add	r24, r18
    3dde:	93 1f       	adc	r25, r19
    3de0:	a4 1f       	adc	r26, r20
    3de2:	b5 1f       	adc	r27, r21
    3de4:	8c 83       	std	Y+4, r24	; 0x04
    3de6:	9d 83       	std	Y+5, r25	; 0x05
    3de8:	ae 83       	std	Y+6, r26	; 0x06
    3dea:	bf 83       	std	Y+7, r27	; 0x07
		weight *= 2;
    3dec:	8a 81       	ldd	r24, Y+2	; 0x02
    3dee:	88 2f       	mov	r24, r24
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	88 0f       	add	r24, r24
    3df4:	99 1f       	adc	r25, r25
    3df6:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t i = 0; i < 8; i++)
	{
		num = num * 10 + str[i] - '0';
	}

	while (num > 0)
    3df8:	88 85       	ldd	r24, Y+8	; 0x08
    3dfa:	99 85       	ldd	r25, Y+9	; 0x09
    3dfc:	aa 85       	ldd	r26, Y+10	; 0x0a
    3dfe:	bb 85       	ldd	r27, Y+11	; 0x0b
    3e00:	00 97       	sbiw	r24, 0x00	; 0
    3e02:	a1 05       	cpc	r26, r1
    3e04:	b1 05       	cpc	r27, r1
    3e06:	09 f0       	breq	.+2      	; 0x3e0a <change_stringToBin+0x12a>
    3e08:	b1 cf       	rjmp	.-158    	; 0x3d6c <change_stringToBin+0x8c>
		temp = num % 10;
		num = num / 10;
		bin = bin + temp * weight;
		weight *= 2;
	}
	return bin;
    3e0a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3e0c:	2d 96       	adiw	r28, 0x0d	; 13
    3e0e:	0f b6       	in	r0, 0x3f	; 63
    3e10:	f8 94       	cli
    3e12:	de bf       	out	0x3e, r29	; 62
    3e14:	0f be       	out	0x3f, r0	; 63
    3e16:	cd bf       	out	0x3d, r28	; 61
    3e18:	cf 91       	pop	r28
    3e1a:	df 91       	pop	r29
    3e1c:	08 95       	ret

00003e1e <EX_Callback>:
/**
 * @brief Call Back Function 
 * 
 */
void EX_Callback(void)
{
    3e1e:	df 93       	push	r29
    3e20:	cf 93       	push	r28
    3e22:	cd b7       	in	r28, 0x3d	; 61
    3e24:	de b7       	in	r29, 0x3e	; 62
	if (gFlag == 0)
    3e26:	80 91 b8 01 	lds	r24, 0x01B8
    3e2a:	88 23       	and	r24, r24
    3e2c:	21 f4       	brne	.+8      	; 0x3e36 <EX_Callback+0x18>
	{
		SER_UARTvoidSendString("Invalid");
    3e2e:	80 e6       	ldi	r24, 0x60	; 96
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>
	}
}
    3e36:	cf 91       	pop	r28
    3e38:	df 91       	pop	r29
    3e3a:	08 95       	ret

00003e3c <APP_Init>:
/**
 * @brief Initialize all Peripheral
 * 
 */
void APP_Init(void)
{
    3e3c:	df 93       	push	r29
    3e3e:	cf 93       	push	r28
    3e40:	cd b7       	in	r28, 0x3d	; 61
    3e42:	de b7       	in	r29, 0x3e	; 62
	UART_ENInit();
    3e44:	0e 94 d3 06 	call	0xda6	; 0xda6 <UART_ENInit>
	I2C_MasterInit();
    3e48:	0e 94 f6 09 	call	0x13ec	; 0x13ec <I2C_MasterInit>
	SPI_VidInitSlave();
    3e4c:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <SPI_VidInitSlave>
	DIO_voidSetPinDirection(PORT_D, PIN2, INPUT);
    3e50:	83 e0       	ldi	r24, 0x03	; 3
    3e52:	62 e0       	ldi	r22, 0x02	; 2
    3e54:	40 e0       	ldi	r20, 0x00	; 0
    3e56:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <DIO_voidSetPinDirection>
	EXTI_ENEnable(EXTI_INT0);
    3e5a:	80 e0       	ldi	r24, 0x00	; 0
    3e5c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <EXTI_ENEnable>
	EXTI_ENTriggerEdge(EXTI_INT0, FALLING_EDGE);
    3e60:	80 e0       	ldi	r24, 0x00	; 0
    3e62:	62 e0       	ldi	r22, 0x02	; 2
    3e64:	0e 94 99 0b 	call	0x1732	; 0x1732 <EXTI_ENTriggerEdge>
	EXTI_SetCallBack(EXTI_INT0, EX_Callback);
    3e68:	2f e0       	ldi	r18, 0x0F	; 15
    3e6a:	3f e1       	ldi	r19, 0x1F	; 31
    3e6c:	80 e0       	ldi	r24, 0x00	; 0
    3e6e:	b9 01       	movw	r22, r18
    3e70:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <EXTI_SetCallBack>
}
    3e74:	cf 91       	pop	r28
    3e76:	df 91       	pop	r29
    3e78:	08 95       	ret

00003e7a <Admin_Mode>:
 * @brief Store holder name, card number and password on eeprom
 * 
 * @param str 
 */
void Admin_Mode(uint8_t *str)
{
    3e7a:	df 93       	push	r29
    3e7c:	cf 93       	push	r28
    3e7e:	00 d0       	rcall	.+0      	; 0x3e80 <Admin_Mode+0x6>
    3e80:	0f 92       	push	r0
    3e82:	cd b7       	in	r28, 0x3d	; 61
    3e84:	de b7       	in	r29, 0x3e	; 62
    3e86:	9b 83       	std	Y+3, r25	; 0x03
    3e88:	8a 83       	std	Y+2, r24	; 0x02
	SER_UARTvoidSendString((uint8_t *)"Enter Card Holder Name: ");
    3e8a:	88 e6       	ldi	r24, 0x68	; 104
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>
	SER_UARTvoidReceiveString(str);
    3e92:	8a 81       	ldd	r24, Y+2	; 0x02
    3e94:	9b 81       	ldd	r25, Y+3	; 0x03
    3e96:	0e 94 d0 05 	call	0xba0	; 0xba0 <SER_UARTvoidReceiveString>

	SER_UARTvoidSendString((uint8_t *)"Card Number: ");
    3e9a:	81 e8       	ldi	r24, 0x81	; 129
    3e9c:	90 e0       	ldi	r25, 0x00	; 0
    3e9e:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>
	SER_UARTvoidReceiveString(str);
    3ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ea6:	0e 94 d0 05 	call	0xba0	; 0xba0 <SER_UARTvoidReceiveString>
	/* Send Card Number To EEPROM */
	eeprom_send_string(str);
    3eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    3eac:	9b 81       	ldd	r25, Y+3	; 0x03
    3eae:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <eeprom_send_string>

	/* Send Password to EEPROM */
	SER_UARTvoidSendString((uint8_t *)"Enter Passwrod: ");
    3eb2:	8f e8       	ldi	r24, 0x8F	; 143
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>
	SER_UARTvoidReceiveString(str);
    3eba:	8a 81       	ldd	r24, Y+2	; 0x02
    3ebc:	9b 81       	ldd	r25, Y+3	; 0x03
    3ebe:	0e 94 d0 05 	call	0xba0	; 0xba0 <SER_UARTvoidReceiveString>
	eeprom_send_string(str);
    3ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ec6:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <eeprom_send_string>


	SER_UARTvoidSendString((uint8_t *)"finishing setup the card.... ");
    3eca:	80 ea       	ldi	r24, 0xA0	; 160
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>
	uint8_t B1 =SPI_U8RecieveByte_admin();
    3ed2:	0e 94 34 09 	call	0x1268	; 0x1268 <SPI_U8RecieveByte_admin>
    3ed6:	89 83       	std	Y+1, r24	; 0x01
	UART_ENSendData(B1);
    3ed8:	89 81       	ldd	r24, Y+1	; 0x01
    3eda:	0e 94 41 07 	call	0xe82	; 0xe82 <UART_ENSendData>
	SPDR = '0';
    3ede:	ef e2       	ldi	r30, 0x2F	; 47
    3ee0:	f0 e0       	ldi	r31, 0x00	; 0
    3ee2:	80 e3       	ldi	r24, 0x30	; 48
    3ee4:	80 83       	st	Z, r24

	SER_UARTvoidSendString((uint8_t *)"setup finished");
    3ee6:	8e eb       	ldi	r24, 0xBE	; 190
    3ee8:	90 e0       	ldi	r25, 0x00	; 0
    3eea:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>

}
    3eee:	0f 90       	pop	r0
    3ef0:	0f 90       	pop	r0
    3ef2:	0f 90       	pop	r0
    3ef4:	cf 91       	pop	r28
    3ef6:	df 91       	pop	r29
    3ef8:	08 95       	ret

00003efa <User_Mode>:
 * @brief  User Mode
 * 
 * @param str 
 */
void User_Mode(uint8_t *str)
{
    3efa:	df 93       	push	r29
    3efc:	cf 93       	push	r28
    3efe:	cd b7       	in	r28, 0x3d	; 61
    3f00:	de b7       	in	r29, 0x3e	; 62
    3f02:	c8 56       	subi	r28, 0x68	; 104
    3f04:	d0 40       	sbci	r29, 0x00	; 0
    3f06:	0f b6       	in	r0, 0x3f	; 63
    3f08:	f8 94       	cli
    3f0a:	de bf       	out	0x3e, r29	; 62
    3f0c:	0f be       	out	0x3f, r0	; 63
    3f0e:	cd bf       	out	0x3d, r28	; 61
    3f10:	fe 01       	movw	r30, r28
    3f12:	e9 59       	subi	r30, 0x99	; 153
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	91 83       	std	Z+1, r25	; 0x01
    3f18:	80 83       	st	Z, r24
	uint8_t i = 0;
    3f1a:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t data[100] ;
	uint8_t B1=0;
    3f1c:	19 82       	std	Y+1, r1	; 0x01
	eeprom_recieve_string(str);
    3f1e:	fe 01       	movw	r30, r28
    3f20:	e9 59       	subi	r30, 0x99	; 153
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	80 81       	ld	r24, Z
    3f26:	91 81       	ldd	r25, Z+1	; 0x01
    3f28:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <eeprom_recieve_string>
	UART_voidRXInterruptEnable();
    3f2c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <UART_voidRXInterruptEnable>
	SER_UARTvoidSendString("you want to change the mode ? YES");
    3f30:	8d ec       	ldi	r24, 0xCD	; 205
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>

	//	B1=SPI_U8RecieveByte();
	//	SPDR = 'T';
	//	UART_ENSendData(B1);
	while(1){
		i=0;
    3f38:	1a 82       	std	Y+2, r1	; 0x02

		B1=SPI_U8RecieveByte();
    3f3a:	0e 94 65 09 	call	0x12ca	; 0x12ca <SPI_U8RecieveByte>
    3f3e:	89 83       	std	Y+1, r24	; 0x01
		UART_ENSendData(B1);
    3f40:	89 81       	ldd	r24, Y+1	; 0x01
    3f42:	0e 94 41 07 	call	0xe82	; 0xe82 <UART_ENSendData>

		if(B1=='f'){
    3f46:	89 81       	ldd	r24, Y+1	; 0x01
    3f48:	86 36       	cpi	r24, 0x66	; 102
    3f4a:	29 f4       	brne	.+10     	; 0x3f56 <User_Mode+0x5c>
			//SPI_U8RecieveByte();
			SPDR = '1';
    3f4c:	ef e2       	ldi	r30, 0x2F	; 47
    3f4e:	f0 e0       	ldi	r31, 0x00	; 0
    3f50:	81 e3       	ldi	r24, 0x31	; 49
    3f52:	80 83       	st	Z, r24
    3f54:	f1 cf       	rjmp	.-30     	; 0x3f38 <User_Mode+0x3e>
		}
		else if(B1=='p'){
    3f56:	89 81       	ldd	r24, Y+1	; 0x01
    3f58:	80 37       	cpi	r24, 0x70	; 112
    3f5a:	71 f7       	brne	.-36     	; 0x3f38 <User_Mode+0x3e>
    3f5c:	12 c0       	rjmp	.+36     	; 0x3f82 <User_Mode+0x88>
			while (SPI_U8RecieveByte() == 'p')
			{

				SPDR = str[i];
    3f5e:	af e2       	ldi	r26, 0x2F	; 47
    3f60:	b0 e0       	ldi	r27, 0x00	; 0
    3f62:	8a 81       	ldd	r24, Y+2	; 0x02
    3f64:	28 2f       	mov	r18, r24
    3f66:	30 e0       	ldi	r19, 0x00	; 0
    3f68:	fe 01       	movw	r30, r28
    3f6a:	e9 59       	subi	r30, 0x99	; 153
    3f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6e:	80 81       	ld	r24, Z
    3f70:	91 81       	ldd	r25, Z+1	; 0x01
    3f72:	fc 01       	movw	r30, r24
    3f74:	e2 0f       	add	r30, r18
    3f76:	f3 1f       	adc	r31, r19
    3f78:	80 81       	ld	r24, Z
    3f7a:	8c 93       	st	X, r24
				i++;
    3f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7e:	8f 5f       	subi	r24, 0xFF	; 255
    3f80:	8a 83       	std	Y+2, r24	; 0x02
		if(B1=='f'){
			//SPI_U8RecieveByte();
			SPDR = '1';
		}
		else if(B1=='p'){
			while (SPI_U8RecieveByte() == 'p')
    3f82:	0e 94 65 09 	call	0x12ca	; 0x12ca <SPI_U8RecieveByte>
    3f86:	80 37       	cpi	r24, 0x70	; 112
    3f88:	51 f3       	breq	.-44     	; 0x3f5e <User_Mode+0x64>
				i++;
			}

			//SER_UARTvoidReceiveString(data);

			if(String_u8Comp(data_arr, "YES") == STRING_EQUL){
    3f8a:	89 eb       	ldi	r24, 0xB9	; 185
    3f8c:	91 e0       	ldi	r25, 0x01	; 1
    3f8e:	2f ee       	ldi	r18, 0xEF	; 239
    3f90:	30 e0       	ldi	r19, 0x00	; 0
    3f92:	b9 01       	movw	r22, r18
    3f94:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <String_u8Comp>
    3f98:	88 23       	and	r24, r24
    3f9a:	71 f6       	brne	.-100    	; 0x3f38 <User_Mode+0x3e>
				data_arr[0]=0;
    3f9c:	10 92 b9 01 	sts	0x01B9, r1
				break;
			}
		}

	}
    3fa0:	c8 59       	subi	r28, 0x98	; 152
    3fa2:	df 4f       	sbci	r29, 0xFF	; 255
    3fa4:	0f b6       	in	r0, 0x3f	; 63
    3fa6:	f8 94       	cli
    3fa8:	de bf       	out	0x3e, r29	; 62
    3faa:	0f be       	out	0x3f, r0	; 63
    3fac:	cd bf       	out	0x3d, r28	; 61
    3fae:	cf 91       	pop	r28
    3fb0:	df 91       	pop	r29
    3fb2:	08 95       	ret

00003fb4 <String_u8Comp>:
 * @param Str1 first string
 * @param Str2 second string
 * @return uint8_t string is equal = 0 or not equal =1
 */
uint8_t String_u8Comp(uint8_t *Str1, uint8_t *Str2)
{
    3fb4:	df 93       	push	r29
    3fb6:	cf 93       	push	r28
    3fb8:	00 d0       	rcall	.+0      	; 0x3fba <String_u8Comp+0x6>
    3fba:	00 d0       	rcall	.+0      	; 0x3fbc <String_u8Comp+0x8>
    3fbc:	00 d0       	rcall	.+0      	; 0x3fbe <String_u8Comp+0xa>
    3fbe:	cd b7       	in	r28, 0x3d	; 61
    3fc0:	de b7       	in	r29, 0x3e	; 62
    3fc2:	9c 83       	std	Y+4, r25	; 0x04
    3fc4:	8b 83       	std	Y+3, r24	; 0x03
    3fc6:	7e 83       	std	Y+6, r23	; 0x06
    3fc8:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t i = 0, Flag = 0;
    3fca:	1a 82       	std	Y+2, r1	; 0x02
    3fcc:	19 82       	std	Y+1, r1	; 0x01
    3fce:	1a c0       	rjmp	.+52     	; 0x4004 <String_u8Comp+0x50>

	while (Str1[i] || Str2[i])
	{
		if (Str1[i] != Str2[i])
    3fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd2:	28 2f       	mov	r18, r24
    3fd4:	30 e0       	ldi	r19, 0x00	; 0
    3fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    3fda:	fc 01       	movw	r30, r24
    3fdc:	e2 0f       	add	r30, r18
    3fde:	f3 1f       	adc	r31, r19
    3fe0:	40 81       	ld	r20, Z
    3fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fe4:	28 2f       	mov	r18, r24
    3fe6:	30 e0       	ldi	r19, 0x00	; 0
    3fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fea:	9e 81       	ldd	r25, Y+6	; 0x06
    3fec:	fc 01       	movw	r30, r24
    3fee:	e2 0f       	add	r30, r18
    3ff0:	f3 1f       	adc	r31, r19
    3ff2:	80 81       	ld	r24, Z
    3ff4:	48 17       	cp	r20, r24
    3ff6:	19 f0       	breq	.+6      	; 0x3ffe <String_u8Comp+0x4a>
		{
			Flag = 1;
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	89 83       	std	Y+1, r24	; 0x01
    3ffc:	19 c0       	rjmp	.+50     	; 0x4030 <String_u8Comp+0x7c>
			break;
		}
		i++;
    3ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    4000:	8f 5f       	subi	r24, 0xFF	; 255
    4002:	8a 83       	std	Y+2, r24	; 0x02
 */
uint8_t String_u8Comp(uint8_t *Str1, uint8_t *Str2)
{
	uint8_t i = 0, Flag = 0;

	while (Str1[i] || Str2[i])
    4004:	8a 81       	ldd	r24, Y+2	; 0x02
    4006:	28 2f       	mov	r18, r24
    4008:	30 e0       	ldi	r19, 0x00	; 0
    400a:	8b 81       	ldd	r24, Y+3	; 0x03
    400c:	9c 81       	ldd	r25, Y+4	; 0x04
    400e:	fc 01       	movw	r30, r24
    4010:	e2 0f       	add	r30, r18
    4012:	f3 1f       	adc	r31, r19
    4014:	80 81       	ld	r24, Z
    4016:	88 23       	and	r24, r24
    4018:	d9 f6       	brne	.-74     	; 0x3fd0 <String_u8Comp+0x1c>
    401a:	8a 81       	ldd	r24, Y+2	; 0x02
    401c:	28 2f       	mov	r18, r24
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	8d 81       	ldd	r24, Y+5	; 0x05
    4022:	9e 81       	ldd	r25, Y+6	; 0x06
    4024:	fc 01       	movw	r30, r24
    4026:	e2 0f       	add	r30, r18
    4028:	f3 1f       	adc	r31, r19
    402a:	80 81       	ld	r24, Z
    402c:	88 23       	and	r24, r24
    402e:	81 f6       	brne	.-96     	; 0x3fd0 <String_u8Comp+0x1c>
			Flag = 1;
			break;
		}
		i++;
	}
	return Flag;
    4030:	89 81       	ldd	r24, Y+1	; 0x01
}
    4032:	26 96       	adiw	r28, 0x06	; 6
    4034:	0f b6       	in	r0, 0x3f	; 63
    4036:	f8 94       	cli
    4038:	de bf       	out	0x3e, r29	; 62
    403a:	0f be       	out	0x3f, r0	; 63
    403c:	cd bf       	out	0x3d, r28	; 61
    403e:	cf 91       	pop	r28
    4040:	df 91       	pop	r29
    4042:	08 95       	ret

00004044 <main>:
volatile uint8_t data_arr[100];
extern volatile uint8_t i;


int main()
{
    4044:	df 93       	push	r29
    4046:	cf 93       	push	r28
    4048:	cd b7       	in	r28, 0x3d	; 61
    404a:	de b7       	in	r29, 0x3e	; 62
    404c:	ef 97       	sbiw	r28, 0x3f	; 63
    404e:	0f b6       	in	r0, 0x3f	; 63
    4050:	f8 94       	cli
    4052:	de bf       	out	0x3e, r29	; 62
    4054:	0f be       	out	0x3f, r0	; 63
    4056:	cd bf       	out	0x3d, r28	; 61
	uint8_t Data[55];
	uint8_t *Admin = (uint8_t *)"ADMIN";
    4058:	83 ef       	ldi	r24, 0xF3	; 243
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	98 87       	std	Y+8, r25	; 0x08
    405e:	8f 83       	std	Y+7, r24	; 0x07
	uint8_t *User = (uint8_t *)"USER";
    4060:	89 ef       	ldi	r24, 0xF9	; 249
    4062:	90 e0       	ldi	r25, 0x00	; 0
    4064:	9e 83       	std	Y+6, r25	; 0x06
    4066:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t *YES = (uint8_t *)"YES";
    4068:	8e ef       	ldi	r24, 0xFE	; 254
    406a:	90 e0       	ldi	r25, 0x00	; 0
    406c:	9c 83       	std	Y+4, r25	; 0x04
    406e:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t *NO = (uint8_t *)"NO";
    4070:	82 e0       	ldi	r24, 0x02	; 2
    4072:	91 e0       	ldi	r25, 0x01	; 1
    4074:	9a 83       	std	Y+2, r25	; 0x02
    4076:	89 83       	std	Y+1, r24	; 0x01
	APP_Init();
    4078:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <APP_Init>
	UART_voidReceiveString_Ashync(data_arr);
    407c:	89 eb       	ldi	r24, 0xB9	; 185
    407e:	91 e0       	ldi	r25, 0x01	; 1
    4080:	0e 94 fa 07 	call	0xff4	; 0xff4 <UART_voidReceiveString_Ashync>
	while (1)
	{
		UART_voidRXInterruptDisable();
    4084:	0e 94 8f 07 	call	0xf1e	; 0xf1e <UART_voidRXInterruptDisable>
		SER_UARTvoidSendString("you want user or admin mode ?");
    4088:	85 e0       	ldi	r24, 0x05	; 5
    408a:	91 e0       	ldi	r25, 0x01	; 1
    408c:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>

		SER_UARTvoidReceiveString(Data);
    4090:	ce 01       	movw	r24, r28
    4092:	09 96       	adiw	r24, 0x09	; 9
    4094:	0e 94 d0 05 	call	0xba0	; 0xba0 <SER_UARTvoidReceiveString>

		/* Admin */
		if (String_u8Comp(Data, Admin) == STRING_EQUL)
    4098:	ce 01       	movw	r24, r28
    409a:	09 96       	adiw	r24, 0x09	; 9
    409c:	2f 81       	ldd	r18, Y+7	; 0x07
    409e:	38 85       	ldd	r19, Y+8	; 0x08
    40a0:	b9 01       	movw	r22, r18
    40a2:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <String_u8Comp>
    40a6:	88 23       	and	r24, r24
    40a8:	39 f4       	brne	.+14     	; 0x40b8 <main+0x74>
		{
			gFlag = INVALID;
    40aa:	10 92 b8 01 	sts	0x01B8, r1

			Admin_Mode(Data);
    40ae:	ce 01       	movw	r24, r28
    40b0:	09 96       	adiw	r24, 0x09	; 9
    40b2:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <Admin_Mode>
    40b6:	e6 cf       	rjmp	.-52     	; 0x4084 <main+0x40>
		}
		else if (String_u8Comp(Data, User) == STRING_EQUL)
    40b8:	ce 01       	movw	r24, r28
    40ba:	09 96       	adiw	r24, 0x09	; 9
    40bc:	2d 81       	ldd	r18, Y+5	; 0x05
    40be:	3e 81       	ldd	r19, Y+6	; 0x06
    40c0:	b9 01       	movw	r22, r18
    40c2:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <String_u8Comp>
    40c6:	88 23       	and	r24, r24
    40c8:	41 f4       	brne	.+16     	; 0x40da <main+0x96>
		{
			gFlag = VALID;
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	80 93 b8 01 	sts	0x01B8, r24

			User_Mode(Data);
    40d0:	ce 01       	movw	r24, r28
    40d2:	09 96       	adiw	r24, 0x09	; 9
    40d4:	0e 94 7d 1f 	call	0x3efa	; 0x3efa <User_Mode>
    40d8:	d5 cf       	rjmp	.-86     	; 0x4084 <main+0x40>


		//}
		else
		{
			SER_UARTvoidSendString((uint8_t *)"Wrong Enter");
    40da:	83 e2       	ldi	r24, 0x23	; 35
    40dc:	91 e0       	ldi	r25, 0x01	; 1
    40de:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>
    40e2:	d0 cf       	rjmp	.-96     	; 0x4084 <main+0x40>

000040e4 <__mulsi3>:
    40e4:	62 9f       	mul	r22, r18
    40e6:	d0 01       	movw	r26, r0
    40e8:	73 9f       	mul	r23, r19
    40ea:	f0 01       	movw	r30, r0
    40ec:	82 9f       	mul	r24, r18
    40ee:	e0 0d       	add	r30, r0
    40f0:	f1 1d       	adc	r31, r1
    40f2:	64 9f       	mul	r22, r20
    40f4:	e0 0d       	add	r30, r0
    40f6:	f1 1d       	adc	r31, r1
    40f8:	92 9f       	mul	r25, r18
    40fa:	f0 0d       	add	r31, r0
    40fc:	83 9f       	mul	r24, r19
    40fe:	f0 0d       	add	r31, r0
    4100:	74 9f       	mul	r23, r20
    4102:	f0 0d       	add	r31, r0
    4104:	65 9f       	mul	r22, r21
    4106:	f0 0d       	add	r31, r0
    4108:	99 27       	eor	r25, r25
    410a:	72 9f       	mul	r23, r18
    410c:	b0 0d       	add	r27, r0
    410e:	e1 1d       	adc	r30, r1
    4110:	f9 1f       	adc	r31, r25
    4112:	63 9f       	mul	r22, r19
    4114:	b0 0d       	add	r27, r0
    4116:	e1 1d       	adc	r30, r1
    4118:	f9 1f       	adc	r31, r25
    411a:	bd 01       	movw	r22, r26
    411c:	cf 01       	movw	r24, r30
    411e:	11 24       	eor	r1, r1
    4120:	08 95       	ret

00004122 <__udivmodhi4>:
    4122:	aa 1b       	sub	r26, r26
    4124:	bb 1b       	sub	r27, r27
    4126:	51 e1       	ldi	r21, 0x11	; 17
    4128:	07 c0       	rjmp	.+14     	; 0x4138 <__udivmodhi4_ep>

0000412a <__udivmodhi4_loop>:
    412a:	aa 1f       	adc	r26, r26
    412c:	bb 1f       	adc	r27, r27
    412e:	a6 17       	cp	r26, r22
    4130:	b7 07       	cpc	r27, r23
    4132:	10 f0       	brcs	.+4      	; 0x4138 <__udivmodhi4_ep>
    4134:	a6 1b       	sub	r26, r22
    4136:	b7 0b       	sbc	r27, r23

00004138 <__udivmodhi4_ep>:
    4138:	88 1f       	adc	r24, r24
    413a:	99 1f       	adc	r25, r25
    413c:	5a 95       	dec	r21
    413e:	a9 f7       	brne	.-22     	; 0x412a <__udivmodhi4_loop>
    4140:	80 95       	com	r24
    4142:	90 95       	com	r25
    4144:	bc 01       	movw	r22, r24
    4146:	cd 01       	movw	r24, r26
    4148:	08 95       	ret

0000414a <__udivmodsi4>:
    414a:	a1 e2       	ldi	r26, 0x21	; 33
    414c:	1a 2e       	mov	r1, r26
    414e:	aa 1b       	sub	r26, r26
    4150:	bb 1b       	sub	r27, r27
    4152:	fd 01       	movw	r30, r26
    4154:	0d c0       	rjmp	.+26     	; 0x4170 <__udivmodsi4_ep>

00004156 <__udivmodsi4_loop>:
    4156:	aa 1f       	adc	r26, r26
    4158:	bb 1f       	adc	r27, r27
    415a:	ee 1f       	adc	r30, r30
    415c:	ff 1f       	adc	r31, r31
    415e:	a2 17       	cp	r26, r18
    4160:	b3 07       	cpc	r27, r19
    4162:	e4 07       	cpc	r30, r20
    4164:	f5 07       	cpc	r31, r21
    4166:	20 f0       	brcs	.+8      	; 0x4170 <__udivmodsi4_ep>
    4168:	a2 1b       	sub	r26, r18
    416a:	b3 0b       	sbc	r27, r19
    416c:	e4 0b       	sbc	r30, r20
    416e:	f5 0b       	sbc	r31, r21

00004170 <__udivmodsi4_ep>:
    4170:	66 1f       	adc	r22, r22
    4172:	77 1f       	adc	r23, r23
    4174:	88 1f       	adc	r24, r24
    4176:	99 1f       	adc	r25, r25
    4178:	1a 94       	dec	r1
    417a:	69 f7       	brne	.-38     	; 0x4156 <__udivmodsi4_loop>
    417c:	60 95       	com	r22
    417e:	70 95       	com	r23
    4180:	80 95       	com	r24
    4182:	90 95       	com	r25
    4184:	9b 01       	movw	r18, r22
    4186:	ac 01       	movw	r20, r24
    4188:	bd 01       	movw	r22, r26
    418a:	cf 01       	movw	r24, r30
    418c:	08 95       	ret

0000418e <__prologue_saves__>:
    418e:	2f 92       	push	r2
    4190:	3f 92       	push	r3
    4192:	4f 92       	push	r4
    4194:	5f 92       	push	r5
    4196:	6f 92       	push	r6
    4198:	7f 92       	push	r7
    419a:	8f 92       	push	r8
    419c:	9f 92       	push	r9
    419e:	af 92       	push	r10
    41a0:	bf 92       	push	r11
    41a2:	cf 92       	push	r12
    41a4:	df 92       	push	r13
    41a6:	ef 92       	push	r14
    41a8:	ff 92       	push	r15
    41aa:	0f 93       	push	r16
    41ac:	1f 93       	push	r17
    41ae:	cf 93       	push	r28
    41b0:	df 93       	push	r29
    41b2:	cd b7       	in	r28, 0x3d	; 61
    41b4:	de b7       	in	r29, 0x3e	; 62
    41b6:	ca 1b       	sub	r28, r26
    41b8:	db 0b       	sbc	r29, r27
    41ba:	0f b6       	in	r0, 0x3f	; 63
    41bc:	f8 94       	cli
    41be:	de bf       	out	0x3e, r29	; 62
    41c0:	0f be       	out	0x3f, r0	; 63
    41c2:	cd bf       	out	0x3d, r28	; 61
    41c4:	09 94       	ijmp

000041c6 <__epilogue_restores__>:
    41c6:	2a 88       	ldd	r2, Y+18	; 0x12
    41c8:	39 88       	ldd	r3, Y+17	; 0x11
    41ca:	48 88       	ldd	r4, Y+16	; 0x10
    41cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    41ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    41d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    41d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    41d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    41d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    41d8:	b9 84       	ldd	r11, Y+9	; 0x09
    41da:	c8 84       	ldd	r12, Y+8	; 0x08
    41dc:	df 80       	ldd	r13, Y+7	; 0x07
    41de:	ee 80       	ldd	r14, Y+6	; 0x06
    41e0:	fd 80       	ldd	r15, Y+5	; 0x05
    41e2:	0c 81       	ldd	r16, Y+4	; 0x04
    41e4:	1b 81       	ldd	r17, Y+3	; 0x03
    41e6:	aa 81       	ldd	r26, Y+2	; 0x02
    41e8:	b9 81       	ldd	r27, Y+1	; 0x01
    41ea:	ce 0f       	add	r28, r30
    41ec:	d1 1d       	adc	r29, r1
    41ee:	0f b6       	in	r0, 0x3f	; 63
    41f0:	f8 94       	cli
    41f2:	de bf       	out	0x3e, r29	; 62
    41f4:	0f be       	out	0x3f, r0	; 63
    41f6:	cd bf       	out	0x3d, r28	; 61
    41f8:	ed 01       	movw	r28, r26
    41fa:	08 95       	ret

000041fc <_exit>:
    41fc:	f8 94       	cli

000041fe <__stop_program>:
    41fe:	ff cf       	rjmp	.-2      	; 0x41fe <__stop_program>
