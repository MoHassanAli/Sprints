
ATM_CARD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004102  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00800060  00004102  00004196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000070  0080013e  0080013e  00004274  2**0
                  ALLOC
  3 .stab         00004770  00000000  00000000  00004274  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001fff  00000000  00000000  000089e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a9e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000ab23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000ac93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c8dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d7c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000e574  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e6d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e961  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000f12f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__vector_1>
       8:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__vector_2>
       c:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 d0 07 	jmp	0xfa0	; 0xfa0 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f1 e4       	ldi	r31, 0x41	; 65
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 33       	cpi	r26, 0x3E	; 62
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e3       	ldi	r26, 0x3E	; 62
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ab 1f 	call	0x3f56	; 0x3f56 <main>
      8a:	0c 94 7f 20 	jmp	0x40fe	; 0x40fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 48 20 	jmp	0x4090	; 0x4090 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 e2       	ldi	r26, 0x27	; 39
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 64 20 	jmp	0x40c8	; 0x40c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 54 20 	jmp	0x40a8	; 0x40a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 54 20 	jmp	0x40a8	; 0x40a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 48 20 	jmp	0x4090	; 0x4090 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 e2       	ldi	r24, 0x27	; 39
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 64 20 	jmp	0x40c8	; 0x40c8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 54 20 	jmp	0x40a8	; 0x40a8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 54 20 	jmp	0x40a8	; 0x40a8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 54 20 	jmp	0x40a8	; 0x40a8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 58 20 	jmp	0x40b0	; 0x40b0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 74 20 	jmp	0x40e8	; 0x40e8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <SER_UARTvoidSendString>:
 * @brief Send String
 * 
 * @param Str String is sending
 */
void SER_UARTvoidSendString(uint8_t *Str)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <SER_UARTvoidSendString+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9b 83       	std	Y+3, r25	; 0x03
     b54:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i = 0;
     b56:	19 82       	std	Y+1, r1	; 0x01
    for (i = 0; Str[i]; i++)
     b58:	19 82       	std	Y+1, r1	; 0x01
     b5a:	0e c0       	rjmp	.+28     	; 0xb78 <SER_UARTvoidSendString+0x32>
    {
        UART_ENSendData(Str[i]);
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	28 2f       	mov	r18, r24
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	9b 81       	ldd	r25, Y+3	; 0x03
     b66:	fc 01       	movw	r30, r24
     b68:	e2 0f       	add	r30, r18
     b6a:	f3 1f       	adc	r31, r19
     b6c:	80 81       	ld	r24, Z
     b6e:	0e 94 06 07 	call	0xe0c	; 0xe0c <UART_ENSendData>
 * @param Str String is sending
 */
void SER_UARTvoidSendString(uint8_t *Str)
{
    uint8_t i = 0;
    for (i = 0; Str[i]; i++)
     b72:	89 81       	ldd	r24, Y+1	; 0x01
     b74:	8f 5f       	subi	r24, 0xFF	; 255
     b76:	89 83       	std	Y+1, r24	; 0x01
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	8a 81       	ldd	r24, Y+2	; 0x02
     b80:	9b 81       	ldd	r25, Y+3	; 0x03
     b82:	fc 01       	movw	r30, r24
     b84:	e2 0f       	add	r30, r18
     b86:	f3 1f       	adc	r31, r19
     b88:	80 81       	ld	r24, Z
     b8a:	88 23       	and	r24, r24
     b8c:	39 f7       	brne	.-50     	; 0xb5c <SER_UARTvoidSendString+0x16>
    {
        UART_ENSendData(Str[i]);
    }
    UART_ENSendData('\r');
     b8e:	8d e0       	ldi	r24, 0x0D	; 13
     b90:	0e 94 06 07 	call	0xe0c	; 0xe0c <UART_ENSendData>
}
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	cf 91       	pop	r28
     b9c:	df 91       	pop	r29
     b9e:	08 95       	ret

00000ba0 <SER_UARTvoidReceiveString>:
 * @brief Recevie String
 * 
 * @param Str Store String in Str
 */
void SER_UARTvoidReceiveString(uint8_t *Str)
{
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	df 93       	push	r29
     ba6:	cf 93       	push	r28
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <SER_UARTvoidReceiveString+0xa>
     baa:	0f 92       	push	r0
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
     bb0:	9b 83       	std	Y+3, r25	; 0x03
     bb2:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i = 0;
     bb4:	19 82       	std	Y+1, r1	; 0x01
    Str[i] = UART_u8ReceiveData();
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	8a 81       	ldd	r24, Y+2	; 0x02
     bbe:	9b 81       	ldd	r25, Y+3	; 0x03
     bc0:	8c 01       	movw	r16, r24
     bc2:	02 0f       	add	r16, r18
     bc4:	13 1f       	adc	r17, r19
     bc6:	0e 94 30 07 	call	0xe60	; 0xe60 <UART_u8ReceiveData>
     bca:	f8 01       	movw	r30, r16
     bcc:	80 83       	st	Z, r24
     bce:	0f c0       	rjmp	.+30     	; 0xbee <SER_UARTvoidReceiveString+0x4e>
    while (Str[i] != '\r')
    {
        i++;
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	8f 5f       	subi	r24, 0xFF	; 255
     bd4:	89 83       	std	Y+1, r24	; 0x01
        Str[i] = UART_u8ReceiveData();
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	8a 81       	ldd	r24, Y+2	; 0x02
     bde:	9b 81       	ldd	r25, Y+3	; 0x03
     be0:	8c 01       	movw	r16, r24
     be2:	02 0f       	add	r16, r18
     be4:	13 1f       	adc	r17, r19
     be6:	0e 94 30 07 	call	0xe60	; 0xe60 <UART_u8ReceiveData>
     bea:	f8 01       	movw	r30, r16
     bec:	80 83       	st	Z, r24
 */
void SER_UARTvoidReceiveString(uint8_t *Str)
{
    uint8_t i = 0;
    Str[i] = UART_u8ReceiveData();
    while (Str[i] != '\r')
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	9b 81       	ldd	r25, Y+3	; 0x03
     bf8:	fc 01       	movw	r30, r24
     bfa:	e2 0f       	add	r30, r18
     bfc:	f3 1f       	adc	r31, r19
     bfe:	80 81       	ld	r24, Z
     c00:	8d 30       	cpi	r24, 0x0D	; 13
     c02:	31 f7       	brne	.-52     	; 0xbd0 <SER_UARTvoidReceiveString+0x30>
    {
        i++;
        Str[i] = UART_u8ReceiveData();
    }
    /* replace to NULL */
    Str[i] = 0;
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	28 2f       	mov	r18, r24
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	9b 81       	ldd	r25, Y+3	; 0x03
     c0e:	fc 01       	movw	r30, r24
     c10:	e2 0f       	add	r30, r18
     c12:	f3 1f       	adc	r31, r19
     c14:	10 82       	st	Z, r1
}
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	cf 91       	pop	r28
     c1e:	df 91       	pop	r29
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	08 95       	ret

00000c26 <SER_UARTvoidSendLongNum>:
 * @brief Send Number
 * 
 * @param Numb Number
 */
void SER_UARTvoidSendLongNum(uint32_t Numb)
{
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <SER_UARTvoidSendLongNum+0x6>
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <SER_UARTvoidSendLongNum+0x8>
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	69 83       	std	Y+1, r22	; 0x01
     c34:	7a 83       	std	Y+2, r23	; 0x02
     c36:	8b 83       	std	Y+3, r24	; 0x03
     c38:	9c 83       	std	Y+4, r25	; 0x04
    UART_ENSendData((uint8_t)(Numb & 0x000000FF));
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	0e 94 06 07 	call	0xe0c	; 0xe0c <UART_ENSendData>
    UART_ENSendData((uint8_t)((Numb >> 8) & 0x000000FF));
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	ab 81       	ldd	r26, Y+3	; 0x03
     c46:	bc 81       	ldd	r27, Y+4	; 0x04
     c48:	89 2f       	mov	r24, r25
     c4a:	9a 2f       	mov	r25, r26
     c4c:	ab 2f       	mov	r26, r27
     c4e:	bb 27       	eor	r27, r27
     c50:	0e 94 06 07 	call	0xe0c	; 0xe0c <UART_ENSendData>
    UART_ENSendData((uint8_t)((Numb >> 16) & 0x000000FF));
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	9a 81       	ldd	r25, Y+2	; 0x02
     c58:	ab 81       	ldd	r26, Y+3	; 0x03
     c5a:	bc 81       	ldd	r27, Y+4	; 0x04
     c5c:	cd 01       	movw	r24, r26
     c5e:	aa 27       	eor	r26, r26
     c60:	bb 27       	eor	r27, r27
     c62:	0e 94 06 07 	call	0xe0c	; 0xe0c <UART_ENSendData>
    UART_ENSendData((uint8_t)((Numb >> 24) & 0x000000FF));
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	9a 81       	ldd	r25, Y+2	; 0x02
     c6a:	ab 81       	ldd	r26, Y+3	; 0x03
     c6c:	bc 81       	ldd	r27, Y+4	; 0x04
     c6e:	8b 2f       	mov	r24, r27
     c70:	99 27       	eor	r25, r25
     c72:	aa 27       	eor	r26, r26
     c74:	bb 27       	eor	r27, r27
     c76:	0e 94 06 07 	call	0xe0c	; 0xe0c <UART_ENSendData>
}
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	cf 91       	pop	r28
     c84:	df 91       	pop	r29
     c86:	08 95       	ret

00000c88 <SER_UARTu32ReceiveLongNum>:
 * @brief Receive Number
 * 
 * @return Number
 */
uint32_t SER_UARTu32ReceiveLongNum(void)
{
     c88:	df 93       	push	r29
     c8a:	cf 93       	push	r28
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	28 97       	sbiw	r28, 0x08	; 8
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
    /* Receive 32Bit divide on 4 Times */
    uint8_t B1 = UART_u8ReceiveData();
     c9c:	0e 94 30 07 	call	0xe60	; 0xe60 <UART_u8ReceiveData>
     ca0:	88 87       	std	Y+8, r24	; 0x08
    uint8_t B2 = UART_u8ReceiveData();
     ca2:	0e 94 30 07 	call	0xe60	; 0xe60 <UART_u8ReceiveData>
     ca6:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t B3 = UART_u8ReceiveData();
     ca8:	0e 94 30 07 	call	0xe60	; 0xe60 <UART_u8ReceiveData>
     cac:	8e 83       	std	Y+6, r24	; 0x06
    uint8_t B4 = UART_u8ReceiveData();
     cae:	0e 94 30 07 	call	0xe60	; 0xe60 <UART_u8ReceiveData>
     cb2:	8d 83       	std	Y+5, r24	; 0x05

    /*  */
    uint32_t u32_Numb = B1 | ((uint32_t)B2 << 8) | ((uint32_t)B3 << 16) | ((uint32_t)B4 << 24);
     cb4:	88 85       	ldd	r24, Y+8	; 0x08
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	8f 81       	ldd	r24, Y+7	; 0x07
     cc0:	88 2f       	mov	r24, r24
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	a0 e0       	ldi	r26, 0x00	; 0
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	ba 2f       	mov	r27, r26
     cca:	a9 2f       	mov	r26, r25
     ccc:	98 2f       	mov	r25, r24
     cce:	88 27       	eor	r24, r24
     cd0:	28 2b       	or	r18, r24
     cd2:	39 2b       	or	r19, r25
     cd4:	4a 2b       	or	r20, r26
     cd6:	5b 2b       	or	r21, r27
     cd8:	8e 81       	ldd	r24, Y+6	; 0x06
     cda:	88 2f       	mov	r24, r24
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a0 e0       	ldi	r26, 0x00	; 0
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	dc 01       	movw	r26, r24
     ce4:	99 27       	eor	r25, r25
     ce6:	88 27       	eor	r24, r24
     ce8:	28 2b       	or	r18, r24
     cea:	39 2b       	or	r19, r25
     cec:	4a 2b       	or	r20, r26
     cee:	5b 2b       	or	r21, r27
     cf0:	8d 81       	ldd	r24, Y+5	; 0x05
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	a0 e0       	ldi	r26, 0x00	; 0
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	b8 2f       	mov	r27, r24
     cfc:	aa 27       	eor	r26, r26
     cfe:	99 27       	eor	r25, r25
     d00:	88 27       	eor	r24, r24
     d02:	82 2b       	or	r24, r18
     d04:	93 2b       	or	r25, r19
     d06:	a4 2b       	or	r26, r20
     d08:	b5 2b       	or	r27, r21
     d0a:	89 83       	std	Y+1, r24	; 0x01
     d0c:	9a 83       	std	Y+2, r25	; 0x02
     d0e:	ab 83       	std	Y+3, r26	; 0x03
     d10:	bc 83       	std	Y+4, r27	; 0x04

    return u32_Numb;
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	9a 81       	ldd	r25, Y+2	; 0x02
     d16:	ab 81       	ldd	r26, Y+3	; 0x03
     d18:	bc 81       	ldd	r27, Y+4	; 0x04
}
     d1a:	bc 01       	movw	r22, r24
     d1c:	cd 01       	movw	r24, r26
     d1e:	28 96       	adiw	r28, 0x08	; 8
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <UART_ENInit>:
 * @brief Initialized UART 
 * 
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENInit(void)
{
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	0f 92       	push	r0
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
    EN_ERRORSTATE_t Enstate;
    Enstate = E_OK;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	89 83       	std	Y+1, r24	; 0x01
    /* Clear  URSEL to update UBRRH*/
    CLRBIT(UCSRC, URSEL);
     d3e:	a0 e4       	ldi	r26, 0x40	; 64
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e0 e4       	ldi	r30, 0x40	; 64
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	8f 77       	andi	r24, 0x7F	; 127
     d4a:	8c 93       	st	X, r24
    /* Boud Rate */
    UBRRH = HIGHUBRR;
     d4c:	e0 e4       	ldi	r30, 0x40	; 64
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	10 82       	st	Z, r1
    UBRRL = LOWUBRR;
     d52:	e9 e2       	ldi	r30, 0x29	; 41
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	83 e3       	ldi	r24, 0x33	; 51
     d58:	80 83       	st	Z, r24
#if UART_SPEED == DOUBLE
    SETBIT(UCSRA, U2X);

/* UART NORMAL Speed */
#elif UART_SPEED == NORMAL
    CLRBIT(UCSRA, U2X);
     d5a:	ab e2       	ldi	r26, 0x2B	; 43
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	eb e2       	ldi	r30, 0x2B	; 43
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	8d 7f       	andi	r24, 0xFD	; 253
     d66:	8c 93       	st	X, r24
#endif

/* Select STOP Bit */
#if STOPBIT == _1BIT
    /* Set URSEL to update UCSRC*/
    SETBIT(UCSRC, URSEL);
     d68:	a0 e4       	ldi	r26, 0x40	; 64
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	e0 e4       	ldi	r30, 0x40	; 64
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	80 68       	ori	r24, 0x80	; 128
     d74:	8c 93       	st	X, r24
    CLRBIT(UCSRC, USBS);
     d76:	a0 e4       	ldi	r26, 0x40	; 64
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e0 e4       	ldi	r30, 0x40	; 64
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	87 7f       	andi	r24, 0xF7	; 247
     d82:	8c 93       	st	X, r24

/* Disable Parity */
#if UART_PARITY == DISABLED

    /* Set URSEL to update UCSRC*/
    SETBIT(UCSRC, URSEL);
     d84:	a0 e4       	ldi	r26, 0x40	; 64
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	e0 e4       	ldi	r30, 0x40	; 64
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	80 68       	ori	r24, 0x80	; 128
     d90:	8c 93       	st	X, r24

    CLRBIT(UCSRC, UPM0);
     d92:	a0 e4       	ldi	r26, 0x40	; 64
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	e0 e4       	ldi	r30, 0x40	; 64
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	8f 7e       	andi	r24, 0xEF	; 239
     d9e:	8c 93       	st	X, r24
    CLRBIT(UCSRC, UPM1);
     da0:	a0 e4       	ldi	r26, 0x40	; 64
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e0 e4       	ldi	r30, 0x40	; 64
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	8f 7d       	andi	r24, 0xDF	; 223
     dac:	8c 93       	st	X, r24
    CLRBIT(UCSRC, UCSZ0);
    SETBIT(UCSRC, UCSZ1);
    CLRBIT(UCSRB, UCSZ2);
#elif DATAFRAM == _8BIT
    /* Set URSEL to update UCSRC*/
    SETBIT(UCSRC, URSEL);
     dae:	a0 e4       	ldi	r26, 0x40	; 64
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e0 e4       	ldi	r30, 0x40	; 64
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	80 68       	ori	r24, 0x80	; 128
     dba:	8c 93       	st	X, r24
    SETBIT(UCSRC, UCSZ0);
     dbc:	a0 e4       	ldi	r26, 0x40	; 64
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e0 e4       	ldi	r30, 0x40	; 64
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	82 60       	ori	r24, 0x02	; 2
     dc8:	8c 93       	st	X, r24
    SETBIT(UCSRC, UCSZ1);
     dca:	a0 e4       	ldi	r26, 0x40	; 64
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e0 e4       	ldi	r30, 0x40	; 64
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	84 60       	ori	r24, 0x04	; 4
     dd6:	8c 93       	st	X, r24
    CLRBIT(UCSRB, UCSZ2);
     dd8:	aa e2       	ldi	r26, 0x2A	; 42
     dda:	b0 e0       	ldi	r27, 0x00	; 0
     ddc:	ea e2       	ldi	r30, 0x2A	; 42
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	80 81       	ld	r24, Z
     de2:	8b 7f       	andi	r24, 0xFB	; 251
     de4:	8c 93       	st	X, r24

    /**
     * @brief Receiver Enable
     * 
     */
    SETBIT(UCSRB, RXEN);
     de6:	aa e2       	ldi	r26, 0x2A	; 42
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	ea e2       	ldi	r30, 0x2A	; 42
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	80 61       	ori	r24, 0x10	; 16
     df2:	8c 93       	st	X, r24
    /**
     * @brief Transmitter Enable
     * 
     */
    SETBIT(UCSRB, TXEN);
     df4:	aa e2       	ldi	r26, 0x2A	; 42
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	ea e2       	ldi	r30, 0x2A	; 42
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	88 60       	ori	r24, 0x08	; 8
     e00:	8c 93       	st	X, r24

    return Enstate;
     e02:	89 81       	ldd	r24, Y+1	; 0x01
} /* UART_ENInit */
     e04:	0f 90       	pop	r0
     e06:	cf 91       	pop	r28
     e08:	df 91       	pop	r29
     e0a:	08 95       	ret

00000e0c <UART_ENSendData>:
 * 
 * @param Data char want to send
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENSendData(uint8_t Data)
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	0f 92       	push	r0
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	89 83       	std	Y+1, r24	; 0x01
    /* Wait to Data Register Empty */
    while (!GETBIT(UCSRA, UDRE))
     e18:	eb e2       	ldi	r30, 0x2B	; 43
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	82 95       	swap	r24
     e20:	86 95       	lsr	r24
     e22:	87 70       	andi	r24, 0x07	; 7
     e24:	88 2f       	mov	r24, r24
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	81 70       	andi	r24, 0x01	; 1
     e2a:	90 70       	andi	r25, 0x00	; 0
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	a1 f3       	breq	.-24     	; 0xe18 <UART_ENSendData+0xc>
        ;

    UDR = Data;
     e30:	ec e2       	ldi	r30, 0x2C	; 44
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	80 83       	st	Z, r24
    return E_OK;
     e38:	81 e0       	ldi	r24, 0x01	; 1
}
     e3a:	0f 90       	pop	r0
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <UART_ENSendNoBlock>:
 * 
 * @param Data char want to send
 * @return EN_ERRORSTATE_t E_OK | E_ERROR
 */
EN_ERRORSTATE_t UART_ENSendNoBlock(uint8_t Data)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	0f 92       	push	r0
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	89 83       	std	Y+1, r24	; 0x01
    UDR = Data;
     e4e:	ec e2       	ldi	r30, 0x2C	; 44
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	80 83       	st	Z, r24
    return E_OK;
     e56:	81 e0       	ldi	r24, 0x01	; 1
}
     e58:	0f 90       	pop	r0
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <UART_u8ReceiveData>:
 * @brief Receive Data From another device
 * 
 * @return uint8_t Data From Register
 */
uint8_t UART_u8ReceiveData(void)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
    while (!GETBIT(UCSRA, RXC))
     e68:	eb e2       	ldi	r30, 0x2B	; 43
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	88 23       	and	r24, r24
     e70:	dc f7       	brge	.-10     	; 0xe68 <UART_u8ReceiveData+0x8>
        ;
    return UDR;
     e72:	ec e2       	ldi	r30, 0x2C	; 44
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
}
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <UART_u8ReceiveNoBlock>:
 * 
 * @param Data 
 * @return uint8_t Data From Register
 */
uint8_t UART_u8ReceiveNoBlock(void)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
    return UDR;
     e86:	ec e2       	ldi	r30, 0x2C	; 44
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
}
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <UART_voidTXInterruptEnable>:
/**
 * @brief Enable Transmit Interrupt
 * 
 */
void UART_voidTXInterruptEnable(void)
{
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
    SETBIT(UCSRB, TXCIE);
     e9a:	aa e2       	ldi	r26, 0x2A	; 42
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	ea e2       	ldi	r30, 0x2A	; 42
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	80 64       	ori	r24, 0x40	; 64
     ea6:	8c 93       	st	X, r24
    SETBIT(SREG, I_BIT);
     ea8:	af e5       	ldi	r26, 0x5F	; 95
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	ef e5       	ldi	r30, 0x5F	; 95
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 68       	ori	r24, 0x80	; 128
     eb4:	8c 93       	st	X, r24
}
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <UART_voidRXInterruptEnable>:
/**
 * @brief Enable Receive Interrupt
 * 
 */
void UART_voidRXInterruptEnable(void)
{
     ebc:	df 93       	push	r29
     ebe:	cf 93       	push	r28
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
    SETBIT(UCSRB, RXCIE);
     ec4:	aa e2       	ldi	r26, 0x2A	; 42
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ea e2       	ldi	r30, 0x2A	; 42
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	80 68       	ori	r24, 0x80	; 128
     ed0:	8c 93       	st	X, r24
    SETBIT(SREG, I_BIT);
     ed2:	af e5       	ldi	r26, 0x5F	; 95
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e5       	ldi	r30, 0x5F	; 95
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 68       	ori	r24, 0x80	; 128
     ede:	8c 93       	st	X, r24
}
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <UART_voidTXInterruptDisable>:
/**
 * @brief Disable Transmit Interrupt
 *
 */
void UART_voidTXInterruptDisable(void)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
    CLRBIT(UCSRB, TXCIE);
     eee:	aa e2       	ldi	r26, 0x2A	; 42
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	ea e2       	ldi	r30, 0x2A	; 42
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	8f 7b       	andi	r24, 0xBF	; 191
     efa:	8c 93       	st	X, r24
    CLRBIT(SREG, I_BIT);
     efc:	af e5       	ldi	r26, 0x5F	; 95
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	ef e5       	ldi	r30, 0x5F	; 95
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	8f 77       	andi	r24, 0x7F	; 127
     f08:	8c 93       	st	X, r24
}
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <UART_voidRXInterruptDisable>:
/**
 * @brief Disable Receive Interrupt
 *
 */
void UART_voidRXInterruptDisable(void)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
    CLRBIT(UCSRB, RXCIE);
     f18:	aa e2       	ldi	r26, 0x2A	; 42
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	ea e2       	ldi	r30, 0x2A	; 42
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	8f 77       	andi	r24, 0x7F	; 127
     f24:	8c 93       	st	X, r24
    CLRBIT(SREG, I_BIT);
     f26:	af e5       	ldi	r26, 0x5F	; 95
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	ef e5       	ldi	r30, 0x5F	; 95
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	8f 77       	andi	r24, 0x7F	; 127
     f32:	8c 93       	st	X, r24
}
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <UART_voidSendString_Ashync>:
 * @brief Asynchronous Function Send 
 * 
 * @param str Data to send
 */
void UART_voidSendString_Ashync(uint8_t *str)
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	00 d0       	rcall	.+0      	; 0xf40 <UART_voidSendString_Ashync+0x6>
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	9a 83       	std	Y+2, r25	; 0x02
     f46:	89 83       	std	Y+1, r24	; 0x01
    /* Flag using For Protection if call function before string is end */
    if (gFlag == 1)
     f48:	80 91 2f 01 	lds	r24, 0x012F
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	79 f4       	brne	.+30     	; 0xf6e <UART_voidSendString_Ashync+0x34>
    {
        /* Send First Letter we bsend b2y fy ISR*/
        UART_ENSendNoBlock(str[0]);
     f50:	e9 81       	ldd	r30, Y+1	; 0x01
     f52:	fa 81       	ldd	r31, Y+2	; 0x02
     f54:	80 81       	ld	r24, Z
     f56:	0e 94 21 07 	call	0xe42	; 0xe42 <UART_ENSendNoBlock>

        /* Flag will Fired when data is Sent Then go to isr */
        UART_voidTXInterruptEnable();
     f5a:	0e 94 49 07 	call	0xe92	; 0xe92 <UART_voidTXInterruptEnable>
        gPsend_str = str;
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	9a 81       	ldd	r25, Y+2	; 0x02
     f62:	90 93 3f 01 	sts	0x013F, r25
     f66:	80 93 3e 01 	sts	0x013E, r24
        gFlag = 0;
     f6a:	10 92 2f 01 	sts	0x012F, r1
    }
}
     f6e:	0f 90       	pop	r0
     f70:	0f 90       	pop	r0
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <UART_voidReceiveString_Ashync>:
 * @brief Asynchronous Function Receive 
 * 
 * @param Str Data to Receive
 */
void UART_voidReceiveString_Ashync(uint8_t *Str)
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	00 d0       	rcall	.+0      	; 0xf7e <UART_voidReceiveString_Ashync+0x6>
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	9a 83       	std	Y+2, r25	; 0x02
     f84:	89 83       	std	Y+1, r24	; 0x01
    UART_voidRXInterruptEnable();
     f86:	0e 94 5e 07 	call	0xebc	; 0xebc <UART_voidRXInterruptEnable>
    gPrece_str = Str;
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	9a 81       	ldd	r25, Y+2	; 0x02
     f8e:	90 93 41 01 	sts	0x0141, r25
     f92:	80 93 40 01 	sts	0x0140, r24
}
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <__vector_15>:
/**
 * @brief Transmit interrupt 
 * 
 */
void __vector_15(void)
{
     fa0:	1f 92       	push	r1
     fa2:	0f 92       	push	r0
     fa4:	0f b6       	in	r0, 0x3f	; 63
     fa6:	0f 92       	push	r0
     fa8:	11 24       	eor	r1, r1
     faa:	2f 93       	push	r18
     fac:	3f 93       	push	r19
     fae:	4f 93       	push	r20
     fb0:	5f 93       	push	r21
     fb2:	6f 93       	push	r22
     fb4:	7f 93       	push	r23
     fb6:	8f 93       	push	r24
     fb8:	9f 93       	push	r25
     fba:	af 93       	push	r26
     fbc:	bf 93       	push	r27
     fbe:	ef 93       	push	r30
     fc0:	ff 93       	push	r31
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
    /* Start with Second Letter */
    /* First Letter is sent in Function Ashync */
    static uint8_t i = 1;

    if (gPsend_str[i] != '\0')
     fca:	20 91 3e 01 	lds	r18, 0x013E
     fce:	30 91 3f 01 	lds	r19, 0x013F
     fd2:	80 91 30 01 	lds	r24, 0x0130
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	f9 01       	movw	r30, r18
     fdc:	e8 0f       	add	r30, r24
     fde:	f9 1f       	adc	r31, r25
     fe0:	80 81       	ld	r24, Z
     fe2:	88 23       	and	r24, r24
     fe4:	a1 f0       	breq	.+40     	; 0x100e <__vector_15+0x6e>
    {
        UART_ENSendNoBlock(gPsend_str[i]);
     fe6:	20 91 3e 01 	lds	r18, 0x013E
     fea:	30 91 3f 01 	lds	r19, 0x013F
     fee:	80 91 30 01 	lds	r24, 0x0130
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	f9 01       	movw	r30, r18
     ff8:	e8 0f       	add	r30, r24
     ffa:	f9 1f       	adc	r31, r25
     ffc:	80 81       	ld	r24, Z
     ffe:	0e 94 21 07 	call	0xe42	; 0xe42 <UART_ENSendNoBlock>
        i++;
    1002:	80 91 30 01 	lds	r24, 0x0130
    1006:	8f 5f       	subi	r24, 0xFF	; 255
    1008:	80 93 30 01 	sts	0x0130, r24
    100c:	06 c0       	rjmp	.+12     	; 0x101a <__vector_15+0x7a>
    }
    /* String is End So start with Second Letter */
    else
    {
        i = 1;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	80 93 30 01 	sts	0x0130, r24
        gFlag = 1;
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	80 93 2f 01 	sts	0x012F, r24
    }
}
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	ff 91       	pop	r31
    1020:	ef 91       	pop	r30
    1022:	bf 91       	pop	r27
    1024:	af 91       	pop	r26
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	7f 91       	pop	r23
    102c:	6f 91       	pop	r22
    102e:	5f 91       	pop	r21
    1030:	4f 91       	pop	r20
    1032:	3f 91       	pop	r19
    1034:	2f 91       	pop	r18
    1036:	0f 90       	pop	r0
    1038:	0f be       	out	0x3f, r0	; 63
    103a:	0f 90       	pop	r0
    103c:	1f 90       	pop	r1
    103e:	18 95       	reti

00001040 <__vector_13>:
/**
 * @brief Receive interrupt
 * 
 */
void __vector_13(void)
{
    1040:	1f 92       	push	r1
    1042:	0f 92       	push	r0
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	0f 92       	push	r0
    1048:	11 24       	eor	r1, r1
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	2f 93       	push	r18
    1050:	3f 93       	push	r19
    1052:	4f 93       	push	r20
    1054:	5f 93       	push	r21
    1056:	6f 93       	push	r22
    1058:	7f 93       	push	r23
    105a:	8f 93       	push	r24
    105c:	9f 93       	push	r25
    105e:	af 93       	push	r26
    1060:	bf 93       	push	r27
    1062:	ef 93       	push	r30
    1064:	ff 93       	push	r31
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
    static uint8_t i = 0;
    gPrece_str[i] = UART_u8ReceiveNoBlock();
    106e:	20 91 40 01 	lds	r18, 0x0140
    1072:	30 91 41 01 	lds	r19, 0x0141
    1076:	80 91 42 01 	lds	r24, 0x0142
    107a:	88 2f       	mov	r24, r24
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	89 01       	movw	r16, r18
    1080:	08 0f       	add	r16, r24
    1082:	19 1f       	adc	r17, r25
    1084:	0e 94 3f 07 	call	0xe7e	; 0xe7e <UART_u8ReceiveNoBlock>
    1088:	f8 01       	movw	r30, r16
    108a:	80 83       	st	Z, r24
    if (gPrece_str[i] == '\r')
    108c:	20 91 40 01 	lds	r18, 0x0140
    1090:	30 91 41 01 	lds	r19, 0x0141
    1094:	80 91 42 01 	lds	r24, 0x0142
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	f9 01       	movw	r30, r18
    109e:	e8 0f       	add	r30, r24
    10a0:	f9 1f       	adc	r31, r25
    10a2:	80 81       	ld	r24, Z
    10a4:	8d 30       	cpi	r24, 0x0D	; 13
    10a6:	79 f4       	brne	.+30     	; 0x10c6 <__vector_13+0x86>
    {
        gPrece_str[i] = '\0'; 
    10a8:	20 91 40 01 	lds	r18, 0x0140
    10ac:	30 91 41 01 	lds	r19, 0x0141
    10b0:	80 91 42 01 	lds	r24, 0x0142
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	f9 01       	movw	r30, r18
    10ba:	e8 0f       	add	r30, r24
    10bc:	f9 1f       	adc	r31, r25
    10be:	10 82       	st	Z, r1
        i = 0;
    10c0:	10 92 42 01 	sts	0x0142, r1
    10c4:	05 c0       	rjmp	.+10     	; 0x10d0 <__vector_13+0x90>
    }
    else
    {
        i++;
    10c6:	80 91 42 01 	lds	r24, 0x0142
    10ca:	8f 5f       	subi	r24, 0xFF	; 255
    10cc:	80 93 42 01 	sts	0x0142, r24
    }

    if (i > 98)
    10d0:	80 91 42 01 	lds	r24, 0x0142
    10d4:	83 36       	cpi	r24, 0x63	; 99
    10d6:	10 f0       	brcs	.+4      	; 0x10dc <__vector_13+0x9c>
        i = 0;
    10d8:	10 92 42 01 	sts	0x0142, r1
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	ff 91       	pop	r31
    10e2:	ef 91       	pop	r30
    10e4:	bf 91       	pop	r27
    10e6:	af 91       	pop	r26
    10e8:	9f 91       	pop	r25
    10ea:	8f 91       	pop	r24
    10ec:	7f 91       	pop	r23
    10ee:	6f 91       	pop	r22
    10f0:	5f 91       	pop	r21
    10f2:	4f 91       	pop	r20
    10f4:	3f 91       	pop	r19
    10f6:	2f 91       	pop	r18
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	0f 90       	pop	r0
    10fe:	0f be       	out	0x3f, r0	; 63
    1100:	0f 90       	pop	r0
    1102:	1f 90       	pop	r1
    1104:	18 95       	reti

00001106 <SPI_VidInitMaster>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void SPI_VidInitMaster(void) 
{
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	cd b7       	in	r28, 0x3d	; 61
    110c:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	DDRB = DDRB | (1<<PB4);
    110e:	a7 e3       	ldi	r26, 0x37	; 55
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e7 e3       	ldi	r30, 0x37	; 55
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	80 61       	ori	r24, 0x10	; 16
    111a:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB5);
    111c:	a7 e3       	ldi	r26, 0x37	; 55
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e7 e3       	ldi	r30, 0x37	; 55
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	80 62       	ori	r24, 0x20	; 32
    1128:	8c 93       	st	X, r24
	DDRB = DDRB & ~(1<<PB6);
    112a:	a7 e3       	ldi	r26, 0x37	; 55
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e7 e3       	ldi	r30, 0x37	; 55
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	8f 7b       	andi	r24, 0xBF	; 191
    1136:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB7);
    1138:	a7 e3       	ldi	r26, 0x37	; 55
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e7 e3       	ldi	r30, 0x37	; 55
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	80 68       	ori	r24, 0x80	; 128
    1144:	8c 93       	st	X, r24
	
	SPCR = (1<<SPE) | (1<<MSTR); // enable SPI + enable Master + choose SPI clock = Fosc/4
    1146:	ed e2       	ldi	r30, 0x2D	; 45
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 e5       	ldi	r24, 0x50	; 80
    114c:	80 83       	st	Z, r24
}
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	08 95       	ret

00001154 <SPI_VidInitSlave>:

void SPI_VidInitSlave(void)
{ 
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	DDRB = DDRB & (~(1<<PB4));  
    115c:	a7 e3       	ldi	r26, 0x37	; 55
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e7 e3       	ldi	r30, 0x37	; 55
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	8f 7e       	andi	r24, 0xEF	; 239
    1168:	8c 93       	st	X, r24
	DDRB = DDRB & (~(1<<PB5));
    116a:	a7 e3       	ldi	r26, 0x37	; 55
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	e7 e3       	ldi	r30, 0x37	; 55
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	8f 7d       	andi	r24, 0xDF	; 223
    1176:	8c 93       	st	X, r24
	DDRB = DDRB | (1<<PB6);
    1178:	a7 e3       	ldi	r26, 0x37	; 55
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e7 e3       	ldi	r30, 0x37	; 55
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	80 64       	ori	r24, 0x40	; 64
    1184:	8c 93       	st	X, r24
	DDRB = DDRB & (~(1<<PB7));
    1186:	a7 e3       	ldi	r26, 0x37	; 55
    1188:	b0 e0       	ldi	r27, 0x00	; 0
    118a:	e7 e3       	ldi	r30, 0x37	; 55
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8f 77       	andi	r24, 0x7F	; 127
    1192:	8c 93       	st	X, r24
	SPCR = (1<<SPE); // just enable SPI + choose SPI clock = Fosc/4
    1194:	ed e2       	ldi	r30, 0x2D	; 45
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 e4       	ldi	r24, 0x40	; 64
    119a:	80 83       	st	Z, r24
}
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <SPI_VidSendByte>:

void SPI_VidSendByte( uint8_t copy_U8Data)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	0f 92       	push	r0
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
    11ac:	89 83       	std	Y+1, r24	; 0x01
	SPDR = copy_U8Data; //send data by SPI
    11ae:	ef e2       	ldi	r30, 0x2F	; 47
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	80 83       	st	Z, r24
	while (!((SPSR) & (1 << SPIF))); //wait until SPI interrupt flag=1 (data is sent correctly)
    11b6:	ee e2       	ldi	r30, 0x2E	; 46
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	88 23       	and	r24, r24
    11be:	dc f7       	brge	.-10     	; 0x11b6 <SPI_VidSendByte+0x14>
}
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <SPI_U8RecieveByte>:

uint8_t SPI_U8RecieveByte(void)
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
   while (!((SPSR) & (1 << SPIF)));//wait until SPI interrupt flag=1(data is receive correctly)
    11d0:	ee e2       	ldi	r30, 0x2E	; 46
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	88 23       	and	r24, r24
    11d8:	dc f7       	brge	.-10     	; 0x11d0 <SPI_U8RecieveByte+0x8>
   return SPDR; //return the received byte from SPI data register
    11da:	ef e2       	ldi	r30, 0x2F	; 47
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
}
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <SPI_VidSendString>:

void SPI_VidSendString( uint8_t *copy_str)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <SPI_VidSendString+0x6>
    11ec:	0f 92       	push	r0
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	9b 83       	std	Y+3, r25	; 0x03
    11f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    11f6:	19 82       	std	Y+1, r1	; 0x01
    11f8:	0e c0       	rjmp	.+28     	; 0x1216 <SPI_VidSendString+0x30>

	while(copy_str[i] != '\0')
	{

		SPI_VidSendByte(copy_str[i]);
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	9b 81       	ldd	r25, Y+3	; 0x03
    1204:	fc 01       	movw	r30, r24
    1206:	e2 0f       	add	r30, r18
    1208:	f3 1f       	adc	r31, r19
    120a:	80 81       	ld	r24, Z
    120c:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <SPI_VidSendByte>
		i++;
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	8f 5f       	subi	r24, 0xFF	; 255
    1214:	89 83       	std	Y+1, r24	; 0x01

void SPI_VidSendString( uint8_t *copy_str)
{
	uint8_t i = 0;

	while(copy_str[i] != '\0')
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	9b 81       	ldd	r25, Y+3	; 0x03
    1220:	fc 01       	movw	r30, r24
    1222:	e2 0f       	add	r30, r18
    1224:	f3 1f       	adc	r31, r19
    1226:	80 81       	ld	r24, Z
    1228:	88 23       	and	r24, r24
    122a:	39 f7       	brne	.-50     	; 0x11fa <SPI_VidSendString+0x14>

		SPI_VidSendByte(copy_str[i]);
		i++;

	}
	copy_str[i] = '\r';
    122c:	89 81       	ldd	r24, Y+1	; 0x01
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	9b 81       	ldd	r25, Y+3	; 0x03
    1236:	fc 01       	movw	r30, r24
    1238:	e2 0f       	add	r30, r18
    123a:	f3 1f       	adc	r31, r19
    123c:	8d e0       	ldi	r24, 0x0D	; 13
    123e:	80 83       	st	Z, r24
	copy_str[i+1] = '\0';
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	9c 01       	movw	r18, r24
    1248:	2f 5f       	subi	r18, 0xFF	; 255
    124a:	3f 4f       	sbci	r19, 0xFF	; 255
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	9b 81       	ldd	r25, Y+3	; 0x03
    1250:	fc 01       	movw	r30, r24
    1252:	e2 0f       	add	r30, r18
    1254:	f3 1f       	adc	r31, r19
    1256:	10 82       	st	Z, r1

}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <SPI_U8RecieveByte_admin>:


uint8_t SPI_U8RecieveByte_admin(void)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	00 d0       	rcall	.+0      	; 0x126a <SPI_U8RecieveByte_admin+0x6>
    126a:	00 d0       	rcall	.+0      	; 0x126c <SPI_U8RecieveByte_admin+0x8>
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
	uint32_t count = 0;
    1270:	19 82       	std	Y+1, r1	; 0x01
    1272:	1a 82       	std	Y+2, r1	; 0x02
    1274:	1b 82       	std	Y+3, r1	; 0x03
    1276:	1c 82       	std	Y+4, r1	; 0x04
    1278:	17 c0       	rjmp	.+46     	; 0x12a8 <SPI_U8RecieveByte_admin+0x44>

	while (!((SPSR) & (1 << SPIF)))
	{ //wait until SPI interrupt flag=1(data is receive correctly)
		if ((count == 3000000))
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	9a 81       	ldd	r25, Y+2	; 0x02
    127e:	ab 81       	ldd	r26, Y+3	; 0x03
    1280:	bc 81       	ldd	r27, Y+4	; 0x04
    1282:	80 3c       	cpi	r24, 0xC0	; 192
    1284:	26 ec       	ldi	r18, 0xC6	; 198
    1286:	92 07       	cpc	r25, r18
    1288:	2d e2       	ldi	r18, 0x2D	; 45
    128a:	a2 07       	cpc	r26, r18
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	b2 07       	cpc	r27, r18
    1290:	81 f0       	breq	.+32     	; 0x12b2 <SPI_U8RecieveByte_admin+0x4e>

			break;
		}
		else
		{
			count++;
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	9a 81       	ldd	r25, Y+2	; 0x02
    1296:	ab 81       	ldd	r26, Y+3	; 0x03
    1298:	bc 81       	ldd	r27, Y+4	; 0x04
    129a:	01 96       	adiw	r24, 0x01	; 1
    129c:	a1 1d       	adc	r26, r1
    129e:	b1 1d       	adc	r27, r1
    12a0:	89 83       	std	Y+1, r24	; 0x01
    12a2:	9a 83       	std	Y+2, r25	; 0x02
    12a4:	ab 83       	std	Y+3, r26	; 0x03
    12a6:	bc 83       	std	Y+4, r27	; 0x04

uint8_t SPI_U8RecieveByte_admin(void)
{
	uint32_t count = 0;

	while (!((SPSR) & (1 << SPIF)))
    12a8:	ee e2       	ldi	r30, 0x2E	; 46
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	88 23       	and	r24, r24
    12b0:	24 f7       	brge	.-56     	; 0x127a <SPI_U8RecieveByte_admin+0x16>
		else
		{
			count++;
		}
	}
	return SPDR; //return the received byte from SPI data register
    12b2:	ef e2       	ldi	r30, 0x2F	; 47
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <SPI_VidRecieveString>:

void SPI_VidRecieveString(uint8_t *copy_str)
{
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	00 d0       	rcall	.+0      	; 0x12d0 <SPI_VidRecieveString+0xa>
    12d0:	0f 92       	push	r0
    12d2:	cd b7       	in	r28, 0x3d	; 61
    12d4:	de b7       	in	r29, 0x3e	; 62
    12d6:	9b 83       	std	Y+3, r25	; 0x03
    12d8:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i = 0;
    12da:	19 82       	std	Y+1, r1	; 0x01
	copy_str[i] = SPI_U8RecieveByte();
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	9b 81       	ldd	r25, Y+3	; 0x03
    12e6:	8c 01       	movw	r16, r24
    12e8:	02 0f       	add	r16, r18
    12ea:	13 1f       	adc	r17, r19
    12ec:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <SPI_U8RecieveByte>
    12f0:	f8 01       	movw	r30, r16
    12f2:	80 83       	st	Z, r24
    12f4:	0f c0       	rjmp	.+30     	; 0x1314 <SPI_VidRecieveString+0x4e>
	while(copy_str[i] != '\r')
	{
		i++;
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	8f 5f       	subi	r24, 0xFF	; 255
    12fa:	89 83       	std	Y+1, r24	; 0x01
		copy_str[i] = SPI_U8RecieveByte();
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	9b 81       	ldd	r25, Y+3	; 0x03
    1306:	8c 01       	movw	r16, r24
    1308:	02 0f       	add	r16, r18
    130a:	13 1f       	adc	r17, r19
    130c:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <SPI_U8RecieveByte>
    1310:	f8 01       	movw	r30, r16
    1312:	80 83       	st	Z, r24

void SPI_VidRecieveString(uint8_t *copy_str)
{
	unsigned char i = 0;
	copy_str[i] = SPI_U8RecieveByte();
	while(copy_str[i] != '\r')
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	9b 81       	ldd	r25, Y+3	; 0x03
    131e:	fc 01       	movw	r30, r24
    1320:	e2 0f       	add	r30, r18
    1322:	f3 1f       	adc	r31, r19
    1324:	80 81       	ld	r24, Z
    1326:	8d 30       	cpi	r24, 0x0D	; 13
    1328:	31 f7       	brne	.-52     	; 0x12f6 <SPI_VidRecieveString+0x30>
	{
		i++;
		copy_str[i] = SPI_U8RecieveByte();
	}
	copy_str[i] = '\0';
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	9b 81       	ldd	r25, Y+3	; 0x03
    1334:	fc 01       	movw	r30, r24
    1336:	e2 0f       	add	r30, r18
    1338:	f3 1f       	adc	r31, r19
    133a:	10 82       	st	Z, r1
}
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	08 95       	ret

0000134c <I2C_MasterInit>:

//#include "I2C_Private.h"

//#include <util/delay.h>

void I2C_MasterInit(void){
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	cd b7       	in	r28, 0x3d	; 61
    1352:	de b7       	in	r29, 0x3e	; 62
	// prescaler =1
		CLRBIT(TWSR,0);
    1354:	a1 e2       	ldi	r26, 0x21	; 33
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	e1 e2       	ldi	r30, 0x21	; 33
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8e 7f       	andi	r24, 0xFE	; 254
    1360:	8c 93       	st	X, r24
		CLRBIT(TWSR,1);
    1362:	a1 e2       	ldi	r26, 0x21	; 33
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e1 e2       	ldi	r30, 0x21	; 33
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	8d 7f       	andi	r24, 0xFD	; 253
    136e:	8c 93       	st	X, r24
		TWBR=32;//400khz
    1370:	e0 e2       	ldi	r30, 0x20	; 32
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 e2       	ldi	r24, 0x20	; 32
    1376:	80 83       	st	Z, r24
		//SETBIT(TWCR,6);// enable ACK

		SETBIT(TWCR,2);// enable
    1378:	a6 e5       	ldi	r26, 0x56	; 86
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e6 e5       	ldi	r30, 0x56	; 86
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	84 60       	ori	r24, 0x04	; 4
    1384:	8c 93       	st	X, r24

		TWAR=0b00000111;
    1386:	e2 e2       	ldi	r30, 0x22	; 34
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	87 e0       	ldi	r24, 0x07	; 7
    138c:	80 83       	st	Z, r24



}
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <I2C_MasterStart>:
void I2C_MasterStart(void){
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62

	SETBIT(TWCR,5);// enable start bit
    139c:	a6 e5       	ldi	r26, 0x56	; 86
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e6 e5       	ldi	r30, 0x56	; 86
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	80 62       	ori	r24, 0x20	; 32
    13a8:	8c 93       	st	X, r24
	SETBIT(TWCR,7);// clear flag
    13aa:	a6 e5       	ldi	r26, 0x56	; 86
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e6 e5       	ldi	r30, 0x56	; 86
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	80 68       	ori	r24, 0x80	; 128
    13b6:	8c 93       	st	X, r24

	while(GETBIT(TWCR,7)==0);
    13b8:	e6 e5       	ldi	r30, 0x56	; 86
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	88 23       	and	r24, r24
    13c0:	dc f7       	brge	.-10     	; 0x13b8 <I2C_MasterStart+0x24>

}
    13c2:	cf 91       	pop	r28
    13c4:	df 91       	pop	r29
    13c6:	08 95       	ret

000013c8 <I2C_SlaveInit>:


void I2C_SlaveInit(void){
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
	TWBR=32;//400khz
    13d0:	e0 e2       	ldi	r30, 0x20	; 32
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 e2       	ldi	r24, 0x20	; 32
    13d6:	80 83       	st	Z, r24


	TWAR=0b00000010;
    13d8:	e2 e2       	ldi	r30, 0x22	; 34
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	80 83       	st	Z, r24
	SETBIT(TWCR,6);// enable ack
    13e0:	a6 e5       	ldi	r26, 0x56	; 86
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e6 e5       	ldi	r30, 0x56	; 86
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	80 64       	ori	r24, 0x40	; 64
    13ec:	8c 93       	st	X, r24

	SETBIT(TWCR,2);// enable i2c
    13ee:	a6 e5       	ldi	r26, 0x56	; 86
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e6 e5       	ldi	r30, 0x56	; 86
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	84 60       	ori	r24, 0x04	; 4
    13fa:	8c 93       	st	X, r24

	//SETBIT(TWCR,7);// clear flag
	//while(GETBIT(TWCR,7)==0);


	I2C_ReadDataByte();
    13fc:	0e 94 6f 0a 	call	0x14de	; 0x14de <I2C_ReadDataByte>


}
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <I2C_SendSlaveAddressWithWrite>:

void I2C_SendSlaveAddressWithWrite(uint8_t address){
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	0f 92       	push	r0
    140c:	cd b7       	in	r28, 0x3d	; 61
    140e:	de b7       	in	r29, 0x3e	; 62
    1410:	89 83       	std	Y+1, r24	; 0x01
	TWDR=(address<<1);
    1412:	e3 e2       	ldi	r30, 0x23	; 35
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	88 0f       	add	r24, r24
    141a:	80 83       	st	Z, r24
	/* Write operation */
		CLRBIT(TWDR,0);
    141c:	a3 e2       	ldi	r26, 0x23	; 35
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e3 e2       	ldi	r30, 0x23	; 35
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	8e 7f       	andi	r24, 0xFE	; 254
    1428:	8c 93       	st	X, r24
			CLRBIT(TWCR,5);// clear start bit
    142a:	a6 e5       	ldi	r26, 0x56	; 86
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e6 e5       	ldi	r30, 0x56	; 86
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8f 7d       	andi	r24, 0xDF	; 223
    1436:	8c 93       	st	X, r24
			SETBIT(TWCR,7);// clear flag
    1438:	a6 e5       	ldi	r26, 0x56	; 86
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e6 e5       	ldi	r30, 0x56	; 86
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	80 68       	ori	r24, 0x80	; 128
    1444:	8c 93       	st	X, r24
			while(GETBIT(TWCR,7)==0);
    1446:	e6 e5       	ldi	r30, 0x56	; 86
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	88 23       	and	r24, r24
    144e:	dc f7       	brge	.-10     	; 0x1446 <I2C_SendSlaveAddressWithWrite+0x40>
}
    1450:	0f 90       	pop	r0
    1452:	cf 91       	pop	r28
    1454:	df 91       	pop	r29
    1456:	08 95       	ret

00001458 <I2C_SendSlaveAddressWithRead>:

void I2C_SendSlaveAddressWithRead(uint8_t address){
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	0f 92       	push	r0
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	89 83       	std	Y+1, r24	; 0x01
	TWDR=(address<<1);
    1464:	e3 e2       	ldi	r30, 0x23	; 35
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	88 0f       	add	r24, r24
    146c:	80 83       	st	Z, r24
	SETBIT(TWDR,0);// read
    146e:	a3 e2       	ldi	r26, 0x23	; 35
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e3 e2       	ldi	r30, 0x23	; 35
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	81 60       	ori	r24, 0x01	; 1
    147a:	8c 93       	st	X, r24

	CLRBIT(TWCR,5);// clear start bit
    147c:	a6 e5       	ldi	r26, 0x56	; 86
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e6 e5       	ldi	r30, 0x56	; 86
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	8f 7d       	andi	r24, 0xDF	; 223
    1488:	8c 93       	st	X, r24
	SETBIT(TWCR,7);// clear flag
    148a:	a6 e5       	ldi	r26, 0x56	; 86
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e6 e5       	ldi	r30, 0x56	; 86
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	80 68       	ori	r24, 0x80	; 128
    1496:	8c 93       	st	X, r24
	while(GETBIT(TWCR,7)==0);
    1498:	e6 e5       	ldi	r30, 0x56	; 86
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	88 23       	and	r24, r24
    14a0:	dc f7       	brge	.-10     	; 0x1498 <I2C_SendSlaveAddressWithRead+0x40>
}
    14a2:	0f 90       	pop	r0
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <I2C_WriteDataByte>:

void I2C_WriteDataByte(uint8_t data){
    14aa:	df 93       	push	r29
    14ac:	cf 93       	push	r28
    14ae:	0f 92       	push	r0
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	89 83       	std	Y+1, r24	; 0x01

TWDR=data;
    14b6:	e3 e2       	ldi	r30, 0x23	; 35
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	80 83       	st	Z, r24
SETBIT(TWCR,7);// clear flag
    14be:	a6 e5       	ldi	r26, 0x56	; 86
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e6 e5       	ldi	r30, 0x56	; 86
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	80 68       	ori	r24, 0x80	; 128
    14ca:	8c 93       	st	X, r24
while(GETBIT(TWCR,7)==0);
    14cc:	e6 e5       	ldi	r30, 0x56	; 86
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	88 23       	and	r24, r24
    14d4:	dc f7       	brge	.-10     	; 0x14cc <I2C_WriteDataByte+0x22>

}
    14d6:	0f 90       	pop	r0
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <I2C_ReadDataByte>:
uint8_t I2C_ReadDataByte(void){
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	0f 92       	push	r0
    14e4:	cd b7       	in	r28, 0x3d	; 61
    14e6:	de b7       	in	r29, 0x3e	; 62
	uint8_t value;
SETBIT(TWCR,7);// clear flag
    14e8:	a6 e5       	ldi	r26, 0x56	; 86
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	e6 e5       	ldi	r30, 0x56	; 86
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	80 68       	ori	r24, 0x80	; 128
    14f4:	8c 93       	st	X, r24
while(GETBIT(TWCR,7)==0);
    14f6:	e6 e5       	ldi	r30, 0x56	; 86
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	88 23       	and	r24, r24
    14fe:	dc f7       	brge	.-10     	; 0x14f6 <I2C_ReadDataByte+0x18>

value=TWDR;
    1500:	e3 e2       	ldi	r30, 0x23	; 35
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	89 83       	std	Y+1, r24	; 0x01
return value;
    1508:	89 81       	ldd	r24, Y+1	; 0x01
}
    150a:	0f 90       	pop	r0
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <I2C_MasterStop>:
void I2C_MasterStop(void){
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62

	SETBIT(TWCR,4);// enable stop bit
    151a:	a6 e5       	ldi	r26, 0x56	; 86
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e6 e5       	ldi	r30, 0x56	; 86
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	80 61       	ori	r24, 0x10	; 16
    1526:	8c 93       	st	X, r24
	SETBIT(TWCR,2);// enable i2c bit
    1528:	a6 e5       	ldi	r26, 0x56	; 86
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e6 e5       	ldi	r30, 0x56	; 86
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	84 60       	ori	r24, 0x04	; 4
    1534:	8c 93       	st	X, r24

	SETBIT(TWCR,7);// clear flag
    1536:	a6 e5       	ldi	r26, 0x56	; 86
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e6 e5       	ldi	r30, 0x56	; 86
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 68       	ori	r24, 0x80	; 128
    1542:	8c 93       	st	X, r24



}
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <EXTI_ENEnable>:
 * 
 * @param Interrupt EXTI_INT0 | EXTI_INT1 | EXTI_INT2
 * @return EN_ERRORSTATE_t 
 */
EN_EXTIERRORSTATE_t EXTI_ENEnable(EN_EXTI_t Interrupt)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	00 d0       	rcall	.+0      	; 0x1550 <EXTI_ENEnable+0x6>
    1550:	00 d0       	rcall	.+0      	; 0x1552 <EXTI_ENEnable+0x8>
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	8a 83       	std	Y+2, r24	; 0x02
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    1558:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	3c 83       	std	Y+4, r19	; 0x04
    1562:	2b 83       	std	Y+3, r18	; 0x03
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	91 05       	cpc	r25, r1
    156c:	c1 f0       	breq	.+48     	; 0x159e <EXTI_ENEnable+0x54>
    156e:	2b 81       	ldd	r18, Y+3	; 0x03
    1570:	3c 81       	ldd	r19, Y+4	; 0x04
    1572:	22 30       	cpi	r18, 0x02	; 2
    1574:	31 05       	cpc	r19, r1
    1576:	11 f1       	breq	.+68     	; 0x15bc <EXTI_ENEnable+0x72>
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	00 97       	sbiw	r24, 0x00	; 0
    157e:	69 f5       	brne	.+90     	; 0x15da <EXTI_ENEnable+0x90>
	{
	case EXTI_INT0:
		SETBIT(GICR, INT0);
    1580:	ab e5       	ldi	r26, 0x5B	; 91
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	eb e5       	ldi	r30, 0x5B	; 91
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	80 64       	ori	r24, 0x40	; 64
    158c:	8c 93       	st	X, r24
		SETBIT(SREG, I_BIT);
    158e:	af e5       	ldi	r26, 0x5F	; 95
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	ef e5       	ldi	r30, 0x5F	; 95
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	80 68       	ori	r24, 0x80	; 128
    159a:	8c 93       	st	X, r24
    159c:	20 c0       	rjmp	.+64     	; 0x15de <EXTI_ENEnable+0x94>
		break;
	case EXTI_INT1:
		SETBIT(GICR, INT1);
    159e:	ab e5       	ldi	r26, 0x5B	; 91
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	eb e5       	ldi	r30, 0x5B	; 91
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	80 68       	ori	r24, 0x80	; 128
    15aa:	8c 93       	st	X, r24
		SETBIT(SREG, I_BIT);
    15ac:	af e5       	ldi	r26, 0x5F	; 95
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	ef e5       	ldi	r30, 0x5F	; 95
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	80 68       	ori	r24, 0x80	; 128
    15b8:	8c 93       	st	X, r24
    15ba:	11 c0       	rjmp	.+34     	; 0x15de <EXTI_ENEnable+0x94>
		break;
	case EXTI_INT2:
		SETBIT(GICR, INT2);
    15bc:	ab e5       	ldi	r26, 0x5B	; 91
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	eb e5       	ldi	r30, 0x5B	; 91
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	80 62       	ori	r24, 0x20	; 32
    15c8:	8c 93       	st	X, r24
		SETBIT(SREG, I_BIT);
    15ca:	af e5       	ldi	r26, 0x5F	; 95
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	ef e5       	ldi	r30, 0x5F	; 95
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	80 68       	ori	r24, 0x80	; 128
    15d6:	8c 93       	st	X, r24
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <EXTI_ENEnable+0x94>
		break;
	default:
		state = E_EXT_ERROR;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    15de:	89 81       	ldd	r24, Y+1	; 0x01
}
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <EXTI_ENisable>:

EN_EXTIERRORSTATE_t EXTI_ENisable(EN_EXTI_t Interrupt)
{
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <EXTI_ENisable+0x6>
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <EXTI_ENisable+0x8>
    15f6:	cd b7       	in	r28, 0x3d	; 61
    15f8:	de b7       	in	r29, 0x3e	; 62
    15fa:	8a 83       	std	Y+2, r24	; 0x02
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    15fc:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	3c 83       	std	Y+4, r19	; 0x04
    1606:	2b 83       	std	Y+3, r18	; 0x03
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	81 30       	cpi	r24, 0x01	; 1
    160e:	91 05       	cpc	r25, r1
    1610:	c1 f0       	breq	.+48     	; 0x1642 <EXTI_ENisable+0x54>
    1612:	2b 81       	ldd	r18, Y+3	; 0x03
    1614:	3c 81       	ldd	r19, Y+4	; 0x04
    1616:	22 30       	cpi	r18, 0x02	; 2
    1618:	31 05       	cpc	r19, r1
    161a:	11 f1       	breq	.+68     	; 0x1660 <EXTI_ENisable+0x72>
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	9c 81       	ldd	r25, Y+4	; 0x04
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	69 f5       	brne	.+90     	; 0x167e <EXTI_ENisable+0x90>
	{
	case EXTI_INT0:
		CLRBIT(GICR, INT0);
    1624:	ab e5       	ldi	r26, 0x5B	; 91
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	eb e5       	ldi	r30, 0x5B	; 91
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	8f 7b       	andi	r24, 0xBF	; 191
    1630:	8c 93       	st	X, r24
		CLRBIT(SREG, I_BIT);
    1632:	af e5       	ldi	r26, 0x5F	; 95
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ef e5       	ldi	r30, 0x5F	; 95
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	8f 77       	andi	r24, 0x7F	; 127
    163e:	8c 93       	st	X, r24
    1640:	20 c0       	rjmp	.+64     	; 0x1682 <EXTI_ENisable+0x94>
		break;
	case EXTI_INT1:
		CLRBIT(GICR, INT1);
    1642:	ab e5       	ldi	r26, 0x5B	; 91
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	eb e5       	ldi	r30, 0x5B	; 91
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	8f 77       	andi	r24, 0x7F	; 127
    164e:	8c 93       	st	X, r24
		CLRBIT(SREG, I_BIT);
    1650:	af e5       	ldi	r26, 0x5F	; 95
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	ef e5       	ldi	r30, 0x5F	; 95
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	8f 77       	andi	r24, 0x7F	; 127
    165c:	8c 93       	st	X, r24
    165e:	11 c0       	rjmp	.+34     	; 0x1682 <EXTI_ENisable+0x94>
		break;
	case EXTI_INT2:
		CLRBIT(GICR, INT2);
    1660:	ab e5       	ldi	r26, 0x5B	; 91
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	eb e5       	ldi	r30, 0x5B	; 91
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8f 7d       	andi	r24, 0xDF	; 223
    166c:	8c 93       	st	X, r24
		CLRBIT(SREG, I_BIT);
    166e:	af e5       	ldi	r26, 0x5F	; 95
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	ef e5       	ldi	r30, 0x5F	; 95
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	8f 77       	andi	r24, 0x7F	; 127
    167a:	8c 93       	st	X, r24
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <EXTI_ENisable+0x94>
		break;
	default:
		state = E_EXT_ERROR;
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    1682:	89 81       	ldd	r24, Y+1	; 0x01
} /* EXTI_voidDisable */
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	cf 91       	pop	r28
    168e:	df 91       	pop	r29
    1690:	08 95       	ret

00001692 <EXTI_ENTriggerEdge>:

EN_EXTIERRORSTATE_t EXTI_ENTriggerEdge(EN_EXTI_t Interrupt, EN_TriggerEdge_t Edge)
{
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	29 97       	sbiw	r28, 0x09	; 9
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	f8 94       	cli
    16a0:	de bf       	out	0x3e, r29	; 62
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	cd bf       	out	0x3d, r28	; 61
    16a6:	8a 83       	std	Y+2, r24	; 0x02
    16a8:	6b 83       	std	Y+3, r22	; 0x03
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    16aa:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	39 87       	std	Y+9, r19	; 0x09
    16b4:	28 87       	std	Y+8, r18	; 0x08
    16b6:	88 85       	ldd	r24, Y+8	; 0x08
    16b8:	99 85       	ldd	r25, Y+9	; 0x09
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	91 05       	cpc	r25, r1
    16be:	d9 f0       	breq	.+54     	; 0x16f6 <EXTI_ENTriggerEdge+0x64>
    16c0:	28 85       	ldd	r18, Y+8	; 0x08
    16c2:	39 85       	ldd	r19, Y+9	; 0x09
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	09 f4       	brne	.+2      	; 0x16cc <EXTI_ENTriggerEdge+0x3a>
    16ca:	73 c0       	rjmp	.+230    	; 0x17b2 <EXTI_ENTriggerEdge+0x120>
    16cc:	88 85       	ldd	r24, Y+8	; 0x08
    16ce:	99 85       	ldd	r25, Y+9	; 0x09
    16d0:	00 97       	sbiw	r24, 0x00	; 0
    16d2:	09 f0       	breq	.+2      	; 0x16d6 <EXTI_ENTriggerEdge+0x44>
    16d4:	91 c0       	rjmp	.+290    	; 0x17f8 <EXTI_ENTriggerEdge+0x166>
	{
	case EXTI_INT0:
		MCUCR &= 0xFC;
    16d6:	a5 e5       	ldi	r26, 0x55	; 85
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	e5 e5       	ldi	r30, 0x55	; 85
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8c 7f       	andi	r24, 0xFC	; 252
    16e2:	8c 93       	st	X, r24
		MCUCR |= Edge;
    16e4:	a5 e5       	ldi	r26, 0x55	; 85
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e5 e5       	ldi	r30, 0x55	; 85
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	90 81       	ld	r25, Z
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	89 2b       	or	r24, r25
    16f2:	8c 93       	st	X, r24
    16f4:	83 c0       	rjmp	.+262    	; 0x17fc <EXTI_ENTriggerEdge+0x16a>
		break;
	case EXTI_INT1:
		switch (Edge)
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	3f 83       	std	Y+7, r19	; 0x07
    16fe:	2e 83       	std	Y+6, r18	; 0x06
    1700:	8e 81       	ldd	r24, Y+6	; 0x06
    1702:	9f 81       	ldd	r25, Y+7	; 0x07
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	91 05       	cpc	r25, r1
    1708:	21 f1       	breq	.+72     	; 0x1752 <EXTI_ENTriggerEdge+0xc0>
    170a:	2e 81       	ldd	r18, Y+6	; 0x06
    170c:	3f 81       	ldd	r19, Y+7	; 0x07
    170e:	22 30       	cpi	r18, 0x02	; 2
    1710:	31 05       	cpc	r19, r1
    1712:	2c f4       	brge	.+10     	; 0x171e <EXTI_ENTriggerEdge+0x8c>
    1714:	8e 81       	ldd	r24, Y+6	; 0x06
    1716:	9f 81       	ldd	r25, Y+7	; 0x07
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	61 f0       	breq	.+24     	; 0x1734 <EXTI_ENTriggerEdge+0xa2>
    171c:	47 c0       	rjmp	.+142    	; 0x17ac <EXTI_ENTriggerEdge+0x11a>
    171e:	2e 81       	ldd	r18, Y+6	; 0x06
    1720:	3f 81       	ldd	r19, Y+7	; 0x07
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	21 f1       	breq	.+72     	; 0x1770 <EXTI_ENTriggerEdge+0xde>
    1728:	8e 81       	ldd	r24, Y+6	; 0x06
    172a:	9f 81       	ldd	r25, Y+7	; 0x07
    172c:	83 30       	cpi	r24, 0x03	; 3
    172e:	91 05       	cpc	r25, r1
    1730:	71 f1       	breq	.+92     	; 0x178e <EXTI_ENTriggerEdge+0xfc>
    1732:	3c c0       	rjmp	.+120    	; 0x17ac <EXTI_ENTriggerEdge+0x11a>
		{
		case LOW_LEVEL:
			CLRBIT(MCUCR, ISC10);
    1734:	a5 e5       	ldi	r26, 0x55	; 85
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e5 e5       	ldi	r30, 0x55	; 85
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	8b 7f       	andi	r24, 0xFB	; 251
    1740:	8c 93       	st	X, r24
			CLRBIT(MCUCR, ISC11);
    1742:	a5 e5       	ldi	r26, 0x55	; 85
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e5 e5       	ldi	r30, 0x55	; 85
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	87 7f       	andi	r24, 0xF7	; 247
    174e:	8c 93       	st	X, r24
    1750:	55 c0       	rjmp	.+170    	; 0x17fc <EXTI_ENTriggerEdge+0x16a>
			break;
		case ANY_LOGIC_CHANGE:
			SETBIT(MCUCR, ISC10);
    1752:	a5 e5       	ldi	r26, 0x55	; 85
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e5 e5       	ldi	r30, 0x55	; 85
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	84 60       	ori	r24, 0x04	; 4
    175e:	8c 93       	st	X, r24
			CLRBIT(MCUCR, ISC11);
    1760:	a5 e5       	ldi	r26, 0x55	; 85
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e5 e5       	ldi	r30, 0x55	; 85
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	87 7f       	andi	r24, 0xF7	; 247
    176c:	8c 93       	st	X, r24
    176e:	46 c0       	rjmp	.+140    	; 0x17fc <EXTI_ENTriggerEdge+0x16a>
			break;
		case FALLING_EDGE:
			CLRBIT(MCUCR, ISC10);
    1770:	a5 e5       	ldi	r26, 0x55	; 85
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e5 e5       	ldi	r30, 0x55	; 85
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	80 81       	ld	r24, Z
    177a:	8b 7f       	andi	r24, 0xFB	; 251
    177c:	8c 93       	st	X, r24
			SETBIT(MCUCR, ISC11);
    177e:	a5 e5       	ldi	r26, 0x55	; 85
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e5 e5       	ldi	r30, 0x55	; 85
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	88 60       	ori	r24, 0x08	; 8
    178a:	8c 93       	st	X, r24
    178c:	37 c0       	rjmp	.+110    	; 0x17fc <EXTI_ENTriggerEdge+0x16a>
			break;
		case RISING_EDGE:
			SETBIT(MCUCR, ISC10);
    178e:	a5 e5       	ldi	r26, 0x55	; 85
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e5 e5       	ldi	r30, 0x55	; 85
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	84 60       	ori	r24, 0x04	; 4
    179a:	8c 93       	st	X, r24
			SETBIT(MCUCR, ISC11);
    179c:	a5 e5       	ldi	r26, 0x55	; 85
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e5 e5       	ldi	r30, 0x55	; 85
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	88 60       	ori	r24, 0x08	; 8
    17a8:	8c 93       	st	X, r24
    17aa:	28 c0       	rjmp	.+80     	; 0x17fc <EXTI_ENTriggerEdge+0x16a>
			break;
		default:
			state = E_EXT_ERROR;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	25 c0       	rjmp	.+74     	; 0x17fc <EXTI_ENTriggerEdge+0x16a>
			break;
		}
		break;
	case EXTI_INT2:
		switch (Edge)
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	28 2f       	mov	r18, r24
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	3d 83       	std	Y+5, r19	; 0x05
    17ba:	2c 83       	std	Y+4, r18	; 0x04
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	9d 81       	ldd	r25, Y+5	; 0x05
    17c0:	82 30       	cpi	r24, 0x02	; 2
    17c2:	91 05       	cpc	r25, r1
    17c4:	31 f0       	breq	.+12     	; 0x17d2 <EXTI_ENTriggerEdge+0x140>
    17c6:	2c 81       	ldd	r18, Y+4	; 0x04
    17c8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ca:	23 30       	cpi	r18, 0x03	; 3
    17cc:	31 05       	cpc	r19, r1
    17ce:	49 f0       	breq	.+18     	; 0x17e2 <EXTI_ENTriggerEdge+0x150>
    17d0:	10 c0       	rjmp	.+32     	; 0x17f2 <EXTI_ENTriggerEdge+0x160>
		{
		case FALLING_EDGE:
			CLRBIT(MCUCSR, ISC2);
    17d2:	a4 e5       	ldi	r26, 0x54	; 84
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e4 e5       	ldi	r30, 0x54	; 84
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	8f 7b       	andi	r24, 0xBF	; 191
    17de:	8c 93       	st	X, r24
    17e0:	0d c0       	rjmp	.+26     	; 0x17fc <EXTI_ENTriggerEdge+0x16a>
			break;
		case RISING_EDGE:
			SETBIT(MCUCSR, ISC2);
    17e2:	a4 e5       	ldi	r26, 0x54	; 84
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e4 e5       	ldi	r30, 0x54	; 84
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	80 64       	ori	r24, 0x40	; 64
    17ee:	8c 93       	st	X, r24
    17f0:	05 c0       	rjmp	.+10     	; 0x17fc <EXTI_ENTriggerEdge+0x16a>
			break;
		default:
			state = E_EXT_ERROR;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	89 83       	std	Y+1, r24	; 0x01
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <EXTI_ENTriggerEdge+0x16a>
			break;
		}
		break;

	default:
		state = E_EXT_ERROR;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
} /* EXTI_voidTriggerEdge */
    17fe:	29 96       	adiw	r28, 0x09	; 9
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <EXTI_SetCallBack>:

EN_EXTIERRORSTATE_t EXTI_SetCallBack(EN_EXTI_t Interrupt, void (*LocalPtr)(void))
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <EXTI_SetCallBack+0x6>
    1816:	00 d0       	rcall	.+0      	; 0x1818 <EXTI_SetCallBack+0x8>
    1818:	00 d0       	rcall	.+0      	; 0x181a <EXTI_SetCallBack+0xa>
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	8a 83       	std	Y+2, r24	; 0x02
    1820:	7c 83       	std	Y+4, r23	; 0x04
    1822:	6b 83       	std	Y+3, r22	; 0x03
	EN_EXTIERRORSTATE_t state;
	state = E_EXT_OK;
    1824:	19 82       	std	Y+1, r1	; 0x01

	switch (Interrupt)
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	3e 83       	std	Y+6, r19	; 0x06
    182e:	2d 83       	std	Y+5, r18	; 0x05
    1830:	8d 81       	ldd	r24, Y+5	; 0x05
    1832:	9e 81       	ldd	r25, Y+6	; 0x06
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	91 05       	cpc	r25, r1
    1838:	81 f0       	breq	.+32     	; 0x185a <EXTI_SetCallBack+0x4a>
    183a:	2d 81       	ldd	r18, Y+5	; 0x05
    183c:	3e 81       	ldd	r19, Y+6	; 0x06
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	91 f0       	breq	.+36     	; 0x1868 <EXTI_SetCallBack+0x58>
    1844:	8d 81       	ldd	r24, Y+5	; 0x05
    1846:	9e 81       	ldd	r25, Y+6	; 0x06
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	a9 f4       	brne	.+42     	; 0x1876 <EXTI_SetCallBack+0x66>
	{
	case EXTI_INT0:
		EXTI_INT0_FPtr = LocalPtr;
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	9c 81       	ldd	r25, Y+4	; 0x04
    1850:	90 93 44 01 	sts	0x0144, r25
    1854:	80 93 43 01 	sts	0x0143, r24
    1858:	10 c0       	rjmp	.+32     	; 0x187a <EXTI_SetCallBack+0x6a>
		break;
	case EXTI_INT1:
		EXTI_INT1_FPtr = LocalPtr;
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	90 93 46 01 	sts	0x0146, r25
    1862:	80 93 45 01 	sts	0x0145, r24
    1866:	09 c0       	rjmp	.+18     	; 0x187a <EXTI_SetCallBack+0x6a>
		break;
	case EXTI_INT2:
		EXTI_INT2_FPtr = LocalPtr;
    1868:	8b 81       	ldd	r24, Y+3	; 0x03
    186a:	9c 81       	ldd	r25, Y+4	; 0x04
    186c:	90 93 48 01 	sts	0x0148, r25
    1870:	80 93 47 01 	sts	0x0147, r24
    1874:	02 c0       	rjmp	.+4      	; 0x187a <EXTI_SetCallBack+0x6a>
		break;
	default:
		state = E_EXT_ERROR;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return state;
    187a:	89 81       	ldd	r24, Y+1	; 0x01

} /* EXTI_SetCallBack */
    187c:	26 96       	adiw	r28, 0x06	; 6
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <__vector_1>:

void __vector_1(void)
{
    188e:	1f 92       	push	r1
    1890:	0f 92       	push	r0
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	0f 92       	push	r0
    1896:	11 24       	eor	r1, r1
    1898:	2f 93       	push	r18
    189a:	3f 93       	push	r19
    189c:	4f 93       	push	r20
    189e:	5f 93       	push	r21
    18a0:	6f 93       	push	r22
    18a2:	7f 93       	push	r23
    18a4:	8f 93       	push	r24
    18a6:	9f 93       	push	r25
    18a8:	af 93       	push	r26
    18aa:	bf 93       	push	r27
    18ac:	ef 93       	push	r30
    18ae:	ff 93       	push	r31
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_INT0_FPtr != NULLPTR)
    18b8:	80 91 43 01 	lds	r24, 0x0143
    18bc:	90 91 44 01 	lds	r25, 0x0144
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	29 f0       	breq	.+10     	; 0x18ce <__vector_1+0x40>
	{
		EXTI_INT0_FPtr();
    18c4:	e0 91 43 01 	lds	r30, 0x0143
    18c8:	f0 91 44 01 	lds	r31, 0x0144
    18cc:	09 95       	icall
	}
}
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	ff 91       	pop	r31
    18d4:	ef 91       	pop	r30
    18d6:	bf 91       	pop	r27
    18d8:	af 91       	pop	r26
    18da:	9f 91       	pop	r25
    18dc:	8f 91       	pop	r24
    18de:	7f 91       	pop	r23
    18e0:	6f 91       	pop	r22
    18e2:	5f 91       	pop	r21
    18e4:	4f 91       	pop	r20
    18e6:	3f 91       	pop	r19
    18e8:	2f 91       	pop	r18
    18ea:	0f 90       	pop	r0
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	0f 90       	pop	r0
    18f0:	1f 90       	pop	r1
    18f2:	18 95       	reti

000018f4 <__vector_2>:

void __vector_2(void)
{
    18f4:	1f 92       	push	r1
    18f6:	0f 92       	push	r0
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	0f 92       	push	r0
    18fc:	11 24       	eor	r1, r1
    18fe:	2f 93       	push	r18
    1900:	3f 93       	push	r19
    1902:	4f 93       	push	r20
    1904:	5f 93       	push	r21
    1906:	6f 93       	push	r22
    1908:	7f 93       	push	r23
    190a:	8f 93       	push	r24
    190c:	9f 93       	push	r25
    190e:	af 93       	push	r26
    1910:	bf 93       	push	r27
    1912:	ef 93       	push	r30
    1914:	ff 93       	push	r31
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_INT1_FPtr != NULLPTR)
    191e:	80 91 45 01 	lds	r24, 0x0145
    1922:	90 91 46 01 	lds	r25, 0x0146
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	29 f0       	breq	.+10     	; 0x1934 <__vector_2+0x40>
	{
		EXTI_INT1_FPtr();
    192a:	e0 91 45 01 	lds	r30, 0x0145
    192e:	f0 91 46 01 	lds	r31, 0x0146
    1932:	09 95       	icall
	}
}
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	ff 91       	pop	r31
    193a:	ef 91       	pop	r30
    193c:	bf 91       	pop	r27
    193e:	af 91       	pop	r26
    1940:	9f 91       	pop	r25
    1942:	8f 91       	pop	r24
    1944:	7f 91       	pop	r23
    1946:	6f 91       	pop	r22
    1948:	5f 91       	pop	r21
    194a:	4f 91       	pop	r20
    194c:	3f 91       	pop	r19
    194e:	2f 91       	pop	r18
    1950:	0f 90       	pop	r0
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	0f 90       	pop	r0
    1956:	1f 90       	pop	r1
    1958:	18 95       	reti

0000195a <__vector_3>:

void __vector_3(void)
{
    195a:	1f 92       	push	r1
    195c:	0f 92       	push	r0
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	0f 92       	push	r0
    1962:	11 24       	eor	r1, r1
    1964:	2f 93       	push	r18
    1966:	3f 93       	push	r19
    1968:	4f 93       	push	r20
    196a:	5f 93       	push	r21
    196c:	6f 93       	push	r22
    196e:	7f 93       	push	r23
    1970:	8f 93       	push	r24
    1972:	9f 93       	push	r25
    1974:	af 93       	push	r26
    1976:	bf 93       	push	r27
    1978:	ef 93       	push	r30
    197a:	ff 93       	push	r31
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
	if (EXTI_INT2_FPtr != NULLPTR)
    1984:	80 91 47 01 	lds	r24, 0x0147
    1988:	90 91 48 01 	lds	r25, 0x0148
    198c:	00 97       	sbiw	r24, 0x00	; 0
    198e:	29 f0       	breq	.+10     	; 0x199a <__vector_3+0x40>
	{
		EXTI_INT2_FPtr();
    1990:	e0 91 47 01 	lds	r30, 0x0147
    1994:	f0 91 48 01 	lds	r31, 0x0148
    1998:	09 95       	icall
	}
}
    199a:	cf 91       	pop	r28
    199c:	df 91       	pop	r29
    199e:	ff 91       	pop	r31
    19a0:	ef 91       	pop	r30
    19a2:	bf 91       	pop	r27
    19a4:	af 91       	pop	r26
    19a6:	9f 91       	pop	r25
    19a8:	8f 91       	pop	r24
    19aa:	7f 91       	pop	r23
    19ac:	6f 91       	pop	r22
    19ae:	5f 91       	pop	r21
    19b0:	4f 91       	pop	r20
    19b2:	3f 91       	pop	r19
    19b4:	2f 91       	pop	r18
    19b6:	0f 90       	pop	r0
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	0f 90       	pop	r0
    19bc:	1f 90       	pop	r1
    19be:	18 95       	reti

000019c0 <DIO_voidSetPinValue>:
 * @param EN_Pin    PIN Number
 * @param EN_Value  HIGH or LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin, EN_value_type EN_Value)
{
    19c0:	df 93       	push	r29
    19c2:	cf 93       	push	r28
    19c4:	cd b7       	in	r28, 0x3d	; 61
    19c6:	de b7       	in	r29, 0x3e	; 62
    19c8:	28 97       	sbiw	r28, 0x08	; 8
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	8a 83       	std	Y+2, r24	; 0x02
    19d6:	6b 83       	std	Y+3, r22	; 0x03
    19d8:	4c 83       	std	Y+4, r20	; 0x04
    EN_ERRORSTATE_t state;
    state = E_OK;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Value == LOW)
    19de:	8c 81       	ldd	r24, Y+4	; 0x04
    19e0:	88 23       	and	r24, r24
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <DIO_voidSetPinValue+0x26>
    19e4:	76 c0       	rjmp	.+236    	; 0x1ad2 <DIO_voidSetPinValue+0x112>
    {
        switch (EN_Port)
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	38 87       	std	Y+8, r19	; 0x08
    19ee:	2f 83       	std	Y+7, r18	; 0x07
    19f0:	8f 81       	ldd	r24, Y+7	; 0x07
    19f2:	98 85       	ldd	r25, Y+8	; 0x08
    19f4:	81 30       	cpi	r24, 0x01	; 1
    19f6:	91 05       	cpc	r25, r1
    19f8:	59 f1       	breq	.+86     	; 0x1a50 <DIO_voidSetPinValue+0x90>
    19fa:	2f 81       	ldd	r18, Y+7	; 0x07
    19fc:	38 85       	ldd	r19, Y+8	; 0x08
    19fe:	22 30       	cpi	r18, 0x02	; 2
    1a00:	31 05       	cpc	r19, r1
    1a02:	2c f4       	brge	.+10     	; 0x1a0e <DIO_voidSetPinValue+0x4e>
    1a04:	8f 81       	ldd	r24, Y+7	; 0x07
    1a06:	98 85       	ldd	r25, Y+8	; 0x08
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	69 f0       	breq	.+26     	; 0x1a26 <DIO_voidSetPinValue+0x66>
    1a0c:	60 c0       	rjmp	.+192    	; 0x1ace <DIO_voidSetPinValue+0x10e>
    1a0e:	2f 81       	ldd	r18, Y+7	; 0x07
    1a10:	38 85       	ldd	r19, Y+8	; 0x08
    1a12:	22 30       	cpi	r18, 0x02	; 2
    1a14:	31 05       	cpc	r19, r1
    1a16:	89 f1       	breq	.+98     	; 0x1a7a <DIO_voidSetPinValue+0xba>
    1a18:	8f 81       	ldd	r24, Y+7	; 0x07
    1a1a:	98 85       	ldd	r25, Y+8	; 0x08
    1a1c:	83 30       	cpi	r24, 0x03	; 3
    1a1e:	91 05       	cpc	r25, r1
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <DIO_voidSetPinValue+0x64>
    1a22:	40 c0       	rjmp	.+128    	; 0x1aa4 <DIO_voidSetPinValue+0xe4>
    1a24:	54 c0       	rjmp	.+168    	; 0x1ace <DIO_voidSetPinValue+0x10e>
        {
        case PORT_A:
            CLRBIT(PORTA, EN_Pin);
    1a26:	ab e3       	ldi	r26, 0x3B	; 59
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	eb e3       	ldi	r30, 0x3B	; 59
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	48 2f       	mov	r20, r24
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	02 2e       	mov	r0, r18
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <DIO_voidSetPinValue+0x84>
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	0a 94       	dec	r0
    1a46:	e2 f7       	brpl	.-8      	; 0x1a40 <DIO_voidSetPinValue+0x80>
    1a48:	80 95       	com	r24
    1a4a:	84 23       	and	r24, r20
    1a4c:	8c 93       	st	X, r24
    1a4e:	b5 c0       	rjmp	.+362    	; 0x1bba <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            CLRBIT(PORTB, EN_Pin);
    1a50:	a8 e3       	ldi	r26, 0x38	; 56
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e8 e3       	ldi	r30, 0x38	; 56
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 2e       	mov	r0, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <DIO_voidSetPinValue+0xae>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <DIO_voidSetPinValue+0xaa>
    1a72:	80 95       	com	r24
    1a74:	84 23       	and	r24, r20
    1a76:	8c 93       	st	X, r24
    1a78:	a0 c0       	rjmp	.+320    	; 0x1bba <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            CLRBIT(PORTC, EN_Pin);
    1a7a:	a5 e3       	ldi	r26, 0x35	; 53
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e5 e3       	ldi	r30, 0x35	; 53
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	48 2f       	mov	r20, r24
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	02 2e       	mov	r0, r18
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <DIO_voidSetPinValue+0xd8>
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	0a 94       	dec	r0
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <DIO_voidSetPinValue+0xd4>
    1a9c:	80 95       	com	r24
    1a9e:	84 23       	and	r24, r20
    1aa0:	8c 93       	st	X, r24
    1aa2:	8b c0       	rjmp	.+278    	; 0x1bba <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            CLRBIT(PORTD, EN_Pin);
    1aa4:	a2 e3       	ldi	r26, 0x32	; 50
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e2 e3       	ldi	r30, 0x32	; 50
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	48 2f       	mov	r20, r24
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	02 2e       	mov	r0, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <DIO_voidSetPinValue+0x102>
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	0a 94       	dec	r0
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <DIO_voidSetPinValue+0xfe>
    1ac6:	80 95       	com	r24
    1ac8:	84 23       	and	r24, r20
    1aca:	8c 93       	st	X, r24
    1acc:	76 c0       	rjmp	.+236    	; 0x1bba <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_ERROR;
    1ace:	19 82       	std	Y+1, r1	; 0x01
    1ad0:	74 c0       	rjmp	.+232    	; 0x1bba <DIO_voidSetPinValue+0x1fa>
            break;
        }
    }
    else if (EN_Value == HIGH)
    1ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad4:	81 30       	cpi	r24, 0x01	; 1
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <DIO_voidSetPinValue+0x11a>
    1ad8:	70 c0       	rjmp	.+224    	; 0x1bba <DIO_voidSetPinValue+0x1fa>
    {
        switch (EN_Port)
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	3e 83       	std	Y+6, r19	; 0x06
    1ae2:	2d 83       	std	Y+5, r18	; 0x05
    1ae4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	91 05       	cpc	r25, r1
    1aec:	49 f1       	breq	.+82     	; 0x1b40 <DIO_voidSetPinValue+0x180>
    1aee:	2d 81       	ldd	r18, Y+5	; 0x05
    1af0:	3e 81       	ldd	r19, Y+6	; 0x06
    1af2:	22 30       	cpi	r18, 0x02	; 2
    1af4:	31 05       	cpc	r19, r1
    1af6:	2c f4       	brge	.+10     	; 0x1b02 <DIO_voidSetPinValue+0x142>
    1af8:	8d 81       	ldd	r24, Y+5	; 0x05
    1afa:	9e 81       	ldd	r25, Y+6	; 0x06
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	61 f0       	breq	.+24     	; 0x1b18 <DIO_voidSetPinValue+0x158>
    1b00:	5b c0       	rjmp	.+182    	; 0x1bb8 <DIO_voidSetPinValue+0x1f8>
    1b02:	2d 81       	ldd	r18, Y+5	; 0x05
    1b04:	3e 81       	ldd	r19, Y+6	; 0x06
    1b06:	22 30       	cpi	r18, 0x02	; 2
    1b08:	31 05       	cpc	r19, r1
    1b0a:	71 f1       	breq	.+92     	; 0x1b68 <DIO_voidSetPinValue+0x1a8>
    1b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b10:	83 30       	cpi	r24, 0x03	; 3
    1b12:	91 05       	cpc	r25, r1
    1b14:	e9 f1       	breq	.+122    	; 0x1b90 <DIO_voidSetPinValue+0x1d0>
    1b16:	50 c0       	rjmp	.+160    	; 0x1bb8 <DIO_voidSetPinValue+0x1f8>
        {
        case PORT_A:
            SETBIT(PORTA, EN_Pin);
    1b18:	ab e3       	ldi	r26, 0x3B	; 59
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	eb e3       	ldi	r30, 0x3B	; 59
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	48 2f       	mov	r20, r24
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	02 2e       	mov	r0, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <DIO_voidSetPinValue+0x176>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	0a 94       	dec	r0
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <DIO_voidSetPinValue+0x172>
    1b3a:	84 2b       	or	r24, r20
    1b3c:	8c 93       	st	X, r24
    1b3e:	3d c0       	rjmp	.+122    	; 0x1bba <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_B:
            SETBIT(PORTB, EN_Pin);
    1b40:	a8 e3       	ldi	r26, 0x38	; 56
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e8 e3       	ldi	r30, 0x38	; 56
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	48 2f       	mov	r20, r24
    1b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 2e       	mov	r0, r18
    1b58:	02 c0       	rjmp	.+4      	; 0x1b5e <DIO_voidSetPinValue+0x19e>
    1b5a:	88 0f       	add	r24, r24
    1b5c:	99 1f       	adc	r25, r25
    1b5e:	0a 94       	dec	r0
    1b60:	e2 f7       	brpl	.-8      	; 0x1b5a <DIO_voidSetPinValue+0x19a>
    1b62:	84 2b       	or	r24, r20
    1b64:	8c 93       	st	X, r24
    1b66:	29 c0       	rjmp	.+82     	; 0x1bba <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_C:
            SETBIT(PORTC, EN_Pin);
    1b68:	a5 e3       	ldi	r26, 0x35	; 53
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e5 e3       	ldi	r30, 0x35	; 53
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	48 2f       	mov	r20, r24
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	02 2e       	mov	r0, r18
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <DIO_voidSetPinValue+0x1c6>
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	0a 94       	dec	r0
    1b88:	e2 f7       	brpl	.-8      	; 0x1b82 <DIO_voidSetPinValue+0x1c2>
    1b8a:	84 2b       	or	r24, r20
    1b8c:	8c 93       	st	X, r24
    1b8e:	15 c0       	rjmp	.+42     	; 0x1bba <DIO_voidSetPinValue+0x1fa>
            break;
        case PORT_D:
            SETBIT(PORTD, EN_Pin);
    1b90:	a2 e3       	ldi	r26, 0x32	; 50
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e2 e3       	ldi	r30, 0x32	; 50
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	48 2f       	mov	r20, r24
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	02 2e       	mov	r0, r18
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <DIO_voidSetPinValue+0x1ee>
    1baa:	88 0f       	add	r24, r24
    1bac:	99 1f       	adc	r25, r25
    1bae:	0a 94       	dec	r0
    1bb0:	e2 f7       	brpl	.-8      	; 0x1baa <DIO_voidSetPinValue+0x1ea>
    1bb2:	84 2b       	or	r24, r20
    1bb4:	8c 93       	st	X, r24
    1bb6:	01 c0       	rjmp	.+2      	; 0x1bba <DIO_voidSetPinValue+0x1fa>
            break;
        default:
            state = E_ERROR;
    1bb8:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinValue */
    1bbc:	28 96       	adiw	r28, 0x08	; 8
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <DIO_voidSetPinDirection>:
 * @param EN_Pin  PIN Number
 * @param EN_Direction Direction of the Pin INPUT | OUTPUT
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPinDirection(EN_port_num EN_port, EN_pin_num EN_Pin, EN_direction_type EN_Direction)
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	28 97       	sbiw	r28, 0x08	; 8
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	8a 83       	std	Y+2, r24	; 0x02
    1be4:	6b 83       	std	Y+3, r22	; 0x03
    1be6:	4c 83       	std	Y+4, r20	; 0x04
    EN_ERRORSTATE_t state;
    state = E_OK;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	89 83       	std	Y+1, r24	; 0x01

    if (EN_Direction == INPUT)
    1bec:	8c 81       	ldd	r24, Y+4	; 0x04
    1bee:	88 23       	and	r24, r24
    1bf0:	09 f0       	breq	.+2      	; 0x1bf4 <DIO_voidSetPinDirection+0x26>
    1bf2:	76 c0       	rjmp	.+236    	; 0x1ce0 <DIO_voidSetPinDirection+0x112>
    {
        switch (EN_port)
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	38 87       	std	Y+8, r19	; 0x08
    1bfc:	2f 83       	std	Y+7, r18	; 0x07
    1bfe:	8f 81       	ldd	r24, Y+7	; 0x07
    1c00:	98 85       	ldd	r25, Y+8	; 0x08
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	91 05       	cpc	r25, r1
    1c06:	59 f1       	breq	.+86     	; 0x1c5e <DIO_voidSetPinDirection+0x90>
    1c08:	2f 81       	ldd	r18, Y+7	; 0x07
    1c0a:	38 85       	ldd	r19, Y+8	; 0x08
    1c0c:	22 30       	cpi	r18, 0x02	; 2
    1c0e:	31 05       	cpc	r19, r1
    1c10:	2c f4       	brge	.+10     	; 0x1c1c <DIO_voidSetPinDirection+0x4e>
    1c12:	8f 81       	ldd	r24, Y+7	; 0x07
    1c14:	98 85       	ldd	r25, Y+8	; 0x08
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	69 f0       	breq	.+26     	; 0x1c34 <DIO_voidSetPinDirection+0x66>
    1c1a:	60 c0       	rjmp	.+192    	; 0x1cdc <DIO_voidSetPinDirection+0x10e>
    1c1c:	2f 81       	ldd	r18, Y+7	; 0x07
    1c1e:	38 85       	ldd	r19, Y+8	; 0x08
    1c20:	22 30       	cpi	r18, 0x02	; 2
    1c22:	31 05       	cpc	r19, r1
    1c24:	89 f1       	breq	.+98     	; 0x1c88 <DIO_voidSetPinDirection+0xba>
    1c26:	8f 81       	ldd	r24, Y+7	; 0x07
    1c28:	98 85       	ldd	r25, Y+8	; 0x08
    1c2a:	83 30       	cpi	r24, 0x03	; 3
    1c2c:	91 05       	cpc	r25, r1
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <DIO_voidSetPinDirection+0x64>
    1c30:	40 c0       	rjmp	.+128    	; 0x1cb2 <DIO_voidSetPinDirection+0xe4>
    1c32:	54 c0       	rjmp	.+168    	; 0x1cdc <DIO_voidSetPinDirection+0x10e>
        {
        case PORT_A:
            CLRBIT(DDRA, EN_Pin);
    1c34:	aa e3       	ldi	r26, 0x3A	; 58
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	ea e3       	ldi	r30, 0x3A	; 58
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	48 2f       	mov	r20, r24
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	28 2f       	mov	r18, r24
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	02 2e       	mov	r0, r18
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <DIO_voidSetPinDirection+0x84>
    1c4e:	88 0f       	add	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	0a 94       	dec	r0
    1c54:	e2 f7       	brpl	.-8      	; 0x1c4e <DIO_voidSetPinDirection+0x80>
    1c56:	80 95       	com	r24
    1c58:	84 23       	and	r24, r20
    1c5a:	8c 93       	st	X, r24
    1c5c:	b5 c0       	rjmp	.+362    	; 0x1dc8 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_B:
            CLRBIT(DDRB, EN_Pin);
    1c5e:	a7 e3       	ldi	r26, 0x37	; 55
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e7 e3       	ldi	r30, 0x37	; 55
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	48 2f       	mov	r20, r24
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	02 2e       	mov	r0, r18
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <DIO_voidSetPinDirection+0xae>
    1c78:	88 0f       	add	r24, r24
    1c7a:	99 1f       	adc	r25, r25
    1c7c:	0a 94       	dec	r0
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <DIO_voidSetPinDirection+0xaa>
    1c80:	80 95       	com	r24
    1c82:	84 23       	and	r24, r20
    1c84:	8c 93       	st	X, r24
    1c86:	a0 c0       	rjmp	.+320    	; 0x1dc8 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_C:
            CLRBIT(DDRC, EN_Pin);
    1c88:	a4 e3       	ldi	r26, 0x34	; 52
    1c8a:	b0 e0       	ldi	r27, 0x00	; 0
    1c8c:	e4 e3       	ldi	r30, 0x34	; 52
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	48 2f       	mov	r20, r24
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	28 2f       	mov	r18, r24
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	02 2e       	mov	r0, r18
    1ca0:	02 c0       	rjmp	.+4      	; 0x1ca6 <DIO_voidSetPinDirection+0xd8>
    1ca2:	88 0f       	add	r24, r24
    1ca4:	99 1f       	adc	r25, r25
    1ca6:	0a 94       	dec	r0
    1ca8:	e2 f7       	brpl	.-8      	; 0x1ca2 <DIO_voidSetPinDirection+0xd4>
    1caa:	80 95       	com	r24
    1cac:	84 23       	and	r24, r20
    1cae:	8c 93       	st	X, r24
    1cb0:	8b c0       	rjmp	.+278    	; 0x1dc8 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_D:
            CLRBIT(DDRD, EN_Pin);
    1cb2:	a1 e3       	ldi	r26, 0x31	; 49
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	e1 e3       	ldi	r30, 0x31	; 49
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	48 2f       	mov	r20, r24
    1cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	02 2e       	mov	r0, r18
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <DIO_voidSetPinDirection+0x102>
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	0a 94       	dec	r0
    1cd2:	e2 f7       	brpl	.-8      	; 0x1ccc <DIO_voidSetPinDirection+0xfe>
    1cd4:	80 95       	com	r24
    1cd6:	84 23       	and	r24, r20
    1cd8:	8c 93       	st	X, r24
    1cda:	76 c0       	rjmp	.+236    	; 0x1dc8 <DIO_voidSetPinDirection+0x1fa>
            break;
        default:
            state = E_ERROR;
    1cdc:	19 82       	std	Y+1, r1	; 0x01
    1cde:	74 c0       	rjmp	.+232    	; 0x1dc8 <DIO_voidSetPinDirection+0x1fa>
            break;
        }
    }
    else if (EN_Direction == OUTPUT)
    1ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	09 f0       	breq	.+2      	; 0x1ce8 <DIO_voidSetPinDirection+0x11a>
    1ce6:	70 c0       	rjmp	.+224    	; 0x1dc8 <DIO_voidSetPinDirection+0x1fa>
    {
        switch (EN_port)
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	3e 83       	std	Y+6, r19	; 0x06
    1cf0:	2d 83       	std	Y+5, r18	; 0x05
    1cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf6:	81 30       	cpi	r24, 0x01	; 1
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	49 f1       	breq	.+82     	; 0x1d4e <DIO_voidSetPinDirection+0x180>
    1cfc:	2d 81       	ldd	r18, Y+5	; 0x05
    1cfe:	3e 81       	ldd	r19, Y+6	; 0x06
    1d00:	22 30       	cpi	r18, 0x02	; 2
    1d02:	31 05       	cpc	r19, r1
    1d04:	2c f4       	brge	.+10     	; 0x1d10 <DIO_voidSetPinDirection+0x142>
    1d06:	8d 81       	ldd	r24, Y+5	; 0x05
    1d08:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	61 f0       	breq	.+24     	; 0x1d26 <DIO_voidSetPinDirection+0x158>
    1d0e:	5b c0       	rjmp	.+182    	; 0x1dc6 <DIO_voidSetPinDirection+0x1f8>
    1d10:	2d 81       	ldd	r18, Y+5	; 0x05
    1d12:	3e 81       	ldd	r19, Y+6	; 0x06
    1d14:	22 30       	cpi	r18, 0x02	; 2
    1d16:	31 05       	cpc	r19, r1
    1d18:	71 f1       	breq	.+92     	; 0x1d76 <DIO_voidSetPinDirection+0x1a8>
    1d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1e:	83 30       	cpi	r24, 0x03	; 3
    1d20:	91 05       	cpc	r25, r1
    1d22:	e9 f1       	breq	.+122    	; 0x1d9e <DIO_voidSetPinDirection+0x1d0>
    1d24:	50 c0       	rjmp	.+160    	; 0x1dc6 <DIO_voidSetPinDirection+0x1f8>
        {
        case PORT_A:
            SETBIT(DDRA, EN_Pin);
    1d26:	aa e3       	ldi	r26, 0x3A	; 58
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	ea e3       	ldi	r30, 0x3A	; 58
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	48 2f       	mov	r20, r24
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	02 2e       	mov	r0, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <DIO_voidSetPinDirection+0x176>
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	0a 94       	dec	r0
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <DIO_voidSetPinDirection+0x172>
    1d48:	84 2b       	or	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	3d c0       	rjmp	.+122    	; 0x1dc8 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_B:
            SETBIT(DDRB, EN_Pin);
    1d4e:	a7 e3       	ldi	r26, 0x37	; 55
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e7 e3       	ldi	r30, 0x37	; 55
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	02 2e       	mov	r0, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <DIO_voidSetPinDirection+0x19e>
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	0a 94       	dec	r0
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <DIO_voidSetPinDirection+0x19a>
    1d70:	84 2b       	or	r24, r20
    1d72:	8c 93       	st	X, r24
    1d74:	29 c0       	rjmp	.+82     	; 0x1dc8 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_C:
            SETBIT(DDRC, EN_Pin);
    1d76:	a4 e3       	ldi	r26, 0x34	; 52
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e4 e3       	ldi	r30, 0x34	; 52
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 2e       	mov	r0, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <DIO_voidSetPinDirection+0x1c6>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <DIO_voidSetPinDirection+0x1c2>
    1d98:	84 2b       	or	r24, r20
    1d9a:	8c 93       	st	X, r24
    1d9c:	15 c0       	rjmp	.+42     	; 0x1dc8 <DIO_voidSetPinDirection+0x1fa>
            break;
        case PORT_D:
            SETBIT(DDRD, EN_Pin);
    1d9e:	a1 e3       	ldi	r26, 0x31	; 49
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e1 e3       	ldi	r30, 0x31	; 49
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	48 2f       	mov	r20, r24
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	02 2e       	mov	r0, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <DIO_voidSetPinDirection+0x1ee>
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	0a 94       	dec	r0
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <DIO_voidSetPinDirection+0x1ea>
    1dc0:	84 2b       	or	r24, r20
    1dc2:	8c 93       	st	X, r24
    1dc4:	01 c0       	rjmp	.+2      	; 0x1dc8 <DIO_voidSetPinDirection+0x1fa>
            break;
        default:
            state = E_ERROR;
    1dc6:	19 82       	std	Y+1, r1	; 0x01
            break;
        }
    }
    return state;
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPinDirection */
    1dca:	28 96       	adiw	r28, 0x08	; 8
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	f8 94       	cli
    1dd0:	de bf       	out	0x3e, r29	; 62
    1dd2:	0f be       	out	0x3f, r0	; 63
    1dd4:	cd bf       	out	0x3d, r28	; 61
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <DIO_u8GetPinValue>:
 * @param EN_Port           PORT Name
 * @param EN_Pin            PIN Number
 * @return EN_value_type    return Pin HIGH | LOW
 */
EN_value_type DIO_u8GetPinValue(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <DIO_u8GetPinValue+0x6>
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <DIO_u8GetPinValue+0x8>
    1de4:	0f 92       	push	r0
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
    1dea:	8a 83       	std	Y+2, r24	; 0x02
    1dec:	6b 83       	std	Y+3, r22	; 0x03
    EN_value_type EN_ret_val;
    switch (EN_Port)
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	3d 83       	std	Y+5, r19	; 0x05
    1df6:	2c 83       	std	Y+4, r18	; 0x04
    1df8:	4c 81       	ldd	r20, Y+4	; 0x04
    1dfa:	5d 81       	ldd	r21, Y+5	; 0x05
    1dfc:	41 30       	cpi	r20, 0x01	; 1
    1dfe:	51 05       	cpc	r21, r1
    1e00:	41 f1       	breq	.+80     	; 0x1e52 <DIO_u8GetPinValue+0x76>
    1e02:	8c 81       	ldd	r24, Y+4	; 0x04
    1e04:	9d 81       	ldd	r25, Y+5	; 0x05
    1e06:	82 30       	cpi	r24, 0x02	; 2
    1e08:	91 05       	cpc	r25, r1
    1e0a:	34 f4       	brge	.+12     	; 0x1e18 <DIO_u8GetPinValue+0x3c>
    1e0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e10:	21 15       	cp	r18, r1
    1e12:	31 05       	cpc	r19, r1
    1e14:	61 f0       	breq	.+24     	; 0x1e2e <DIO_u8GetPinValue+0x52>
    1e16:	52 c0       	rjmp	.+164    	; 0x1ebc <DIO_u8GetPinValue+0xe0>
    1e18:	4c 81       	ldd	r20, Y+4	; 0x04
    1e1a:	5d 81       	ldd	r21, Y+5	; 0x05
    1e1c:	42 30       	cpi	r20, 0x02	; 2
    1e1e:	51 05       	cpc	r21, r1
    1e20:	51 f1       	breq	.+84     	; 0x1e76 <DIO_u8GetPinValue+0x9a>
    1e22:	8c 81       	ldd	r24, Y+4	; 0x04
    1e24:	9d 81       	ldd	r25, Y+5	; 0x05
    1e26:	83 30       	cpi	r24, 0x03	; 3
    1e28:	91 05       	cpc	r25, r1
    1e2a:	b9 f1       	breq	.+110    	; 0x1e9a <DIO_u8GetPinValue+0xbe>
    1e2c:	47 c0       	rjmp	.+142    	; 0x1ebc <DIO_u8GetPinValue+0xe0>
    {
    case PORT_A:
        EN_ret_val = GETBIT(PINA, EN_Pin);
    1e2e:	e9 e3       	ldi	r30, 0x39	; 57
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	88 2f       	mov	r24, r24
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	a9 01       	movw	r20, r18
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <DIO_u8GetPinValue+0x6a>
    1e42:	55 95       	asr	r21
    1e44:	47 95       	ror	r20
    1e46:	8a 95       	dec	r24
    1e48:	e2 f7       	brpl	.-8      	; 0x1e42 <DIO_u8GetPinValue+0x66>
    1e4a:	ca 01       	movw	r24, r20
    1e4c:	81 70       	andi	r24, 0x01	; 1
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    1e50:	35 c0       	rjmp	.+106    	; 0x1ebc <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_B:
        EN_ret_val = GETBIT(PINB, EN_Pin);
    1e52:	e6 e3       	ldi	r30, 0x36	; 54
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	88 2f       	mov	r24, r24
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	a9 01       	movw	r20, r18
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <DIO_u8GetPinValue+0x8e>
    1e66:	55 95       	asr	r21
    1e68:	47 95       	ror	r20
    1e6a:	8a 95       	dec	r24
    1e6c:	e2 f7       	brpl	.-8      	; 0x1e66 <DIO_u8GetPinValue+0x8a>
    1e6e:	ca 01       	movw	r24, r20
    1e70:	81 70       	andi	r24, 0x01	; 1
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	23 c0       	rjmp	.+70     	; 0x1ebc <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_C:
        EN_ret_val = GETBIT(PINC, EN_Pin);
    1e76:	e3 e3       	ldi	r30, 0x33	; 51
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	8b 81       	ldd	r24, Y+3	; 0x03
    1e82:	88 2f       	mov	r24, r24
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	a9 01       	movw	r20, r18
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <DIO_u8GetPinValue+0xb2>
    1e8a:	55 95       	asr	r21
    1e8c:	47 95       	ror	r20
    1e8e:	8a 95       	dec	r24
    1e90:	e2 f7       	brpl	.-8      	; 0x1e8a <DIO_u8GetPinValue+0xae>
    1e92:	ca 01       	movw	r24, r20
    1e94:	81 70       	andi	r24, 0x01	; 1
    1e96:	89 83       	std	Y+1, r24	; 0x01
    1e98:	11 c0       	rjmp	.+34     	; 0x1ebc <DIO_u8GetPinValue+0xe0>
        break;
    case PORT_D:
        EN_ret_val = GETBIT(PIND, EN_Pin);
    1e9a:	e0 e3       	ldi	r30, 0x30	; 48
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	88 2f       	mov	r24, r24
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	a9 01       	movw	r20, r18
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <DIO_u8GetPinValue+0xd6>
    1eae:	55 95       	asr	r21
    1eb0:	47 95       	ror	r20
    1eb2:	8a 95       	dec	r24
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <DIO_u8GetPinValue+0xd2>
    1eb6:	ca 01       	movw	r24, r20
    1eb8:	81 70       	andi	r24, 0x01	; 1
    1eba:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return EN_ret_val;
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_u8GetPinValue */
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	cf 91       	pop	r28
    1eca:	df 91       	pop	r29
    1ecc:	08 95       	ret

00001ece <DIO_voidTogPin>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidTogPin(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    1ece:	df 93       	push	r29
    1ed0:	cf 93       	push	r28
    1ed2:	00 d0       	rcall	.+0      	; 0x1ed4 <DIO_voidTogPin+0x6>
    1ed4:	00 d0       	rcall	.+0      	; 0x1ed6 <DIO_voidTogPin+0x8>
    1ed6:	0f 92       	push	r0
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
    1edc:	8a 83       	std	Y+2, r24	; 0x02
    1ede:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	28 2f       	mov	r18, r24
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	3d 83       	std	Y+5, r19	; 0x05
    1eec:	2c 83       	std	Y+4, r18	; 0x04
    1eee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ef0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ef2:	81 30       	cpi	r24, 0x01	; 1
    1ef4:	91 05       	cpc	r25, r1
    1ef6:	49 f1       	breq	.+82     	; 0x1f4a <DIO_voidTogPin+0x7c>
    1ef8:	2c 81       	ldd	r18, Y+4	; 0x04
    1efa:	3d 81       	ldd	r19, Y+5	; 0x05
    1efc:	22 30       	cpi	r18, 0x02	; 2
    1efe:	31 05       	cpc	r19, r1
    1f00:	2c f4       	brge	.+10     	; 0x1f0c <DIO_voidTogPin+0x3e>
    1f02:	8c 81       	ldd	r24, Y+4	; 0x04
    1f04:	9d 81       	ldd	r25, Y+5	; 0x05
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	61 f0       	breq	.+24     	; 0x1f22 <DIO_voidTogPin+0x54>
    1f0a:	5b c0       	rjmp	.+182    	; 0x1fc2 <DIO_voidTogPin+0xf4>
    1f0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f10:	22 30       	cpi	r18, 0x02	; 2
    1f12:	31 05       	cpc	r19, r1
    1f14:	71 f1       	breq	.+92     	; 0x1f72 <DIO_voidTogPin+0xa4>
    1f16:	8c 81       	ldd	r24, Y+4	; 0x04
    1f18:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1a:	83 30       	cpi	r24, 0x03	; 3
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	e9 f1       	breq	.+122    	; 0x1f9a <DIO_voidTogPin+0xcc>
    1f20:	50 c0       	rjmp	.+160    	; 0x1fc2 <DIO_voidTogPin+0xf4>
    {
    case PORT_A:
        TGLBIT(PORTA, EN_Pin);
    1f22:	ab e3       	ldi	r26, 0x3B	; 59
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	eb e3       	ldi	r30, 0x3B	; 59
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	48 2f       	mov	r20, r24
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	02 2e       	mov	r0, r18
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <DIO_voidTogPin+0x72>
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	0a 94       	dec	r0
    1f42:	e2 f7       	brpl	.-8      	; 0x1f3c <DIO_voidTogPin+0x6e>
    1f44:	84 27       	eor	r24, r20
    1f46:	8c 93       	st	X, r24
    1f48:	3d c0       	rjmp	.+122    	; 0x1fc4 <DIO_voidTogPin+0xf6>
        break;
    case PORT_B:
        TGLBIT(PORTB, EN_Pin);
    1f4a:	a8 e3       	ldi	r26, 0x38	; 56
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	e8 e3       	ldi	r30, 0x38	; 56
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	48 2f       	mov	r20, r24
    1f56:	8b 81       	ldd	r24, Y+3	; 0x03
    1f58:	28 2f       	mov	r18, r24
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	02 2e       	mov	r0, r18
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <DIO_voidTogPin+0x9a>
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	0a 94       	dec	r0
    1f6a:	e2 f7       	brpl	.-8      	; 0x1f64 <DIO_voidTogPin+0x96>
    1f6c:	84 27       	eor	r24, r20
    1f6e:	8c 93       	st	X, r24
    1f70:	29 c0       	rjmp	.+82     	; 0x1fc4 <DIO_voidTogPin+0xf6>
        break;
    case PORT_C:
        TGLBIT(PORTC, EN_Pin);
    1f72:	a5 e3       	ldi	r26, 0x35	; 53
    1f74:	b0 e0       	ldi	r27, 0x00	; 0
    1f76:	e5 e3       	ldi	r30, 0x35	; 53
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	80 81       	ld	r24, Z
    1f7c:	48 2f       	mov	r20, r24
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	02 2e       	mov	r0, r18
    1f8a:	02 c0       	rjmp	.+4      	; 0x1f90 <DIO_voidTogPin+0xc2>
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	0a 94       	dec	r0
    1f92:	e2 f7       	brpl	.-8      	; 0x1f8c <DIO_voidTogPin+0xbe>
    1f94:	84 27       	eor	r24, r20
    1f96:	8c 93       	st	X, r24
    1f98:	15 c0       	rjmp	.+42     	; 0x1fc4 <DIO_voidTogPin+0xf6>
        break;
    case PORT_D:
        TGLBIT(PORTD, EN_Pin);
    1f9a:	a2 e3       	ldi	r26, 0x32	; 50
    1f9c:	b0 e0       	ldi	r27, 0x00	; 0
    1f9e:	e2 e3       	ldi	r30, 0x32	; 50
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	80 81       	ld	r24, Z
    1fa4:	48 2f       	mov	r20, r24
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	02 2e       	mov	r0, r18
    1fb2:	02 c0       	rjmp	.+4      	; 0x1fb8 <DIO_voidTogPin+0xea>
    1fb4:	88 0f       	add	r24, r24
    1fb6:	99 1f       	adc	r25, r25
    1fb8:	0a 94       	dec	r0
    1fba:	e2 f7       	brpl	.-8      	; 0x1fb4 <DIO_voidTogPin+0xe6>
    1fbc:	84 27       	eor	r24, r20
    1fbe:	8c 93       	st	X, r24
    1fc0:	01 c0       	rjmp	.+2      	; 0x1fc4 <DIO_voidTogPin+0xf6>
        break;
    default:
        state = E_ERROR;
    1fc2:	19 82       	std	Y+1, r1	; 0x01
        break;
    }

    return state;
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidTogPin */
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <DIO_voidSetPortValue>:
 * @param EN_Port PORT Name
 * @param EN_Value HIGH | LOW
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPortValue(EN_port_num EN_Port, EN_value_type EN_Value)
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <DIO_voidSetPortValue+0x6>
    1fdc:	00 d0       	rcall	.+0      	; 0x1fde <DIO_voidSetPortValue+0x8>
    1fde:	0f 92       	push	r0
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	8a 83       	std	Y+2, r24	; 0x02
    1fe6:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	28 2f       	mov	r18, r24
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	3d 83       	std	Y+5, r19	; 0x05
    1ff4:	2c 83       	std	Y+4, r18	; 0x04
    1ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff8:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffa:	81 30       	cpi	r24, 0x01	; 1
    1ffc:	91 05       	cpc	r25, r1
    1ffe:	d1 f0       	breq	.+52     	; 0x2034 <DIO_voidSetPortValue+0x5e>
    2000:	2c 81       	ldd	r18, Y+4	; 0x04
    2002:	3d 81       	ldd	r19, Y+5	; 0x05
    2004:	22 30       	cpi	r18, 0x02	; 2
    2006:	31 05       	cpc	r19, r1
    2008:	2c f4       	brge	.+10     	; 0x2014 <DIO_voidSetPortValue+0x3e>
    200a:	8c 81       	ldd	r24, Y+4	; 0x04
    200c:	9d 81       	ldd	r25, Y+5	; 0x05
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	61 f0       	breq	.+24     	; 0x202a <DIO_voidSetPortValue+0x54>
    2012:	1f c0       	rjmp	.+62     	; 0x2052 <DIO_voidSetPortValue+0x7c>
    2014:	2c 81       	ldd	r18, Y+4	; 0x04
    2016:	3d 81       	ldd	r19, Y+5	; 0x05
    2018:	22 30       	cpi	r18, 0x02	; 2
    201a:	31 05       	cpc	r19, r1
    201c:	81 f0       	breq	.+32     	; 0x203e <DIO_voidSetPortValue+0x68>
    201e:	8c 81       	ldd	r24, Y+4	; 0x04
    2020:	9d 81       	ldd	r25, Y+5	; 0x05
    2022:	83 30       	cpi	r24, 0x03	; 3
    2024:	91 05       	cpc	r25, r1
    2026:	81 f0       	breq	.+32     	; 0x2048 <DIO_voidSetPortValue+0x72>
    2028:	14 c0       	rjmp	.+40     	; 0x2052 <DIO_voidSetPortValue+0x7c>
    {
    case PORT_A:
        PORTA = EN_Value;
    202a:	eb e3       	ldi	r30, 0x3B	; 59
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	80 83       	st	Z, r24
    2032:	10 c0       	rjmp	.+32     	; 0x2054 <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_B:
        PORTB = EN_Value;
    2034:	e8 e3       	ldi	r30, 0x38	; 56
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	8b 81       	ldd	r24, Y+3	; 0x03
    203a:	80 83       	st	Z, r24
    203c:	0b c0       	rjmp	.+22     	; 0x2054 <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_C:
        PORTC = EN_Value;
    203e:	e5 e3       	ldi	r30, 0x35	; 53
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	8b 81       	ldd	r24, Y+3	; 0x03
    2044:	80 83       	st	Z, r24
    2046:	06 c0       	rjmp	.+12     	; 0x2054 <DIO_voidSetPortValue+0x7e>
        break;
    case PORT_D:
        PORTD = EN_Value;
    2048:	e2 e3       	ldi	r30, 0x32	; 50
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	80 83       	st	Z, r24
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <DIO_voidSetPortValue+0x7e>
        break;
    default:
        state = E_ERROR;
    2052:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    2054:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidSetPortValue */
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	08 95       	ret

00002066 <DIO_voidSetPortDirection>:
 * @param EN_Port PORT Name
 * @param EN_Direction PORT Direction
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidSetPortDirection(EN_port_num EN_Port, EN_direction_type EN_Direction)
{
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	00 d0       	rcall	.+0      	; 0x206c <DIO_voidSetPortDirection+0x6>
    206c:	00 d0       	rcall	.+0      	; 0x206e <DIO_voidSetPortDirection+0x8>
    206e:	0f 92       	push	r0
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	8a 83       	std	Y+2, r24	; 0x02
    2076:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	89 83       	std	Y+1, r24	; 0x01

    switch (EN_Port)
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	28 2f       	mov	r18, r24
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	3d 83       	std	Y+5, r19	; 0x05
    2084:	2c 83       	std	Y+4, r18	; 0x04
    2086:	8c 81       	ldd	r24, Y+4	; 0x04
    2088:	9d 81       	ldd	r25, Y+5	; 0x05
    208a:	81 30       	cpi	r24, 0x01	; 1
    208c:	91 05       	cpc	r25, r1
    208e:	d1 f0       	breq	.+52     	; 0x20c4 <DIO_voidSetPortDirection+0x5e>
    2090:	2c 81       	ldd	r18, Y+4	; 0x04
    2092:	3d 81       	ldd	r19, Y+5	; 0x05
    2094:	22 30       	cpi	r18, 0x02	; 2
    2096:	31 05       	cpc	r19, r1
    2098:	2c f4       	brge	.+10     	; 0x20a4 <DIO_voidSetPortDirection+0x3e>
    209a:	8c 81       	ldd	r24, Y+4	; 0x04
    209c:	9d 81       	ldd	r25, Y+5	; 0x05
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	61 f0       	breq	.+24     	; 0x20ba <DIO_voidSetPortDirection+0x54>
    20a2:	1f c0       	rjmp	.+62     	; 0x20e2 <DIO_voidSetPortDirection+0x7c>
    20a4:	2c 81       	ldd	r18, Y+4	; 0x04
    20a6:	3d 81       	ldd	r19, Y+5	; 0x05
    20a8:	22 30       	cpi	r18, 0x02	; 2
    20aa:	31 05       	cpc	r19, r1
    20ac:	81 f0       	breq	.+32     	; 0x20ce <DIO_voidSetPortDirection+0x68>
    20ae:	8c 81       	ldd	r24, Y+4	; 0x04
    20b0:	9d 81       	ldd	r25, Y+5	; 0x05
    20b2:	83 30       	cpi	r24, 0x03	; 3
    20b4:	91 05       	cpc	r25, r1
    20b6:	81 f0       	breq	.+32     	; 0x20d8 <DIO_voidSetPortDirection+0x72>
    20b8:	14 c0       	rjmp	.+40     	; 0x20e2 <DIO_voidSetPortDirection+0x7c>
    {
    case PORT_A:
        DDRA = EN_Direction;
    20ba:	ea e3       	ldi	r30, 0x3A	; 58
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	80 83       	st	Z, r24
    20c2:	10 c0       	rjmp	.+32     	; 0x20e4 <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_B:
        DDRB = EN_Direction;
    20c4:	e7 e3       	ldi	r30, 0x37	; 55
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	80 83       	st	Z, r24
    20cc:	0b c0       	rjmp	.+22     	; 0x20e4 <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_C:
        DDRC = EN_Direction;
    20ce:	e4 e3       	ldi	r30, 0x34	; 52
    20d0:	f0 e0       	ldi	r31, 0x00	; 0
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	80 83       	st	Z, r24
    20d6:	06 c0       	rjmp	.+12     	; 0x20e4 <DIO_voidSetPortDirection+0x7e>
        break;
    case PORT_D:
        DDRD = EN_Direction;
    20d8:	e1 e3       	ldi	r30, 0x31	; 49
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	80 83       	st	Z, r24
    20e0:	01 c0       	rjmp	.+2      	; 0x20e4 <DIO_voidSetPortDirection+0x7e>
        break;
    default:
        state = E_ERROR;
    20e2:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    20e4:	89 81       	ldd	r24, Y+1	; 0x01

} /* DIO_voidSetPortDirection */
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <DIO_voidInpullUp>:
 * @param EN_Port PORT Name
 * @param EN_Pin PIN Number
 * @return EN_ERRORSTATE_t E_OK OR ERROR
 */
EN_ERRORSTATE_t DIO_voidInpullUp(EN_port_num EN_Port, EN_pin_num EN_Pin)
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	00 d0       	rcall	.+0      	; 0x20fc <DIO_voidInpullUp+0x6>
    20fc:	00 d0       	rcall	.+0      	; 0x20fe <DIO_voidInpullUp+0x8>
    20fe:	0f 92       	push	r0
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	8a 83       	std	Y+2, r24	; 0x02
    2106:	6b 83       	std	Y+3, r22	; 0x03
    EN_ERRORSTATE_t state;
    state = E_OK;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	89 83       	std	Y+1, r24	; 0x01
    switch (EN_Port)
    210c:	8a 81       	ldd	r24, Y+2	; 0x02
    210e:	28 2f       	mov	r18, r24
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	3d 83       	std	Y+5, r19	; 0x05
    2114:	2c 83       	std	Y+4, r18	; 0x04
    2116:	8c 81       	ldd	r24, Y+4	; 0x04
    2118:	9d 81       	ldd	r25, Y+5	; 0x05
    211a:	81 30       	cpi	r24, 0x01	; 1
    211c:	91 05       	cpc	r25, r1
    211e:	09 f4       	brne	.+2      	; 0x2122 <DIO_voidInpullUp+0x2c>
    2120:	3e c0       	rjmp	.+124    	; 0x219e <DIO_voidInpullUp+0xa8>
    2122:	2c 81       	ldd	r18, Y+4	; 0x04
    2124:	3d 81       	ldd	r19, Y+5	; 0x05
    2126:	22 30       	cpi	r18, 0x02	; 2
    2128:	31 05       	cpc	r19, r1
    212a:	2c f4       	brge	.+10     	; 0x2136 <DIO_voidInpullUp+0x40>
    212c:	8c 81       	ldd	r24, Y+4	; 0x04
    212e:	9d 81       	ldd	r25, Y+5	; 0x05
    2130:	00 97       	sbiw	r24, 0x00	; 0
    2132:	71 f0       	breq	.+28     	; 0x2150 <DIO_voidInpullUp+0x5a>
    2134:	a9 c0       	rjmp	.+338    	; 0x2288 <DIO_voidInpullUp+0x192>
    2136:	2c 81       	ldd	r18, Y+4	; 0x04
    2138:	3d 81       	ldd	r19, Y+5	; 0x05
    213a:	22 30       	cpi	r18, 0x02	; 2
    213c:	31 05       	cpc	r19, r1
    213e:	09 f4       	brne	.+2      	; 0x2142 <DIO_voidInpullUp+0x4c>
    2140:	55 c0       	rjmp	.+170    	; 0x21ec <DIO_voidInpullUp+0xf6>
    2142:	8c 81       	ldd	r24, Y+4	; 0x04
    2144:	9d 81       	ldd	r25, Y+5	; 0x05
    2146:	83 30       	cpi	r24, 0x03	; 3
    2148:	91 05       	cpc	r25, r1
    214a:	09 f4       	brne	.+2      	; 0x214e <DIO_voidInpullUp+0x58>
    214c:	76 c0       	rjmp	.+236    	; 0x223a <DIO_voidInpullUp+0x144>
    214e:	9c c0       	rjmp	.+312    	; 0x2288 <DIO_voidInpullUp+0x192>
    {
    case PORT_A:
        CLRBIT(DDRA, EN_Pin);
    2150:	aa e3       	ldi	r26, 0x3A	; 58
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	ea e3       	ldi	r30, 0x3A	; 58
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	48 2f       	mov	r20, r24
    215c:	8b 81       	ldd	r24, Y+3	; 0x03
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	02 c0       	rjmp	.+4      	; 0x216c <DIO_voidInpullUp+0x76>
    2168:	88 0f       	add	r24, r24
    216a:	99 1f       	adc	r25, r25
    216c:	2a 95       	dec	r18
    216e:	e2 f7       	brpl	.-8      	; 0x2168 <DIO_voidInpullUp+0x72>
    2170:	80 95       	com	r24
    2172:	84 23       	and	r24, r20
    2174:	8c 93       	st	X, r24
        SETBIT(PORTA, EN_Pin);
    2176:	ab e3       	ldi	r26, 0x3B	; 59
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	eb e3       	ldi	r30, 0x3B	; 59
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	48 2f       	mov	r20, r24
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	28 2f       	mov	r18, r24
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	02 2e       	mov	r0, r18
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <DIO_voidInpullUp+0x9e>
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	0a 94       	dec	r0
    2196:	e2 f7       	brpl	.-8      	; 0x2190 <DIO_voidInpullUp+0x9a>
    2198:	84 2b       	or	r24, r20
    219a:	8c 93       	st	X, r24
    219c:	76 c0       	rjmp	.+236    	; 0x228a <DIO_voidInpullUp+0x194>
        break;
    case PORT_B:
        CLRBIT(DDRB, EN_Pin);
    219e:	a7 e3       	ldi	r26, 0x37	; 55
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	e7 e3       	ldi	r30, 0x37	; 55
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	48 2f       	mov	r20, r24
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	28 2f       	mov	r18, r24
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	02 c0       	rjmp	.+4      	; 0x21ba <DIO_voidInpullUp+0xc4>
    21b6:	88 0f       	add	r24, r24
    21b8:	99 1f       	adc	r25, r25
    21ba:	2a 95       	dec	r18
    21bc:	e2 f7       	brpl	.-8      	; 0x21b6 <DIO_voidInpullUp+0xc0>
    21be:	80 95       	com	r24
    21c0:	84 23       	and	r24, r20
    21c2:	8c 93       	st	X, r24
        SETBIT(PORTB, EN_Pin);
    21c4:	a8 e3       	ldi	r26, 0x38	; 56
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e8 e3       	ldi	r30, 0x38	; 56
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	48 2f       	mov	r20, r24
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	02 2e       	mov	r0, r18
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <DIO_voidInpullUp+0xec>
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	0a 94       	dec	r0
    21e4:	e2 f7       	brpl	.-8      	; 0x21de <DIO_voidInpullUp+0xe8>
    21e6:	84 2b       	or	r24, r20
    21e8:	8c 93       	st	X, r24
    21ea:	4f c0       	rjmp	.+158    	; 0x228a <DIO_voidInpullUp+0x194>
        break;
    case PORT_C:
        CLRBIT(DDRC, EN_Pin);
    21ec:	a4 e3       	ldi	r26, 0x34	; 52
    21ee:	b0 e0       	ldi	r27, 0x00	; 0
    21f0:	e4 e3       	ldi	r30, 0x34	; 52
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	48 2f       	mov	r20, r24
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	02 c0       	rjmp	.+4      	; 0x2208 <DIO_voidInpullUp+0x112>
    2204:	88 0f       	add	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	2a 95       	dec	r18
    220a:	e2 f7       	brpl	.-8      	; 0x2204 <DIO_voidInpullUp+0x10e>
    220c:	80 95       	com	r24
    220e:	84 23       	and	r24, r20
    2210:	8c 93       	st	X, r24
        SETBIT(PORTC, EN_Pin);
    2212:	a5 e3       	ldi	r26, 0x35	; 53
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e5 e3       	ldi	r30, 0x35	; 53
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	48 2f       	mov	r20, r24
    221e:	8b 81       	ldd	r24, Y+3	; 0x03
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	02 2e       	mov	r0, r18
    222a:	02 c0       	rjmp	.+4      	; 0x2230 <DIO_voidInpullUp+0x13a>
    222c:	88 0f       	add	r24, r24
    222e:	99 1f       	adc	r25, r25
    2230:	0a 94       	dec	r0
    2232:	e2 f7       	brpl	.-8      	; 0x222c <DIO_voidInpullUp+0x136>
    2234:	84 2b       	or	r24, r20
    2236:	8c 93       	st	X, r24
    2238:	28 c0       	rjmp	.+80     	; 0x228a <DIO_voidInpullUp+0x194>
        break;
    case PORT_D:
        CLRBIT(DDRD, EN_Pin);
    223a:	a1 e3       	ldi	r26, 0x31	; 49
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	e1 e3       	ldi	r30, 0x31	; 49
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	48 2f       	mov	r20, r24
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	02 c0       	rjmp	.+4      	; 0x2256 <DIO_voidInpullUp+0x160>
    2252:	88 0f       	add	r24, r24
    2254:	99 1f       	adc	r25, r25
    2256:	2a 95       	dec	r18
    2258:	e2 f7       	brpl	.-8      	; 0x2252 <DIO_voidInpullUp+0x15c>
    225a:	80 95       	com	r24
    225c:	84 23       	and	r24, r20
    225e:	8c 93       	st	X, r24
        SETBIT(PORTD, EN_Pin);
    2260:	a2 e3       	ldi	r26, 0x32	; 50
    2262:	b0 e0       	ldi	r27, 0x00	; 0
    2264:	e2 e3       	ldi	r30, 0x32	; 50
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	48 2f       	mov	r20, r24
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	28 2f       	mov	r18, r24
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	02 2e       	mov	r0, r18
    2278:	02 c0       	rjmp	.+4      	; 0x227e <DIO_voidInpullUp+0x188>
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	0a 94       	dec	r0
    2280:	e2 f7       	brpl	.-8      	; 0x227a <DIO_voidInpullUp+0x184>
    2282:	84 2b       	or	r24, r20
    2284:	8c 93       	st	X, r24
    2286:	01 c0       	rjmp	.+2      	; 0x228a <DIO_voidInpullUp+0x194>
        break;
    default:
        state = E_ERROR;
    2288:	19 82       	std	Y+1, r1	; 0x01
        break;
    }
    return state;
    228a:	89 81       	ldd	r24, Y+1	; 0x01
} /* DIO_voidInpullUp */
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <MOTOR_voidInit>:


#include "DIO_Interface.h"
#include "MOTOR_Config.h"

void MOTOR_voidInit(void){
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
#if  NUM_OF_MOTORS == CONNECT_TWO_MOTOR
/*INIATE MOTOR ONE ON H-BRIDGE*/
DIO_voidSetPinDirection (MOTOR1_PORT, MOTOR1_PIN1,OUTPUT);
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	60 e0       	ldi	r22, 0x00	; 0
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR1_PORT,  MOTOR1_PIN2,OUTPUT);
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	62 e0       	ldi	r22, 0x02	; 2
    22b2:	41 e0       	ldi	r20, 0x01	; 1
    22b4:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR1_PORT,MOTOR1_ENABLE,OUTPUT);
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	63 e0       	ldi	r22, 0x03	; 3
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>

/*INIATE MOTOR TWO ON H-BRIDGE*/
DIO_voidSetPinDirection (MOTOR2_PORT, MOTOR2_PIN1,OUTPUT);
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	64 e0       	ldi	r22, 0x04	; 4
    22c6:	41 e0       	ldi	r20, 0x01	; 1
    22c8:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR2_PORT,  MOTOR2_PIN2,OUTPUT);
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	65 e0       	ldi	r22, 0x05	; 5
    22d0:	41 e0       	ldi	r20, 0x01	; 1
    22d2:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR2_PORT,MOTOR2_ENABLE,OUTPUT);
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	63 e0       	ldi	r22, 0x03	; 3
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR1_PORT,  MOTOR1_PIN2,OUTPUT);
DIO_voidSetPinDirection(MOTOR1_PORT,MOTOR1_ENABLE,OUTPUT);

#endif
#if MOTOR_STATE ==  MOTOR_Generate_pwm
DIO_voidSetPinDirection (MOTOR_PORT, MOTOR_PIN1,OUTPUT);
    22e0:	83 e0       	ldi	r24, 0x03	; 3
    22e2:	65 e0       	ldi	r22, 0x05	; 5
    22e4:	41 e0       	ldi	r20, 0x01	; 1
    22e6:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR_PORT,  MOTOR_PIN2,OUTPUT);
    22ea:	83 e0       	ldi	r24, 0x03	; 3
    22ec:	66 e0       	ldi	r22, 0x06	; 6
    22ee:	41 e0       	ldi	r20, 0x01	; 1
    22f0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>
DIO_voidSetPinDirection(MOTOR_PORT,MOTOR1_ENABLE,OUTPUT);
    22f4:	83 e0       	ldi	r24, 0x03	; 3
    22f6:	63 e0       	ldi	r22, 0x03	; 3
    22f8:	41 e0       	ldi	r20, 0x01	; 1
    22fa:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>
DIO_voidSetPinValue(MOTOR_PORT, MOTOR_PIN1,HIGH);
    22fe:	83 e0       	ldi	r24, 0x03	; 3
    2300:	65 e0       	ldi	r22, 0x05	; 5
    2302:	41 e0       	ldi	r20, 0x01	; 1
    2304:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
DIO_voidSetPinValue(MOTOR_PORT, MOTOR_PIN2,LOW);
    2308:	83 e0       	ldi	r24, 0x03	; 3
    230a:	66 e0       	ldi	r22, 0x06	; 6
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
#else
#endif
}
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	08 95       	ret

00002318 <MOTOR_voidRotateClkWise>:

void MOTOR_voidRotateClkWise(uint8_t copy_uint8_ttop,uint8_t copy_uint8_tdown){
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	00 d0       	rcall	.+0      	; 0x231e <MOTOR_voidRotateClkWise+0x6>
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	89 83       	std	Y+1, r24	; 0x01
    2324:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_uint8_ttop == 1){
    2326:	89 81       	ldd	r24, Y+1	; 0x01
    2328:	81 30       	cpi	r24, 0x01	; 1
    232a:	81 f4       	brne	.+32     	; 0x234c <MOTOR_voidRotateClkWise+0x34>
		/*INIATE MOTOR ONE ON H-BRIDGE*/
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,HIGH);
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	60 e0       	ldi	r22, 0x00	; 0
    2330:	41 e0       	ldi	r20, 0x01	; 1
    2332:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	62 e0       	ldi	r22, 0x02	; 2
    233a:	40 e0       	ldi	r20, 0x00	; 0
    233c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,MOTOR1_ENABLE, HIGH);
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	63 e0       	ldi	r22, 0x03	; 3
    2344:	41 e0       	ldi	r20, 0x01	; 1
    2346:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    234a:	0d c0       	rjmp	.+26     	; 0x2366 <MOTOR_voidRotateClkWise+0x4e>
	}
	else if(copy_uint8_ttop == 0){
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	88 23       	and	r24, r24
    2350:	51 f4       	brne	.+20     	; 0x2366 <MOTOR_voidRotateClkWise+0x4e>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	62 e0       	ldi	r22, 0x02	; 2
    2356:	40 e0       	ldi	r20, 0x00	; 0
    2358:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	62 e0       	ldi	r22, 0x02	; 2
    2360:	40 e0       	ldi	r20, 0x00	; 0
    2362:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
	}
	/*INIATE MOTOR ONE ON H-BRIDGE*/
	if(copy_uint8_tdown== 1){
    2366:	8a 81       	ldd	r24, Y+2	; 0x02
    2368:	81 30       	cpi	r24, 0x01	; 1
    236a:	81 f4       	brne	.+32     	; 0x238c <MOTOR_voidRotateClkWise+0x74>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,HIGH);
    236c:	81 e0       	ldi	r24, 0x01	; 1
    236e:	64 e0       	ldi	r22, 0x04	; 4
    2370:	41 e0       	ldi	r20, 0x01	; 1
    2372:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,LOW);
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	65 e0       	ldi	r22, 0x05	; 5
    237a:	40 e0       	ldi	r20, 0x00	; 0
    237c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_ENABLE, HIGH);
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	63 e0       	ldi	r22, 0x03	; 3
    2384:	41 e0       	ldi	r20, 0x01	; 1
    2386:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    238a:	0d c0       	rjmp	.+26     	; 0x23a6 <MOTOR_voidRotateClkWise+0x8e>
	}
	else if(copy_uint8_tdown == 0){
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	88 23       	and	r24, r24
    2390:	51 f4       	brne	.+20     	; 0x23a6 <MOTOR_voidRotateClkWise+0x8e>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_PIN2,LOW);
    2392:	81 e0       	ldi	r24, 0x01	; 1
    2394:	65 e0       	ldi	r22, 0x05	; 5
    2396:	40 e0       	ldi	r20, 0x00	; 0
    2398:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_PIN2,LOW);
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	65 e0       	ldi	r22, 0x05	; 5
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
	}

}
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <MOTOR_voidRotateAntiClkWise>:
void MOTOR_voidRotateAntiClkWise(uint8_t copy_uint8_ttop,uint8_t copy_uint8_tdown){
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <MOTOR_voidRotateAntiClkWise+0x6>
    23b6:	cd b7       	in	r28, 0x3d	; 61
    23b8:	de b7       	in	r29, 0x3e	; 62
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	6a 83       	std	Y+2, r22	; 0x02
	if (copy_uint8_ttop == 1)
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	81 30       	cpi	r24, 0x01	; 1
    23c2:	81 f4       	brne	.+32     	; 0x23e4 <MOTOR_voidRotateAntiClkWise+0x34>
	{
		/*INIATE MOTOR ONE ON H-BRIDGE*/
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,LOW);
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,  MOTOR1_PIN2,HIGH);
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	62 e0       	ldi	r22, 0x02	; 2
    23d2:	41 e0       	ldi	r20, 0x01	; 1
    23d4:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT,MOTOR1_ENABLE,HIGH);
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	63 e0       	ldi	r22, 0x03	; 3
    23dc:	41 e0       	ldi	r20, 0x01	; 1
    23de:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    23e2:	0d c0       	rjmp	.+26     	; 0x23fe <MOTOR_voidRotateAntiClkWise+0x4e>
	}
	else if(copy_uint8_ttop== 0)
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	88 23       	and	r24, r24
    23e8:	51 f4       	brne	.+20     	; 0x23fe <MOTOR_voidRotateAntiClkWise+0x4e>
	{
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN1,LOW);
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	60 e0       	ldi	r22, 0x00	; 0
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR1_PORT, MOTOR1_PIN2,LOW);
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	62 e0       	ldi	r22, 0x02	; 2
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
	}
		/*INIATE MOTOR ONE ON H-BRIDGE*/
	if(copy_uint8_tdown == 1)
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	81 30       	cpi	r24, 0x01	; 1
    2402:	81 f4       	brne	.+32     	; 0x2424 <MOTOR_voidRotateAntiClkWise+0x74>
	{
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,LOW);
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	64 e0       	ldi	r22, 0x04	; 4
    2408:	40 e0       	ldi	r20, 0x00	; 0
    240a:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,HIGH);
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	65 e0       	ldi	r22, 0x05	; 5
    2412:	41 e0       	ldi	r20, 0x01	; 1
    2414:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT, MOTOR2_ENABLE,HIGH);
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	63 e0       	ldi	r22, 0x03	; 3
    241c:	41 e0       	ldi	r20, 0x01	; 1
    241e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    2422:	0d c0       	rjmp	.+26     	; 0x243e <MOTOR_voidRotateAntiClkWise+0x8e>
	}


	else if(copy_uint8_tdown == 0 ){
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	88 23       	and	r24, r24
    2428:	51 f4       	brne	.+20     	; 0x243e <MOTOR_voidRotateAntiClkWise+0x8e>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN1,LOW);
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	64 e0       	ldi	r22, 0x04	; 4
    242e:	40 e0       	ldi	r20, 0x00	; 0
    2430:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTOR2_PORT,MOTOR2_PIN2,LOW);
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	65 e0       	ldi	r22, 0x05	; 5
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
	}


}
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <MOTOR_voidStop>:

void MOTOR_voidStop(void){
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue( MOTOR1_PORT,MOTOR1_PIN1,LOW);
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	60 e0       	ldi	r22, 0x00	; 0
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR1_PORT,MOTOR1_PIN2,LOW);
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	62 e0       	ldi	r22, 0x02	; 2
    245e:	40 e0       	ldi	r20, 0x00	; 0
    2460:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_PIN1,LOW);
    2464:	81 e0       	ldi	r24, 0x01	; 1
    2466:	64 e0       	ldi	r22, 0x04	; 4
    2468:	40 e0       	ldi	r20, 0x00	; 0
    246a:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_PIN2,LOW);
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	65 e0       	ldi	r22, 0x05	; 5
    2472:	40 e0       	ldi	r20, 0x00	; 0
    2474:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue( MOTOR2_PORT,MOTOR2_ENABLE,LOW);
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	63 e0       	ldi	r22, 0x03	; 3
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
}
    2482:	cf 91       	pop	r28
    2484:	df 91       	pop	r29
    2486:	08 95       	ret

00002488 <lcd_init>:
#define INCREMENT_CURSOR            0x06
#define LCD_FIRSTLINE				0x80
#define LCD_SECONDLINE				0xC0

void lcd_init(void)
{
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	c0 57       	subi	r28, 0x70	; 112
    2496:	d0 40       	sbci	r29, 0x00	; 0
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	fe 01       	movw	r30, r28
    24a4:	e3 59       	subi	r30, 0x93	; 147
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	a0 e2       	ldi	r26, 0x20	; 32
    24ae:	b2 e4       	ldi	r27, 0x42	; 66
    24b0:	80 83       	st	Z, r24
    24b2:	91 83       	std	Z+1, r25	; 0x01
    24b4:	a2 83       	std	Z+2, r26	; 0x02
    24b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b8:	8e 01       	movw	r16, r28
    24ba:	07 59       	subi	r16, 0x97	; 151
    24bc:	1f 4f       	sbci	r17, 0xFF	; 255
    24be:	fe 01       	movw	r30, r28
    24c0:	e3 59       	subi	r30, 0x93	; 147
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	4a ef       	ldi	r20, 0xFA	; 250
    24d2:	54 e4       	ldi	r21, 0x44	; 68
    24d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	f8 01       	movw	r30, r16
    24de:	80 83       	st	Z, r24
    24e0:	91 83       	std	Z+1, r25	; 0x01
    24e2:	a2 83       	std	Z+2, r26	; 0x02
    24e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24e6:	fe 01       	movw	r30, r28
    24e8:	e7 59       	subi	r30, 0x97	; 151
    24ea:	ff 4f       	sbci	r31, 0xFF	; 255
    24ec:	60 81       	ld	r22, Z
    24ee:	71 81       	ldd	r23, Z+1	; 0x01
    24f0:	82 81       	ldd	r24, Z+2	; 0x02
    24f2:	93 81       	ldd	r25, Z+3	; 0x03
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	40 e8       	ldi	r20, 0x80	; 128
    24fa:	5f e3       	ldi	r21, 0x3F	; 63
    24fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2500:	88 23       	and	r24, r24
    2502:	44 f4       	brge	.+16     	; 0x2514 <lcd_init+0x8c>
		__ticks = 1;
    2504:	fe 01       	movw	r30, r28
    2506:	e9 59       	subi	r30, 0x99	; 153
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	91 83       	std	Z+1, r25	; 0x01
    2510:	80 83       	st	Z, r24
    2512:	64 c0       	rjmp	.+200    	; 0x25dc <lcd_init+0x154>
	else if (__tmp > 65535)
    2514:	fe 01       	movw	r30, r28
    2516:	e7 59       	subi	r30, 0x97	; 151
    2518:	ff 4f       	sbci	r31, 0xFF	; 255
    251a:	60 81       	ld	r22, Z
    251c:	71 81       	ldd	r23, Z+1	; 0x01
    251e:	82 81       	ldd	r24, Z+2	; 0x02
    2520:	93 81       	ldd	r25, Z+3	; 0x03
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	3f ef       	ldi	r19, 0xFF	; 255
    2526:	4f e7       	ldi	r20, 0x7F	; 127
    2528:	57 e4       	ldi	r21, 0x47	; 71
    252a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    252e:	18 16       	cp	r1, r24
    2530:	0c f0       	brlt	.+2      	; 0x2534 <lcd_init+0xac>
    2532:	43 c0       	rjmp	.+134    	; 0x25ba <lcd_init+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2534:	fe 01       	movw	r30, r28
    2536:	e3 59       	subi	r30, 0x93	; 147
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	60 81       	ld	r22, Z
    253c:	71 81       	ldd	r23, Z+1	; 0x01
    253e:	82 81       	ldd	r24, Z+2	; 0x02
    2540:	93 81       	ldd	r25, Z+3	; 0x03
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e2       	ldi	r20, 0x20	; 32
    2548:	51 e4       	ldi	r21, 0x41	; 65
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	8e 01       	movw	r16, r28
    2554:	09 59       	subi	r16, 0x99	; 153
    2556:	1f 4f       	sbci	r17, 0xFF	; 255
    2558:	bc 01       	movw	r22, r24
    255a:	cd 01       	movw	r24, r26
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	f8 01       	movw	r30, r16
    2566:	91 83       	std	Z+1, r25	; 0x01
    2568:	80 83       	st	Z, r24
    256a:	1f c0       	rjmp	.+62     	; 0x25aa <lcd_init+0x122>
    256c:	fe 01       	movw	r30, r28
    256e:	eb 59       	subi	r30, 0x9B	; 155
    2570:	ff 4f       	sbci	r31, 0xFF	; 255
    2572:	88 ec       	ldi	r24, 0xC8	; 200
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	91 83       	std	Z+1, r25	; 0x01
    2578:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    257a:	fe 01       	movw	r30, r28
    257c:	eb 59       	subi	r30, 0x9B	; 155
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	80 81       	ld	r24, Z
    2582:	91 81       	ldd	r25, Z+1	; 0x01
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <lcd_init+0xfc>
    2588:	fe 01       	movw	r30, r28
    258a:	eb 59       	subi	r30, 0x9B	; 155
    258c:	ff 4f       	sbci	r31, 0xFF	; 255
    258e:	91 83       	std	Z+1, r25	; 0x01
    2590:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2592:	de 01       	movw	r26, r28
    2594:	a9 59       	subi	r26, 0x99	; 153
    2596:	bf 4f       	sbci	r27, 0xFF	; 255
    2598:	fe 01       	movw	r30, r28
    259a:	e9 59       	subi	r30, 0x99	; 153
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	80 81       	ld	r24, Z
    25a0:	91 81       	ldd	r25, Z+1	; 0x01
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	11 96       	adiw	r26, 0x01	; 1
    25a6:	9c 93       	st	X, r25
    25a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25aa:	fe 01       	movw	r30, r28
    25ac:	e9 59       	subi	r30, 0x99	; 153
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 81       	ld	r24, Z
    25b2:	91 81       	ldd	r25, Z+1	; 0x01
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	d1 f6       	brne	.-76     	; 0x256c <lcd_init+0xe4>
    25b8:	27 c0       	rjmp	.+78     	; 0x2608 <lcd_init+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ba:	8e 01       	movw	r16, r28
    25bc:	09 59       	subi	r16, 0x99	; 153
    25be:	1f 4f       	sbci	r17, 0xFF	; 255
    25c0:	fe 01       	movw	r30, r28
    25c2:	e7 59       	subi	r30, 0x97	; 151
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	60 81       	ld	r22, Z
    25c8:	71 81       	ldd	r23, Z+1	; 0x01
    25ca:	82 81       	ldd	r24, Z+2	; 0x02
    25cc:	93 81       	ldd	r25, Z+3	; 0x03
    25ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	f8 01       	movw	r30, r16
    25d8:	91 83       	std	Z+1, r25	; 0x01
    25da:	80 83       	st	Z, r24
    25dc:	de 01       	movw	r26, r28
    25de:	ad 59       	subi	r26, 0x9D	; 157
    25e0:	bf 4f       	sbci	r27, 0xFF	; 255
    25e2:	fe 01       	movw	r30, r28
    25e4:	e9 59       	subi	r30, 0x99	; 153
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	80 81       	ld	r24, Z
    25ea:	91 81       	ldd	r25, Z+1	; 0x01
    25ec:	8d 93       	st	X+, r24
    25ee:	9c 93       	st	X, r25
    25f0:	fe 01       	movw	r30, r28
    25f2:	ed 59       	subi	r30, 0x9D	; 157
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	80 81       	ld	r24, Z
    25f8:	91 81       	ldd	r25, Z+1	; 0x01
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <lcd_init+0x172>
    25fe:	fe 01       	movw	r30, r28
    2600:	ed 59       	subi	r30, 0x9D	; 157
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	80 83       	st	Z, r24
    _delay_ms(40);    
 
    DIO_voidSetPinDirection(LS_PIN,OUTPUT);
    2608:	82 e0       	ldi	r24, 0x02	; 2
    260a:	60 e0       	ldi	r22, 0x00	; 0
    260c:	41 e0       	ldi	r20, 0x01	; 1
    260e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(EN_PIN,OUTPUT);
    2612:	82 e0       	ldi	r24, 0x02	; 2
    2614:	62 e0       	ldi	r22, 0x02	; 2
    2616:	41 e0       	ldi	r20, 0x01	; 1
    2618:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(R_W_PIN,OUTPUT);	
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	61 e0       	ldi	r22, 0x01	; 1
    2620:	41 e0       	ldi	r20, 0x01	; 1
    2622:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>
    2626:	fe 01       	movw	r30, r28
    2628:	e1 5a       	subi	r30, 0xA1	; 161
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	80 e0       	ldi	r24, 0x00	; 0
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	a0 ea       	ldi	r26, 0xA0	; 160
    2632:	b0 e4       	ldi	r27, 0x40	; 64
    2634:	80 83       	st	Z, r24
    2636:	91 83       	std	Z+1, r25	; 0x01
    2638:	a2 83       	std	Z+2, r26	; 0x02
    263a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    263c:	8e 01       	movw	r16, r28
    263e:	05 5a       	subi	r16, 0xA5	; 165
    2640:	1f 4f       	sbci	r17, 0xFF	; 255
    2642:	fe 01       	movw	r30, r28
    2644:	e1 5a       	subi	r30, 0xA1	; 161
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	60 81       	ld	r22, Z
    264a:	71 81       	ldd	r23, Z+1	; 0x01
    264c:	82 81       	ldd	r24, Z+2	; 0x02
    264e:	93 81       	ldd	r25, Z+3	; 0x03
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	4a ef       	ldi	r20, 0xFA	; 250
    2656:	54 e4       	ldi	r21, 0x44	; 68
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	f8 01       	movw	r30, r16
    2662:	80 83       	st	Z, r24
    2664:	91 83       	std	Z+1, r25	; 0x01
    2666:	a2 83       	std	Z+2, r26	; 0x02
    2668:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    266a:	fe 01       	movw	r30, r28
    266c:	e5 5a       	subi	r30, 0xA5	; 165
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	60 81       	ld	r22, Z
    2672:	71 81       	ldd	r23, Z+1	; 0x01
    2674:	82 81       	ldd	r24, Z+2	; 0x02
    2676:	93 81       	ldd	r25, Z+3	; 0x03
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e8       	ldi	r20, 0x80	; 128
    267e:	5f e3       	ldi	r21, 0x3F	; 63
    2680:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2684:	88 23       	and	r24, r24
    2686:	44 f4       	brge	.+16     	; 0x2698 <lcd_init+0x210>
		__ticks = 1;
    2688:	fe 01       	movw	r30, r28
    268a:	e7 5a       	subi	r30, 0xA7	; 167
    268c:	ff 4f       	sbci	r31, 0xFF	; 255
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	80 83       	st	Z, r24
    2696:	64 c0       	rjmp	.+200    	; 0x2760 <lcd_init+0x2d8>
	else if (__tmp > 65535)
    2698:	fe 01       	movw	r30, r28
    269a:	e5 5a       	subi	r30, 0xA5	; 165
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	60 81       	ld	r22, Z
    26a0:	71 81       	ldd	r23, Z+1	; 0x01
    26a2:	82 81       	ldd	r24, Z+2	; 0x02
    26a4:	93 81       	ldd	r25, Z+3	; 0x03
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	3f ef       	ldi	r19, 0xFF	; 255
    26aa:	4f e7       	ldi	r20, 0x7F	; 127
    26ac:	57 e4       	ldi	r21, 0x47	; 71
    26ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b2:	18 16       	cp	r1, r24
    26b4:	0c f0       	brlt	.+2      	; 0x26b8 <lcd_init+0x230>
    26b6:	43 c0       	rjmp	.+134    	; 0x273e <lcd_init+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b8:	fe 01       	movw	r30, r28
    26ba:	e1 5a       	subi	r30, 0xA1	; 161
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	60 81       	ld	r22, Z
    26c0:	71 81       	ldd	r23, Z+1	; 0x01
    26c2:	82 81       	ldd	r24, Z+2	; 0x02
    26c4:	93 81       	ldd	r25, Z+3	; 0x03
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e2       	ldi	r20, 0x20	; 32
    26cc:	51 e4       	ldi	r21, 0x41	; 65
    26ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d2:	dc 01       	movw	r26, r24
    26d4:	cb 01       	movw	r24, r22
    26d6:	8e 01       	movw	r16, r28
    26d8:	07 5a       	subi	r16, 0xA7	; 167
    26da:	1f 4f       	sbci	r17, 0xFF	; 255
    26dc:	bc 01       	movw	r22, r24
    26de:	cd 01       	movw	r24, r26
    26e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	f8 01       	movw	r30, r16
    26ea:	91 83       	std	Z+1, r25	; 0x01
    26ec:	80 83       	st	Z, r24
    26ee:	1f c0       	rjmp	.+62     	; 0x272e <lcd_init+0x2a6>
    26f0:	fe 01       	movw	r30, r28
    26f2:	e9 5a       	subi	r30, 0xA9	; 169
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	88 ec       	ldi	r24, 0xC8	; 200
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	91 83       	std	Z+1, r25	; 0x01
    26fc:	80 83       	st	Z, r24
    26fe:	fe 01       	movw	r30, r28
    2700:	e9 5a       	subi	r30, 0xA9	; 169
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	91 81       	ldd	r25, Z+1	; 0x01
    2708:	01 97       	sbiw	r24, 0x01	; 1
    270a:	f1 f7       	brne	.-4      	; 0x2708 <lcd_init+0x280>
    270c:	fe 01       	movw	r30, r28
    270e:	e9 5a       	subi	r30, 0xA9	; 169
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	91 83       	std	Z+1, r25	; 0x01
    2714:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2716:	de 01       	movw	r26, r28
    2718:	a7 5a       	subi	r26, 0xA7	; 167
    271a:	bf 4f       	sbci	r27, 0xFF	; 255
    271c:	fe 01       	movw	r30, r28
    271e:	e7 5a       	subi	r30, 0xA7	; 167
    2720:	ff 4f       	sbci	r31, 0xFF	; 255
    2722:	80 81       	ld	r24, Z
    2724:	91 81       	ldd	r25, Z+1	; 0x01
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	11 96       	adiw	r26, 0x01	; 1
    272a:	9c 93       	st	X, r25
    272c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272e:	fe 01       	movw	r30, r28
    2730:	e7 5a       	subi	r30, 0xA7	; 167
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 81       	ld	r24, Z
    2736:	91 81       	ldd	r25, Z+1	; 0x01
    2738:	00 97       	sbiw	r24, 0x00	; 0
    273a:	d1 f6       	brne	.-76     	; 0x26f0 <lcd_init+0x268>
    273c:	27 c0       	rjmp	.+78     	; 0x278c <lcd_init+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273e:	8e 01       	movw	r16, r28
    2740:	07 5a       	subi	r16, 0xA7	; 167
    2742:	1f 4f       	sbci	r17, 0xFF	; 255
    2744:	fe 01       	movw	r30, r28
    2746:	e5 5a       	subi	r30, 0xA5	; 165
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	60 81       	ld	r22, Z
    274c:	71 81       	ldd	r23, Z+1	; 0x01
    274e:	82 81       	ldd	r24, Z+2	; 0x02
    2750:	93 81       	ldd	r25, Z+3	; 0x03
    2752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	f8 01       	movw	r30, r16
    275c:	91 83       	std	Z+1, r25	; 0x01
    275e:	80 83       	st	Z, r24
    2760:	de 01       	movw	r26, r28
    2762:	ab 5a       	subi	r26, 0xAB	; 171
    2764:	bf 4f       	sbci	r27, 0xFF	; 255
    2766:	fe 01       	movw	r30, r28
    2768:	e7 5a       	subi	r30, 0xA7	; 167
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	80 81       	ld	r24, Z
    276e:	91 81       	ldd	r25, Z+1	; 0x01
    2770:	8d 93       	st	X+, r24
    2772:	9c 93       	st	X, r25
    2774:	fe 01       	movw	r30, r28
    2776:	eb 5a       	subi	r30, 0xAB	; 171
    2778:	ff 4f       	sbci	r31, 0xFF	; 255
    277a:	80 81       	ld	r24, Z
    277c:	91 81       	ldd	r25, Z+1	; 0x01
    277e:	01 97       	sbiw	r24, 0x01	; 1
    2780:	f1 f7       	brne	.-4      	; 0x277e <lcd_init+0x2f6>
    2782:	fe 01       	movw	r30, r28
    2784:	eb 5a       	subi	r30, 0xAB	; 171
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	91 83       	std	Z+1, r25	; 0x01
    278a:	80 83       	st	Z, r24
	_delay_ms(5);	
    DIO_voidSetPortDirection(LCD_DATA_PORT,PRTOUTPUT );
    278c:	82 e0       	ldi	r24, 0x02	; 2
    278e:	6f ef       	ldi	r22, 0xFF	; 255
    2790:	0e 94 33 10 	call	0x2066	; 0x2066 <DIO_voidSetPortDirection>

    lcd_command(0x33);
    2794:	83 e3       	ldi	r24, 0x33	; 51
    2796:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <lcd_command>
    279a:	fe 01       	movw	r30, r28
    279c:	ef 5a       	subi	r30, 0xAF	; 175
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	80 e0       	ldi	r24, 0x00	; 0
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	a0 e0       	ldi	r26, 0x00	; 0
    27a6:	b0 e4       	ldi	r27, 0x40	; 64
    27a8:	80 83       	st	Z, r24
    27aa:	91 83       	std	Z+1, r25	; 0x01
    27ac:	a2 83       	std	Z+2, r26	; 0x02
    27ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b0:	8e 01       	movw	r16, r28
    27b2:	03 5b       	subi	r16, 0xB3	; 179
    27b4:	1f 4f       	sbci	r17, 0xFF	; 255
    27b6:	fe 01       	movw	r30, r28
    27b8:	ef 5a       	subi	r30, 0xAF	; 175
    27ba:	ff 4f       	sbci	r31, 0xFF	; 255
    27bc:	60 81       	ld	r22, Z
    27be:	71 81       	ldd	r23, Z+1	; 0x01
    27c0:	82 81       	ldd	r24, Z+2	; 0x02
    27c2:	93 81       	ldd	r25, Z+3	; 0x03
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	4a ef       	ldi	r20, 0xFA	; 250
    27ca:	54 e4       	ldi	r21, 0x44	; 68
    27cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d0:	dc 01       	movw	r26, r24
    27d2:	cb 01       	movw	r24, r22
    27d4:	f8 01       	movw	r30, r16
    27d6:	80 83       	st	Z, r24
    27d8:	91 83       	std	Z+1, r25	; 0x01
    27da:	a2 83       	std	Z+2, r26	; 0x02
    27dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27de:	fe 01       	movw	r30, r28
    27e0:	e3 5b       	subi	r30, 0xB3	; 179
    27e2:	ff 4f       	sbci	r31, 0xFF	; 255
    27e4:	60 81       	ld	r22, Z
    27e6:	71 81       	ldd	r23, Z+1	; 0x01
    27e8:	82 81       	ldd	r24, Z+2	; 0x02
    27ea:	93 81       	ldd	r25, Z+3	; 0x03
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e8       	ldi	r20, 0x80	; 128
    27f2:	5f e3       	ldi	r21, 0x3F	; 63
    27f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27f8:	88 23       	and	r24, r24
    27fa:	44 f4       	brge	.+16     	; 0x280c <lcd_init+0x384>
		__ticks = 1;
    27fc:	fe 01       	movw	r30, r28
    27fe:	e5 5b       	subi	r30, 0xB5	; 181
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	91 83       	std	Z+1, r25	; 0x01
    2808:	80 83       	st	Z, r24
    280a:	64 c0       	rjmp	.+200    	; 0x28d4 <lcd_init+0x44c>
	else if (__tmp > 65535)
    280c:	fe 01       	movw	r30, r28
    280e:	e3 5b       	subi	r30, 0xB3	; 179
    2810:	ff 4f       	sbci	r31, 0xFF	; 255
    2812:	60 81       	ld	r22, Z
    2814:	71 81       	ldd	r23, Z+1	; 0x01
    2816:	82 81       	ldd	r24, Z+2	; 0x02
    2818:	93 81       	ldd	r25, Z+3	; 0x03
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	3f ef       	ldi	r19, 0xFF	; 255
    281e:	4f e7       	ldi	r20, 0x7F	; 127
    2820:	57 e4       	ldi	r21, 0x47	; 71
    2822:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2826:	18 16       	cp	r1, r24
    2828:	0c f0       	brlt	.+2      	; 0x282c <lcd_init+0x3a4>
    282a:	43 c0       	rjmp	.+134    	; 0x28b2 <lcd_init+0x42a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    282c:	fe 01       	movw	r30, r28
    282e:	ef 5a       	subi	r30, 0xAF	; 175
    2830:	ff 4f       	sbci	r31, 0xFF	; 255
    2832:	60 81       	ld	r22, Z
    2834:	71 81       	ldd	r23, Z+1	; 0x01
    2836:	82 81       	ldd	r24, Z+2	; 0x02
    2838:	93 81       	ldd	r25, Z+3	; 0x03
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e2       	ldi	r20, 0x20	; 32
    2840:	51 e4       	ldi	r21, 0x41	; 65
    2842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	8e 01       	movw	r16, r28
    284c:	05 5b       	subi	r16, 0xB5	; 181
    284e:	1f 4f       	sbci	r17, 0xFF	; 255
    2850:	bc 01       	movw	r22, r24
    2852:	cd 01       	movw	r24, r26
    2854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	f8 01       	movw	r30, r16
    285e:	91 83       	std	Z+1, r25	; 0x01
    2860:	80 83       	st	Z, r24
    2862:	1f c0       	rjmp	.+62     	; 0x28a2 <lcd_init+0x41a>
    2864:	fe 01       	movw	r30, r28
    2866:	e7 5b       	subi	r30, 0xB7	; 183
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	88 ec       	ldi	r24, 0xC8	; 200
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	91 83       	std	Z+1, r25	; 0x01
    2870:	80 83       	st	Z, r24
    2872:	fe 01       	movw	r30, r28
    2874:	e7 5b       	subi	r30, 0xB7	; 183
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	80 81       	ld	r24, Z
    287a:	91 81       	ldd	r25, Z+1	; 0x01
    287c:	01 97       	sbiw	r24, 0x01	; 1
    287e:	f1 f7       	brne	.-4      	; 0x287c <lcd_init+0x3f4>
    2880:	fe 01       	movw	r30, r28
    2882:	e7 5b       	subi	r30, 0xB7	; 183
    2884:	ff 4f       	sbci	r31, 0xFF	; 255
    2886:	91 83       	std	Z+1, r25	; 0x01
    2888:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288a:	de 01       	movw	r26, r28
    288c:	a5 5b       	subi	r26, 0xB5	; 181
    288e:	bf 4f       	sbci	r27, 0xFF	; 255
    2890:	fe 01       	movw	r30, r28
    2892:	e5 5b       	subi	r30, 0xB5	; 181
    2894:	ff 4f       	sbci	r31, 0xFF	; 255
    2896:	80 81       	ld	r24, Z
    2898:	91 81       	ldd	r25, Z+1	; 0x01
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	11 96       	adiw	r26, 0x01	; 1
    289e:	9c 93       	st	X, r25
    28a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a2:	fe 01       	movw	r30, r28
    28a4:	e5 5b       	subi	r30, 0xB5	; 181
    28a6:	ff 4f       	sbci	r31, 0xFF	; 255
    28a8:	80 81       	ld	r24, Z
    28aa:	91 81       	ldd	r25, Z+1	; 0x01
    28ac:	00 97       	sbiw	r24, 0x00	; 0
    28ae:	d1 f6       	brne	.-76     	; 0x2864 <lcd_init+0x3dc>
    28b0:	27 c0       	rjmp	.+78     	; 0x2900 <lcd_init+0x478>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b2:	8e 01       	movw	r16, r28
    28b4:	05 5b       	subi	r16, 0xB5	; 181
    28b6:	1f 4f       	sbci	r17, 0xFF	; 255
    28b8:	fe 01       	movw	r30, r28
    28ba:	e3 5b       	subi	r30, 0xB3	; 179
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	60 81       	ld	r22, Z
    28c0:	71 81       	ldd	r23, Z+1	; 0x01
    28c2:	82 81       	ldd	r24, Z+2	; 0x02
    28c4:	93 81       	ldd	r25, Z+3	; 0x03
    28c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	f8 01       	movw	r30, r16
    28d0:	91 83       	std	Z+1, r25	; 0x01
    28d2:	80 83       	st	Z, r24
    28d4:	de 01       	movw	r26, r28
    28d6:	a9 5b       	subi	r26, 0xB9	; 185
    28d8:	bf 4f       	sbci	r27, 0xFF	; 255
    28da:	fe 01       	movw	r30, r28
    28dc:	e5 5b       	subi	r30, 0xB5	; 181
    28de:	ff 4f       	sbci	r31, 0xFF	; 255
    28e0:	80 81       	ld	r24, Z
    28e2:	91 81       	ldd	r25, Z+1	; 0x01
    28e4:	8d 93       	st	X+, r24
    28e6:	9c 93       	st	X, r25
    28e8:	fe 01       	movw	r30, r28
    28ea:	e9 5b       	subi	r30, 0xB9	; 185
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 81       	ld	r24, Z
    28f0:	91 81       	ldd	r25, Z+1	; 0x01
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <lcd_init+0x46a>
    28f6:	fe 01       	movw	r30, r28
    28f8:	e9 5b       	subi	r30, 0xB9	; 185
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	91 83       	std	Z+1, r25	; 0x01
    28fe:	80 83       	st	Z, r24
    _delay_ms(2);	
    lcd_command(0x32);    
    2900:	82 e3       	ldi	r24, 0x32	; 50
    2902:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <lcd_command>
    2906:	fe 01       	movw	r30, r28
    2908:	ed 5b       	subi	r30, 0xBD	; 189
    290a:	ff 4f       	sbci	r31, 0xFF	; 255
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	a0 e0       	ldi	r26, 0x00	; 0
    2912:	b0 e4       	ldi	r27, 0x40	; 64
    2914:	80 83       	st	Z, r24
    2916:	91 83       	std	Z+1, r25	; 0x01
    2918:	a2 83       	std	Z+2, r26	; 0x02
    291a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291c:	8e 01       	movw	r16, r28
    291e:	01 5c       	subi	r16, 0xC1	; 193
    2920:	1f 4f       	sbci	r17, 0xFF	; 255
    2922:	fe 01       	movw	r30, r28
    2924:	ed 5b       	subi	r30, 0xBD	; 189
    2926:	ff 4f       	sbci	r31, 0xFF	; 255
    2928:	60 81       	ld	r22, Z
    292a:	71 81       	ldd	r23, Z+1	; 0x01
    292c:	82 81       	ldd	r24, Z+2	; 0x02
    292e:	93 81       	ldd	r25, Z+3	; 0x03
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	4a ef       	ldi	r20, 0xFA	; 250
    2936:	54 e4       	ldi	r21, 0x44	; 68
    2938:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	f8 01       	movw	r30, r16
    2942:	80 83       	st	Z, r24
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	a2 83       	std	Z+2, r26	; 0x02
    2948:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    294a:	fe 01       	movw	r30, r28
    294c:	ff 96       	adiw	r30, 0x3f	; 63
    294e:	60 81       	ld	r22, Z
    2950:	71 81       	ldd	r23, Z+1	; 0x01
    2952:	82 81       	ldd	r24, Z+2	; 0x02
    2954:	93 81       	ldd	r25, Z+3	; 0x03
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e8       	ldi	r20, 0x80	; 128
    295c:	5f e3       	ldi	r21, 0x3F	; 63
    295e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2962:	88 23       	and	r24, r24
    2964:	2c f4       	brge	.+10     	; 0x2970 <lcd_init+0x4e8>
		__ticks = 1;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	9e af       	std	Y+62, r25	; 0x3e
    296c:	8d af       	std	Y+61, r24	; 0x3d
    296e:	46 c0       	rjmp	.+140    	; 0x29fc <lcd_init+0x574>
	else if (__tmp > 65535)
    2970:	fe 01       	movw	r30, r28
    2972:	ff 96       	adiw	r30, 0x3f	; 63
    2974:	60 81       	ld	r22, Z
    2976:	71 81       	ldd	r23, Z+1	; 0x01
    2978:	82 81       	ldd	r24, Z+2	; 0x02
    297a:	93 81       	ldd	r25, Z+3	; 0x03
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	3f ef       	ldi	r19, 0xFF	; 255
    2980:	4f e7       	ldi	r20, 0x7F	; 127
    2982:	57 e4       	ldi	r21, 0x47	; 71
    2984:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2988:	18 16       	cp	r1, r24
    298a:	64 f5       	brge	.+88     	; 0x29e4 <lcd_init+0x55c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298c:	fe 01       	movw	r30, r28
    298e:	ed 5b       	subi	r30, 0xBD	; 189
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	60 81       	ld	r22, Z
    2994:	71 81       	ldd	r23, Z+1	; 0x01
    2996:	82 81       	ldd	r24, Z+2	; 0x02
    2998:	93 81       	ldd	r25, Z+3	; 0x03
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e2       	ldi	r20, 0x20	; 32
    29a0:	51 e4       	ldi	r21, 0x41	; 65
    29a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	bc 01       	movw	r22, r24
    29ac:	cd 01       	movw	r24, r26
    29ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	9e af       	std	Y+62, r25	; 0x3e
    29b8:	8d af       	std	Y+61, r24	; 0x3d
    29ba:	0f c0       	rjmp	.+30     	; 0x29da <lcd_init+0x552>
    29bc:	88 ec       	ldi	r24, 0xC8	; 200
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	9c af       	std	Y+60, r25	; 0x3c
    29c2:	8b af       	std	Y+59, r24	; 0x3b
    29c4:	8b ad       	ldd	r24, Y+59	; 0x3b
    29c6:	9c ad       	ldd	r25, Y+60	; 0x3c
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <lcd_init+0x540>
    29cc:	9c af       	std	Y+60, r25	; 0x3c
    29ce:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    29d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	9e af       	std	Y+62, r25	; 0x3e
    29d8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29da:	8d ad       	ldd	r24, Y+61	; 0x3d
    29dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	69 f7       	brne	.-38     	; 0x29bc <lcd_init+0x534>
    29e2:	16 c0       	rjmp	.+44     	; 0x2a10 <lcd_init+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e4:	fe 01       	movw	r30, r28
    29e6:	ff 96       	adiw	r30, 0x3f	; 63
    29e8:	60 81       	ld	r22, Z
    29ea:	71 81       	ldd	r23, Z+1	; 0x01
    29ec:	82 81       	ldd	r24, Z+2	; 0x02
    29ee:	93 81       	ldd	r25, Z+3	; 0x03
    29f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	9e af       	std	Y+62, r25	; 0x3e
    29fa:	8d af       	std	Y+61, r24	; 0x3d
    29fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    29fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a00:	9a af       	std	Y+58, r25	; 0x3a
    2a02:	89 af       	std	Y+57, r24	; 0x39
    2a04:	89 ad       	ldd	r24, Y+57	; 0x39
    2a06:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a08:	01 97       	sbiw	r24, 0x01	; 1
    2a0a:	f1 f7       	brne	.-4      	; 0x2a08 <lcd_init+0x580>
    2a0c:	9a af       	std	Y+58, r25	; 0x3a
    2a0e:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
    lcd_command(TWO_LINES_5X7_DOT_MATRIX);
    2a10:	88 e2       	ldi	r24, 0x28	; 40
    2a12:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <lcd_command>
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	a0 e0       	ldi	r26, 0x00	; 0
    2a1c:	b0 e4       	ldi	r27, 0x40	; 64
    2a1e:	8d ab       	std	Y+53, r24	; 0x35
    2a20:	9e ab       	std	Y+54, r25	; 0x36
    2a22:	af ab       	std	Y+55, r26	; 0x37
    2a24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a26:	6d a9       	ldd	r22, Y+53	; 0x35
    2a28:	7e a9       	ldd	r23, Y+54	; 0x36
    2a2a:	8f a9       	ldd	r24, Y+55	; 0x37
    2a2c:	98 ad       	ldd	r25, Y+56	; 0x38
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	4a ef       	ldi	r20, 0xFA	; 250
    2a34:	54 e4       	ldi	r21, 0x44	; 68
    2a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	89 ab       	std	Y+49, r24	; 0x31
    2a40:	9a ab       	std	Y+50, r25	; 0x32
    2a42:	ab ab       	std	Y+51, r26	; 0x33
    2a44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a46:	69 a9       	ldd	r22, Y+49	; 0x31
    2a48:	7a a9       	ldd	r23, Y+50	; 0x32
    2a4a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a4c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	40 e8       	ldi	r20, 0x80	; 128
    2a54:	5f e3       	ldi	r21, 0x3F	; 63
    2a56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a5a:	88 23       	and	r24, r24
    2a5c:	2c f4       	brge	.+10     	; 0x2a68 <lcd_init+0x5e0>
		__ticks = 1;
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	98 ab       	std	Y+48, r25	; 0x30
    2a64:	8f a7       	std	Y+47, r24	; 0x2f
    2a66:	3f c0       	rjmp	.+126    	; 0x2ae6 <lcd_init+0x65e>
	else if (__tmp > 65535)
    2a68:	69 a9       	ldd	r22, Y+49	; 0x31
    2a6a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a6c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a6e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	3f ef       	ldi	r19, 0xFF	; 255
    2a74:	4f e7       	ldi	r20, 0x7F	; 127
    2a76:	57 e4       	ldi	r21, 0x47	; 71
    2a78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a7c:	18 16       	cp	r1, r24
    2a7e:	4c f5       	brge	.+82     	; 0x2ad2 <lcd_init+0x64a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a80:	6d a9       	ldd	r22, Y+53	; 0x35
    2a82:	7e a9       	ldd	r23, Y+54	; 0x36
    2a84:	8f a9       	ldd	r24, Y+55	; 0x37
    2a86:	98 ad       	ldd	r25, Y+56	; 0x38
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e2       	ldi	r20, 0x20	; 32
    2a8e:	51 e4       	ldi	r21, 0x41	; 65
    2a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	98 ab       	std	Y+48, r25	; 0x30
    2aa6:	8f a7       	std	Y+47, r24	; 0x2f
    2aa8:	0f c0       	rjmp	.+30     	; 0x2ac8 <lcd_init+0x640>
    2aaa:	88 ec       	ldi	r24, 0xC8	; 200
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	9e a7       	std	Y+46, r25	; 0x2e
    2ab0:	8d a7       	std	Y+45, r24	; 0x2d
    2ab2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ab4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <lcd_init+0x62e>
    2aba:	9e a7       	std	Y+46, r25	; 0x2e
    2abc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2abe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ac0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	98 ab       	std	Y+48, r25	; 0x30
    2ac6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aca:	98 a9       	ldd	r25, Y+48	; 0x30
    2acc:	00 97       	sbiw	r24, 0x00	; 0
    2ace:	69 f7       	brne	.-38     	; 0x2aaa <lcd_init+0x622>
    2ad0:	14 c0       	rjmp	.+40     	; 0x2afa <lcd_init+0x672>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad2:	69 a9       	ldd	r22, Y+49	; 0x31
    2ad4:	7a a9       	ldd	r23, Y+50	; 0x32
    2ad6:	8b a9       	ldd	r24, Y+51	; 0x33
    2ad8:	9c a9       	ldd	r25, Y+52	; 0x34
    2ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	98 ab       	std	Y+48, r25	; 0x30
    2ae4:	8f a7       	std	Y+47, r24	; 0x2f
    2ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae8:	98 a9       	ldd	r25, Y+48	; 0x30
    2aea:	9c a7       	std	Y+44, r25	; 0x2c
    2aec:	8b a7       	std	Y+43, r24	; 0x2b
    2aee:	8b a5       	ldd	r24, Y+43	; 0x2b
    2af0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	f1 f7       	brne	.-4      	; 0x2af2 <lcd_init+0x66a>
    2af6:	9c a7       	std	Y+44, r25	; 0x2c
    2af8:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);
    lcd_command(DISPLAY_ON_CURSOR_OFF);
    2afa:	8c e0       	ldi	r24, 0x0C	; 12
    2afc:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <lcd_command>
    2b00:	80 e0       	ldi	r24, 0x00	; 0
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	a0 e0       	ldi	r26, 0x00	; 0
    2b06:	b0 e4       	ldi	r27, 0x40	; 64
    2b08:	8f a3       	std	Y+39, r24	; 0x27
    2b0a:	98 a7       	std	Y+40, r25	; 0x28
    2b0c:	a9 a7       	std	Y+41, r26	; 0x29
    2b0e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b10:	6f a1       	ldd	r22, Y+39	; 0x27
    2b12:	78 a5       	ldd	r23, Y+40	; 0x28
    2b14:	89 a5       	ldd	r24, Y+41	; 0x29
    2b16:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	4a ef       	ldi	r20, 0xFA	; 250
    2b1e:	54 e4       	ldi	r21, 0x44	; 68
    2b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	8b a3       	std	Y+35, r24	; 0x23
    2b2a:	9c a3       	std	Y+36, r25	; 0x24
    2b2c:	ad a3       	std	Y+37, r26	; 0x25
    2b2e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b30:	6b a1       	ldd	r22, Y+35	; 0x23
    2b32:	7c a1       	ldd	r23, Y+36	; 0x24
    2b34:	8d a1       	ldd	r24, Y+37	; 0x25
    2b36:	9e a1       	ldd	r25, Y+38	; 0x26
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e8       	ldi	r20, 0x80	; 128
    2b3e:	5f e3       	ldi	r21, 0x3F	; 63
    2b40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b44:	88 23       	and	r24, r24
    2b46:	2c f4       	brge	.+10     	; 0x2b52 <lcd_init+0x6ca>
		__ticks = 1;
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	9a a3       	std	Y+34, r25	; 0x22
    2b4e:	89 a3       	std	Y+33, r24	; 0x21
    2b50:	3f c0       	rjmp	.+126    	; 0x2bd0 <lcd_init+0x748>
	else if (__tmp > 65535)
    2b52:	6b a1       	ldd	r22, Y+35	; 0x23
    2b54:	7c a1       	ldd	r23, Y+36	; 0x24
    2b56:	8d a1       	ldd	r24, Y+37	; 0x25
    2b58:	9e a1       	ldd	r25, Y+38	; 0x26
    2b5a:	20 e0       	ldi	r18, 0x00	; 0
    2b5c:	3f ef       	ldi	r19, 0xFF	; 255
    2b5e:	4f e7       	ldi	r20, 0x7F	; 127
    2b60:	57 e4       	ldi	r21, 0x47	; 71
    2b62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b66:	18 16       	cp	r1, r24
    2b68:	4c f5       	brge	.+82     	; 0x2bbc <lcd_init+0x734>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6a:	6f a1       	ldd	r22, Y+39	; 0x27
    2b6c:	78 a5       	ldd	r23, Y+40	; 0x28
    2b6e:	89 a5       	ldd	r24, Y+41	; 0x29
    2b70:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	40 e2       	ldi	r20, 0x20	; 32
    2b78:	51 e4       	ldi	r21, 0x41	; 65
    2b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	bc 01       	movw	r22, r24
    2b84:	cd 01       	movw	r24, r26
    2b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	9a a3       	std	Y+34, r25	; 0x22
    2b90:	89 a3       	std	Y+33, r24	; 0x21
    2b92:	0f c0       	rjmp	.+30     	; 0x2bb2 <lcd_init+0x72a>
    2b94:	88 ec       	ldi	r24, 0xC8	; 200
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	98 a3       	std	Y+32, r25	; 0x20
    2b9a:	8f 8f       	std	Y+31, r24	; 0x1f
    2b9c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b9e:	98 a1       	ldd	r25, Y+32	; 0x20
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	f1 f7       	brne	.-4      	; 0x2ba0 <lcd_init+0x718>
    2ba4:	98 a3       	std	Y+32, r25	; 0x20
    2ba6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba8:	89 a1       	ldd	r24, Y+33	; 0x21
    2baa:	9a a1       	ldd	r25, Y+34	; 0x22
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	9a a3       	std	Y+34, r25	; 0x22
    2bb0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb2:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb4:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb6:	00 97       	sbiw	r24, 0x00	; 0
    2bb8:	69 f7       	brne	.-38     	; 0x2b94 <lcd_init+0x70c>
    2bba:	14 c0       	rjmp	.+40     	; 0x2be4 <lcd_init+0x75c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bbc:	6b a1       	ldd	r22, Y+35	; 0x23
    2bbe:	7c a1       	ldd	r23, Y+36	; 0x24
    2bc0:	8d a1       	ldd	r24, Y+37	; 0x25
    2bc2:	9e a1       	ldd	r25, Y+38	; 0x26
    2bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	9a a3       	std	Y+34, r25	; 0x22
    2bce:	89 a3       	std	Y+33, r24	; 0x21
    2bd0:	89 a1       	ldd	r24, Y+33	; 0x21
    2bd2:	9a a1       	ldd	r25, Y+34	; 0x22
    2bd4:	9e 8f       	std	Y+30, r25	; 0x1e
    2bd6:	8d 8f       	std	Y+29, r24	; 0x1d
    2bd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bda:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	f1 f7       	brne	.-4      	; 0x2bdc <lcd_init+0x754>
    2be0:	9e 8f       	std	Y+30, r25	; 0x1e
    2be2:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);	
    lcd_command(INCREMENT_CURSOR);
    2be4:	86 e0       	ldi	r24, 0x06	; 6
    2be6:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <lcd_command>
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	a0 e0       	ldi	r26, 0x00	; 0
    2bf0:	b0 e4       	ldi	r27, 0x40	; 64
    2bf2:	89 8f       	std	Y+25, r24	; 0x19
    2bf4:	9a 8f       	std	Y+26, r25	; 0x1a
    2bf6:	ab 8f       	std	Y+27, r26	; 0x1b
    2bf8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfa:	69 8d       	ldd	r22, Y+25	; 0x19
    2bfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	4a ef       	ldi	r20, 0xFA	; 250
    2c08:	54 e4       	ldi	r21, 0x44	; 68
    2c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	8d 8b       	std	Y+21, r24	; 0x15
    2c14:	9e 8b       	std	Y+22, r25	; 0x16
    2c16:	af 8b       	std	Y+23, r26	; 0x17
    2c18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c20:	98 8d       	ldd	r25, Y+24	; 0x18
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e8       	ldi	r20, 0x80	; 128
    2c28:	5f e3       	ldi	r21, 0x3F	; 63
    2c2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c2e:	88 23       	and	r24, r24
    2c30:	2c f4       	brge	.+10     	; 0x2c3c <lcd_init+0x7b4>
		__ticks = 1;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	9c 8b       	std	Y+20, r25	; 0x14
    2c38:	8b 8b       	std	Y+19, r24	; 0x13
    2c3a:	3f c0       	rjmp	.+126    	; 0x2cba <lcd_init+0x832>
	else if (__tmp > 65535)
    2c3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2c3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2c40:	8f 89       	ldd	r24, Y+23	; 0x17
    2c42:	98 8d       	ldd	r25, Y+24	; 0x18
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	3f ef       	ldi	r19, 0xFF	; 255
    2c48:	4f e7       	ldi	r20, 0x7F	; 127
    2c4a:	57 e4       	ldi	r21, 0x47	; 71
    2c4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c50:	18 16       	cp	r1, r24
    2c52:	4c f5       	brge	.+82     	; 0x2ca6 <lcd_init+0x81e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c54:	69 8d       	ldd	r22, Y+25	; 0x19
    2c56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e2       	ldi	r20, 0x20	; 32
    2c62:	51 e4       	ldi	r21, 0x41	; 65
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9c 8b       	std	Y+20, r25	; 0x14
    2c7a:	8b 8b       	std	Y+19, r24	; 0x13
    2c7c:	0f c0       	rjmp	.+30     	; 0x2c9c <lcd_init+0x814>
    2c7e:	88 ec       	ldi	r24, 0xC8	; 200
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	9a 8b       	std	Y+18, r25	; 0x12
    2c84:	89 8b       	std	Y+17, r24	; 0x11
    2c86:	89 89       	ldd	r24, Y+17	; 0x11
    2c88:	9a 89       	ldd	r25, Y+18	; 0x12
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <lcd_init+0x802>
    2c8e:	9a 8b       	std	Y+18, r25	; 0x12
    2c90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c92:	8b 89       	ldd	r24, Y+19	; 0x13
    2c94:	9c 89       	ldd	r25, Y+20	; 0x14
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	9c 8b       	std	Y+20, r25	; 0x14
    2c9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	69 f7       	brne	.-38     	; 0x2c7e <lcd_init+0x7f6>
    2ca4:	14 c0       	rjmp	.+40     	; 0x2cce <lcd_init+0x846>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ca8:	7e 89       	ldd	r23, Y+22	; 0x16
    2caa:	8f 89       	ldd	r24, Y+23	; 0x17
    2cac:	98 8d       	ldd	r25, Y+24	; 0x18
    2cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	9c 8b       	std	Y+20, r25	; 0x14
    2cb8:	8b 8b       	std	Y+19, r24	; 0x13
    2cba:	8b 89       	ldd	r24, Y+19	; 0x13
    2cbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2cbe:	98 8b       	std	Y+16, r25	; 0x10
    2cc0:	8f 87       	std	Y+15, r24	; 0x0f
    2cc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cc4:	98 89       	ldd	r25, Y+16	; 0x10
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <lcd_init+0x83e>
    2cca:	98 8b       	std	Y+16, r25	; 0x10
    2ccc:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);   	
    lcd_command(DISPLAY_CLEAR);
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <lcd_command>
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	a0 e0       	ldi	r26, 0x00	; 0
    2cda:	b0 e4       	ldi	r27, 0x40	; 64
    2cdc:	8b 87       	std	Y+11, r24	; 0x0b
    2cde:	9c 87       	std	Y+12, r25	; 0x0c
    2ce0:	ad 87       	std	Y+13, r26	; 0x0d
    2ce2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	4a ef       	ldi	r20, 0xFA	; 250
    2cf2:	54 e4       	ldi	r21, 0x44	; 68
    2cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	8f 83       	std	Y+7, r24	; 0x07
    2cfe:	98 87       	std	Y+8, r25	; 0x08
    2d00:	a9 87       	std	Y+9, r26	; 0x09
    2d02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d04:	6f 81       	ldd	r22, Y+7	; 0x07
    2d06:	78 85       	ldd	r23, Y+8	; 0x08
    2d08:	89 85       	ldd	r24, Y+9	; 0x09
    2d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e8       	ldi	r20, 0x80	; 128
    2d12:	5f e3       	ldi	r21, 0x3F	; 63
    2d14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d18:	88 23       	and	r24, r24
    2d1a:	2c f4       	brge	.+10     	; 0x2d26 <lcd_init+0x89e>
		__ticks = 1;
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	9e 83       	std	Y+6, r25	; 0x06
    2d22:	8d 83       	std	Y+5, r24	; 0x05
    2d24:	3f c0       	rjmp	.+126    	; 0x2da4 <lcd_init+0x91c>
	else if (__tmp > 65535)
    2d26:	6f 81       	ldd	r22, Y+7	; 0x07
    2d28:	78 85       	ldd	r23, Y+8	; 0x08
    2d2a:	89 85       	ldd	r24, Y+9	; 0x09
    2d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	3f ef       	ldi	r19, 0xFF	; 255
    2d32:	4f e7       	ldi	r20, 0x7F	; 127
    2d34:	57 e4       	ldi	r21, 0x47	; 71
    2d36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d3a:	18 16       	cp	r1, r24
    2d3c:	4c f5       	brge	.+82     	; 0x2d90 <lcd_init+0x908>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e2       	ldi	r20, 0x20	; 32
    2d4c:	51 e4       	ldi	r21, 0x41	; 65
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	bc 01       	movw	r22, r24
    2d58:	cd 01       	movw	r24, r26
    2d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	9e 83       	std	Y+6, r25	; 0x06
    2d64:	8d 83       	std	Y+5, r24	; 0x05
    2d66:	0f c0       	rjmp	.+30     	; 0x2d86 <lcd_init+0x8fe>
    2d68:	88 ec       	ldi	r24, 0xC8	; 200
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	9c 83       	std	Y+4, r25	; 0x04
    2d6e:	8b 83       	std	Y+3, r24	; 0x03
    2d70:	8b 81       	ldd	r24, Y+3	; 0x03
    2d72:	9c 81       	ldd	r25, Y+4	; 0x04
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <lcd_init+0x8ec>
    2d78:	9c 83       	std	Y+4, r25	; 0x04
    2d7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	9e 83       	std	Y+6, r25	; 0x06
    2d84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d86:	8d 81       	ldd	r24, Y+5	; 0x05
    2d88:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	69 f7       	brne	.-38     	; 0x2d68 <lcd_init+0x8e0>
    2d8e:	14 c0       	rjmp	.+40     	; 0x2db8 <lcd_init+0x930>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d90:	6f 81       	ldd	r22, Y+7	; 0x07
    2d92:	78 85       	ldd	r23, Y+8	; 0x08
    2d94:	89 85       	ldd	r24, Y+9	; 0x09
    2d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	9e 83       	std	Y+6, r25	; 0x06
    2da2:	8d 83       	std	Y+5, r24	; 0x05
    2da4:	8d 81       	ldd	r24, Y+5	; 0x05
    2da6:	9e 81       	ldd	r25, Y+6	; 0x06
    2da8:	9a 83       	std	Y+2, r25	; 0x02
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	9a 81       	ldd	r25, Y+2	; 0x02
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <lcd_init+0x928>
    2db4:	9a 83       	std	Y+2, r25	; 0x02
    2db6:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    2db8:	c0 59       	subi	r28, 0x90	; 144
    2dba:	df 4f       	sbci	r29, 0xFF	; 255
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	f8 94       	cli
    2dc0:	de bf       	out	0x3e, r29	; 62
    2dc2:	0f be       	out	0x3f, r0	; 63
    2dc4:	cd bf       	out	0x3d, r28	; 61
    2dc6:	cf 91       	pop	r28
    2dc8:	df 91       	pop	r29
    2dca:	1f 91       	pop	r17
    2dcc:	0f 91       	pop	r16
    2dce:	08 95       	ret

00002dd0 <lcd_command>:
void lcd_command(uint8_t cmd)
{
    2dd0:	0f 93       	push	r16
    2dd2:	1f 93       	push	r17
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
    2ddc:	c7 54       	subi	r28, 0x47	; 71
    2dde:	d0 40       	sbci	r29, 0x00	; 0
    2de0:	0f b6       	in	r0, 0x3f	; 63
    2de2:	f8 94       	cli
    2de4:	de bf       	out	0x3e, r29	; 62
    2de6:	0f be       	out	0x3f, r0	; 63
    2de8:	cd bf       	out	0x3d, r28	; 61
    2dea:	fe 01       	movw	r30, r28
    2dec:	e9 5b       	subi	r30, 0xB9	; 185
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	80 83       	st	Z, r24
    DIO_voidSetPortValue(LCD_DATA_PORT, (cmd&0xf0));
    2df2:	fe 01       	movw	r30, r28
    2df4:	e9 5b       	subi	r30, 0xB9	; 185
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	80 81       	ld	r24, Z
    2dfa:	98 2f       	mov	r25, r24
    2dfc:	90 7f       	andi	r25, 0xF0	; 240
    2dfe:	82 e0       	ldi	r24, 0x02	; 2
    2e00:	69 2f       	mov	r22, r25
    2e02:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_voidSetPortValue>
    DIO_voidSetPinValue(LS_PIN,LOW);
    2e06:	82 e0       	ldi	r24, 0x02	; 2
    2e08:	60 e0       	ldi	r22, 0x00	; 0
    2e0a:	40 e0       	ldi	r20, 0x00	; 0
    2e0c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(R_W_PIN,LOW);    
    2e10:	82 e0       	ldi	r24, 0x02	; 2
    2e12:	61 e0       	ldi	r22, 0x01	; 1
    2e14:	40 e0       	ldi	r20, 0x00	; 0
    2e16:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(EN_PIN,HIGH);    
    2e1a:	82 e0       	ldi	r24, 0x02	; 2
    2e1c:	62 e0       	ldi	r22, 0x02	; 2
    2e1e:	41 e0       	ldi	r20, 0x01	; 1
    2e20:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    2e24:	fe 01       	movw	r30, r28
    2e26:	ed 5b       	subi	r30, 0xBD	; 189
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	80 e0       	ldi	r24, 0x00	; 0
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	a0 e0       	ldi	r26, 0x00	; 0
    2e30:	b0 e4       	ldi	r27, 0x40	; 64
    2e32:	80 83       	st	Z, r24
    2e34:	91 83       	std	Z+1, r25	; 0x01
    2e36:	a2 83       	std	Z+2, r26	; 0x02
    2e38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3a:	8e 01       	movw	r16, r28
    2e3c:	01 5c       	subi	r16, 0xC1	; 193
    2e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e40:	fe 01       	movw	r30, r28
    2e42:	ed 5b       	subi	r30, 0xBD	; 189
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	60 81       	ld	r22, Z
    2e48:	71 81       	ldd	r23, Z+1	; 0x01
    2e4a:	82 81       	ldd	r24, Z+2	; 0x02
    2e4c:	93 81       	ldd	r25, Z+3	; 0x03
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	4a ef       	ldi	r20, 0xFA	; 250
    2e54:	54 e4       	ldi	r21, 0x44	; 68
    2e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	f8 01       	movw	r30, r16
    2e60:	80 83       	st	Z, r24
    2e62:	91 83       	std	Z+1, r25	; 0x01
    2e64:	a2 83       	std	Z+2, r26	; 0x02
    2e66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e68:	fe 01       	movw	r30, r28
    2e6a:	ff 96       	adiw	r30, 0x3f	; 63
    2e6c:	60 81       	ld	r22, Z
    2e6e:	71 81       	ldd	r23, Z+1	; 0x01
    2e70:	82 81       	ldd	r24, Z+2	; 0x02
    2e72:	93 81       	ldd	r25, Z+3	; 0x03
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	30 e0       	ldi	r19, 0x00	; 0
    2e78:	40 e8       	ldi	r20, 0x80	; 128
    2e7a:	5f e3       	ldi	r21, 0x3F	; 63
    2e7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e80:	88 23       	and	r24, r24
    2e82:	2c f4       	brge	.+10     	; 0x2e8e <lcd_command+0xbe>
		__ticks = 1;
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	9e af       	std	Y+62, r25	; 0x3e
    2e8a:	8d af       	std	Y+61, r24	; 0x3d
    2e8c:	46 c0       	rjmp	.+140    	; 0x2f1a <lcd_command+0x14a>
	else if (__tmp > 65535)
    2e8e:	fe 01       	movw	r30, r28
    2e90:	ff 96       	adiw	r30, 0x3f	; 63
    2e92:	60 81       	ld	r22, Z
    2e94:	71 81       	ldd	r23, Z+1	; 0x01
    2e96:	82 81       	ldd	r24, Z+2	; 0x02
    2e98:	93 81       	ldd	r25, Z+3	; 0x03
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	3f ef       	ldi	r19, 0xFF	; 255
    2e9e:	4f e7       	ldi	r20, 0x7F	; 127
    2ea0:	57 e4       	ldi	r21, 0x47	; 71
    2ea2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ea6:	18 16       	cp	r1, r24
    2ea8:	64 f5       	brge	.+88     	; 0x2f02 <lcd_command+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eaa:	fe 01       	movw	r30, r28
    2eac:	ed 5b       	subi	r30, 0xBD	; 189
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	40 e2       	ldi	r20, 0x20	; 32
    2ebe:	51 e4       	ldi	r21, 0x41	; 65
    2ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	bc 01       	movw	r22, r24
    2eca:	cd 01       	movw	r24, r26
    2ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	9e af       	std	Y+62, r25	; 0x3e
    2ed6:	8d af       	std	Y+61, r24	; 0x3d
    2ed8:	0f c0       	rjmp	.+30     	; 0x2ef8 <lcd_command+0x128>
    2eda:	88 ec       	ldi	r24, 0xC8	; 200
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	9c af       	std	Y+60, r25	; 0x3c
    2ee0:	8b af       	std	Y+59, r24	; 0x3b
    2ee2:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ee4:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	f1 f7       	brne	.-4      	; 0x2ee6 <lcd_command+0x116>
    2eea:	9c af       	std	Y+60, r25	; 0x3c
    2eec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eee:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ef0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	9e af       	std	Y+62, r25	; 0x3e
    2ef6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2efa:	9e ad       	ldd	r25, Y+62	; 0x3e
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	69 f7       	brne	.-38     	; 0x2eda <lcd_command+0x10a>
    2f00:	16 c0       	rjmp	.+44     	; 0x2f2e <lcd_command+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f02:	fe 01       	movw	r30, r28
    2f04:	ff 96       	adiw	r30, 0x3f	; 63
    2f06:	60 81       	ld	r22, Z
    2f08:	71 81       	ldd	r23, Z+1	; 0x01
    2f0a:	82 81       	ldd	r24, Z+2	; 0x02
    2f0c:	93 81       	ldd	r25, Z+3	; 0x03
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	9e af       	std	Y+62, r25	; 0x3e
    2f18:	8d af       	std	Y+61, r24	; 0x3d
    2f1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f1e:	9a af       	std	Y+58, r25	; 0x3a
    2f20:	89 af       	std	Y+57, r24	; 0x39
    2f22:	89 ad       	ldd	r24, Y+57	; 0x39
    2f24:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	f1 f7       	brne	.-4      	; 0x2f26 <lcd_command+0x156>
    2f2a:	9a af       	std	Y+58, r25	; 0x3a
    2f2c:	89 af       	std	Y+57, r24	; 0x39
    _delay_ms(2);    
    DIO_voidSetPinValue(EN_PIN,LOW);
    2f2e:	82 e0       	ldi	r24, 0x02	; 2
    2f30:	62 e0       	ldi	r22, 0x02	; 2
    2f32:	40 e0       	ldi	r20, 0x00	; 0
    2f34:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	a0 e0       	ldi	r26, 0x00	; 0
    2f3e:	b0 e4       	ldi	r27, 0x40	; 64
    2f40:	8d ab       	std	Y+53, r24	; 0x35
    2f42:	9e ab       	std	Y+54, r25	; 0x36
    2f44:	af ab       	std	Y+55, r26	; 0x37
    2f46:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f48:	6d a9       	ldd	r22, Y+53	; 0x35
    2f4a:	7e a9       	ldd	r23, Y+54	; 0x36
    2f4c:	8f a9       	ldd	r24, Y+55	; 0x37
    2f4e:	98 ad       	ldd	r25, Y+56	; 0x38
    2f50:	20 e0       	ldi	r18, 0x00	; 0
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	4a ef       	ldi	r20, 0xFA	; 250
    2f56:	54 e4       	ldi	r21, 0x44	; 68
    2f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f5c:	dc 01       	movw	r26, r24
    2f5e:	cb 01       	movw	r24, r22
    2f60:	89 ab       	std	Y+49, r24	; 0x31
    2f62:	9a ab       	std	Y+50, r25	; 0x32
    2f64:	ab ab       	std	Y+51, r26	; 0x33
    2f66:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f68:	69 a9       	ldd	r22, Y+49	; 0x31
    2f6a:	7a a9       	ldd	r23, Y+50	; 0x32
    2f6c:	8b a9       	ldd	r24, Y+51	; 0x33
    2f6e:	9c a9       	ldd	r25, Y+52	; 0x34
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	40 e8       	ldi	r20, 0x80	; 128
    2f76:	5f e3       	ldi	r21, 0x3F	; 63
    2f78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f7c:	88 23       	and	r24, r24
    2f7e:	2c f4       	brge	.+10     	; 0x2f8a <lcd_command+0x1ba>
		__ticks = 1;
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	98 ab       	std	Y+48, r25	; 0x30
    2f86:	8f a7       	std	Y+47, r24	; 0x2f
    2f88:	3f c0       	rjmp	.+126    	; 0x3008 <lcd_command+0x238>
	else if (__tmp > 65535)
    2f8a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f8c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f90:	9c a9       	ldd	r25, Y+52	; 0x34
    2f92:	20 e0       	ldi	r18, 0x00	; 0
    2f94:	3f ef       	ldi	r19, 0xFF	; 255
    2f96:	4f e7       	ldi	r20, 0x7F	; 127
    2f98:	57 e4       	ldi	r21, 0x47	; 71
    2f9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f9e:	18 16       	cp	r1, r24
    2fa0:	4c f5       	brge	.+82     	; 0x2ff4 <lcd_command+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fa2:	6d a9       	ldd	r22, Y+53	; 0x35
    2fa4:	7e a9       	ldd	r23, Y+54	; 0x36
    2fa6:	8f a9       	ldd	r24, Y+55	; 0x37
    2fa8:	98 ad       	ldd	r25, Y+56	; 0x38
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	40 e2       	ldi	r20, 0x20	; 32
    2fb0:	51 e4       	ldi	r21, 0x41	; 65
    2fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb6:	dc 01       	movw	r26, r24
    2fb8:	cb 01       	movw	r24, r22
    2fba:	bc 01       	movw	r22, r24
    2fbc:	cd 01       	movw	r24, r26
    2fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	98 ab       	std	Y+48, r25	; 0x30
    2fc8:	8f a7       	std	Y+47, r24	; 0x2f
    2fca:	0f c0       	rjmp	.+30     	; 0x2fea <lcd_command+0x21a>
    2fcc:	88 ec       	ldi	r24, 0xC8	; 200
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	9e a7       	std	Y+46, r25	; 0x2e
    2fd2:	8d a7       	std	Y+45, r24	; 0x2d
    2fd4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2fd6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <lcd_command+0x208>
    2fdc:	9e a7       	std	Y+46, r25	; 0x2e
    2fde:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fe2:	98 a9       	ldd	r25, Y+48	; 0x30
    2fe4:	01 97       	sbiw	r24, 0x01	; 1
    2fe6:	98 ab       	std	Y+48, r25	; 0x30
    2fe8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fec:	98 a9       	ldd	r25, Y+48	; 0x30
    2fee:	00 97       	sbiw	r24, 0x00	; 0
    2ff0:	69 f7       	brne	.-38     	; 0x2fcc <lcd_command+0x1fc>
    2ff2:	14 c0       	rjmp	.+40     	; 0x301c <lcd_command+0x24c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ff6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ff8:	8b a9       	ldd	r24, Y+51	; 0x33
    2ffa:	9c a9       	ldd	r25, Y+52	; 0x34
    2ffc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	98 ab       	std	Y+48, r25	; 0x30
    3006:	8f a7       	std	Y+47, r24	; 0x2f
    3008:	8f a5       	ldd	r24, Y+47	; 0x2f
    300a:	98 a9       	ldd	r25, Y+48	; 0x30
    300c:	9c a7       	std	Y+44, r25	; 0x2c
    300e:	8b a7       	std	Y+43, r24	; 0x2b
    3010:	8b a5       	ldd	r24, Y+43	; 0x2b
    3012:	9c a5       	ldd	r25, Y+44	; 0x2c
    3014:	01 97       	sbiw	r24, 0x01	; 1
    3016:	f1 f7       	brne	.-4      	; 0x3014 <lcd_command+0x244>
    3018:	9c a7       	std	Y+44, r25	; 0x2c
    301a:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);     
    DIO_voidSetPortValue(LCD_DATA_PORT, (cmd<<4));
    301c:	fe 01       	movw	r30, r28
    301e:	e9 5b       	subi	r30, 0xB9	; 185
    3020:	ff 4f       	sbci	r31, 0xFF	; 255
    3022:	80 81       	ld	r24, Z
    3024:	98 2f       	mov	r25, r24
    3026:	92 95       	swap	r25
    3028:	90 7f       	andi	r25, 0xF0	; 240
    302a:	82 e0       	ldi	r24, 0x02	; 2
    302c:	69 2f       	mov	r22, r25
    302e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_voidSetPortValue>
    DIO_voidSetPinValue(EN_PIN,HIGH);  
    3032:	82 e0       	ldi	r24, 0x02	; 2
    3034:	62 e0       	ldi	r22, 0x02	; 2
    3036:	41 e0       	ldi	r20, 0x01	; 1
    3038:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    303c:	80 e0       	ldi	r24, 0x00	; 0
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	a0 e0       	ldi	r26, 0x00	; 0
    3042:	b0 e4       	ldi	r27, 0x40	; 64
    3044:	8f a3       	std	Y+39, r24	; 0x27
    3046:	98 a7       	std	Y+40, r25	; 0x28
    3048:	a9 a7       	std	Y+41, r26	; 0x29
    304a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304c:	6f a1       	ldd	r22, Y+39	; 0x27
    304e:	78 a5       	ldd	r23, Y+40	; 0x28
    3050:	89 a5       	ldd	r24, Y+41	; 0x29
    3052:	9a a5       	ldd	r25, Y+42	; 0x2a
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	4a ef       	ldi	r20, 0xFA	; 250
    305a:	54 e4       	ldi	r21, 0x44	; 68
    305c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	8b a3       	std	Y+35, r24	; 0x23
    3066:	9c a3       	std	Y+36, r25	; 0x24
    3068:	ad a3       	std	Y+37, r26	; 0x25
    306a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    306c:	6b a1       	ldd	r22, Y+35	; 0x23
    306e:	7c a1       	ldd	r23, Y+36	; 0x24
    3070:	8d a1       	ldd	r24, Y+37	; 0x25
    3072:	9e a1       	ldd	r25, Y+38	; 0x26
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	40 e8       	ldi	r20, 0x80	; 128
    307a:	5f e3       	ldi	r21, 0x3F	; 63
    307c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3080:	88 23       	and	r24, r24
    3082:	2c f4       	brge	.+10     	; 0x308e <lcd_command+0x2be>
		__ticks = 1;
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	9a a3       	std	Y+34, r25	; 0x22
    308a:	89 a3       	std	Y+33, r24	; 0x21
    308c:	3f c0       	rjmp	.+126    	; 0x310c <lcd_command+0x33c>
	else if (__tmp > 65535)
    308e:	6b a1       	ldd	r22, Y+35	; 0x23
    3090:	7c a1       	ldd	r23, Y+36	; 0x24
    3092:	8d a1       	ldd	r24, Y+37	; 0x25
    3094:	9e a1       	ldd	r25, Y+38	; 0x26
    3096:	20 e0       	ldi	r18, 0x00	; 0
    3098:	3f ef       	ldi	r19, 0xFF	; 255
    309a:	4f e7       	ldi	r20, 0x7F	; 127
    309c:	57 e4       	ldi	r21, 0x47	; 71
    309e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30a2:	18 16       	cp	r1, r24
    30a4:	4c f5       	brge	.+82     	; 0x30f8 <lcd_command+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a6:	6f a1       	ldd	r22, Y+39	; 0x27
    30a8:	78 a5       	ldd	r23, Y+40	; 0x28
    30aa:	89 a5       	ldd	r24, Y+41	; 0x29
    30ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    30ae:	20 e0       	ldi	r18, 0x00	; 0
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	40 e2       	ldi	r20, 0x20	; 32
    30b4:	51 e4       	ldi	r21, 0x41	; 65
    30b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ba:	dc 01       	movw	r26, r24
    30bc:	cb 01       	movw	r24, r22
    30be:	bc 01       	movw	r22, r24
    30c0:	cd 01       	movw	r24, r26
    30c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	9a a3       	std	Y+34, r25	; 0x22
    30cc:	89 a3       	std	Y+33, r24	; 0x21
    30ce:	0f c0       	rjmp	.+30     	; 0x30ee <lcd_command+0x31e>
    30d0:	88 ec       	ldi	r24, 0xC8	; 200
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	98 a3       	std	Y+32, r25	; 0x20
    30d6:	8f 8f       	std	Y+31, r24	; 0x1f
    30d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30da:	98 a1       	ldd	r25, Y+32	; 0x20
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	f1 f7       	brne	.-4      	; 0x30dc <lcd_command+0x30c>
    30e0:	98 a3       	std	Y+32, r25	; 0x20
    30e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e4:	89 a1       	ldd	r24, Y+33	; 0x21
    30e6:	9a a1       	ldd	r25, Y+34	; 0x22
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	9a a3       	std	Y+34, r25	; 0x22
    30ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ee:	89 a1       	ldd	r24, Y+33	; 0x21
    30f0:	9a a1       	ldd	r25, Y+34	; 0x22
    30f2:	00 97       	sbiw	r24, 0x00	; 0
    30f4:	69 f7       	brne	.-38     	; 0x30d0 <lcd_command+0x300>
    30f6:	14 c0       	rjmp	.+40     	; 0x3120 <lcd_command+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f8:	6b a1       	ldd	r22, Y+35	; 0x23
    30fa:	7c a1       	ldd	r23, Y+36	; 0x24
    30fc:	8d a1       	ldd	r24, Y+37	; 0x25
    30fe:	9e a1       	ldd	r25, Y+38	; 0x26
    3100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	9a a3       	std	Y+34, r25	; 0x22
    310a:	89 a3       	std	Y+33, r24	; 0x21
    310c:	89 a1       	ldd	r24, Y+33	; 0x21
    310e:	9a a1       	ldd	r25, Y+34	; 0x22
    3110:	9e 8f       	std	Y+30, r25	; 0x1e
    3112:	8d 8f       	std	Y+29, r24	; 0x1d
    3114:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3116:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3118:	01 97       	sbiw	r24, 0x01	; 1
    311a:	f1 f7       	brne	.-4      	; 0x3118 <lcd_command+0x348>
    311c:	9e 8f       	std	Y+30, r25	; 0x1e
    311e:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);   
    DIO_voidSetPinValue(EN_PIN,LOW);
    3120:	82 e0       	ldi	r24, 0x02	; 2
    3122:	62 e0       	ldi	r22, 0x02	; 2
    3124:	40 e0       	ldi	r20, 0x00	; 0
    3126:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    312a:	80 e0       	ldi	r24, 0x00	; 0
    312c:	90 e0       	ldi	r25, 0x00	; 0
    312e:	a0 e0       	ldi	r26, 0x00	; 0
    3130:	b0 e4       	ldi	r27, 0x40	; 64
    3132:	89 8f       	std	Y+25, r24	; 0x19
    3134:	9a 8f       	std	Y+26, r25	; 0x1a
    3136:	ab 8f       	std	Y+27, r26	; 0x1b
    3138:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    313a:	69 8d       	ldd	r22, Y+25	; 0x19
    313c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    313e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3140:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	4a ef       	ldi	r20, 0xFA	; 250
    3148:	54 e4       	ldi	r21, 0x44	; 68
    314a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	8d 8b       	std	Y+21, r24	; 0x15
    3154:	9e 8b       	std	Y+22, r25	; 0x16
    3156:	af 8b       	std	Y+23, r26	; 0x17
    3158:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    315a:	6d 89       	ldd	r22, Y+21	; 0x15
    315c:	7e 89       	ldd	r23, Y+22	; 0x16
    315e:	8f 89       	ldd	r24, Y+23	; 0x17
    3160:	98 8d       	ldd	r25, Y+24	; 0x18
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	30 e0       	ldi	r19, 0x00	; 0
    3166:	40 e8       	ldi	r20, 0x80	; 128
    3168:	5f e3       	ldi	r21, 0x3F	; 63
    316a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    316e:	88 23       	and	r24, r24
    3170:	2c f4       	brge	.+10     	; 0x317c <lcd_command+0x3ac>
		__ticks = 1;
    3172:	81 e0       	ldi	r24, 0x01	; 1
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	9c 8b       	std	Y+20, r25	; 0x14
    3178:	8b 8b       	std	Y+19, r24	; 0x13
    317a:	3f c0       	rjmp	.+126    	; 0x31fa <lcd_command+0x42a>
	else if (__tmp > 65535)
    317c:	6d 89       	ldd	r22, Y+21	; 0x15
    317e:	7e 89       	ldd	r23, Y+22	; 0x16
    3180:	8f 89       	ldd	r24, Y+23	; 0x17
    3182:	98 8d       	ldd	r25, Y+24	; 0x18
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	3f ef       	ldi	r19, 0xFF	; 255
    3188:	4f e7       	ldi	r20, 0x7F	; 127
    318a:	57 e4       	ldi	r21, 0x47	; 71
    318c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3190:	18 16       	cp	r1, r24
    3192:	4c f5       	brge	.+82     	; 0x31e6 <lcd_command+0x416>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3194:	69 8d       	ldd	r22, Y+25	; 0x19
    3196:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3198:	8b 8d       	ldd	r24, Y+27	; 0x1b
    319a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	40 e2       	ldi	r20, 0x20	; 32
    31a2:	51 e4       	ldi	r21, 0x41	; 65
    31a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a8:	dc 01       	movw	r26, r24
    31aa:	cb 01       	movw	r24, r22
    31ac:	bc 01       	movw	r22, r24
    31ae:	cd 01       	movw	r24, r26
    31b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	9c 8b       	std	Y+20, r25	; 0x14
    31ba:	8b 8b       	std	Y+19, r24	; 0x13
    31bc:	0f c0       	rjmp	.+30     	; 0x31dc <lcd_command+0x40c>
    31be:	88 ec       	ldi	r24, 0xC8	; 200
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	9a 8b       	std	Y+18, r25	; 0x12
    31c4:	89 8b       	std	Y+17, r24	; 0x11
    31c6:	89 89       	ldd	r24, Y+17	; 0x11
    31c8:	9a 89       	ldd	r25, Y+18	; 0x12
    31ca:	01 97       	sbiw	r24, 0x01	; 1
    31cc:	f1 f7       	brne	.-4      	; 0x31ca <lcd_command+0x3fa>
    31ce:	9a 8b       	std	Y+18, r25	; 0x12
    31d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d2:	8b 89       	ldd	r24, Y+19	; 0x13
    31d4:	9c 89       	ldd	r25, Y+20	; 0x14
    31d6:	01 97       	sbiw	r24, 0x01	; 1
    31d8:	9c 8b       	std	Y+20, r25	; 0x14
    31da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31dc:	8b 89       	ldd	r24, Y+19	; 0x13
    31de:	9c 89       	ldd	r25, Y+20	; 0x14
    31e0:	00 97       	sbiw	r24, 0x00	; 0
    31e2:	69 f7       	brne	.-38     	; 0x31be <lcd_command+0x3ee>
    31e4:	14 c0       	rjmp	.+40     	; 0x320e <lcd_command+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e6:	6d 89       	ldd	r22, Y+21	; 0x15
    31e8:	7e 89       	ldd	r23, Y+22	; 0x16
    31ea:	8f 89       	ldd	r24, Y+23	; 0x17
    31ec:	98 8d       	ldd	r25, Y+24	; 0x18
    31ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	9c 8b       	std	Y+20, r25	; 0x14
    31f8:	8b 8b       	std	Y+19, r24	; 0x13
    31fa:	8b 89       	ldd	r24, Y+19	; 0x13
    31fc:	9c 89       	ldd	r25, Y+20	; 0x14
    31fe:	98 8b       	std	Y+16, r25	; 0x10
    3200:	8f 87       	std	Y+15, r24	; 0x0f
    3202:	8f 85       	ldd	r24, Y+15	; 0x0f
    3204:	98 89       	ldd	r25, Y+16	; 0x10
    3206:	01 97       	sbiw	r24, 0x01	; 1
    3208:	f1 f7       	brne	.-4      	; 0x3206 <lcd_command+0x436>
    320a:	98 8b       	std	Y+16, r25	; 0x10
    320c:	8f 87       	std	Y+15, r24	; 0x0f
    320e:	80 e0       	ldi	r24, 0x00	; 0
    3210:	90 e0       	ldi	r25, 0x00	; 0
    3212:	a0 ea       	ldi	r26, 0xA0	; 160
    3214:	b0 e4       	ldi	r27, 0x40	; 64
    3216:	8b 87       	std	Y+11, r24	; 0x0b
    3218:	9c 87       	std	Y+12, r25	; 0x0c
    321a:	ad 87       	std	Y+13, r26	; 0x0d
    321c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    321e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3220:	7c 85       	ldd	r23, Y+12	; 0x0c
    3222:	8d 85       	ldd	r24, Y+13	; 0x0d
    3224:	9e 85       	ldd	r25, Y+14	; 0x0e
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	4a ef       	ldi	r20, 0xFA	; 250
    322c:	54 e4       	ldi	r21, 0x44	; 68
    322e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3232:	dc 01       	movw	r26, r24
    3234:	cb 01       	movw	r24, r22
    3236:	8f 83       	std	Y+7, r24	; 0x07
    3238:	98 87       	std	Y+8, r25	; 0x08
    323a:	a9 87       	std	Y+9, r26	; 0x09
    323c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    323e:	6f 81       	ldd	r22, Y+7	; 0x07
    3240:	78 85       	ldd	r23, Y+8	; 0x08
    3242:	89 85       	ldd	r24, Y+9	; 0x09
    3244:	9a 85       	ldd	r25, Y+10	; 0x0a
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	40 e8       	ldi	r20, 0x80	; 128
    324c:	5f e3       	ldi	r21, 0x3F	; 63
    324e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3252:	88 23       	and	r24, r24
    3254:	2c f4       	brge	.+10     	; 0x3260 <lcd_command+0x490>
		__ticks = 1;
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	9e 83       	std	Y+6, r25	; 0x06
    325c:	8d 83       	std	Y+5, r24	; 0x05
    325e:	3f c0       	rjmp	.+126    	; 0x32de <lcd_command+0x50e>
	else if (__tmp > 65535)
    3260:	6f 81       	ldd	r22, Y+7	; 0x07
    3262:	78 85       	ldd	r23, Y+8	; 0x08
    3264:	89 85       	ldd	r24, Y+9	; 0x09
    3266:	9a 85       	ldd	r25, Y+10	; 0x0a
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	3f ef       	ldi	r19, 0xFF	; 255
    326c:	4f e7       	ldi	r20, 0x7F	; 127
    326e:	57 e4       	ldi	r21, 0x47	; 71
    3270:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3274:	18 16       	cp	r1, r24
    3276:	4c f5       	brge	.+82     	; 0x32ca <lcd_command+0x4fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3278:	6b 85       	ldd	r22, Y+11	; 0x0b
    327a:	7c 85       	ldd	r23, Y+12	; 0x0c
    327c:	8d 85       	ldd	r24, Y+13	; 0x0d
    327e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3280:	20 e0       	ldi	r18, 0x00	; 0
    3282:	30 e0       	ldi	r19, 0x00	; 0
    3284:	40 e2       	ldi	r20, 0x20	; 32
    3286:	51 e4       	ldi	r21, 0x41	; 65
    3288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	bc 01       	movw	r22, r24
    3292:	cd 01       	movw	r24, r26
    3294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	9e 83       	std	Y+6, r25	; 0x06
    329e:	8d 83       	std	Y+5, r24	; 0x05
    32a0:	0f c0       	rjmp	.+30     	; 0x32c0 <lcd_command+0x4f0>
    32a2:	88 ec       	ldi	r24, 0xC8	; 200
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	9c 83       	std	Y+4, r25	; 0x04
    32a8:	8b 83       	std	Y+3, r24	; 0x03
    32aa:	8b 81       	ldd	r24, Y+3	; 0x03
    32ac:	9c 81       	ldd	r25, Y+4	; 0x04
    32ae:	01 97       	sbiw	r24, 0x01	; 1
    32b0:	f1 f7       	brne	.-4      	; 0x32ae <lcd_command+0x4de>
    32b2:	9c 83       	std	Y+4, r25	; 0x04
    32b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b6:	8d 81       	ldd	r24, Y+5	; 0x05
    32b8:	9e 81       	ldd	r25, Y+6	; 0x06
    32ba:	01 97       	sbiw	r24, 0x01	; 1
    32bc:	9e 83       	std	Y+6, r25	; 0x06
    32be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32c0:	8d 81       	ldd	r24, Y+5	; 0x05
    32c2:	9e 81       	ldd	r25, Y+6	; 0x06
    32c4:	00 97       	sbiw	r24, 0x00	; 0
    32c6:	69 f7       	brne	.-38     	; 0x32a2 <lcd_command+0x4d2>
    32c8:	14 c0       	rjmp	.+40     	; 0x32f2 <lcd_command+0x522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ca:	6f 81       	ldd	r22, Y+7	; 0x07
    32cc:	78 85       	ldd	r23, Y+8	; 0x08
    32ce:	89 85       	ldd	r24, Y+9	; 0x09
    32d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	9e 83       	std	Y+6, r25	; 0x06
    32dc:	8d 83       	std	Y+5, r24	; 0x05
    32de:	8d 81       	ldd	r24, Y+5	; 0x05
    32e0:	9e 81       	ldd	r25, Y+6	; 0x06
    32e2:	9a 83       	std	Y+2, r25	; 0x02
    32e4:	89 83       	std	Y+1, r24	; 0x01
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	f1 f7       	brne	.-4      	; 0x32ea <lcd_command+0x51a>
    32ee:	9a 83       	std	Y+2, r25	; 0x02
    32f0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);  
	
    _delay_ms(5); 	 	        
}
    32f2:	c9 5b       	subi	r28, 0xB9	; 185
    32f4:	df 4f       	sbci	r29, 0xFF	; 255
    32f6:	0f b6       	in	r0, 0x3f	; 63
    32f8:	f8 94       	cli
    32fa:	de bf       	out	0x3e, r29	; 62
    32fc:	0f be       	out	0x3f, r0	; 63
    32fe:	cd bf       	out	0x3d, r28	; 61
    3300:	cf 91       	pop	r28
    3302:	df 91       	pop	r29
    3304:	1f 91       	pop	r17
    3306:	0f 91       	pop	r16
    3308:	08 95       	ret

0000330a <lcd_sendChar>:
void lcd_sendChar(uint8_t data)
{
    330a:	df 93       	push	r29
    330c:	cf 93       	push	r28
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    3312:	e9 97       	sbiw	r28, 0x39	; 57
    3314:	0f b6       	in	r0, 0x3f	; 63
    3316:	f8 94       	cli
    3318:	de bf       	out	0x3e, r29	; 62
    331a:	0f be       	out	0x3f, r0	; 63
    331c:	cd bf       	out	0x3d, r28	; 61
    331e:	89 af       	std	Y+57, r24	; 0x39
    DIO_voidSetPortValue(LCD_DATA_PORT,(data&0xf0));
    3320:	89 ad       	ldd	r24, Y+57	; 0x39
    3322:	98 2f       	mov	r25, r24
    3324:	90 7f       	andi	r25, 0xF0	; 240
    3326:	82 e0       	ldi	r24, 0x02	; 2
    3328:	69 2f       	mov	r22, r25
    332a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_voidSetPortValue>
    DIO_voidSetPinValue(LS_PIN,HIGH);
    332e:	82 e0       	ldi	r24, 0x02	; 2
    3330:	60 e0       	ldi	r22, 0x00	; 0
    3332:	41 e0       	ldi	r20, 0x01	; 1
    3334:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(R_W_PIN,LOW);    
    3338:	82 e0       	ldi	r24, 0x02	; 2
    333a:	61 e0       	ldi	r22, 0x01	; 1
    333c:	40 e0       	ldi	r20, 0x00	; 0
    333e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(EN_PIN,HIGH);    
    3342:	82 e0       	ldi	r24, 0x02	; 2
    3344:	62 e0       	ldi	r22, 0x02	; 2
    3346:	41 e0       	ldi	r20, 0x01	; 1
    3348:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	a0 e0       	ldi	r26, 0x00	; 0
    3352:	b0 e4       	ldi	r27, 0x40	; 64
    3354:	8d ab       	std	Y+53, r24	; 0x35
    3356:	9e ab       	std	Y+54, r25	; 0x36
    3358:	af ab       	std	Y+55, r26	; 0x37
    335a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335c:	6d a9       	ldd	r22, Y+53	; 0x35
    335e:	7e a9       	ldd	r23, Y+54	; 0x36
    3360:	8f a9       	ldd	r24, Y+55	; 0x37
    3362:	98 ad       	ldd	r25, Y+56	; 0x38
    3364:	20 e0       	ldi	r18, 0x00	; 0
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	4a ef       	ldi	r20, 0xFA	; 250
    336a:	54 e4       	ldi	r21, 0x44	; 68
    336c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3370:	dc 01       	movw	r26, r24
    3372:	cb 01       	movw	r24, r22
    3374:	89 ab       	std	Y+49, r24	; 0x31
    3376:	9a ab       	std	Y+50, r25	; 0x32
    3378:	ab ab       	std	Y+51, r26	; 0x33
    337a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    337c:	69 a9       	ldd	r22, Y+49	; 0x31
    337e:	7a a9       	ldd	r23, Y+50	; 0x32
    3380:	8b a9       	ldd	r24, Y+51	; 0x33
    3382:	9c a9       	ldd	r25, Y+52	; 0x34
    3384:	20 e0       	ldi	r18, 0x00	; 0
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	40 e8       	ldi	r20, 0x80	; 128
    338a:	5f e3       	ldi	r21, 0x3F	; 63
    338c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3390:	88 23       	and	r24, r24
    3392:	2c f4       	brge	.+10     	; 0x339e <lcd_sendChar+0x94>
		__ticks = 1;
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	98 ab       	std	Y+48, r25	; 0x30
    339a:	8f a7       	std	Y+47, r24	; 0x2f
    339c:	3f c0       	rjmp	.+126    	; 0x341c <lcd_sendChar+0x112>
	else if (__tmp > 65535)
    339e:	69 a9       	ldd	r22, Y+49	; 0x31
    33a0:	7a a9       	ldd	r23, Y+50	; 0x32
    33a2:	8b a9       	ldd	r24, Y+51	; 0x33
    33a4:	9c a9       	ldd	r25, Y+52	; 0x34
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	3f ef       	ldi	r19, 0xFF	; 255
    33aa:	4f e7       	ldi	r20, 0x7F	; 127
    33ac:	57 e4       	ldi	r21, 0x47	; 71
    33ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33b2:	18 16       	cp	r1, r24
    33b4:	4c f5       	brge	.+82     	; 0x3408 <lcd_sendChar+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33b6:	6d a9       	ldd	r22, Y+53	; 0x35
    33b8:	7e a9       	ldd	r23, Y+54	; 0x36
    33ba:	8f a9       	ldd	r24, Y+55	; 0x37
    33bc:	98 ad       	ldd	r25, Y+56	; 0x38
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	40 e2       	ldi	r20, 0x20	; 32
    33c4:	51 e4       	ldi	r21, 0x41	; 65
    33c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ca:	dc 01       	movw	r26, r24
    33cc:	cb 01       	movw	r24, r22
    33ce:	bc 01       	movw	r22, r24
    33d0:	cd 01       	movw	r24, r26
    33d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	98 ab       	std	Y+48, r25	; 0x30
    33dc:	8f a7       	std	Y+47, r24	; 0x2f
    33de:	0f c0       	rjmp	.+30     	; 0x33fe <lcd_sendChar+0xf4>
    33e0:	88 ec       	ldi	r24, 0xC8	; 200
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	9e a7       	std	Y+46, r25	; 0x2e
    33e6:	8d a7       	std	Y+45, r24	; 0x2d
    33e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    33ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    33ec:	01 97       	sbiw	r24, 0x01	; 1
    33ee:	f1 f7       	brne	.-4      	; 0x33ec <lcd_sendChar+0xe2>
    33f0:	9e a7       	std	Y+46, r25	; 0x2e
    33f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    33f6:	98 a9       	ldd	r25, Y+48	; 0x30
    33f8:	01 97       	sbiw	r24, 0x01	; 1
    33fa:	98 ab       	std	Y+48, r25	; 0x30
    33fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3400:	98 a9       	ldd	r25, Y+48	; 0x30
    3402:	00 97       	sbiw	r24, 0x00	; 0
    3404:	69 f7       	brne	.-38     	; 0x33e0 <lcd_sendChar+0xd6>
    3406:	14 c0       	rjmp	.+40     	; 0x3430 <lcd_sendChar+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3408:	69 a9       	ldd	r22, Y+49	; 0x31
    340a:	7a a9       	ldd	r23, Y+50	; 0x32
    340c:	8b a9       	ldd	r24, Y+51	; 0x33
    340e:	9c a9       	ldd	r25, Y+52	; 0x34
    3410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3414:	dc 01       	movw	r26, r24
    3416:	cb 01       	movw	r24, r22
    3418:	98 ab       	std	Y+48, r25	; 0x30
    341a:	8f a7       	std	Y+47, r24	; 0x2f
    341c:	8f a5       	ldd	r24, Y+47	; 0x2f
    341e:	98 a9       	ldd	r25, Y+48	; 0x30
    3420:	9c a7       	std	Y+44, r25	; 0x2c
    3422:	8b a7       	std	Y+43, r24	; 0x2b
    3424:	8b a5       	ldd	r24, Y+43	; 0x2b
    3426:	9c a5       	ldd	r25, Y+44	; 0x2c
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	f1 f7       	brne	.-4      	; 0x3428 <lcd_sendChar+0x11e>
    342c:	9c a7       	std	Y+44, r25	; 0x2c
    342e:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(2);    
    DIO_voidSetPinValue(EN_PIN,LOW);
    3430:	82 e0       	ldi	r24, 0x02	; 2
    3432:	62 e0       	ldi	r22, 0x02	; 2
    3434:	40 e0       	ldi	r20, 0x00	; 0
    3436:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	a0 e0       	ldi	r26, 0x00	; 0
    3440:	b0 e4       	ldi	r27, 0x40	; 64
    3442:	8f a3       	std	Y+39, r24	; 0x27
    3444:	98 a7       	std	Y+40, r25	; 0x28
    3446:	a9 a7       	std	Y+41, r26	; 0x29
    3448:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    344a:	6f a1       	ldd	r22, Y+39	; 0x27
    344c:	78 a5       	ldd	r23, Y+40	; 0x28
    344e:	89 a5       	ldd	r24, Y+41	; 0x29
    3450:	9a a5       	ldd	r25, Y+42	; 0x2a
    3452:	20 e0       	ldi	r18, 0x00	; 0
    3454:	30 e0       	ldi	r19, 0x00	; 0
    3456:	4a ef       	ldi	r20, 0xFA	; 250
    3458:	54 e4       	ldi	r21, 0x44	; 68
    345a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	8b a3       	std	Y+35, r24	; 0x23
    3464:	9c a3       	std	Y+36, r25	; 0x24
    3466:	ad a3       	std	Y+37, r26	; 0x25
    3468:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    346a:	6b a1       	ldd	r22, Y+35	; 0x23
    346c:	7c a1       	ldd	r23, Y+36	; 0x24
    346e:	8d a1       	ldd	r24, Y+37	; 0x25
    3470:	9e a1       	ldd	r25, Y+38	; 0x26
    3472:	20 e0       	ldi	r18, 0x00	; 0
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	40 e8       	ldi	r20, 0x80	; 128
    3478:	5f e3       	ldi	r21, 0x3F	; 63
    347a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    347e:	88 23       	and	r24, r24
    3480:	2c f4       	brge	.+10     	; 0x348c <lcd_sendChar+0x182>
		__ticks = 1;
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	9a a3       	std	Y+34, r25	; 0x22
    3488:	89 a3       	std	Y+33, r24	; 0x21
    348a:	3f c0       	rjmp	.+126    	; 0x350a <lcd_sendChar+0x200>
	else if (__tmp > 65535)
    348c:	6b a1       	ldd	r22, Y+35	; 0x23
    348e:	7c a1       	ldd	r23, Y+36	; 0x24
    3490:	8d a1       	ldd	r24, Y+37	; 0x25
    3492:	9e a1       	ldd	r25, Y+38	; 0x26
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	3f ef       	ldi	r19, 0xFF	; 255
    3498:	4f e7       	ldi	r20, 0x7F	; 127
    349a:	57 e4       	ldi	r21, 0x47	; 71
    349c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34a0:	18 16       	cp	r1, r24
    34a2:	4c f5       	brge	.+82     	; 0x34f6 <lcd_sendChar+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34a4:	6f a1       	ldd	r22, Y+39	; 0x27
    34a6:	78 a5       	ldd	r23, Y+40	; 0x28
    34a8:	89 a5       	ldd	r24, Y+41	; 0x29
    34aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    34ac:	20 e0       	ldi	r18, 0x00	; 0
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	40 e2       	ldi	r20, 0x20	; 32
    34b2:	51 e4       	ldi	r21, 0x41	; 65
    34b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b8:	dc 01       	movw	r26, r24
    34ba:	cb 01       	movw	r24, r22
    34bc:	bc 01       	movw	r22, r24
    34be:	cd 01       	movw	r24, r26
    34c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	9a a3       	std	Y+34, r25	; 0x22
    34ca:	89 a3       	std	Y+33, r24	; 0x21
    34cc:	0f c0       	rjmp	.+30     	; 0x34ec <lcd_sendChar+0x1e2>
    34ce:	88 ec       	ldi	r24, 0xC8	; 200
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	98 a3       	std	Y+32, r25	; 0x20
    34d4:	8f 8f       	std	Y+31, r24	; 0x1f
    34d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34d8:	98 a1       	ldd	r25, Y+32	; 0x20
    34da:	01 97       	sbiw	r24, 0x01	; 1
    34dc:	f1 f7       	brne	.-4      	; 0x34da <lcd_sendChar+0x1d0>
    34de:	98 a3       	std	Y+32, r25	; 0x20
    34e0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34e2:	89 a1       	ldd	r24, Y+33	; 0x21
    34e4:	9a a1       	ldd	r25, Y+34	; 0x22
    34e6:	01 97       	sbiw	r24, 0x01	; 1
    34e8:	9a a3       	std	Y+34, r25	; 0x22
    34ea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ec:	89 a1       	ldd	r24, Y+33	; 0x21
    34ee:	9a a1       	ldd	r25, Y+34	; 0x22
    34f0:	00 97       	sbiw	r24, 0x00	; 0
    34f2:	69 f7       	brne	.-38     	; 0x34ce <lcd_sendChar+0x1c4>
    34f4:	14 c0       	rjmp	.+40     	; 0x351e <lcd_sendChar+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f6:	6b a1       	ldd	r22, Y+35	; 0x23
    34f8:	7c a1       	ldd	r23, Y+36	; 0x24
    34fa:	8d a1       	ldd	r24, Y+37	; 0x25
    34fc:	9e a1       	ldd	r25, Y+38	; 0x26
    34fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3502:	dc 01       	movw	r26, r24
    3504:	cb 01       	movw	r24, r22
    3506:	9a a3       	std	Y+34, r25	; 0x22
    3508:	89 a3       	std	Y+33, r24	; 0x21
    350a:	89 a1       	ldd	r24, Y+33	; 0x21
    350c:	9a a1       	ldd	r25, Y+34	; 0x22
    350e:	9e 8f       	std	Y+30, r25	; 0x1e
    3510:	8d 8f       	std	Y+29, r24	; 0x1d
    3512:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3514:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3516:	01 97       	sbiw	r24, 0x01	; 1
    3518:	f1 f7       	brne	.-4      	; 0x3516 <lcd_sendChar+0x20c>
    351a:	9e 8f       	std	Y+30, r25	; 0x1e
    351c:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);     
    DIO_voidSetPortValue(LCD_DATA_PORT, (data<<4));
    351e:	89 ad       	ldd	r24, Y+57	; 0x39
    3520:	98 2f       	mov	r25, r24
    3522:	92 95       	swap	r25
    3524:	90 7f       	andi	r25, 0xF0	; 240
    3526:	82 e0       	ldi	r24, 0x02	; 2
    3528:	69 2f       	mov	r22, r25
    352a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <DIO_voidSetPortValue>
    DIO_voidSetPinValue(LS_PIN,HIGH);    
    352e:	82 e0       	ldi	r24, 0x02	; 2
    3530:	60 e0       	ldi	r22, 0x00	; 0
    3532:	41 e0       	ldi	r20, 0x01	; 1
    3534:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(EN_PIN,HIGH);  
    3538:	82 e0       	ldi	r24, 0x02	; 2
    353a:	62 e0       	ldi	r22, 0x02	; 2
    353c:	41 e0       	ldi	r20, 0x01	; 1
    353e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	a0 e0       	ldi	r26, 0x00	; 0
    3548:	b0 e4       	ldi	r27, 0x40	; 64
    354a:	89 8f       	std	Y+25, r24	; 0x19
    354c:	9a 8f       	std	Y+26, r25	; 0x1a
    354e:	ab 8f       	std	Y+27, r26	; 0x1b
    3550:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3552:	69 8d       	ldd	r22, Y+25	; 0x19
    3554:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3556:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3558:	9c 8d       	ldd	r25, Y+28	; 0x1c
    355a:	20 e0       	ldi	r18, 0x00	; 0
    355c:	30 e0       	ldi	r19, 0x00	; 0
    355e:	4a ef       	ldi	r20, 0xFA	; 250
    3560:	54 e4       	ldi	r21, 0x44	; 68
    3562:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3566:	dc 01       	movw	r26, r24
    3568:	cb 01       	movw	r24, r22
    356a:	8d 8b       	std	Y+21, r24	; 0x15
    356c:	9e 8b       	std	Y+22, r25	; 0x16
    356e:	af 8b       	std	Y+23, r26	; 0x17
    3570:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3572:	6d 89       	ldd	r22, Y+21	; 0x15
    3574:	7e 89       	ldd	r23, Y+22	; 0x16
    3576:	8f 89       	ldd	r24, Y+23	; 0x17
    3578:	98 8d       	ldd	r25, Y+24	; 0x18
    357a:	20 e0       	ldi	r18, 0x00	; 0
    357c:	30 e0       	ldi	r19, 0x00	; 0
    357e:	40 e8       	ldi	r20, 0x80	; 128
    3580:	5f e3       	ldi	r21, 0x3F	; 63
    3582:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3586:	88 23       	and	r24, r24
    3588:	2c f4       	brge	.+10     	; 0x3594 <lcd_sendChar+0x28a>
		__ticks = 1;
    358a:	81 e0       	ldi	r24, 0x01	; 1
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	9c 8b       	std	Y+20, r25	; 0x14
    3590:	8b 8b       	std	Y+19, r24	; 0x13
    3592:	3f c0       	rjmp	.+126    	; 0x3612 <lcd_sendChar+0x308>
	else if (__tmp > 65535)
    3594:	6d 89       	ldd	r22, Y+21	; 0x15
    3596:	7e 89       	ldd	r23, Y+22	; 0x16
    3598:	8f 89       	ldd	r24, Y+23	; 0x17
    359a:	98 8d       	ldd	r25, Y+24	; 0x18
    359c:	20 e0       	ldi	r18, 0x00	; 0
    359e:	3f ef       	ldi	r19, 0xFF	; 255
    35a0:	4f e7       	ldi	r20, 0x7F	; 127
    35a2:	57 e4       	ldi	r21, 0x47	; 71
    35a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35a8:	18 16       	cp	r1, r24
    35aa:	4c f5       	brge	.+82     	; 0x35fe <lcd_sendChar+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ac:	69 8d       	ldd	r22, Y+25	; 0x19
    35ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35b4:	20 e0       	ldi	r18, 0x00	; 0
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	40 e2       	ldi	r20, 0x20	; 32
    35ba:	51 e4       	ldi	r21, 0x41	; 65
    35bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c0:	dc 01       	movw	r26, r24
    35c2:	cb 01       	movw	r24, r22
    35c4:	bc 01       	movw	r22, r24
    35c6:	cd 01       	movw	r24, r26
    35c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35cc:	dc 01       	movw	r26, r24
    35ce:	cb 01       	movw	r24, r22
    35d0:	9c 8b       	std	Y+20, r25	; 0x14
    35d2:	8b 8b       	std	Y+19, r24	; 0x13
    35d4:	0f c0       	rjmp	.+30     	; 0x35f4 <lcd_sendChar+0x2ea>
    35d6:	88 ec       	ldi	r24, 0xC8	; 200
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	9a 8b       	std	Y+18, r25	; 0x12
    35dc:	89 8b       	std	Y+17, r24	; 0x11
    35de:	89 89       	ldd	r24, Y+17	; 0x11
    35e0:	9a 89       	ldd	r25, Y+18	; 0x12
    35e2:	01 97       	sbiw	r24, 0x01	; 1
    35e4:	f1 f7       	brne	.-4      	; 0x35e2 <lcd_sendChar+0x2d8>
    35e6:	9a 8b       	std	Y+18, r25	; 0x12
    35e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ea:	8b 89       	ldd	r24, Y+19	; 0x13
    35ec:	9c 89       	ldd	r25, Y+20	; 0x14
    35ee:	01 97       	sbiw	r24, 0x01	; 1
    35f0:	9c 8b       	std	Y+20, r25	; 0x14
    35f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f4:	8b 89       	ldd	r24, Y+19	; 0x13
    35f6:	9c 89       	ldd	r25, Y+20	; 0x14
    35f8:	00 97       	sbiw	r24, 0x00	; 0
    35fa:	69 f7       	brne	.-38     	; 0x35d6 <lcd_sendChar+0x2cc>
    35fc:	14 c0       	rjmp	.+40     	; 0x3626 <lcd_sendChar+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3600:	7e 89       	ldd	r23, Y+22	; 0x16
    3602:	8f 89       	ldd	r24, Y+23	; 0x17
    3604:	98 8d       	ldd	r25, Y+24	; 0x18
    3606:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	9c 8b       	std	Y+20, r25	; 0x14
    3610:	8b 8b       	std	Y+19, r24	; 0x13
    3612:	8b 89       	ldd	r24, Y+19	; 0x13
    3614:	9c 89       	ldd	r25, Y+20	; 0x14
    3616:	98 8b       	std	Y+16, r25	; 0x10
    3618:	8f 87       	std	Y+15, r24	; 0x0f
    361a:	8f 85       	ldd	r24, Y+15	; 0x0f
    361c:	98 89       	ldd	r25, Y+16	; 0x10
    361e:	01 97       	sbiw	r24, 0x01	; 1
    3620:	f1 f7       	brne	.-4      	; 0x361e <lcd_sendChar+0x314>
    3622:	98 8b       	std	Y+16, r25	; 0x10
    3624:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);   
    DIO_voidSetPinValue(EN_PIN,LOW);  
    3626:	82 e0       	ldi	r24, 0x02	; 2
    3628:	62 e0       	ldi	r22, 0x02	; 2
    362a:	40 e0       	ldi	r20, 0x00	; 0
    362c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    3630:	80 e0       	ldi	r24, 0x00	; 0
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	a0 e0       	ldi	r26, 0x00	; 0
    3636:	b0 e4       	ldi	r27, 0x40	; 64
    3638:	8b 87       	std	Y+11, r24	; 0x0b
    363a:	9c 87       	std	Y+12, r25	; 0x0c
    363c:	ad 87       	std	Y+13, r26	; 0x0d
    363e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3640:	6b 85       	ldd	r22, Y+11	; 0x0b
    3642:	7c 85       	ldd	r23, Y+12	; 0x0c
    3644:	8d 85       	ldd	r24, Y+13	; 0x0d
    3646:	9e 85       	ldd	r25, Y+14	; 0x0e
    3648:	20 e0       	ldi	r18, 0x00	; 0
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	4a ef       	ldi	r20, 0xFA	; 250
    364e:	54 e4       	ldi	r21, 0x44	; 68
    3650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	8f 83       	std	Y+7, r24	; 0x07
    365a:	98 87       	std	Y+8, r25	; 0x08
    365c:	a9 87       	std	Y+9, r26	; 0x09
    365e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3660:	6f 81       	ldd	r22, Y+7	; 0x07
    3662:	78 85       	ldd	r23, Y+8	; 0x08
    3664:	89 85       	ldd	r24, Y+9	; 0x09
    3666:	9a 85       	ldd	r25, Y+10	; 0x0a
    3668:	20 e0       	ldi	r18, 0x00	; 0
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	40 e8       	ldi	r20, 0x80	; 128
    366e:	5f e3       	ldi	r21, 0x3F	; 63
    3670:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3674:	88 23       	and	r24, r24
    3676:	2c f4       	brge	.+10     	; 0x3682 <lcd_sendChar+0x378>
		__ticks = 1;
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	9e 83       	std	Y+6, r25	; 0x06
    367e:	8d 83       	std	Y+5, r24	; 0x05
    3680:	3f c0       	rjmp	.+126    	; 0x3700 <lcd_sendChar+0x3f6>
	else if (__tmp > 65535)
    3682:	6f 81       	ldd	r22, Y+7	; 0x07
    3684:	78 85       	ldd	r23, Y+8	; 0x08
    3686:	89 85       	ldd	r24, Y+9	; 0x09
    3688:	9a 85       	ldd	r25, Y+10	; 0x0a
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	3f ef       	ldi	r19, 0xFF	; 255
    368e:	4f e7       	ldi	r20, 0x7F	; 127
    3690:	57 e4       	ldi	r21, 0x47	; 71
    3692:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3696:	18 16       	cp	r1, r24
    3698:	4c f5       	brge	.+82     	; 0x36ec <lcd_sendChar+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    369a:	6b 85       	ldd	r22, Y+11	; 0x0b
    369c:	7c 85       	ldd	r23, Y+12	; 0x0c
    369e:	8d 85       	ldd	r24, Y+13	; 0x0d
    36a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	40 e2       	ldi	r20, 0x20	; 32
    36a8:	51 e4       	ldi	r21, 0x41	; 65
    36aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	bc 01       	movw	r22, r24
    36b4:	cd 01       	movw	r24, r26
    36b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ba:	dc 01       	movw	r26, r24
    36bc:	cb 01       	movw	r24, r22
    36be:	9e 83       	std	Y+6, r25	; 0x06
    36c0:	8d 83       	std	Y+5, r24	; 0x05
    36c2:	0f c0       	rjmp	.+30     	; 0x36e2 <lcd_sendChar+0x3d8>
    36c4:	88 ec       	ldi	r24, 0xC8	; 200
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	9c 83       	std	Y+4, r25	; 0x04
    36ca:	8b 83       	std	Y+3, r24	; 0x03
    36cc:	8b 81       	ldd	r24, Y+3	; 0x03
    36ce:	9c 81       	ldd	r25, Y+4	; 0x04
    36d0:	01 97       	sbiw	r24, 0x01	; 1
    36d2:	f1 f7       	brne	.-4      	; 0x36d0 <lcd_sendChar+0x3c6>
    36d4:	9c 83       	std	Y+4, r25	; 0x04
    36d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36d8:	8d 81       	ldd	r24, Y+5	; 0x05
    36da:	9e 81       	ldd	r25, Y+6	; 0x06
    36dc:	01 97       	sbiw	r24, 0x01	; 1
    36de:	9e 83       	std	Y+6, r25	; 0x06
    36e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e2:	8d 81       	ldd	r24, Y+5	; 0x05
    36e4:	9e 81       	ldd	r25, Y+6	; 0x06
    36e6:	00 97       	sbiw	r24, 0x00	; 0
    36e8:	69 f7       	brne	.-38     	; 0x36c4 <lcd_sendChar+0x3ba>
    36ea:	14 c0       	rjmp	.+40     	; 0x3714 <lcd_sendChar+0x40a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ec:	6f 81       	ldd	r22, Y+7	; 0x07
    36ee:	78 85       	ldd	r23, Y+8	; 0x08
    36f0:	89 85       	ldd	r24, Y+9	; 0x09
    36f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f8:	dc 01       	movw	r26, r24
    36fa:	cb 01       	movw	r24, r22
    36fc:	9e 83       	std	Y+6, r25	; 0x06
    36fe:	8d 83       	std	Y+5, r24	; 0x05
    3700:	8d 81       	ldd	r24, Y+5	; 0x05
    3702:	9e 81       	ldd	r25, Y+6	; 0x06
    3704:	9a 83       	std	Y+2, r25	; 0x02
    3706:	89 83       	std	Y+1, r24	; 0x01
    3708:	89 81       	ldd	r24, Y+1	; 0x01
    370a:	9a 81       	ldd	r25, Y+2	; 0x02
    370c:	01 97       	sbiw	r24, 0x01	; 1
    370e:	f1 f7       	brne	.-4      	; 0x370c <lcd_sendChar+0x402>
    3710:	9a 83       	std	Y+2, r25	; 0x02
    3712:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);   	

}
    3714:	e9 96       	adiw	r28, 0x39	; 57
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	de bf       	out	0x3e, r29	; 62
    371c:	0f be       	out	0x3f, r0	; 63
    371e:	cd bf       	out	0x3d, r28	; 61
    3720:	cf 91       	pop	r28
    3722:	df 91       	pop	r29
    3724:	08 95       	ret

00003726 <lcd_sendString>:
void lcd_sendString(uint8_t * data)
{
    3726:	df 93       	push	r29
    3728:	cf 93       	push	r28
    372a:	00 d0       	rcall	.+0      	; 0x372c <lcd_sendString+0x6>
    372c:	0f 92       	push	r0
    372e:	cd b7       	in	r28, 0x3d	; 61
    3730:	de b7       	in	r29, 0x3e	; 62
    3732:	9b 83       	std	Y+3, r25	; 0x03
    3734:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i=0;
    3736:	19 82       	std	Y+1, r1	; 0x01
    3738:	0e c0       	rjmp	.+28     	; 0x3756 <lcd_sendString+0x30>

	while(data[i] != '\0')
	{

		lcd_sendChar(data[i]);
    373a:	89 81       	ldd	r24, Y+1	; 0x01
    373c:	28 2f       	mov	r18, r24
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	8a 81       	ldd	r24, Y+2	; 0x02
    3742:	9b 81       	ldd	r25, Y+3	; 0x03
    3744:	fc 01       	movw	r30, r24
    3746:	e2 0f       	add	r30, r18
    3748:	f3 1f       	adc	r31, r19
    374a:	80 81       	ld	r24, Z
    374c:	0e 94 85 19 	call	0x330a	; 0x330a <lcd_sendChar>
		i++;
    3750:	89 81       	ldd	r24, Y+1	; 0x01
    3752:	8f 5f       	subi	r24, 0xFF	; 255
    3754:	89 83       	std	Y+1, r24	; 0x01
}
void lcd_sendString(uint8_t * data)
{
	uint8_t i=0;

	while(data[i] != '\0')
    3756:	89 81       	ldd	r24, Y+1	; 0x01
    3758:	28 2f       	mov	r18, r24
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	8a 81       	ldd	r24, Y+2	; 0x02
    375e:	9b 81       	ldd	r25, Y+3	; 0x03
    3760:	fc 01       	movw	r30, r24
    3762:	e2 0f       	add	r30, r18
    3764:	f3 1f       	adc	r31, r19
    3766:	80 81       	ld	r24, Z
    3768:	88 23       	and	r24, r24
    376a:	39 f7       	brne	.-50     	; 0x373a <lcd_sendString+0x14>
	{

		lcd_sendChar(data[i]);
		i++;
	}
}
    376c:	0f 90       	pop	r0
    376e:	0f 90       	pop	r0
    3770:	0f 90       	pop	r0
    3772:	cf 91       	pop	r28
    3774:	df 91       	pop	r29
    3776:	08 95       	ret

00003778 <lcd_sendNum>:
void lcd_sendNum( u16 copy_u16number)
{
    3778:	df 93       	push	r29
    377a:	cf 93       	push	r28
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
    3780:	2a 97       	sbiw	r28, 0x0a	; 10
    3782:	0f b6       	in	r0, 0x3f	; 63
    3784:	f8 94       	cli
    3786:	de bf       	out	0x3e, r29	; 62
    3788:	0f be       	out	0x3f, r0	; 63
    378a:	cd bf       	out	0x3d, r28	; 61
    378c:	98 87       	std	Y+8, r25	; 0x08
    378e:	8f 83       	std	Y+7, r24	; 0x07

	if (copy_u16number==0)
    3790:	8f 81       	ldd	r24, Y+7	; 0x07
    3792:	98 85       	ldd	r25, Y+8	; 0x08
    3794:	00 97       	sbiw	r24, 0x00	; 0
    3796:	19 f4       	brne	.+6      	; 0x379e <lcd_sendNum+0x26>
	{
		lcd_sendChar('0');
    3798:	80 e3       	ldi	r24, 0x30	; 48
    379a:	0e 94 85 19 	call	0x330a	; 0x330a <lcd_sendChar>
	}
	sint8_t i=0;
    379e:	19 82       	std	Y+1, r1	; 0x01
    37a0:	1f c0       	rjmp	.+62     	; 0x37e0 <lcd_sendNum+0x68>
	uint8_t str_num[5];
	while(copy_u16number>0)
	{
		str_num[i]=copy_u16number%10;
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	e8 2f       	mov	r30, r24
    37a6:	ff 27       	eor	r31, r31
    37a8:	e7 fd       	sbrc	r30, 7
    37aa:	f0 95       	com	r31
    37ac:	8f 81       	ldd	r24, Y+7	; 0x07
    37ae:	98 85       	ldd	r25, Y+8	; 0x08
    37b0:	2a e0       	ldi	r18, 0x0A	; 10
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	b9 01       	movw	r22, r18
    37b6:	0e 94 12 20 	call	0x4024	; 0x4024 <__udivmodhi4>
    37ba:	28 2f       	mov	r18, r24
    37bc:	ce 01       	movw	r24, r28
    37be:	02 96       	adiw	r24, 0x02	; 2
    37c0:	e8 0f       	add	r30, r24
    37c2:	f9 1f       	adc	r31, r25
    37c4:	20 83       	st	Z, r18
		copy_u16number/=10;
    37c6:	8f 81       	ldd	r24, Y+7	; 0x07
    37c8:	98 85       	ldd	r25, Y+8	; 0x08
    37ca:	2a e0       	ldi	r18, 0x0A	; 10
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	b9 01       	movw	r22, r18
    37d0:	0e 94 12 20 	call	0x4024	; 0x4024 <__udivmodhi4>
    37d4:	cb 01       	movw	r24, r22
    37d6:	98 87       	std	Y+8, r25	; 0x08
    37d8:	8f 83       	std	Y+7, r24	; 0x07
		i++;
    37da:	89 81       	ldd	r24, Y+1	; 0x01
    37dc:	8f 5f       	subi	r24, 0xFF	; 255
    37de:	89 83       	std	Y+1, r24	; 0x01
	{
		lcd_sendChar('0');
	}
	sint8_t i=0;
	uint8_t str_num[5];
	while(copy_u16number>0)
    37e0:	8f 81       	ldd	r24, Y+7	; 0x07
    37e2:	98 85       	ldd	r25, Y+8	; 0x08
    37e4:	00 97       	sbiw	r24, 0x00	; 0
    37e6:	e9 f6       	brne	.-70     	; 0x37a2 <lcd_sendNum+0x2a>
	{
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
    37e8:	89 81       	ldd	r24, Y+1	; 0x01
    37ea:	81 50       	subi	r24, 0x01	; 1
    37ec:	89 83       	std	Y+1, r24	; 0x01
    37ee:	7e c0       	rjmp	.+252    	; 0x38ec <lcd_sendNum+0x174>
	while(i>=0)
	{
		switch(str_num[i])
    37f0:	89 81       	ldd	r24, Y+1	; 0x01
    37f2:	28 2f       	mov	r18, r24
    37f4:	33 27       	eor	r19, r19
    37f6:	27 fd       	sbrc	r18, 7
    37f8:	30 95       	com	r19
    37fa:	ce 01       	movw	r24, r28
    37fc:	02 96       	adiw	r24, 0x02	; 2
    37fe:	fc 01       	movw	r30, r24
    3800:	e2 0f       	add	r30, r18
    3802:	f3 1f       	adc	r31, r19
    3804:	80 81       	ld	r24, Z
    3806:	28 2f       	mov	r18, r24
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	3a 87       	std	Y+10, r19	; 0x0a
    380c:	29 87       	std	Y+9, r18	; 0x09
    380e:	89 85       	ldd	r24, Y+9	; 0x09
    3810:	9a 85       	ldd	r25, Y+10	; 0x0a
    3812:	84 30       	cpi	r24, 0x04	; 4
    3814:	91 05       	cpc	r25, r1
    3816:	09 f4       	brne	.+2      	; 0x381a <lcd_sendNum+0xa2>
    3818:	4f c0       	rjmp	.+158    	; 0x38b8 <lcd_sendNum+0x140>
    381a:	29 85       	ldd	r18, Y+9	; 0x09
    381c:	3a 85       	ldd	r19, Y+10	; 0x0a
    381e:	25 30       	cpi	r18, 0x05	; 5
    3820:	31 05       	cpc	r19, r1
    3822:	d4 f4       	brge	.+52     	; 0x3858 <lcd_sendNum+0xe0>
    3824:	89 85       	ldd	r24, Y+9	; 0x09
    3826:	9a 85       	ldd	r25, Y+10	; 0x0a
    3828:	81 30       	cpi	r24, 0x01	; 1
    382a:	91 05       	cpc	r25, r1
    382c:	c9 f1       	breq	.+114    	; 0x38a0 <lcd_sendNum+0x128>
    382e:	29 85       	ldd	r18, Y+9	; 0x09
    3830:	3a 85       	ldd	r19, Y+10	; 0x0a
    3832:	22 30       	cpi	r18, 0x02	; 2
    3834:	31 05       	cpc	r19, r1
    3836:	2c f4       	brge	.+10     	; 0x3842 <lcd_sendNum+0xca>
    3838:	89 85       	ldd	r24, Y+9	; 0x09
    383a:	9a 85       	ldd	r25, Y+10	; 0x0a
    383c:	00 97       	sbiw	r24, 0x00	; 0
    383e:	61 f1       	breq	.+88     	; 0x3898 <lcd_sendNum+0x120>
    3840:	52 c0       	rjmp	.+164    	; 0x38e6 <lcd_sendNum+0x16e>
    3842:	29 85       	ldd	r18, Y+9	; 0x09
    3844:	3a 85       	ldd	r19, Y+10	; 0x0a
    3846:	22 30       	cpi	r18, 0x02	; 2
    3848:	31 05       	cpc	r19, r1
    384a:	71 f1       	breq	.+92     	; 0x38a8 <lcd_sendNum+0x130>
    384c:	89 85       	ldd	r24, Y+9	; 0x09
    384e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3850:	83 30       	cpi	r24, 0x03	; 3
    3852:	91 05       	cpc	r25, r1
    3854:	69 f1       	breq	.+90     	; 0x38b0 <lcd_sendNum+0x138>
    3856:	47 c0       	rjmp	.+142    	; 0x38e6 <lcd_sendNum+0x16e>
    3858:	29 85       	ldd	r18, Y+9	; 0x09
    385a:	3a 85       	ldd	r19, Y+10	; 0x0a
    385c:	27 30       	cpi	r18, 0x07	; 7
    385e:	31 05       	cpc	r19, r1
    3860:	b9 f1       	breq	.+110    	; 0x38d0 <lcd_sendNum+0x158>
    3862:	89 85       	ldd	r24, Y+9	; 0x09
    3864:	9a 85       	ldd	r25, Y+10	; 0x0a
    3866:	88 30       	cpi	r24, 0x08	; 8
    3868:	91 05       	cpc	r25, r1
    386a:	5c f4       	brge	.+22     	; 0x3882 <lcd_sendNum+0x10a>
    386c:	29 85       	ldd	r18, Y+9	; 0x09
    386e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3870:	25 30       	cpi	r18, 0x05	; 5
    3872:	31 05       	cpc	r19, r1
    3874:	29 f1       	breq	.+74     	; 0x38c0 <lcd_sendNum+0x148>
    3876:	89 85       	ldd	r24, Y+9	; 0x09
    3878:	9a 85       	ldd	r25, Y+10	; 0x0a
    387a:	86 30       	cpi	r24, 0x06	; 6
    387c:	91 05       	cpc	r25, r1
    387e:	21 f1       	breq	.+72     	; 0x38c8 <lcd_sendNum+0x150>
    3880:	32 c0       	rjmp	.+100    	; 0x38e6 <lcd_sendNum+0x16e>
    3882:	29 85       	ldd	r18, Y+9	; 0x09
    3884:	3a 85       	ldd	r19, Y+10	; 0x0a
    3886:	28 30       	cpi	r18, 0x08	; 8
    3888:	31 05       	cpc	r19, r1
    388a:	31 f1       	breq	.+76     	; 0x38d8 <lcd_sendNum+0x160>
    388c:	89 85       	ldd	r24, Y+9	; 0x09
    388e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3890:	89 30       	cpi	r24, 0x09	; 9
    3892:	91 05       	cpc	r25, r1
    3894:	29 f1       	breq	.+74     	; 0x38e0 <lcd_sendNum+0x168>
    3896:	27 c0       	rjmp	.+78     	; 0x38e6 <lcd_sendNum+0x16e>
		{
		case 0 : lcd_sendChar('0');break;
    3898:	80 e3       	ldi	r24, 0x30	; 48
    389a:	0e 94 85 19 	call	0x330a	; 0x330a <lcd_sendChar>
    389e:	23 c0       	rjmp	.+70     	; 0x38e6 <lcd_sendNum+0x16e>
		case 1 : lcd_sendChar('1');break;
    38a0:	81 e3       	ldi	r24, 0x31	; 49
    38a2:	0e 94 85 19 	call	0x330a	; 0x330a <lcd_sendChar>
    38a6:	1f c0       	rjmp	.+62     	; 0x38e6 <lcd_sendNum+0x16e>
		case 2 : lcd_sendChar('2');break;
    38a8:	82 e3       	ldi	r24, 0x32	; 50
    38aa:	0e 94 85 19 	call	0x330a	; 0x330a <lcd_sendChar>
    38ae:	1b c0       	rjmp	.+54     	; 0x38e6 <lcd_sendNum+0x16e>
		case 3 : lcd_sendChar('3');break;
    38b0:	83 e3       	ldi	r24, 0x33	; 51
    38b2:	0e 94 85 19 	call	0x330a	; 0x330a <lcd_sendChar>
    38b6:	17 c0       	rjmp	.+46     	; 0x38e6 <lcd_sendNum+0x16e>
		case 4 : lcd_sendChar('4');break;
    38b8:	84 e3       	ldi	r24, 0x34	; 52
    38ba:	0e 94 85 19 	call	0x330a	; 0x330a <lcd_sendChar>
    38be:	13 c0       	rjmp	.+38     	; 0x38e6 <lcd_sendNum+0x16e>
		case 5 : lcd_sendChar('5');break;
    38c0:	85 e3       	ldi	r24, 0x35	; 53
    38c2:	0e 94 85 19 	call	0x330a	; 0x330a <lcd_sendChar>
    38c6:	0f c0       	rjmp	.+30     	; 0x38e6 <lcd_sendNum+0x16e>
		case 6 : lcd_sendChar('6');break;
    38c8:	86 e3       	ldi	r24, 0x36	; 54
    38ca:	0e 94 85 19 	call	0x330a	; 0x330a <lcd_sendChar>
    38ce:	0b c0       	rjmp	.+22     	; 0x38e6 <lcd_sendNum+0x16e>
		case 7 : lcd_sendChar('7');break;
    38d0:	87 e3       	ldi	r24, 0x37	; 55
    38d2:	0e 94 85 19 	call	0x330a	; 0x330a <lcd_sendChar>
    38d6:	07 c0       	rjmp	.+14     	; 0x38e6 <lcd_sendNum+0x16e>
		case 8 : lcd_sendChar('8');break;
    38d8:	88 e3       	ldi	r24, 0x38	; 56
    38da:	0e 94 85 19 	call	0x330a	; 0x330a <lcd_sendChar>
    38de:	03 c0       	rjmp	.+6      	; 0x38e6 <lcd_sendNum+0x16e>
		case 9 : lcd_sendChar('9');break;
    38e0:	89 e3       	ldi	r24, 0x39	; 57
    38e2:	0e 94 85 19 	call	0x330a	; 0x330a <lcd_sendChar>
		}

		i--;
    38e6:	89 81       	ldd	r24, Y+1	; 0x01
    38e8:	81 50       	subi	r24, 0x01	; 1
    38ea:	89 83       	std	Y+1, r24	; 0x01
		str_num[i]=copy_u16number%10;
		copy_u16number/=10;
		i++;
	}
	i--;
	while(i>=0)
    38ec:	89 81       	ldd	r24, Y+1	; 0x01
    38ee:	88 23       	and	r24, r24
    38f0:	0c f0       	brlt	.+2      	; 0x38f4 <lcd_sendNum+0x17c>
    38f2:	7e cf       	rjmp	.-260    	; 0x37f0 <lcd_sendNum+0x78>

		i--;
	}


}
    38f4:	2a 96       	adiw	r28, 0x0a	; 10
    38f6:	0f b6       	in	r0, 0x3f	; 63
    38f8:	f8 94       	cli
    38fa:	de bf       	out	0x3e, r29	; 62
    38fc:	0f be       	out	0x3f, r0	; 63
    38fe:	cd bf       	out	0x3d, r28	; 61
    3900:	cf 91       	pop	r28
    3902:	df 91       	pop	r29
    3904:	08 95       	ret

00003906 <lcd_SetPosition>:

void lcd_SetPosition(uint8_t raw, uint8_t column)
{
    3906:	df 93       	push	r29
    3908:	cf 93       	push	r28
    390a:	00 d0       	rcall	.+0      	; 0x390c <lcd_SetPosition+0x6>
    390c:	cd b7       	in	r28, 0x3d	; 61
    390e:	de b7       	in	r29, 0x3e	; 62
    3910:	89 83       	std	Y+1, r24	; 0x01
    3912:	6a 83       	std	Y+2, r22	; 0x02
	if(0==raw)   
    3914:	89 81       	ldd	r24, Y+1	; 0x01
    3916:	88 23       	and	r24, r24
    3918:	21 f4       	brne	.+8      	; 0x3922 <lcd_SetPosition+0x1c>
	{
	lcd_command(LCD_FIRSTLINE+column);
    391a:	8a 81       	ldd	r24, Y+2	; 0x02
    391c:	80 58       	subi	r24, 0x80	; 128
    391e:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <lcd_command>
	}
	if(1==raw)
    3922:	89 81       	ldd	r24, Y+1	; 0x01
    3924:	81 30       	cpi	r24, 0x01	; 1
    3926:	21 f4       	brne	.+8      	; 0x3930 <lcd_SetPosition+0x2a>
	{
	lcd_command(LCD_SECONDLINE+column);                                   
    3928:	8a 81       	ldd	r24, Y+2	; 0x02
    392a:	80 54       	subi	r24, 0x40	; 64
    392c:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <lcd_command>
	}

}
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	cf 91       	pop	r28
    3936:	df 91       	pop	r29
    3938:	08 95       	ret

0000393a <lcd_clear>:

void lcd_clear(void)
{
    393a:	df 93       	push	r29
    393c:	cf 93       	push	r28
    393e:	cd b7       	in	r28, 0x3d	; 61
    3940:	de b7       	in	r29, 0x3e	; 62
    3942:	2e 97       	sbiw	r28, 0x0e	; 14
    3944:	0f b6       	in	r0, 0x3f	; 63
    3946:	f8 94       	cli
    3948:	de bf       	out	0x3e, r29	; 62
    394a:	0f be       	out	0x3f, r0	; 63
    394c:	cd bf       	out	0x3d, r28	; 61
    lcd_command(DISPLAY_CLEAR);
    394e:	81 e0       	ldi	r24, 0x01	; 1
    3950:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <lcd_command>
    3954:	80 e0       	ldi	r24, 0x00	; 0
    3956:	90 e0       	ldi	r25, 0x00	; 0
    3958:	a0 e0       	ldi	r26, 0x00	; 0
    395a:	b0 e4       	ldi	r27, 0x40	; 64
    395c:	8b 87       	std	Y+11, r24	; 0x0b
    395e:	9c 87       	std	Y+12, r25	; 0x0c
    3960:	ad 87       	std	Y+13, r26	; 0x0d
    3962:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3964:	6b 85       	ldd	r22, Y+11	; 0x0b
    3966:	7c 85       	ldd	r23, Y+12	; 0x0c
    3968:	8d 85       	ldd	r24, Y+13	; 0x0d
    396a:	9e 85       	ldd	r25, Y+14	; 0x0e
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	4a ef       	ldi	r20, 0xFA	; 250
    3972:	54 e4       	ldi	r21, 0x44	; 68
    3974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3978:	dc 01       	movw	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	8f 83       	std	Y+7, r24	; 0x07
    397e:	98 87       	std	Y+8, r25	; 0x08
    3980:	a9 87       	std	Y+9, r26	; 0x09
    3982:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3984:	6f 81       	ldd	r22, Y+7	; 0x07
    3986:	78 85       	ldd	r23, Y+8	; 0x08
    3988:	89 85       	ldd	r24, Y+9	; 0x09
    398a:	9a 85       	ldd	r25, Y+10	; 0x0a
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	40 e8       	ldi	r20, 0x80	; 128
    3992:	5f e3       	ldi	r21, 0x3F	; 63
    3994:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3998:	88 23       	and	r24, r24
    399a:	2c f4       	brge	.+10     	; 0x39a6 <lcd_clear+0x6c>
		__ticks = 1;
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	9e 83       	std	Y+6, r25	; 0x06
    39a2:	8d 83       	std	Y+5, r24	; 0x05
    39a4:	3f c0       	rjmp	.+126    	; 0x3a24 <lcd_clear+0xea>
	else if (__tmp > 65535)
    39a6:	6f 81       	ldd	r22, Y+7	; 0x07
    39a8:	78 85       	ldd	r23, Y+8	; 0x08
    39aa:	89 85       	ldd	r24, Y+9	; 0x09
    39ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ae:	20 e0       	ldi	r18, 0x00	; 0
    39b0:	3f ef       	ldi	r19, 0xFF	; 255
    39b2:	4f e7       	ldi	r20, 0x7F	; 127
    39b4:	57 e4       	ldi	r21, 0x47	; 71
    39b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39ba:	18 16       	cp	r1, r24
    39bc:	4c f5       	brge	.+82     	; 0x3a10 <lcd_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39be:	6b 85       	ldd	r22, Y+11	; 0x0b
    39c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    39c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    39c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    39c6:	20 e0       	ldi	r18, 0x00	; 0
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	40 e2       	ldi	r20, 0x20	; 32
    39cc:	51 e4       	ldi	r21, 0x41	; 65
    39ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39d2:	dc 01       	movw	r26, r24
    39d4:	cb 01       	movw	r24, r22
    39d6:	bc 01       	movw	r22, r24
    39d8:	cd 01       	movw	r24, r26
    39da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39de:	dc 01       	movw	r26, r24
    39e0:	cb 01       	movw	r24, r22
    39e2:	9e 83       	std	Y+6, r25	; 0x06
    39e4:	8d 83       	std	Y+5, r24	; 0x05
    39e6:	0f c0       	rjmp	.+30     	; 0x3a06 <lcd_clear+0xcc>
    39e8:	88 ec       	ldi	r24, 0xC8	; 200
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	9c 83       	std	Y+4, r25	; 0x04
    39ee:	8b 83       	std	Y+3, r24	; 0x03
    39f0:	8b 81       	ldd	r24, Y+3	; 0x03
    39f2:	9c 81       	ldd	r25, Y+4	; 0x04
    39f4:	01 97       	sbiw	r24, 0x01	; 1
    39f6:	f1 f7       	brne	.-4      	; 0x39f4 <lcd_clear+0xba>
    39f8:	9c 83       	std	Y+4, r25	; 0x04
    39fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39fc:	8d 81       	ldd	r24, Y+5	; 0x05
    39fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3a00:	01 97       	sbiw	r24, 0x01	; 1
    3a02:	9e 83       	std	Y+6, r25	; 0x06
    3a04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a06:	8d 81       	ldd	r24, Y+5	; 0x05
    3a08:	9e 81       	ldd	r25, Y+6	; 0x06
    3a0a:	00 97       	sbiw	r24, 0x00	; 0
    3a0c:	69 f7       	brne	.-38     	; 0x39e8 <lcd_clear+0xae>
    3a0e:	14 c0       	rjmp	.+40     	; 0x3a38 <lcd_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a10:	6f 81       	ldd	r22, Y+7	; 0x07
    3a12:	78 85       	ldd	r23, Y+8	; 0x08
    3a14:	89 85       	ldd	r24, Y+9	; 0x09
    3a16:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	9e 83       	std	Y+6, r25	; 0x06
    3a22:	8d 83       	std	Y+5, r24	; 0x05
    3a24:	8d 81       	ldd	r24, Y+5	; 0x05
    3a26:	9e 81       	ldd	r25, Y+6	; 0x06
    3a28:	9a 83       	std	Y+2, r25	; 0x02
    3a2a:	89 83       	std	Y+1, r24	; 0x01
    3a2c:	89 81       	ldd	r24, Y+1	; 0x01
    3a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a30:	01 97       	sbiw	r24, 0x01	; 1
    3a32:	f1 f7       	brne	.-4      	; 0x3a30 <lcd_clear+0xf6>
    3a34:	9a 83       	std	Y+2, r25	; 0x02
    3a36:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
}
    3a38:	2e 96       	adiw	r28, 0x0e	; 14
    3a3a:	0f b6       	in	r0, 0x3f	; 63
    3a3c:	f8 94       	cli
    3a3e:	de bf       	out	0x3e, r29	; 62
    3a40:	0f be       	out	0x3f, r0	; 63
    3a42:	cd bf       	out	0x3d, r28	; 61
    3a44:	cf 91       	pop	r28
    3a46:	df 91       	pop	r29
    3a48:	08 95       	ret

00003a4a <KEYPAD_voidInit>:
/**
 * @brief Initialize KeyPad Pins
 * 
 */
void KEYPAD_voidInit(void)
{
    3a4a:	df 93       	push	r29
    3a4c:	cf 93       	push	r28
    3a4e:	cd b7       	in	r28, 0x3d	; 61
    3a50:	de b7       	in	r29, 0x3e	; 62
    DIO_voidInpullUp(KEYPAD_PORT, KEYPAD_INPUT0);
    3a52:	80 e0       	ldi	r24, 0x00	; 0
    3a54:	64 e0       	ldi	r22, 0x04	; 4
    3a56:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <DIO_voidInpullUp>
    DIO_voidInpullUp(KEYPAD_PORT, KEYPAD_INPUT1);
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	65 e0       	ldi	r22, 0x05	; 5
    3a5e:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <DIO_voidInpullUp>
    DIO_voidInpullUp(KEYPAD_PORT, KEYPAD_INPUT2);
    3a62:	80 e0       	ldi	r24, 0x00	; 0
    3a64:	66 e0       	ldi	r22, 0x06	; 6
    3a66:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <DIO_voidInpullUp>


    DIO_voidSetPinDirection(KEYPAD_PORT, KEYPAD_OUTPUT0, OUTPUT);
    3a6a:	80 e0       	ldi	r24, 0x00	; 0
    3a6c:	60 e0       	ldi	r22, 0x00	; 0
    3a6e:	41 e0       	ldi	r20, 0x01	; 1
    3a70:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KEYPAD_PORT, KEYPAD_OUTPUT1, OUTPUT);
    3a74:	80 e0       	ldi	r24, 0x00	; 0
    3a76:	61 e0       	ldi	r22, 0x01	; 1
    3a78:	41 e0       	ldi	r20, 0x01	; 1
    3a7a:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KEYPAD_PORT, KEYPAD_OUTPUT2, OUTPUT);
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	62 e0       	ldi	r22, 0x02	; 2
    3a82:	41 e0       	ldi	r20, 0x01	; 1
    3a84:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(KEYPAD_PORT, KEYPAD_OUTPUT3, OUTPUT);
    3a88:	80 e0       	ldi	r24, 0x00	; 0
    3a8a:	63 e0       	ldi	r22, 0x03	; 3
    3a8c:	41 e0       	ldi	r20, 0x01	; 1
    3a8e:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>

    DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0, HIGH);
    3a92:	80 e0       	ldi	r24, 0x00	; 0
    3a94:	60 e0       	ldi	r22, 0x00	; 0
    3a96:	41 e0       	ldi	r20, 0x01	; 1
    3a98:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT1, HIGH);
    3a9c:	80 e0       	ldi	r24, 0x00	; 0
    3a9e:	61 e0       	ldi	r22, 0x01	; 1
    3aa0:	41 e0       	ldi	r20, 0x01	; 1
    3aa2:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT2, HIGH);
    3aa6:	80 e0       	ldi	r24, 0x00	; 0
    3aa8:	62 e0       	ldi	r22, 0x02	; 2
    3aaa:	41 e0       	ldi	r20, 0x01	; 1
    3aac:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
    DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT3, HIGH);
    3ab0:	80 e0       	ldi	r24, 0x00	; 0
    3ab2:	63 e0       	ldi	r22, 0x03	; 3
    3ab4:	41 e0       	ldi	r20, 0x01	; 1
    3ab6:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
}
    3aba:	cf 91       	pop	r28
    3abc:	df 91       	pop	r29
    3abe:	08 95       	ret

00003ac0 <KEYPAD_u8Read>:
 * @brief Read Pressed Button on KeyPad and Return Key
 * 
 * @return uint8_t Pressed
 */
uint8_t KEYPAD_u8Read(void)
{
    3ac0:	df 93       	push	r29
    3ac2:	cf 93       	push	r28
    3ac4:	00 d0       	rcall	.+0      	; 0x3ac6 <KEYPAD_u8Read+0x6>
    3ac6:	0f 92       	push	r0
    3ac8:	cd b7       	in	r28, 0x3d	; 61
    3aca:	de b7       	in	r29, 0x3e	; 62
    uint8_t i, j, key = DEFAULT_KEY;
    3acc:	8e e2       	ldi	r24, 0x2E	; 46
    3ace:	89 83       	std	Y+1, r24	; 0x01
    while (1)
    {
        for (i = 0; i < ROW; i++)
    3ad0:	1b 82       	std	Y+3, r1	; 0x03
    3ad2:	39 c0       	rjmp	.+114    	; 0x3b46 <KEYPAD_u8Read+0x86>
        {
            DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0 + i, LOW);
    3ad4:	80 e0       	ldi	r24, 0x00	; 0
    3ad6:	6b 81       	ldd	r22, Y+3	; 0x03
    3ad8:	40 e0       	ldi	r20, 0x00	; 0
    3ada:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
            for (j = 0; j < COL; j++)
    3ade:	1a 82       	std	Y+2, r1	; 0x02
    3ae0:	27 c0       	rjmp	.+78     	; 0x3b30 <KEYPAD_u8Read+0x70>
            {
                if (!DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_INPUT0 + j))
    3ae2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ae4:	98 2f       	mov	r25, r24
    3ae6:	9c 5f       	subi	r25, 0xFC	; 252
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	69 2f       	mov	r22, r25
    3aec:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <DIO_u8GetPinValue>
    3af0:	88 23       	and	r24, r24
    3af2:	d9 f4       	brne	.+54     	; 0x3b2a <KEYPAD_u8Read+0x6a>
                {
                    key = gKEYPADArr[i][j];
    3af4:	8b 81       	ldd	r24, Y+3	; 0x03
    3af6:	28 2f       	mov	r18, r24
    3af8:	30 e0       	ldi	r19, 0x00	; 0
    3afa:	8a 81       	ldd	r24, Y+2	; 0x02
    3afc:	48 2f       	mov	r20, r24
    3afe:	50 e0       	ldi	r21, 0x00	; 0
    3b00:	c9 01       	movw	r24, r18
    3b02:	88 0f       	add	r24, r24
    3b04:	99 1f       	adc	r25, r25
    3b06:	82 0f       	add	r24, r18
    3b08:	93 1f       	adc	r25, r19
    3b0a:	84 0f       	add	r24, r20
    3b0c:	95 1f       	adc	r25, r21
    3b0e:	fc 01       	movw	r30, r24
    3b10:	ef 5c       	subi	r30, 0xCF	; 207
    3b12:	fe 4f       	sbci	r31, 0xFE	; 254
    3b14:	80 81       	ld	r24, Z
    3b16:	89 83       	std	Y+1, r24	; 0x01
                    while (!DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_INPUT0 + j))
    3b18:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1a:	98 2f       	mov	r25, r24
    3b1c:	9c 5f       	subi	r25, 0xFC	; 252
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	69 2f       	mov	r22, r25
    3b22:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <DIO_u8GetPinValue>
    3b26:	88 23       	and	r24, r24
    3b28:	b9 f3       	breq	.-18     	; 0x3b18 <KEYPAD_u8Read+0x58>
    while (1)
    {
        for (i = 0; i < ROW; i++)
        {
            DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0 + i, LOW);
            for (j = 0; j < COL; j++)
    3b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2c:	8f 5f       	subi	r24, 0xFF	; 255
    3b2e:	8a 83       	std	Y+2, r24	; 0x02
    3b30:	8a 81       	ldd	r24, Y+2	; 0x02
    3b32:	83 30       	cpi	r24, 0x03	; 3
    3b34:	b0 f2       	brcs	.-84     	; 0x3ae2 <KEYPAD_u8Read+0x22>
                    key = gKEYPADArr[i][j];
                    while (!DIO_u8GetPinValue(KEYPAD_PORT, KEYPAD_INPUT0 + j))
                        ;
                }
            }
            DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0 + i, HIGH);
    3b36:	80 e0       	ldi	r24, 0x00	; 0
    3b38:	6b 81       	ldd	r22, Y+3	; 0x03
    3b3a:	41 e0       	ldi	r20, 0x01	; 1
    3b3c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <DIO_voidSetPinValue>
uint8_t KEYPAD_u8Read(void)
{
    uint8_t i, j, key = DEFAULT_KEY;
    while (1)
    {
        for (i = 0; i < ROW; i++)
    3b40:	8b 81       	ldd	r24, Y+3	; 0x03
    3b42:	8f 5f       	subi	r24, 0xFF	; 255
    3b44:	8b 83       	std	Y+3, r24	; 0x03
    3b46:	8b 81       	ldd	r24, Y+3	; 0x03
    3b48:	84 30       	cpi	r24, 0x04	; 4
    3b4a:	20 f2       	brcs	.-120    	; 0x3ad4 <KEYPAD_u8Read+0x14>
                        ;
                }
            }
            DIO_voidSetPinValue(KEYPAD_PORT, KEYPAD_OUTPUT0 + i, HIGH);
        }
        return key;
    3b4c:	89 81       	ldd	r24, Y+1	; 0x01
    }
}
    3b4e:	0f 90       	pop	r0
    3b50:	0f 90       	pop	r0
    3b52:	0f 90       	pop	r0
    3b54:	cf 91       	pop	r28
    3b56:	df 91       	pop	r29
    3b58:	08 95       	ret

00003b5a <eeprom_send_string>:

#include "I2C_interface.h"
#include "UART_int.h"
#include "EEPROM_interface.h"
void eeprom_send_string(uint8_t *str)
{
    3b5a:	df 93       	push	r29
    3b5c:	cf 93       	push	r28
    3b5e:	00 d0       	rcall	.+0      	; 0x3b60 <eeprom_send_string+0x6>
    3b60:	00 d0       	rcall	.+0      	; 0x3b62 <eeprom_send_string+0x8>
    3b62:	cd b7       	in	r28, 0x3d	; 61
    3b64:	de b7       	in	r29, 0x3e	; 62
    3b66:	9c 83       	std	Y+4, r25	; 0x04
    3b68:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t i = 0, value;
    3b6a:	1a 82       	std	Y+2, r1	; 0x02
	I2C_MasterStart();
    3b6c:	0e 94 ca 09 	call	0x1394	; 0x1394 <I2C_MasterStart>
	I2C_SendSlaveAddressWithWrite(0b01010000);
    3b70:	80 e5       	ldi	r24, 0x50	; 80
    3b72:	0e 94 03 0a 	call	0x1406	; 0x1406 <I2C_SendSlaveAddressWithWrite>
	I2C_WriteDataByte(0b00000001);
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	0e 94 55 0a 	call	0x14aa	; 0x14aa <I2C_WriteDataByte>
    3b7c:	0e c0       	rjmp	.+28     	; 0x3b9a <eeprom_send_string+0x40>
	while (str[i] != '\0')
	{
		I2C_WriteDataByte(str[i] );
    3b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b80:	28 2f       	mov	r18, r24
    3b82:	30 e0       	ldi	r19, 0x00	; 0
    3b84:	8b 81       	ldd	r24, Y+3	; 0x03
    3b86:	9c 81       	ldd	r25, Y+4	; 0x04
    3b88:	fc 01       	movw	r30, r24
    3b8a:	e2 0f       	add	r30, r18
    3b8c:	f3 1f       	adc	r31, r19
    3b8e:	80 81       	ld	r24, Z
    3b90:	0e 94 55 0a 	call	0x14aa	; 0x14aa <I2C_WriteDataByte>
		i++;
    3b94:	8a 81       	ldd	r24, Y+2	; 0x02
    3b96:	8f 5f       	subi	r24, 0xFF	; 255
    3b98:	8a 83       	std	Y+2, r24	; 0x02

	uint8_t i = 0, value;
	I2C_MasterStart();
	I2C_SendSlaveAddressWithWrite(0b01010000);
	I2C_WriteDataByte(0b00000001);
	while (str[i] != '\0')
    3b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b9c:	28 2f       	mov	r18, r24
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
    3ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    3ba4:	fc 01       	movw	r30, r24
    3ba6:	e2 0f       	add	r30, r18
    3ba8:	f3 1f       	adc	r31, r19
    3baa:	80 81       	ld	r24, Z
    3bac:	88 23       	and	r24, r24
    3bae:	39 f7       	brne	.-50     	; 0x3b7e <eeprom_send_string+0x24>
	{
		I2C_WriteDataByte(str[i] );
		i++;
	}
	I2C_MasterStop();
    3bb0:	0e 94 89 0a 	call	0x1512	; 0x1512 <I2C_MasterStop>
}
    3bb4:	0f 90       	pop	r0
    3bb6:	0f 90       	pop	r0
    3bb8:	0f 90       	pop	r0
    3bba:	0f 90       	pop	r0
    3bbc:	cf 91       	pop	r28
    3bbe:	df 91       	pop	r29
    3bc0:	08 95       	ret

00003bc2 <eeprom_recieve_string>:
void eeprom_recieve_string(uint8_t *str)
{
    3bc2:	0f 93       	push	r16
    3bc4:	1f 93       	push	r17
    3bc6:	df 93       	push	r29
    3bc8:	cf 93       	push	r28
    3bca:	00 d0       	rcall	.+0      	; 0x3bcc <eeprom_recieve_string+0xa>
    3bcc:	00 d0       	rcall	.+0      	; 0x3bce <eeprom_recieve_string+0xc>
    3bce:	cd b7       	in	r28, 0x3d	; 61
    3bd0:	de b7       	in	r29, 0x3e	; 62
    3bd2:	9c 83       	std	Y+4, r25	; 0x04
    3bd4:	8b 83       	std	Y+3, r24	; 0x03

	uint8_t i = 0, value;
    3bd6:	1a 82       	std	Y+2, r1	; 0x02
	I2C_MasterStart();
    3bd8:	0e 94 ca 09 	call	0x1394	; 0x1394 <I2C_MasterStart>
	I2C_SendSlaveAddressWithWrite(0b01010000);
    3bdc:	80 e5       	ldi	r24, 0x50	; 80
    3bde:	0e 94 03 0a 	call	0x1406	; 0x1406 <I2C_SendSlaveAddressWithWrite>
	I2C_WriteDataByte(0b00000001);
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <I2C_WriteDataByte>
    3be8:	16 c0       	rjmp	.+44     	; 0x3c16 <eeprom_recieve_string+0x54>

	while (i != 4)
	{
		I2C_MasterStart();
    3bea:	0e 94 ca 09 	call	0x1394	; 0x1394 <I2C_MasterStart>
		I2C_SendSlaveAddressWithRead(0b01010000);
    3bee:	80 e5       	ldi	r24, 0x50	; 80
    3bf0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <I2C_SendSlaveAddressWithRead>
		str[i] = I2C_ReadDataByte();
    3bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf6:	28 2f       	mov	r18, r24
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    3bfe:	8c 01       	movw	r16, r24
    3c00:	02 0f       	add	r16, r18
    3c02:	13 1f       	adc	r17, r19
    3c04:	0e 94 6f 0a 	call	0x14de	; 0x14de <I2C_ReadDataByte>
    3c08:	f8 01       	movw	r30, r16
    3c0a:	80 83       	st	Z, r24
		I2C_MasterStop();
    3c0c:	0e 94 89 0a 	call	0x1512	; 0x1512 <I2C_MasterStop>
		i++;
    3c10:	8a 81       	ldd	r24, Y+2	; 0x02
    3c12:	8f 5f       	subi	r24, 0xFF	; 255
    3c14:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0, value;
	I2C_MasterStart();
	I2C_SendSlaveAddressWithWrite(0b01010000);
	I2C_WriteDataByte(0b00000001);

	while (i != 4)
    3c16:	8a 81       	ldd	r24, Y+2	; 0x02
    3c18:	84 30       	cpi	r24, 0x04	; 4
    3c1a:	39 f7       	brne	.-50     	; 0x3bea <eeprom_recieve_string+0x28>
		I2C_SendSlaveAddressWithRead(0b01010000);
		str[i] = I2C_ReadDataByte();
		I2C_MasterStop();
		i++;
	}
	str[i]='\0';
    3c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1e:	28 2f       	mov	r18, r24
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	8b 81       	ldd	r24, Y+3	; 0x03
    3c24:	9c 81       	ldd	r25, Y+4	; 0x04
    3c26:	fc 01       	movw	r30, r24
    3c28:	e2 0f       	add	r30, r18
    3c2a:	f3 1f       	adc	r31, r19
    3c2c:	10 82       	st	Z, r1
}
    3c2e:	0f 90       	pop	r0
    3c30:	0f 90       	pop	r0
    3c32:	0f 90       	pop	r0
    3c34:	0f 90       	pop	r0
    3c36:	cf 91       	pop	r28
    3c38:	df 91       	pop	r29
    3c3a:	1f 91       	pop	r17
    3c3c:	0f 91       	pop	r16
    3c3e:	08 95       	ret

00003c40 <change_stringToBin>:

uint8_t change_stringToBin(uint8_t *str)
{
    3c40:	df 93       	push	r29
    3c42:	cf 93       	push	r28
    3c44:	cd b7       	in	r28, 0x3d	; 61
    3c46:	de b7       	in	r29, 0x3e	; 62
    3c48:	2d 97       	sbiw	r28, 0x0d	; 13
    3c4a:	0f b6       	in	r0, 0x3f	; 63
    3c4c:	f8 94       	cli
    3c4e:	de bf       	out	0x3e, r29	; 62
    3c50:	0f be       	out	0x3f, r0	; 63
    3c52:	cd bf       	out	0x3d, r28	; 61
    3c54:	9d 87       	std	Y+13, r25	; 0x0d
    3c56:	8c 87       	std	Y+12, r24	; 0x0c
	uint32_t num = 0;
    3c58:	18 86       	std	Y+8, r1	; 0x08
    3c5a:	19 86       	std	Y+9, r1	; 0x09
    3c5c:	1a 86       	std	Y+10, r1	; 0x0a
    3c5e:	1b 86       	std	Y+11, r1	; 0x0b
	uint32_t bin = 0;
    3c60:	1c 82       	std	Y+4, r1	; 0x04
    3c62:	1d 82       	std	Y+5, r1	; 0x05
    3c64:	1e 82       	std	Y+6, r1	; 0x06
    3c66:	1f 82       	std	Y+7, r1	; 0x07
	uint8_t temp = 0;
    3c68:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t weight = 1;
    3c6a:	81 e0       	ldi	r24, 0x01	; 1
    3c6c:	8a 83       	std	Y+2, r24	; 0x02

	for (uint8_t i = 0; i < 8; i++)
    3c6e:	19 82       	std	Y+1, r1	; 0x01
    3c70:	29 c0       	rjmp	.+82     	; 0x3cc4 <change_stringToBin+0x84>
	{
		num = num * 10 + str[i] - '0';
    3c72:	88 85       	ldd	r24, Y+8	; 0x08
    3c74:	99 85       	ldd	r25, Y+9	; 0x09
    3c76:	aa 85       	ldd	r26, Y+10	; 0x0a
    3c78:	bb 85       	ldd	r27, Y+11	; 0x0b
    3c7a:	2a e0       	ldi	r18, 0x0A	; 10
    3c7c:	30 e0       	ldi	r19, 0x00	; 0
    3c7e:	40 e0       	ldi	r20, 0x00	; 0
    3c80:	50 e0       	ldi	r21, 0x00	; 0
    3c82:	bc 01       	movw	r22, r24
    3c84:	cd 01       	movw	r24, r26
    3c86:	0e 94 f3 1f 	call	0x3fe6	; 0x3fe6 <__mulsi3>
    3c8a:	ab 01       	movw	r20, r22
    3c8c:	bc 01       	movw	r22, r24
    3c8e:	89 81       	ldd	r24, Y+1	; 0x01
    3c90:	28 2f       	mov	r18, r24
    3c92:	30 e0       	ldi	r19, 0x00	; 0
    3c94:	8c 85       	ldd	r24, Y+12	; 0x0c
    3c96:	9d 85       	ldd	r25, Y+13	; 0x0d
    3c98:	fc 01       	movw	r30, r24
    3c9a:	e2 0f       	add	r30, r18
    3c9c:	f3 1f       	adc	r31, r19
    3c9e:	80 81       	ld	r24, Z
    3ca0:	88 2f       	mov	r24, r24
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	a0 e0       	ldi	r26, 0x00	; 0
    3ca6:	b0 e0       	ldi	r27, 0x00	; 0
    3ca8:	84 0f       	add	r24, r20
    3caa:	95 1f       	adc	r25, r21
    3cac:	a6 1f       	adc	r26, r22
    3cae:	b7 1f       	adc	r27, r23
    3cb0:	c0 97       	sbiw	r24, 0x30	; 48
    3cb2:	a1 09       	sbc	r26, r1
    3cb4:	b1 09       	sbc	r27, r1
    3cb6:	88 87       	std	Y+8, r24	; 0x08
    3cb8:	99 87       	std	Y+9, r25	; 0x09
    3cba:	aa 87       	std	Y+10, r26	; 0x0a
    3cbc:	bb 87       	std	Y+11, r27	; 0x0b
	uint32_t num = 0;
	uint32_t bin = 0;
	uint8_t temp = 0;
	uint8_t weight = 1;

	for (uint8_t i = 0; i < 8; i++)
    3cbe:	89 81       	ldd	r24, Y+1	; 0x01
    3cc0:	8f 5f       	subi	r24, 0xFF	; 255
    3cc2:	89 83       	std	Y+1, r24	; 0x01
    3cc4:	89 81       	ldd	r24, Y+1	; 0x01
    3cc6:	88 30       	cpi	r24, 0x08	; 8
    3cc8:	a0 f2       	brcs	.-88     	; 0x3c72 <change_stringToBin+0x32>
    3cca:	46 c0       	rjmp	.+140    	; 0x3d58 <change_stringToBin+0x118>
		num = num * 10 + str[i] - '0';
	}

	while (num > 0)
	{
		temp = num % 10;
    3ccc:	88 85       	ldd	r24, Y+8	; 0x08
    3cce:	99 85       	ldd	r25, Y+9	; 0x09
    3cd0:	aa 85       	ldd	r26, Y+10	; 0x0a
    3cd2:	bb 85       	ldd	r27, Y+11	; 0x0b
    3cd4:	2a e0       	ldi	r18, 0x0A	; 10
    3cd6:	30 e0       	ldi	r19, 0x00	; 0
    3cd8:	40 e0       	ldi	r20, 0x00	; 0
    3cda:	50 e0       	ldi	r21, 0x00	; 0
    3cdc:	bc 01       	movw	r22, r24
    3cde:	cd 01       	movw	r24, r26
    3ce0:	0e 94 26 20 	call	0x404c	; 0x404c <__udivmodsi4>
    3ce4:	dc 01       	movw	r26, r24
    3ce6:	cb 01       	movw	r24, r22
    3ce8:	8b 83       	std	Y+3, r24	; 0x03
		num = num / 10;
    3cea:	88 85       	ldd	r24, Y+8	; 0x08
    3cec:	99 85       	ldd	r25, Y+9	; 0x09
    3cee:	aa 85       	ldd	r26, Y+10	; 0x0a
    3cf0:	bb 85       	ldd	r27, Y+11	; 0x0b
    3cf2:	2a e0       	ldi	r18, 0x0A	; 10
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	40 e0       	ldi	r20, 0x00	; 0
    3cf8:	50 e0       	ldi	r21, 0x00	; 0
    3cfa:	bc 01       	movw	r22, r24
    3cfc:	cd 01       	movw	r24, r26
    3cfe:	0e 94 26 20 	call	0x404c	; 0x404c <__udivmodsi4>
    3d02:	da 01       	movw	r26, r20
    3d04:	c9 01       	movw	r24, r18
    3d06:	88 87       	std	Y+8, r24	; 0x08
    3d08:	99 87       	std	Y+9, r25	; 0x09
    3d0a:	aa 87       	std	Y+10, r26	; 0x0a
    3d0c:	bb 87       	std	Y+11, r27	; 0x0b
		bin = bin + temp * weight;
    3d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d10:	28 2f       	mov	r18, r24
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	8a 81       	ldd	r24, Y+2	; 0x02
    3d16:	88 2f       	mov	r24, r24
    3d18:	90 e0       	ldi	r25, 0x00	; 0
    3d1a:	ac 01       	movw	r20, r24
    3d1c:	24 9f       	mul	r18, r20
    3d1e:	c0 01       	movw	r24, r0
    3d20:	25 9f       	mul	r18, r21
    3d22:	90 0d       	add	r25, r0
    3d24:	34 9f       	mul	r19, r20
    3d26:	90 0d       	add	r25, r0
    3d28:	11 24       	eor	r1, r1
    3d2a:	9c 01       	movw	r18, r24
    3d2c:	44 27       	eor	r20, r20
    3d2e:	37 fd       	sbrc	r19, 7
    3d30:	40 95       	com	r20
    3d32:	54 2f       	mov	r21, r20
    3d34:	8c 81       	ldd	r24, Y+4	; 0x04
    3d36:	9d 81       	ldd	r25, Y+5	; 0x05
    3d38:	ae 81       	ldd	r26, Y+6	; 0x06
    3d3a:	bf 81       	ldd	r27, Y+7	; 0x07
    3d3c:	82 0f       	add	r24, r18
    3d3e:	93 1f       	adc	r25, r19
    3d40:	a4 1f       	adc	r26, r20
    3d42:	b5 1f       	adc	r27, r21
    3d44:	8c 83       	std	Y+4, r24	; 0x04
    3d46:	9d 83       	std	Y+5, r25	; 0x05
    3d48:	ae 83       	std	Y+6, r26	; 0x06
    3d4a:	bf 83       	std	Y+7, r27	; 0x07
		weight *= 2;
    3d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4e:	88 2f       	mov	r24, r24
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	88 0f       	add	r24, r24
    3d54:	99 1f       	adc	r25, r25
    3d56:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t i = 0; i < 8; i++)
	{
		num = num * 10 + str[i] - '0';
	}

	while (num > 0)
    3d58:	88 85       	ldd	r24, Y+8	; 0x08
    3d5a:	99 85       	ldd	r25, Y+9	; 0x09
    3d5c:	aa 85       	ldd	r26, Y+10	; 0x0a
    3d5e:	bb 85       	ldd	r27, Y+11	; 0x0b
    3d60:	00 97       	sbiw	r24, 0x00	; 0
    3d62:	a1 05       	cpc	r26, r1
    3d64:	b1 05       	cpc	r27, r1
    3d66:	09 f0       	breq	.+2      	; 0x3d6a <change_stringToBin+0x12a>
    3d68:	b1 cf       	rjmp	.-158    	; 0x3ccc <change_stringToBin+0x8c>
		temp = num % 10;
		num = num / 10;
		bin = bin + temp * weight;
		weight *= 2;
	}
	return bin;
    3d6a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3d6c:	2d 96       	adiw	r28, 0x0d	; 13
    3d6e:	0f b6       	in	r0, 0x3f	; 63
    3d70:	f8 94       	cli
    3d72:	de bf       	out	0x3e, r29	; 62
    3d74:	0f be       	out	0x3f, r0	; 63
    3d76:	cd bf       	out	0x3d, r28	; 61
    3d78:	cf 91       	pop	r28
    3d7a:	df 91       	pop	r29
    3d7c:	08 95       	ret

00003d7e <APP_Init>:
/**
 * @brief Initialize all Peripheral
 * 
 */
void APP_Init(void)
{
    3d7e:	df 93       	push	r29
    3d80:	cf 93       	push	r28
    3d82:	cd b7       	in	r28, 0x3d	; 61
    3d84:	de b7       	in	r29, 0x3e	; 62
	UART_ENInit();
    3d86:	0e 94 98 06 	call	0xd30	; 0xd30 <UART_ENInit>
	I2C_MasterInit();
    3d8a:	0e 94 a6 09 	call	0x134c	; 0x134c <I2C_MasterInit>
	SPI_VidInitSlave();
    3d8e:	0e 94 aa 08 	call	0x1154	; 0x1154 <SPI_VidInitSlave>
	DIO_voidSetPinDirection(PORT_D, PIN2, INPUT);
    3d92:	83 e0       	ldi	r24, 0x03	; 3
    3d94:	62 e0       	ldi	r22, 0x02	; 2
    3d96:	40 e0       	ldi	r20, 0x00	; 0
    3d98:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <DIO_voidSetPinDirection>
}
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	08 95       	ret

00003da2 <Admin_Mode>:
 * @brief Store holder name, card number and password on eeprom
 * 
 * @param str 
 */
void Admin_Mode(uint8_t *str)
{
    3da2:	df 93       	push	r29
    3da4:	cf 93       	push	r28
    3da6:	00 d0       	rcall	.+0      	; 0x3da8 <Admin_Mode+0x6>
    3da8:	0f 92       	push	r0
    3daa:	cd b7       	in	r28, 0x3d	; 61
    3dac:	de b7       	in	r29, 0x3e	; 62
    3dae:	9b 83       	std	Y+3, r25	; 0x03
    3db0:	8a 83       	std	Y+2, r24	; 0x02
	SER_UARTvoidSendString((uint8_t *)"Enter Card Holder Name: ");
    3db2:	80 e6       	ldi	r24, 0x60	; 96
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>
	SER_UARTvoidReceiveString(str);
    3dba:	8a 81       	ldd	r24, Y+2	; 0x02
    3dbc:	9b 81       	ldd	r25, Y+3	; 0x03
    3dbe:	0e 94 d0 05 	call	0xba0	; 0xba0 <SER_UARTvoidReceiveString>

	SER_UARTvoidSendString((uint8_t *)"Card Number: ");
    3dc2:	89 e7       	ldi	r24, 0x79	; 121
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>
	SER_UARTvoidReceiveString(str);
    3dca:	8a 81       	ldd	r24, Y+2	; 0x02
    3dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    3dce:	0e 94 d0 05 	call	0xba0	; 0xba0 <SER_UARTvoidReceiveString>
	/* Send Card Number To EEPROM */
	eeprom_send_string(str);
    3dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    3dd6:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <eeprom_send_string>

	/* Send Password to EEPROM */
	SER_UARTvoidSendString((uint8_t *)"Enter Passwrod: ");
    3dda:	87 e8       	ldi	r24, 0x87	; 135
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>
	SER_UARTvoidReceiveString(str);
    3de2:	8a 81       	ldd	r24, Y+2	; 0x02
    3de4:	9b 81       	ldd	r25, Y+3	; 0x03
    3de6:	0e 94 d0 05 	call	0xba0	; 0xba0 <SER_UARTvoidReceiveString>
	eeprom_send_string(str);
    3dea:	8a 81       	ldd	r24, Y+2	; 0x02
    3dec:	9b 81       	ldd	r25, Y+3	; 0x03
    3dee:	0e 94 ad 1d 	call	0x3b5a	; 0x3b5a <eeprom_send_string>

	SER_UARTvoidSendString((uint8_t *)"finishing setup the card.... ");
    3df2:	88 e9       	ldi	r24, 0x98	; 152
    3df4:	90 e0       	ldi	r25, 0x00	; 0
    3df6:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>
	uint8_t B1 = SPI_U8RecieveByte_admin();
    3dfa:	0e 94 32 09 	call	0x1264	; 0x1264 <SPI_U8RecieveByte_admin>
    3dfe:	89 83       	std	Y+1, r24	; 0x01

	SPDR = '0';
    3e00:	ef e2       	ldi	r30, 0x2F	; 47
    3e02:	f0 e0       	ldi	r31, 0x00	; 0
    3e04:	80 e3       	ldi	r24, 0x30	; 48
    3e06:	80 83       	st	Z, r24

	SER_UARTvoidSendString((uint8_t *)"setup finished");
    3e08:	86 eb       	ldi	r24, 0xB6	; 182
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>
}
    3e10:	0f 90       	pop	r0
    3e12:	0f 90       	pop	r0
    3e14:	0f 90       	pop	r0
    3e16:	cf 91       	pop	r28
    3e18:	df 91       	pop	r29
    3e1a:	08 95       	ret

00003e1c <User_Mode>:
 * @brief  User Mode
 * 
 * @param str 
 */
void User_Mode(uint8_t *str)
{
    3e1c:	df 93       	push	r29
    3e1e:	cf 93       	push	r28
    3e20:	00 d0       	rcall	.+0      	; 0x3e22 <User_Mode+0x6>
    3e22:	00 d0       	rcall	.+0      	; 0x3e24 <User_Mode+0x8>
    3e24:	00 d0       	rcall	.+0      	; 0x3e26 <User_Mode+0xa>
    3e26:	cd b7       	in	r28, 0x3d	; 61
    3e28:	de b7       	in	r29, 0x3e	; 62
    3e2a:	9e 83       	std	Y+6, r25	; 0x06
    3e2c:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t *YES = (uint8_t *)"YES";
    3e2e:	85 ec       	ldi	r24, 0xC5	; 197
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	9c 83       	std	Y+4, r25	; 0x04
    3e34:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t i = 0;
    3e36:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t B1 = 0;
    3e38:	19 82       	std	Y+1, r1	; 0x01
	eeprom_recieve_string(str);
    3e3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3e3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3e3e:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <eeprom_recieve_string>
	UART_voidRXInterruptEnable();
    3e42:	0e 94 5e 07 	call	0xebc	; 0xebc <UART_voidRXInterruptEnable>
	SER_UARTvoidSendString("if you want to change the mode press YES");
    3e46:	89 ec       	ldi	r24, 0xC9	; 201
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>

	while (1)
	{
		i = 0;
    3e4e:	1a 82       	std	Y+2, r1	; 0x02
		if (String_u8Comp(data_arr, "YES") == STRING_EQUL)
    3e50:	8a e4       	ldi	r24, 0x4A	; 74
    3e52:	91 e0       	ldi	r25, 0x01	; 1
    3e54:	25 ec       	ldi	r18, 0xC5	; 197
    3e56:	30 e0       	ldi	r19, 0x00	; 0
    3e58:	b9 01       	movw	r22, r18
    3e5a:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <String_u8Comp>
    3e5e:	88 23       	and	r24, r24
    3e60:	79 f4       	brne	.+30     	; 0x3e80 <User_Mode+0x64>
		{
			SER_UARTvoidSendString(data_arr);
    3e62:	8a e4       	ldi	r24, 0x4A	; 74
    3e64:	91 e0       	ldi	r25, 0x01	; 1
    3e66:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>
			data_arr[0] = 0;
    3e6a:	10 92 4a 01 	sts	0x014A, r1
				i++;
			}
			
		}
	}
}
    3e6e:	26 96       	adiw	r28, 0x06	; 6
    3e70:	0f b6       	in	r0, 0x3f	; 63
    3e72:	f8 94       	cli
    3e74:	de bf       	out	0x3e, r29	; 62
    3e76:	0f be       	out	0x3f, r0	; 63
    3e78:	cd bf       	out	0x3d, r28	; 61
    3e7a:	cf 91       	pop	r28
    3e7c:	df 91       	pop	r29
    3e7e:	08 95       	ret
		{
			SER_UARTvoidSendString(data_arr);
			data_arr[0] = 0;
			break;
		}
		B1 = SPI_U8RecieveByte();
    3e80:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <SPI_U8RecieveByte>
    3e84:	89 83       	std	Y+1, r24	; 0x01

		if (B1 == 'f')
    3e86:	89 81       	ldd	r24, Y+1	; 0x01
    3e88:	86 36       	cpi	r24, 0x66	; 102
    3e8a:	29 f4       	brne	.+10     	; 0x3e96 <User_Mode+0x7a>
		{
			SPDR = '1';
    3e8c:	ef e2       	ldi	r30, 0x2F	; 47
    3e8e:	f0 e0       	ldi	r31, 0x00	; 0
    3e90:	81 e3       	ldi	r24, 0x31	; 49
    3e92:	80 83       	st	Z, r24
    3e94:	dc cf       	rjmp	.-72     	; 0x3e4e <User_Mode+0x32>
		}
		else if (B1 == 'p')
    3e96:	89 81       	ldd	r24, Y+1	; 0x01
    3e98:	80 37       	cpi	r24, 0x70	; 112
    3e9a:	c9 f6       	brne	.-78     	; 0x3e4e <User_Mode+0x32>
    3e9c:	0f c0       	rjmp	.+30     	; 0x3ebc <User_Mode+0xa0>
		{
			while (SPI_U8RecieveByte() == 'p')
			{

				SPDR = str[i];
    3e9e:	af e2       	ldi	r26, 0x2F	; 47
    3ea0:	b0 e0       	ldi	r27, 0x00	; 0
    3ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ea4:	28 2f       	mov	r18, r24
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    3eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    3eac:	fc 01       	movw	r30, r24
    3eae:	e2 0f       	add	r30, r18
    3eb0:	f3 1f       	adc	r31, r19
    3eb2:	80 81       	ld	r24, Z
    3eb4:	8c 93       	st	X, r24
				i++;
    3eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    3eb8:	8f 5f       	subi	r24, 0xFF	; 255
    3eba:	8a 83       	std	Y+2, r24	; 0x02
		{
			SPDR = '1';
		}
		else if (B1 == 'p')
		{
			while (SPI_U8RecieveByte() == 'p')
    3ebc:	0e 94 e4 08 	call	0x11c8	; 0x11c8 <SPI_U8RecieveByte>
    3ec0:	80 37       	cpi	r24, 0x70	; 112
    3ec2:	69 f3       	breq	.-38     	; 0x3e9e <User_Mode+0x82>
    3ec4:	c4 cf       	rjmp	.-120    	; 0x3e4e <User_Mode+0x32>

00003ec6 <String_u8Comp>:
 * @param Str1 first string
 * @param Str2 second string
 * @return uint8_t string is equal = 0 or not equal =1
 */
uint8_t String_u8Comp(uint8_t *Str1, uint8_t *Str2)
{
    3ec6:	df 93       	push	r29
    3ec8:	cf 93       	push	r28
    3eca:	00 d0       	rcall	.+0      	; 0x3ecc <String_u8Comp+0x6>
    3ecc:	00 d0       	rcall	.+0      	; 0x3ece <String_u8Comp+0x8>
    3ece:	00 d0       	rcall	.+0      	; 0x3ed0 <String_u8Comp+0xa>
    3ed0:	cd b7       	in	r28, 0x3d	; 61
    3ed2:	de b7       	in	r29, 0x3e	; 62
    3ed4:	9c 83       	std	Y+4, r25	; 0x04
    3ed6:	8b 83       	std	Y+3, r24	; 0x03
    3ed8:	7e 83       	std	Y+6, r23	; 0x06
    3eda:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t i = 0, Flag = 0;
    3edc:	1a 82       	std	Y+2, r1	; 0x02
    3ede:	19 82       	std	Y+1, r1	; 0x01
    3ee0:	1a c0       	rjmp	.+52     	; 0x3f16 <String_u8Comp+0x50>

	while (Str1[i] || Str2[i])
	{
		if (Str1[i] != Str2[i])
    3ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee4:	28 2f       	mov	r18, r24
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eea:	9c 81       	ldd	r25, Y+4	; 0x04
    3eec:	fc 01       	movw	r30, r24
    3eee:	e2 0f       	add	r30, r18
    3ef0:	f3 1f       	adc	r31, r19
    3ef2:	40 81       	ld	r20, Z
    3ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef6:	28 2f       	mov	r18, r24
    3ef8:	30 e0       	ldi	r19, 0x00	; 0
    3efa:	8d 81       	ldd	r24, Y+5	; 0x05
    3efc:	9e 81       	ldd	r25, Y+6	; 0x06
    3efe:	fc 01       	movw	r30, r24
    3f00:	e2 0f       	add	r30, r18
    3f02:	f3 1f       	adc	r31, r19
    3f04:	80 81       	ld	r24, Z
    3f06:	48 17       	cp	r20, r24
    3f08:	19 f0       	breq	.+6      	; 0x3f10 <String_u8Comp+0x4a>
		{
			Flag = 1;
    3f0a:	81 e0       	ldi	r24, 0x01	; 1
    3f0c:	89 83       	std	Y+1, r24	; 0x01
    3f0e:	19 c0       	rjmp	.+50     	; 0x3f42 <String_u8Comp+0x7c>
			break;
		}
		i++;
    3f10:	8a 81       	ldd	r24, Y+2	; 0x02
    3f12:	8f 5f       	subi	r24, 0xFF	; 255
    3f14:	8a 83       	std	Y+2, r24	; 0x02
 */
uint8_t String_u8Comp(uint8_t *Str1, uint8_t *Str2)
{
	uint8_t i = 0, Flag = 0;

	while (Str1[i] || Str2[i])
    3f16:	8a 81       	ldd	r24, Y+2	; 0x02
    3f18:	28 2f       	mov	r18, r24
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    3f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f20:	fc 01       	movw	r30, r24
    3f22:	e2 0f       	add	r30, r18
    3f24:	f3 1f       	adc	r31, r19
    3f26:	80 81       	ld	r24, Z
    3f28:	88 23       	and	r24, r24
    3f2a:	d9 f6       	brne	.-74     	; 0x3ee2 <String_u8Comp+0x1c>
    3f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f2e:	28 2f       	mov	r18, r24
    3f30:	30 e0       	ldi	r19, 0x00	; 0
    3f32:	8d 81       	ldd	r24, Y+5	; 0x05
    3f34:	9e 81       	ldd	r25, Y+6	; 0x06
    3f36:	fc 01       	movw	r30, r24
    3f38:	e2 0f       	add	r30, r18
    3f3a:	f3 1f       	adc	r31, r19
    3f3c:	80 81       	ld	r24, Z
    3f3e:	88 23       	and	r24, r24
    3f40:	81 f6       	brne	.-96     	; 0x3ee2 <String_u8Comp+0x1c>
			Flag = 1;
			break;
		}
		i++;
	}
	return Flag;
    3f42:	89 81       	ldd	r24, Y+1	; 0x01
}
    3f44:	26 96       	adiw	r28, 0x06	; 6
    3f46:	0f b6       	in	r0, 0x3f	; 63
    3f48:	f8 94       	cli
    3f4a:	de bf       	out	0x3e, r29	; 62
    3f4c:	0f be       	out	0x3f, r0	; 63
    3f4e:	cd bf       	out	0x3d, r28	; 61
    3f50:	cf 91       	pop	r28
    3f52:	df 91       	pop	r29
    3f54:	08 95       	ret

00003f56 <main>:
uint8_t gFlag = 0;

volatile uint8_t data_arr[100];

int main()
{
    3f56:	df 93       	push	r29
    3f58:	cf 93       	push	r28
    3f5a:	cd b7       	in	r28, 0x3d	; 61
    3f5c:	de b7       	in	r29, 0x3e	; 62
    3f5e:	eb 97       	sbiw	r28, 0x3b	; 59
    3f60:	0f b6       	in	r0, 0x3f	; 63
    3f62:	f8 94       	cli
    3f64:	de bf       	out	0x3e, r29	; 62
    3f66:	0f be       	out	0x3f, r0	; 63
    3f68:	cd bf       	out	0x3d, r28	; 61
	uint8_t Data[55];
	uint8_t *Admin = (uint8_t *)"ADMIN";
    3f6a:	82 ef       	ldi	r24, 0xF2	; 242
    3f6c:	90 e0       	ldi	r25, 0x00	; 0
    3f6e:	9c 83       	std	Y+4, r25	; 0x04
    3f70:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t *User = (uint8_t *)"USER";
    3f72:	88 ef       	ldi	r24, 0xF8	; 248
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	9a 83       	std	Y+2, r25	; 0x02
    3f78:	89 83       	std	Y+1, r24	; 0x01

	APP_Init();
    3f7a:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <APP_Init>
	UART_voidReceiveString_Ashync(data_arr);
    3f7e:	8a e4       	ldi	r24, 0x4A	; 74
    3f80:	91 e0       	ldi	r25, 0x01	; 1
    3f82:	0e 94 bc 07 	call	0xf78	; 0xf78 <UART_voidReceiveString_Ashync>

	while (1)
	{
		UART_voidRXInterruptDisable();
    3f86:	0e 94 88 07 	call	0xf10	; 0xf10 <UART_voidRXInterruptDisable>
		SER_UARTvoidSendString("you want user or admin mode ?");
    3f8a:	8d ef       	ldi	r24, 0xFD	; 253
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>

		SER_UARTvoidReceiveString(Data);
    3f92:	ce 01       	movw	r24, r28
    3f94:	05 96       	adiw	r24, 0x05	; 5
    3f96:	0e 94 d0 05 	call	0xba0	; 0xba0 <SER_UARTvoidReceiveString>

		/* Admin */
		if (String_u8Comp(Data, Admin) == STRING_EQUL)
    3f9a:	ce 01       	movw	r24, r28
    3f9c:	05 96       	adiw	r24, 0x05	; 5
    3f9e:	2b 81       	ldd	r18, Y+3	; 0x03
    3fa0:	3c 81       	ldd	r19, Y+4	; 0x04
    3fa2:	b9 01       	movw	r22, r18
    3fa4:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <String_u8Comp>
    3fa8:	88 23       	and	r24, r24
    3faa:	39 f4       	brne	.+14     	; 0x3fba <main+0x64>
		{
			gFlag = INVALID;
    3fac:	10 92 49 01 	sts	0x0149, r1

			Admin_Mode(Data);
    3fb0:	ce 01       	movw	r24, r28
    3fb2:	05 96       	adiw	r24, 0x05	; 5
    3fb4:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <Admin_Mode>
    3fb8:	e6 cf       	rjmp	.-52     	; 0x3f86 <main+0x30>
		}
		else if (String_u8Comp(Data, User) == STRING_EQUL)
    3fba:	ce 01       	movw	r24, r28
    3fbc:	05 96       	adiw	r24, 0x05	; 5
    3fbe:	29 81       	ldd	r18, Y+1	; 0x01
    3fc0:	3a 81       	ldd	r19, Y+2	; 0x02
    3fc2:	b9 01       	movw	r22, r18
    3fc4:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <String_u8Comp>
    3fc8:	88 23       	and	r24, r24
    3fca:	41 f4       	brne	.+16     	; 0x3fdc <main+0x86>
		{
			gFlag = VALID;
    3fcc:	81 e0       	ldi	r24, 0x01	; 1
    3fce:	80 93 49 01 	sts	0x0149, r24

			User_Mode(Data);
    3fd2:	ce 01       	movw	r24, r28
    3fd4:	05 96       	adiw	r24, 0x05	; 5
    3fd6:	0e 94 0e 1f 	call	0x3e1c	; 0x3e1c <User_Mode>
    3fda:	d5 cf       	rjmp	.-86     	; 0x3f86 <main+0x30>
		}
		else
		{
			SER_UARTvoidSendString((uint8_t *)"Wrong Enter");
    3fdc:	8b e1       	ldi	r24, 0x1B	; 27
    3fde:	91 e0       	ldi	r25, 0x01	; 1
    3fe0:	0e 94 a3 05 	call	0xb46	; 0xb46 <SER_UARTvoidSendString>
    3fe4:	d0 cf       	rjmp	.-96     	; 0x3f86 <main+0x30>

00003fe6 <__mulsi3>:
    3fe6:	62 9f       	mul	r22, r18
    3fe8:	d0 01       	movw	r26, r0
    3fea:	73 9f       	mul	r23, r19
    3fec:	f0 01       	movw	r30, r0
    3fee:	82 9f       	mul	r24, r18
    3ff0:	e0 0d       	add	r30, r0
    3ff2:	f1 1d       	adc	r31, r1
    3ff4:	64 9f       	mul	r22, r20
    3ff6:	e0 0d       	add	r30, r0
    3ff8:	f1 1d       	adc	r31, r1
    3ffa:	92 9f       	mul	r25, r18
    3ffc:	f0 0d       	add	r31, r0
    3ffe:	83 9f       	mul	r24, r19
    4000:	f0 0d       	add	r31, r0
    4002:	74 9f       	mul	r23, r20
    4004:	f0 0d       	add	r31, r0
    4006:	65 9f       	mul	r22, r21
    4008:	f0 0d       	add	r31, r0
    400a:	99 27       	eor	r25, r25
    400c:	72 9f       	mul	r23, r18
    400e:	b0 0d       	add	r27, r0
    4010:	e1 1d       	adc	r30, r1
    4012:	f9 1f       	adc	r31, r25
    4014:	63 9f       	mul	r22, r19
    4016:	b0 0d       	add	r27, r0
    4018:	e1 1d       	adc	r30, r1
    401a:	f9 1f       	adc	r31, r25
    401c:	bd 01       	movw	r22, r26
    401e:	cf 01       	movw	r24, r30
    4020:	11 24       	eor	r1, r1
    4022:	08 95       	ret

00004024 <__udivmodhi4>:
    4024:	aa 1b       	sub	r26, r26
    4026:	bb 1b       	sub	r27, r27
    4028:	51 e1       	ldi	r21, 0x11	; 17
    402a:	07 c0       	rjmp	.+14     	; 0x403a <__udivmodhi4_ep>

0000402c <__udivmodhi4_loop>:
    402c:	aa 1f       	adc	r26, r26
    402e:	bb 1f       	adc	r27, r27
    4030:	a6 17       	cp	r26, r22
    4032:	b7 07       	cpc	r27, r23
    4034:	10 f0       	brcs	.+4      	; 0x403a <__udivmodhi4_ep>
    4036:	a6 1b       	sub	r26, r22
    4038:	b7 0b       	sbc	r27, r23

0000403a <__udivmodhi4_ep>:
    403a:	88 1f       	adc	r24, r24
    403c:	99 1f       	adc	r25, r25
    403e:	5a 95       	dec	r21
    4040:	a9 f7       	brne	.-22     	; 0x402c <__udivmodhi4_loop>
    4042:	80 95       	com	r24
    4044:	90 95       	com	r25
    4046:	bc 01       	movw	r22, r24
    4048:	cd 01       	movw	r24, r26
    404a:	08 95       	ret

0000404c <__udivmodsi4>:
    404c:	a1 e2       	ldi	r26, 0x21	; 33
    404e:	1a 2e       	mov	r1, r26
    4050:	aa 1b       	sub	r26, r26
    4052:	bb 1b       	sub	r27, r27
    4054:	fd 01       	movw	r30, r26
    4056:	0d c0       	rjmp	.+26     	; 0x4072 <__udivmodsi4_ep>

00004058 <__udivmodsi4_loop>:
    4058:	aa 1f       	adc	r26, r26
    405a:	bb 1f       	adc	r27, r27
    405c:	ee 1f       	adc	r30, r30
    405e:	ff 1f       	adc	r31, r31
    4060:	a2 17       	cp	r26, r18
    4062:	b3 07       	cpc	r27, r19
    4064:	e4 07       	cpc	r30, r20
    4066:	f5 07       	cpc	r31, r21
    4068:	20 f0       	brcs	.+8      	; 0x4072 <__udivmodsi4_ep>
    406a:	a2 1b       	sub	r26, r18
    406c:	b3 0b       	sbc	r27, r19
    406e:	e4 0b       	sbc	r30, r20
    4070:	f5 0b       	sbc	r31, r21

00004072 <__udivmodsi4_ep>:
    4072:	66 1f       	adc	r22, r22
    4074:	77 1f       	adc	r23, r23
    4076:	88 1f       	adc	r24, r24
    4078:	99 1f       	adc	r25, r25
    407a:	1a 94       	dec	r1
    407c:	69 f7       	brne	.-38     	; 0x4058 <__udivmodsi4_loop>
    407e:	60 95       	com	r22
    4080:	70 95       	com	r23
    4082:	80 95       	com	r24
    4084:	90 95       	com	r25
    4086:	9b 01       	movw	r18, r22
    4088:	ac 01       	movw	r20, r24
    408a:	bd 01       	movw	r22, r26
    408c:	cf 01       	movw	r24, r30
    408e:	08 95       	ret

00004090 <__prologue_saves__>:
    4090:	2f 92       	push	r2
    4092:	3f 92       	push	r3
    4094:	4f 92       	push	r4
    4096:	5f 92       	push	r5
    4098:	6f 92       	push	r6
    409a:	7f 92       	push	r7
    409c:	8f 92       	push	r8
    409e:	9f 92       	push	r9
    40a0:	af 92       	push	r10
    40a2:	bf 92       	push	r11
    40a4:	cf 92       	push	r12
    40a6:	df 92       	push	r13
    40a8:	ef 92       	push	r14
    40aa:	ff 92       	push	r15
    40ac:	0f 93       	push	r16
    40ae:	1f 93       	push	r17
    40b0:	cf 93       	push	r28
    40b2:	df 93       	push	r29
    40b4:	cd b7       	in	r28, 0x3d	; 61
    40b6:	de b7       	in	r29, 0x3e	; 62
    40b8:	ca 1b       	sub	r28, r26
    40ba:	db 0b       	sbc	r29, r27
    40bc:	0f b6       	in	r0, 0x3f	; 63
    40be:	f8 94       	cli
    40c0:	de bf       	out	0x3e, r29	; 62
    40c2:	0f be       	out	0x3f, r0	; 63
    40c4:	cd bf       	out	0x3d, r28	; 61
    40c6:	09 94       	ijmp

000040c8 <__epilogue_restores__>:
    40c8:	2a 88       	ldd	r2, Y+18	; 0x12
    40ca:	39 88       	ldd	r3, Y+17	; 0x11
    40cc:	48 88       	ldd	r4, Y+16	; 0x10
    40ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    40d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    40d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    40d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    40d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    40d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    40da:	b9 84       	ldd	r11, Y+9	; 0x09
    40dc:	c8 84       	ldd	r12, Y+8	; 0x08
    40de:	df 80       	ldd	r13, Y+7	; 0x07
    40e0:	ee 80       	ldd	r14, Y+6	; 0x06
    40e2:	fd 80       	ldd	r15, Y+5	; 0x05
    40e4:	0c 81       	ldd	r16, Y+4	; 0x04
    40e6:	1b 81       	ldd	r17, Y+3	; 0x03
    40e8:	aa 81       	ldd	r26, Y+2	; 0x02
    40ea:	b9 81       	ldd	r27, Y+1	; 0x01
    40ec:	ce 0f       	add	r28, r30
    40ee:	d1 1d       	adc	r29, r1
    40f0:	0f b6       	in	r0, 0x3f	; 63
    40f2:	f8 94       	cli
    40f4:	de bf       	out	0x3e, r29	; 62
    40f6:	0f be       	out	0x3f, r0	; 63
    40f8:	cd bf       	out	0x3d, r28	; 61
    40fa:	ed 01       	movw	r28, r26
    40fc:	08 95       	ret

000040fe <_exit>:
    40fe:	f8 94       	cli

00004100 <__stop_program>:
    4100:	ff cf       	rjmp	.-2      	; 0x4100 <__stop_program>
