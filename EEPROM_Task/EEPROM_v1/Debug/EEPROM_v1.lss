
EEPROM_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  000004c4  00000538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000059e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011e6  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000918  00000000  00000000  0000193a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a26  00000000  00000000  00002252  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000278  00000000  00000000  00002c78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006fd  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008ec  00000000  00000000  000035ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00003ed9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ec       	ldi	r30, 0xC4	; 196
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3c       	cpi	r26, 0xC6	; 198
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 60 02 	jmp	0x4c0	; 0x4c0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include "util/delay.h"
#include "string.h"


int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	e3 97       	sbiw	r28, 0x33	; 51
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	uint8_t DataRecived[50];
	uint8_t Address;
	uint8_t ActualData;
	uint8_t Read;
	
	DIO_VidSetPortDirection(PortA,255);
  96:	6f ef       	ldi	r22, 0xFF	; 255
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 26 01 	call	0x24c	; 0x24c <DIO_VidSetPortDirection>
	//DIO_VidSetPortDirection(PortD,255);
	DIO_VidSetPinDirection(PortD,PIN0,INPUT);
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(PortD,PIN1,OUTPUT);
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_VidSetPinDirection>
	I2C_voidMasterInit();
  b2:	0e 94 81 01 	call	0x302	; 0x302 <I2C_voidMasterInit>
	UART_init();
  b6:	0e 94 08 02 	call	0x410	; 0x410 <UART_init>
    while (1) 
    {
		
		UART_sendString((uint8_t*)"Enter your Operation: \r");
  ba:	80 e6       	ldi	r24, 0x60	; 96
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 1a 02 	call	0x434	; 0x434 <UART_sendString>
		UART_receiveString(DataRecived);
  c2:	ce 01       	movw	r24, r28
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	0e 94 2d 02 	call	0x45a	; 0x45a <UART_receiveString>
		
		if (strcmp(DataRecived,"WRITE") == 0)
  ca:	68 e7       	ldi	r22, 0x78	; 120
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	ce 01       	movw	r24, r28
  d0:	01 96       	adiw	r24, 0x01	; 1
  d2:	0e 94 57 02 	call	0x4ae	; 0x4ae <strcmp>
  d6:	89 2b       	or	r24, r25
  d8:	09 f5       	brne	.+66     	; 0x11c <main+0x9a>
		{
			UART_sendString((uint8_t*)"Enter Address: \r");
  da:	8e e7       	ldi	r24, 0x7E	; 126
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 1a 02 	call	0x434	; 0x434 <UART_sendString>
			UART_receiveString(DataRecived);
  e2:	ce 01       	movw	r24, r28
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	0e 94 2d 02 	call	0x45a	; 0x45a <UART_receiveString>
			Address = ConvertFromAscitoInt(DataRecived);
  ea:	ce 01       	movw	r24, r28
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	0e 94 4e 02 	call	0x49c	; 0x49c <ConvertFromAscitoInt>
  f2:	18 2f       	mov	r17, r24
			UART_sendByte(Address);
  f4:	0e 94 12 02 	call	0x424	; 0x424 <UART_sendByte>
			UART_sendString((uint8_t*)"\rOK \rEnter Data: \r");
  f8:	8f e8       	ldi	r24, 0x8F	; 143
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 1a 02 	call	0x434	; 0x434 <UART_sendString>
			ActualData = UART_recieveByte();
 100:	0e 94 16 02 	call	0x42c	; 0x42c <UART_recieveByte>
 104:	08 2f       	mov	r16, r24
			UART_sendString((uint8_t*)"\rOK\r");
 106:	82 ea       	ldi	r24, 0xA2	; 162
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 1a 02 	call	0x434	; 0x434 <UART_sendString>
			EEPROM_u8WriteDataByte(Address,ActualData);			
 10e:	61 2f       	mov	r22, r17
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	40 2f       	mov	r20, r16
 118:	0e 94 46 01 	call	0x28c	; 0x28c <EEPROM_u8WriteDataByte>
		}
		
		if(strcmp(DataRecived,"READ") == 0)
 11c:	67 ea       	ldi	r22, 0xA7	; 167
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	ce 01       	movw	r24, r28
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	0e 94 57 02 	call	0x4ae	; 0x4ae <strcmp>
 128:	89 2b       	or	r24, r25
 12a:	39 f6       	brne	.-114    	; 0xba <main+0x38>
		{
			UART_sendString((uint8_t*)"Enter Address To Read: \r");
 12c:	8c ea       	ldi	r24, 0xAC	; 172
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 1a 02 	call	0x434	; 0x434 <UART_sendString>
			UART_receiveString(DataRecived);
 134:	ce 01       	movw	r24, r28
 136:	01 96       	adiw	r24, 0x01	; 1
 138:	0e 94 2d 02 	call	0x45a	; 0x45a <UART_receiveString>
			Address = ConvertFromAscitoInt(DataRecived);
 13c:	ce 01       	movw	r24, r28
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	0e 94 4e 02 	call	0x49c	; 0x49c <ConvertFromAscitoInt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	e3 ed       	ldi	r30, 0xD3	; 211
 146:	f0 e3       	ldi	r31, 0x30	; 48
 148:	31 97       	sbiw	r30, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <main+0xc6>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <main+0xcc>
 14e:	00 00       	nop
			_delay_ms(50);
			EEPROM_u8ReadDataByte(Address,&Read);
 150:	68 2f       	mov	r22, r24
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	ae 01       	movw	r20, r28
 15a:	4d 5c       	subi	r20, 0xCD	; 205
 15c:	5f 4f       	sbci	r21, 0xFF	; 255
 15e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <EEPROM_u8ReadDataByte>
			DIO_VidSetPortValue(PortA,Read);
 162:	6b a9       	ldd	r22, Y+51	; 0x33
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 36 01 	call	0x26c	; 0x26c <DIO_VidSetPortValue>
 16a:	a7 cf       	rjmp	.-178    	; 0xba <main+0x38>

0000016c <DIO_VidSetPinDirection>:
		switch (copy_U8Port)
		{
			case PortA : CLR_BIT(PORTA,copy_U8Pin); break;
			case PortB : CLR_BIT(PORTB,copy_U8Pin); break;
			case PortC : CLR_BIT(PORTC,copy_U8Pin); break;
			case PortD : CLR_BIT(PORTD,copy_U8Pin); break;
 16c:	41 30       	cpi	r20, 0x01	; 1
 16e:	a1 f5       	brne	.+104    	; 0x1d8 <DIO_VidSetPinDirection+0x6c>
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	89 f0       	breq	.+34     	; 0x196 <DIO_VidSetPinDirection+0x2a>
 174:	28 f0       	brcs	.+10     	; 0x180 <DIO_VidSetPinDirection+0x14>
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	c9 f0       	breq	.+50     	; 0x1ac <DIO_VidSetPinDirection+0x40>
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	11 f1       	breq	.+68     	; 0x1c2 <DIO_VidSetPinDirection+0x56>
 17e:	08 95       	ret
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_VidSetPinDirection+0x1e>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_VidSetPinDirection+0x1a>
 18e:	9a b3       	in	r25, 0x1a	; 26
 190:	89 2b       	or	r24, r25
 192:	8a bb       	out	0x1a, r24	; 26
 194:	08 95       	ret
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_VidSetPinDirection+0x34>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_VidSetPinDirection+0x30>
 1a4:	97 b3       	in	r25, 0x17	; 23
 1a6:	89 2b       	or	r24, r25
 1a8:	87 bb       	out	0x17, r24	; 23
 1aa:	08 95       	ret
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_VidSetPinDirection+0x4a>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_VidSetPinDirection+0x46>
 1ba:	94 b3       	in	r25, 0x14	; 20
 1bc:	89 2b       	or	r24, r25
 1be:	84 bb       	out	0x14, r24	; 20
 1c0:	08 95       	ret
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_VidSetPinDirection+0x60>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_VidSetPinDirection+0x5c>
 1d0:	91 b3       	in	r25, 0x11	; 17
 1d2:	89 2b       	or	r24, r25
 1d4:	81 bb       	out	0x11, r24	; 17
 1d6:	08 95       	ret
 1d8:	41 11       	cpse	r20, r1
 1da:	37 c0       	rjmp	.+110    	; 0x24a <DIO_VidSetPinDirection+0xde>
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	91 f0       	breq	.+36     	; 0x204 <DIO_VidSetPinDirection+0x98>
 1e0:	28 f0       	brcs	.+10     	; 0x1ec <DIO_VidSetPinDirection+0x80>
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	d9 f0       	breq	.+54     	; 0x21c <DIO_VidSetPinDirection+0xb0>
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	29 f1       	breq	.+74     	; 0x234 <DIO_VidSetPinDirection+0xc8>
 1ea:	08 95       	ret
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_VidSetPinDirection+0x8a>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	6a 95       	dec	r22
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_VidSetPinDirection+0x86>
 1fa:	80 95       	com	r24
 1fc:	9a b3       	in	r25, 0x1a	; 26
 1fe:	89 23       	and	r24, r25
 200:	8a bb       	out	0x1a, r24	; 26
 202:	08 95       	ret
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_VidSetPinDirection+0xa2>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_VidSetPinDirection+0x9e>
 212:	80 95       	com	r24
 214:	97 b3       	in	r25, 0x17	; 23
 216:	89 23       	and	r24, r25
 218:	87 bb       	out	0x17, r24	; 23
 21a:	08 95       	ret
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_VidSetPinDirection+0xba>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_VidSetPinDirection+0xb6>
 22a:	80 95       	com	r24
 22c:	94 b3       	in	r25, 0x14	; 20
 22e:	89 23       	and	r24, r25
 230:	84 bb       	out	0x14, r24	; 20
 232:	08 95       	ret
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_VidSetPinDirection+0xd2>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_VidSetPinDirection+0xce>
 242:	80 95       	com	r24
 244:	91 b3       	in	r25, 0x11	; 17
 246:	89 23       	and	r24, r25
 248:	81 bb       	out	0x11, r24	; 17
 24a:	08 95       	ret

0000024c <DIO_VidSetPortDirection>:
	}
}

void DIO_VidSetPortDirection(uint8_t copy_U8Port ,uint8_t copy_U8Direction)
{
	switch(copy_U8Port)
 24c:	81 30       	cpi	r24, 0x01	; 1
 24e:	41 f0       	breq	.+16     	; 0x260 <DIO_VidSetPortDirection+0x14>
 250:	28 f0       	brcs	.+10     	; 0x25c <DIO_VidSetPortDirection+0x10>
 252:	82 30       	cpi	r24, 0x02	; 2
 254:	39 f0       	breq	.+14     	; 0x264 <DIO_VidSetPortDirection+0x18>
 256:	83 30       	cpi	r24, 0x03	; 3
 258:	39 f0       	breq	.+14     	; 0x268 <DIO_VidSetPortDirection+0x1c>
 25a:	08 95       	ret
	{
		case PortA :DDRA = copy_U8Direction; break;
 25c:	6a bb       	out	0x1a, r22	; 26
 25e:	08 95       	ret
		case PortB :DDRB = copy_U8Direction; break;
 260:	67 bb       	out	0x17, r22	; 23
 262:	08 95       	ret
		case PortC :DDRC = copy_U8Direction; break;
 264:	64 bb       	out	0x14, r22	; 20
 266:	08 95       	ret
		case PortD :DDRD = copy_U8Direction; break;
 268:	61 bb       	out	0x11, r22	; 17
 26a:	08 95       	ret

0000026c <DIO_VidSetPortValue>:

}

void DIO_VidSetPortValue(uint8_t copy_U8Port ,uint8_t copy_U8Value)
{
	switch(copy_U8Port)
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	41 f0       	breq	.+16     	; 0x280 <DIO_VidSetPortValue+0x14>
 270:	28 f0       	brcs	.+10     	; 0x27c <DIO_VidSetPortValue+0x10>
 272:	82 30       	cpi	r24, 0x02	; 2
 274:	39 f0       	breq	.+14     	; 0x284 <DIO_VidSetPortValue+0x18>
 276:	83 30       	cpi	r24, 0x03	; 3
 278:	39 f0       	breq	.+14     	; 0x288 <DIO_VidSetPortValue+0x1c>
 27a:	08 95       	ret
	{
		case PortA :PORTA = copy_U8Value; break;
 27c:	6b bb       	out	0x1b, r22	; 27
 27e:	08 95       	ret
		case PortB :PORTB = copy_U8Value; break;
 280:	68 bb       	out	0x18, r22	; 24
 282:	08 95       	ret
		case PortC :PORTC = copy_U8Value; break;
 284:	65 bb       	out	0x15, r22	; 21
 286:	08 95       	ret
		case PortD :PORTD = copy_U8Value; break;
 288:	62 bb       	out	0x12, r22	; 18
 28a:	08 95       	ret

0000028c <EEPROM_u8WriteDataByte>:
	}
	/* Stop Condition */
	I2C_voidSendStopCondition();

	return Local_enuState;
}
 28c:	1f 93       	push	r17
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	16 2f       	mov	r17, r22
 294:	c7 2f       	mov	r28, r23
 296:	d4 2f       	mov	r29, r20
 298:	0e 94 90 01 	call	0x320	; 0x320 <I2C_enuSendStartCondition>
 29c:	8c 2f       	mov	r24, r28
 29e:	83 70       	andi	r24, 0x03	; 3
 2a0:	80 65       	ori	r24, 0x50	; 80
 2a2:	0e 94 b2 01 	call	0x364	; 0x364 <I2C_enuSendSlaveAddWithWrite>
 2a6:	81 2f       	mov	r24, r17
 2a8:	0e 94 de 01 	call	0x3bc	; 0x3bc <I2C_enuMasterSendDataByte>
 2ac:	8d 2f       	mov	r24, r29
 2ae:	0e 94 de 01 	call	0x3bc	; 0x3bc <I2C_enuMasterSendDataByte>
 2b2:	0e 94 01 02 	call	0x402	; 0x402 <I2C_voidSendStopCondition>
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	1f 91       	pop	r17
 2be:	08 95       	ret

000002c0 <EEPROM_u8ReadDataByte>:

EEPROM_Error_States EEPROM_u8ReadDataByte(uint32_t Copy_u16ByteAddress,uint8_t * Copy_pu8ReturnData)
{
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	d6 2f       	mov	r29, r22
 2ca:	c7 2f       	mov	r28, r23
 2cc:	8a 01       	movw	r16, r20
	EEPROM_Error_States Local_enuState = STD_TYPES_u8_ERROR_OK;
	/* Start Condition */
	I2C_enuSendStartCondition();
 2ce:	0e 94 90 01 	call	0x320	; 0x320 <I2C_enuSendStartCondition>

	/* Send Slave Address With W */
	I2C_enuSendSlaveAddWithWrite( (EEPROM_FIXED_ADDRESS | (EEPROM_A2_VALUE << 2) | ((Copy_u16ByteAddress >> 8) & 3)) );
 2d2:	c3 70       	andi	r28, 0x03	; 3
 2d4:	c0 65       	ori	r28, 0x50	; 80
 2d6:	8c 2f       	mov	r24, r28
 2d8:	0e 94 b2 01 	call	0x364	; 0x364 <I2C_enuSendSlaveAddWithWrite>

	/* Send Byte Address */
	I2C_enuMasterSendDataByte((uint8_t)Copy_u16ByteAddress);
 2dc:	8d 2f       	mov	r24, r29
 2de:	0e 94 de 01 	call	0x3bc	; 0x3bc <I2C_enuMasterSendDataByte>

	/* Repeated Start Condition */
	I2C_enuSendReStartCondition();
 2e2:	0e 94 a1 01 	call	0x342	; 0x342 <I2C_enuSendReStartCondition>

	/* Send Slave Address With R */
	I2C_enuSendSlaveAddWithRead( (EEPROM_FIXED_ADDRESS | (EEPROM_A2_VALUE << 2) | ((Copy_u16ByteAddress >> 8) & 3)) );
 2e6:	8c 2f       	mov	r24, r28
 2e8:	0e 94 c8 01 	call	0x390	; 0x390 <I2C_enuSendSlaveAddWithRead>

	/* Read Data */
	I2C_enuMasterReadDataByte(Copy_pu8ReturnData);
 2ec:	c8 01       	movw	r24, r16
 2ee:	0e 94 ed 01 	call	0x3da	; 0x3da <I2C_enuMasterReadDataByte>

	/* Stop Condition */
	I2C_voidSendStopCondition();
 2f2:	0e 94 01 02 	call	0x402	; 0x402 <I2C_voidSendStopCondition>

	return Local_enuState;
}
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	1f 91       	pop	r17
 2fe:	0f 91       	pop	r16
 300:	08 95       	ret

00000302 <I2C_voidMasterInit>:
		
		*Copy_u8Data=TWDR;
		
	}
	return Local_enuState;
}
 302:	81 b1       	in	r24, 0x01	; 1
 304:	8d 7f       	andi	r24, 0xFD	; 253
 306:	81 b9       	out	0x01, r24	; 1
 308:	81 b1       	in	r24, 0x01	; 1
 30a:	8e 7f       	andi	r24, 0xFE	; 254
 30c:	81 b9       	out	0x01, r24	; 1
 30e:	82 e0       	ldi	r24, 0x02	; 2
 310:	80 b9       	out	0x00, r24	; 0
 312:	86 b7       	in	r24, 0x36	; 54
 314:	80 64       	ori	r24, 0x40	; 64
 316:	86 bf       	out	0x36, r24	; 54
 318:	86 b7       	in	r24, 0x36	; 54
 31a:	84 60       	ori	r24, 0x04	; 4
 31c:	86 bf       	out	0x36, r24	; 54
 31e:	08 95       	ret

00000320 <I2C_enuSendStartCondition>:
 320:	86 b7       	in	r24, 0x36	; 54
 322:	80 62       	ori	r24, 0x20	; 32
 324:	86 bf       	out	0x36, r24	; 54
 326:	86 b7       	in	r24, 0x36	; 54
 328:	80 68       	ori	r24, 0x80	; 128
 32a:	86 bf       	out	0x36, r24	; 54
 32c:	06 b6       	in	r0, 0x36	; 54
 32e:	07 fe       	sbrs	r0, 7
 330:	fd cf       	rjmp	.-6      	; 0x32c <I2C_enuSendStartCondition+0xc>
 332:	81 b1       	in	r24, 0x01	; 1
 334:	88 7f       	andi	r24, 0xF8	; 248
 336:	88 30       	cpi	r24, 0x08	; 8
 338:	11 f4       	brne	.+4      	; 0x33e <I2C_enuSendStartCondition+0x1e>
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	08 95       	ret
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	08 95       	ret

00000342 <I2C_enuSendReStartCondition>:
 342:	86 b7       	in	r24, 0x36	; 54
 344:	80 62       	ori	r24, 0x20	; 32
 346:	86 bf       	out	0x36, r24	; 54
 348:	86 b7       	in	r24, 0x36	; 54
 34a:	80 68       	ori	r24, 0x80	; 128
 34c:	86 bf       	out	0x36, r24	; 54
 34e:	06 b6       	in	r0, 0x36	; 54
 350:	07 fe       	sbrs	r0, 7
 352:	fd cf       	rjmp	.-6      	; 0x34e <I2C_enuSendReStartCondition+0xc>
 354:	81 b1       	in	r24, 0x01	; 1
 356:	88 7f       	andi	r24, 0xF8	; 248
 358:	80 31       	cpi	r24, 0x10	; 16
 35a:	11 f4       	brne	.+4      	; 0x360 <I2C_enuSendReStartCondition+0x1e>
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	08 95       	ret
 360:	82 e0       	ldi	r24, 0x02	; 2
 362:	08 95       	ret

00000364 <I2C_enuSendSlaveAddWithWrite>:
 364:	88 0f       	add	r24, r24
 366:	83 b9       	out	0x03, r24	; 3
 368:	83 b1       	in	r24, 0x03	; 3
 36a:	8e 7f       	andi	r24, 0xFE	; 254
 36c:	83 b9       	out	0x03, r24	; 3
 36e:	86 b7       	in	r24, 0x36	; 54
 370:	8f 7d       	andi	r24, 0xDF	; 223
 372:	86 bf       	out	0x36, r24	; 54
 374:	86 b7       	in	r24, 0x36	; 54
 376:	80 68       	ori	r24, 0x80	; 128
 378:	86 bf       	out	0x36, r24	; 54
 37a:	06 b6       	in	r0, 0x36	; 54
 37c:	07 fe       	sbrs	r0, 7
 37e:	fd cf       	rjmp	.-6      	; 0x37a <I2C_enuSendSlaveAddWithWrite+0x16>
 380:	81 b1       	in	r24, 0x01	; 1
 382:	88 7f       	andi	r24, 0xF8	; 248
 384:	88 31       	cpi	r24, 0x18	; 24
 386:	11 f4       	brne	.+4      	; 0x38c <I2C_enuSendSlaveAddWithWrite+0x28>
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	08 95       	ret
 38c:	83 e0       	ldi	r24, 0x03	; 3
 38e:	08 95       	ret

00000390 <I2C_enuSendSlaveAddWithRead>:
 390:	88 0f       	add	r24, r24
 392:	83 b9       	out	0x03, r24	; 3
 394:	83 b1       	in	r24, 0x03	; 3
 396:	81 60       	ori	r24, 0x01	; 1
 398:	83 b9       	out	0x03, r24	; 3
 39a:	86 b7       	in	r24, 0x36	; 54
 39c:	8f 7d       	andi	r24, 0xDF	; 223
 39e:	86 bf       	out	0x36, r24	; 54
 3a0:	86 b7       	in	r24, 0x36	; 54
 3a2:	80 68       	ori	r24, 0x80	; 128
 3a4:	86 bf       	out	0x36, r24	; 54
 3a6:	06 b6       	in	r0, 0x36	; 54
 3a8:	07 fe       	sbrs	r0, 7
 3aa:	fd cf       	rjmp	.-6      	; 0x3a6 <I2C_enuSendSlaveAddWithRead+0x16>
 3ac:	81 b1       	in	r24, 0x01	; 1
 3ae:	88 7f       	andi	r24, 0xF8	; 248
 3b0:	80 34       	cpi	r24, 0x40	; 64
 3b2:	11 f4       	brne	.+4      	; 0x3b8 <I2C_enuSendSlaveAddWithRead+0x28>
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	08 95       	ret
 3b8:	84 e0       	ldi	r24, 0x04	; 4
 3ba:	08 95       	ret

000003bc <I2C_enuMasterSendDataByte>:
 3bc:	83 b9       	out	0x03, r24	; 3
 3be:	86 b7       	in	r24, 0x36	; 54
 3c0:	80 68       	ori	r24, 0x80	; 128
 3c2:	86 bf       	out	0x36, r24	; 54
 3c4:	06 b6       	in	r0, 0x36	; 54
 3c6:	07 fe       	sbrs	r0, 7
 3c8:	fd cf       	rjmp	.-6      	; 0x3c4 <I2C_enuMasterSendDataByte+0x8>
 3ca:	81 b1       	in	r24, 0x01	; 1
 3cc:	88 7f       	andi	r24, 0xF8	; 248
 3ce:	88 32       	cpi	r24, 0x28	; 40
 3d0:	11 f4       	brne	.+4      	; 0x3d6 <I2C_enuMasterSendDataByte+0x1a>
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	08 95       	ret
 3d6:	85 e0       	ldi	r24, 0x05	; 5
 3d8:	08 95       	ret

000003da <I2C_enuMasterReadDataByte>:
 3da:	fc 01       	movw	r30, r24
 3dc:	96 b7       	in	r25, 0x36	; 54
 3de:	9f 7b       	andi	r25, 0xBF	; 191
 3e0:	96 bf       	out	0x36, r25	; 54
 3e2:	96 b7       	in	r25, 0x36	; 54
 3e4:	90 68       	ori	r25, 0x80	; 128
 3e6:	96 bf       	out	0x36, r25	; 54
 3e8:	06 b6       	in	r0, 0x36	; 54
 3ea:	07 fe       	sbrs	r0, 7
 3ec:	fd cf       	rjmp	.-6      	; 0x3e8 <I2C_enuMasterReadDataByte+0xe>
 3ee:	91 b1       	in	r25, 0x01	; 1
 3f0:	98 7f       	andi	r25, 0xF8	; 248
 3f2:	98 35       	cpi	r25, 0x58	; 88
 3f4:	21 f4       	brne	.+8      	; 0x3fe <I2C_enuMasterReadDataByte+0x24>
 3f6:	83 b1       	in	r24, 0x03	; 3
 3f8:	80 83       	st	Z, r24
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	08 95       	ret
 3fe:	86 e0       	ldi	r24, 0x06	; 6
 400:	08 95       	ret

00000402 <I2C_voidSendStopCondition>:

void I2C_voidSendStopCondition(void)
{
	//Stop Condition
	SET_BIT(TWCR,TWCR_TWSTO);
 402:	86 b7       	in	r24, 0x36	; 54
 404:	80 61       	ori	r24, 0x10	; 16
 406:	86 bf       	out	0x36, r24	; 54

	//Clear Flag
	SET_BIT(TWCR,TWCR_TWINT);
 408:	86 b7       	in	r24, 0x36	; 54
 40a:	80 68       	ori	r24, 0x80	; 128
 40c:	86 bf       	out	0x36, r24	; 54
 40e:	08 95       	ret

00000410 <UART_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
 410:	82 e0       	ldi	r24, 0x02	; 2
 412:	8b b9       	out	0x0b, r24	; 11
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	
	UCSRB = (1 << RXEN) | (1 << TXEN);
 414:	88 e1       	ldi	r24, 0x18	; 24
 416:	8a b9       	out	0x0a, r24	; 10
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = ((1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1)); 
 418:	86 e8       	ldi	r24, 0x86	; 134
 41a:	80 bd       	out	0x20, r24	; 32
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
 41c:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
 41e:	8c e0       	ldi	r24, 0x0C	; 12
 420:	89 b9       	out	0x09, r24	; 9
 422:	08 95       	ret

00000424 <UART_sendByte>:
void UART_sendByte( uint8_t data)
{
	
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(!((UCSRA) & (1 << UDRE))){}
 424:	5d 9b       	sbis	0x0b, 5	; 11
 426:	fe cf       	rjmp	.-4      	; 0x424 <UART_sendByte>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
 428:	8c b9       	out	0x0c, r24	; 12
 42a:	08 95       	ret

0000042c <UART_recieveByte>:

uint8_t UART_recieveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(!((UCSRA) & (1 << RXC))){}
 42c:	5f 9b       	sbis	0x0b, 7	; 11
 42e:	fe cf       	rjmp	.-4      	; 0x42c <UART_recieveByte>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
 430:	8c b1       	in	r24, 0x0c	; 12
}
 432:	08 95       	ret

00000434 <UART_sendString>:

void UART_sendString( uint8_t *Str)
{
 434:	0f 93       	push	r16
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 43c:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
 43e:	03 c0       	rjmp	.+6      	; 0x446 <UART_sendString+0x12>
	{
		UART_sendByte(Str[i]);
 440:	0e 94 12 02 	call	0x424	; 0x424 <UART_sendByte>
		i++;
 444:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_sendString( uint8_t *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
 446:	f8 01       	movw	r30, r16
 448:	ec 0f       	add	r30, r28
 44a:	f1 1d       	adc	r31, r1
 44c:	80 81       	ld	r24, Z
 44e:	81 11       	cpse	r24, r1
 450:	f7 cf       	rjmp	.-18     	; 0x440 <UART_sendString+0xc>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	0f 91       	pop	r16
 458:	08 95       	ret

0000045a <UART_receiveString>:

void UART_receiveString(uint8_t *Str)
{
 45a:	ef 92       	push	r14
 45c:	ff 92       	push	r15
 45e:	0f 93       	push	r16
 460:	1f 93       	push	r17
 462:	cf 93       	push	r28
 464:	8c 01       	movw	r16, r24
	uint8_t i = 0;
	Str[i] = UART_recieveByte();
 466:	0e 94 16 02 	call	0x42c	; 0x42c <UART_recieveByte>
 46a:	f8 01       	movw	r30, r16
 46c:	80 83       	st	Z, r24
	*******************************************************************/
}

void UART_receiveString(uint8_t *Str)
{
	uint8_t i = 0;
 46e:	c0 e0       	ldi	r28, 0x00	; 0
	Str[i] = UART_recieveByte();
	while(Str[i] != '\r')
 470:	08 c0       	rjmp	.+16     	; 0x482 <UART_receiveString+0x28>
	{
		i++;
 472:	cf 5f       	subi	r28, 0xFF	; 255
		Str[i] = UART_recieveByte();
 474:	78 01       	movw	r14, r16
 476:	ec 0e       	add	r14, r28
 478:	f1 1c       	adc	r15, r1
 47a:	0e 94 16 02 	call	0x42c	; 0x42c <UART_recieveByte>
 47e:	f7 01       	movw	r30, r14
 480:	80 83       	st	Z, r24

void UART_receiveString(uint8_t *Str)
{
	uint8_t i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '\r')
 482:	f8 01       	movw	r30, r16
 484:	ec 0f       	add	r30, r28
 486:	f1 1d       	adc	r31, r1
 488:	80 81       	ld	r24, Z
 48a:	8d 30       	cpi	r24, 0x0D	; 13
 48c:	91 f7       	brne	.-28     	; 0x472 <UART_receiveString+0x18>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
 48e:	10 82       	st	Z, r1
}
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	ff 90       	pop	r15
 498:	ef 90       	pop	r14
 49a:	08 95       	ret

0000049c <ConvertFromAscitoInt>:


uint8_t ConvertFromAscitoInt(uint8_t * data)
{
	uint8_t address = 0;
	address = (data[2]-'0')*16 + (data[3]-'0');
 49c:	fc 01       	movw	r30, r24
 49e:	22 81       	ldd	r18, Z+2	; 0x02
 4a0:	83 81       	ldd	r24, Z+3	; 0x03
 4a2:	f0 e1       	ldi	r31, 0x10	; 16
 4a4:	2f 9f       	mul	r18, r31
 4a6:	80 0d       	add	r24, r0
 4a8:	11 24       	eor	r1, r1

	return address;
 4aa:	80 53       	subi	r24, 0x30	; 48
 4ac:	08 95       	ret

000004ae <strcmp>:
 4ae:	fb 01       	movw	r30, r22
 4b0:	dc 01       	movw	r26, r24
 4b2:	8d 91       	ld	r24, X+
 4b4:	01 90       	ld	r0, Z+
 4b6:	80 19       	sub	r24, r0
 4b8:	01 10       	cpse	r0, r1
 4ba:	d9 f3       	breq	.-10     	; 0x4b2 <strcmp+0x4>
 4bc:	99 0b       	sbc	r25, r25
 4be:	08 95       	ret

000004c0 <_exit>:
 4c0:	f8 94       	cli

000004c2 <__stop_program>:
 4c2:	ff cf       	rjmp	.-2      	; 0x4c2 <__stop_program>
