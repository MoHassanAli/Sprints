
SPI_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000944  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b4  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004fe  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  0000174c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047a  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003eb  00000000  00000000  00001cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000020e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	uint8_t DataRecieved;
    SPI_VidInitSlave();
  6c:	0e 94 63 00 	call	0xc6	; 0xc6 <SPI_VidInitSlave>
	DIO_VidSetPortDirection(PortC,255);
  70:	6f ef       	ldi	r22, 0xFF	; 255
  72:	82 e0       	ldi	r24, 0x02	; 2
  74:	0e 94 43 00 	call	0x86	; 0x86 <DIO_VidSetPortDirection>
    while (1) 
    {
		DataRecieved = SPI_U8RecieveByte();
  78:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_U8RecieveByte>
		DIO_VidSetPortValue(PortC,DataRecieved);
  7c:	68 2f       	mov	r22, r24
  7e:	82 e0       	ldi	r24, 0x02	; 2
  80:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_VidSetPortValue>
  84:	f9 cf       	rjmp	.-14     	; 0x78 <main+0xc>

00000086 <DIO_VidSetPortDirection>:
	}
}

void DIO_VidSetPortDirection(uint8_t copy_U8Port ,uint8_t copy_U8Direction)
{
	switch(copy_U8Port)
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	41 f0       	breq	.+16     	; 0x9a <DIO_VidSetPortDirection+0x14>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_VidSetPortDirection+0x10>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	39 f0       	breq	.+14     	; 0x9e <DIO_VidSetPortDirection+0x18>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	39 f0       	breq	.+14     	; 0xa2 <DIO_VidSetPortDirection+0x1c>
  94:	08 95       	ret
	{
		case PortA :DDRA = copy_U8Direction; break;
  96:	6a bb       	out	0x1a, r22	; 26
  98:	08 95       	ret
		case PortB :DDRB = copy_U8Direction; break;
  9a:	67 bb       	out	0x17, r22	; 23
  9c:	08 95       	ret
		case PortC :DDRC = copy_U8Direction; break;
  9e:	64 bb       	out	0x14, r22	; 20
  a0:	08 95       	ret
		case PortD :DDRD = copy_U8Direction; break;
  a2:	61 bb       	out	0x11, r22	; 17
  a4:	08 95       	ret

000000a6 <DIO_VidSetPortValue>:

}

void DIO_VidSetPortValue(uint8_t copy_U8Port ,uint8_t copy_U8Value)
{
	switch(copy_U8Port)
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	41 f0       	breq	.+16     	; 0xba <DIO_VidSetPortValue+0x14>
  aa:	28 f0       	brcs	.+10     	; 0xb6 <DIO_VidSetPortValue+0x10>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	39 f0       	breq	.+14     	; 0xbe <DIO_VidSetPortValue+0x18>
  b0:	83 30       	cpi	r24, 0x03	; 3
  b2:	39 f0       	breq	.+14     	; 0xc2 <DIO_VidSetPortValue+0x1c>
  b4:	08 95       	ret
	{
		case PortA :PORTA = copy_U8Value; break;
  b6:	6b bb       	out	0x1b, r22	; 27
  b8:	08 95       	ret
		case PortB :PORTB = copy_U8Value; break;
  ba:	68 bb       	out	0x18, r22	; 24
  bc:	08 95       	ret
		case PortC :PORTC = copy_U8Value; break;
  be:	65 bb       	out	0x15, r22	; 21
  c0:	08 95       	ret
		case PortD :PORTD = copy_U8Value; break;
  c2:	62 bb       	out	0x12, r22	; 18
  c4:	08 95       	ret

000000c6 <SPI_VidInitSlave>:

void SPI_VidSendByte(const uint8_t copy_U8Data) 
{
	SPDR = copy_U8Data; //send data by SPI
	while (!((SPSR) & (1 << SPIF))); //wait until SPI interrupt flag=1 (data is sent correctly)
}
  c6:	87 b3       	in	r24, 0x17	; 23
  c8:	8f 7c       	andi	r24, 0xCF	; 207
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	8f 77       	andi	r24, 0x7F	; 127
  ce:	87 bb       	out	0x17, r24	; 23
  d0:	80 e4       	ldi	r24, 0x40	; 64
  d2:	8d b9       	out	0x0d, r24	; 13
  d4:	08 95       	ret

000000d6 <SPI_U8RecieveByte>:

uint8_t SPI_U8RecieveByte(void)
{
   while (!((SPSR) & (1 << SPIF)));//wait until SPI interrupt flag=1(data is receive correctly)
  d6:	77 9b       	sbis	0x0e, 7	; 14
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <SPI_U8RecieveByte>
   return SPDR; //return the received byte from SPI data register
  da:	8f b1       	in	r24, 0x0f	; 15
}
  dc:	08 95       	ret

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
