
SPI_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000094  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000118  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000717  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fe  00000000  00000000  000008d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e2  00000000  00000000  00000ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  000011b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a1  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013c  00000000  00000000  00001619  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001755  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "MCAL/DIO_Interface.h"
#include "MCAL/SPI_Interface.h"

int main(void)
{
    SPI_VidInitMaster();
  6c:	0e 94 3c 00 	call	0x78	; 0x78 <SPI_VidInitMaster>
    while (1) 
    {
		SPI_VidSendByte('A');
  70:	81 e4       	ldi	r24, 0x41	; 65
  72:	0e 94 44 00 	call	0x88	; 0x88 <SPI_VidSendByte>
  76:	fc cf       	rjmp	.-8      	; 0x70 <main+0x4>

00000078 <SPI_VidInitMaster>:
	 ********************************************/
	DDRB = DDRB & (~(1<<PB4));  
	DDRB = DDRB & (~(1<<PB5));
	DDRB = DDRB | (1<<PB6);
	DDRB = DDRB & (~(1<<PB7));
	SPCR = (1<<SPE); // just enable SPI + choose SPI clock = Fosc/4
  78:	87 b3       	in	r24, 0x17	; 23
  7a:	80 63       	ori	r24, 0x30	; 48
  7c:	8f 7b       	andi	r24, 0xBF	; 191
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	87 bb       	out	0x17, r24	; 23
  82:	80 e5       	ldi	r24, 0x50	; 80
  84:	8d b9       	out	0x0d, r24	; 13
  86:	08 95       	ret

00000088 <SPI_VidSendByte>:
}

void SPI_VidSendByte(const uint8_t copy_U8Data) 
{
	SPDR = copy_U8Data; //send data by SPI
  88:	8f b9       	out	0x0f, r24	; 15
	while (!((SPSR) & (1 << SPIF))); //wait until SPI interrupt flag=1 (data is sent correctly)
  8a:	77 9b       	sbis	0x0e, 7	; 14
  8c:	fe cf       	rjmp	.-4      	; 0x8a <SPI_VidSendByte+0x2>
}
  8e:	08 95       	ret

00000090 <_exit>:
  90:	f8 94       	cli

00000092 <__stop_program>:
  92:	ff cf       	rjmp	.-2      	; 0x92 <__stop_program>
